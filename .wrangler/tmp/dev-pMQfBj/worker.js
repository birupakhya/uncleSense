var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except2, desc3) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except2)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc3 = __getOwnPropDesc(from, key)) || desc3.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));

// .wrangler/tmp/bundle-qxbDQe/checked-fetch.js
function checkURL(request, init) {
  const url2 = request instanceof URL ? request : new URL(
    (typeof request === "string" ? new Request(request, init) : request).url
  );
  if (url2.port && url2.port !== "443" && url2.protocol === "https:") {
    if (!urls.has(url2.toString())) {
      urls.add(url2.toString());
      console.warn(
        `WARNING: known issue with \`fetch()\` requests to custom HTTPS ports in published Workers:
 - ${url2.toString()} - the custom port will be ignored when the Worker is published using the \`wrangler deploy\` command.
`
      );
    }
  }
}
var urls;
var init_checked_fetch = __esm({
  ".wrangler/tmp/bundle-qxbDQe/checked-fetch.js"() {
    urls = /* @__PURE__ */ new Set();
    __name(checkURL, "checkURL");
    globalThis.fetch = new Proxy(globalThis.fetch, {
      apply(target, thisArg, argArray) {
        const [request, init] = argArray;
        checkURL(request, init);
        return Reflect.apply(target, thisArg, argArray);
      }
    });
  }
});

// wrangler-modules-watch:wrangler:modules-watch
var init_wrangler_modules_watch = __esm({
  "wrangler-modules-watch:wrangler:modules-watch"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// node_modules/wrangler/templates/modules-watch-stub.js
var init_modules_watch_stub = __esm({
  "node_modules/wrangler/templates/modules-watch-stub.js"() {
    init_wrangler_modules_watch();
  }
});

// node_modules/@xenova/transformers/src/utils/core.js
function dispatchCallback(progress_callback, data) {
  if (progress_callback) progress_callback(data);
}
function reverseDictionary(data) {
  return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));
}
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function isTypedArray(val) {
  return val?.prototype?.__proto__?.constructor?.name === "TypedArray";
}
function isIntegralNumber(x) {
  return Number.isInteger(x) || typeof x === "bigint";
}
function exists2(x) {
  return x !== void 0 && x !== null;
}
function calculateDimensions(arr) {
  const dimensions = [];
  let current = arr;
  while (Array.isArray(current)) {
    dimensions.push(current.length);
    current = current[0];
  }
  return dimensions;
}
function pop(obj, key, defaultValue = void 0) {
  const value = obj[key];
  if (value !== void 0) {
    delete obj[key];
    return value;
  }
  if (defaultValue === void 0) {
    throw Error(`Key ${key} does not exist in object.`);
  }
  return defaultValue;
}
function mergeArrays(...arrs) {
  return Array.prototype.concat.apply([], arrs);
}
function product(...a) {
  return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e])));
}
function calculateReflectOffset(i, w) {
  return Math.abs((i + w) % (2 * w) - w);
}
var Callable;
var init_core = __esm({
  "node_modules/@xenova/transformers/src/utils/core.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    __name(dispatchCallback, "dispatchCallback");
    __name(reverseDictionary, "reverseDictionary");
    __name(escapeRegExp, "escapeRegExp");
    Callable = /** @type {any} */
    class {
      static {
        __name(this, "Callable");
      }
      /**
      * Creates a new instance of the Callable class.
      */
      constructor() {
        let closure = /* @__PURE__ */ __name(function(...args) {
          return closure._call(...args);
        }, "closure");
        return Object.setPrototypeOf(closure, new.target.prototype);
      }
      /**
       * This method should be implemented in subclasses to provide the
       * functionality of the callable object.
       *
       * @param {any[]} args
       * @throws {Error} If the subclass does not implement the `_call` method.
       */
      _call(...args) {
        throw Error("Must implement _call method in subclass");
      }
    };
    __name(isTypedArray, "isTypedArray");
    __name(isIntegralNumber, "isIntegralNumber");
    __name(exists2, "exists");
    __name(calculateDimensions, "calculateDimensions");
    __name(pop, "pop");
    __name(mergeArrays, "mergeArrays");
    __name(product, "product");
    __name(calculateReflectOffset, "calculateReflectOffset");
  }
});

// (disabled):fs
var require_fs = __commonJS({
  "(disabled):fs"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// (disabled):path
var require_path = __commonJS({
  "(disabled):path"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// (disabled):url
var require_url = __commonJS({
  "(disabled):url"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// (disabled):node_modules/onnxruntime-node/dist/index.js
var require_dist = __commonJS({
  "(disabled):node_modules/onnxruntime-node/dist/index.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// node_modules/onnxruntime-common/dist/ort-common.node.js
var require_ort_common_node = __commonJS({
  "node_modules/onnxruntime-common/dist/ort-common.node.js"(exports2) {
    init_checked_fetch();
    init_modules_watch_stub();
    (() => {
      "use strict";
      var e = { d: /* @__PURE__ */ __name((t2, r2) => {
        for (var n2 in r2) e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: r2[n2] });
      }, "d"), o: /* @__PURE__ */ __name((e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), "o"), r: /* @__PURE__ */ __name((e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      }, "r") }, t = {};
      e.r(t), e.d(t, { InferenceSession: /* @__PURE__ */ __name(() => c, "InferenceSession"), Tensor: /* @__PURE__ */ __name(() => g, "Tensor"), env: /* @__PURE__ */ __name(() => i, "env"), registerBackend: /* @__PURE__ */ __name(() => o, "registerBackend") });
      const r = {}, n = [], o = /* @__PURE__ */ __name((e2, t2, o2) => {
        if (!t2 || "function" != typeof t2.init || "function" != typeof t2.createSessionHandler) throw new TypeError("not a valid backend");
        {
          const i2 = r[e2];
          if (void 0 === i2) r[e2] = { backend: t2, priority: o2 };
          else {
            if (i2.priority > o2) return;
            if (i2.priority === o2 && i2.backend !== t2) throw new Error(`cannot register backend "${e2}" using priority ${o2}`);
          }
          if (o2 >= 0) {
            const t3 = n.indexOf(e2);
            -1 !== t3 && n.splice(t3, 1);
            for (let t4 = 0; t4 < n.length; t4++) if (r[n[t4]].priority <= o2) return void n.splice(t4, 0, e2);
            n.push(e2);
          }
        }
      }, "o"), i = new class {
        constructor() {
          this.wasm = {}, this.webgl = {}, this.logLevelInternal = "warning";
        }
        set logLevel(e2) {
          if (void 0 !== e2) {
            if ("string" != typeof e2 || -1 === ["verbose", "info", "warning", "error", "fatal"].indexOf(e2)) throw new Error(`Unsupported logging level: ${e2}`);
            this.logLevelInternal = e2;
          }
        }
        get logLevel() {
          return this.logLevelInternal;
        }
      }(), a = "undefined" != typeof BigInt64Array && "function" == typeof BigInt64Array.from, s = "undefined" != typeof BigUint64Array && "function" == typeof BigUint64Array.from, d = /* @__PURE__ */ new Map([["float32", Float32Array], ["uint8", Uint8Array], ["int8", Int8Array], ["uint16", Uint16Array], ["int16", Int16Array], ["int32", Int32Array], ["bool", Uint8Array], ["float64", Float64Array], ["uint32", Uint32Array]]), f = /* @__PURE__ */ new Map([[Float32Array, "float32"], [Uint8Array, "uint8"], [Int8Array, "int8"], [Uint16Array, "uint16"], [Int16Array, "int16"], [Int32Array, "int32"], [Float64Array, "float64"], [Uint32Array, "uint32"]]);
      a && (d.set("int64", BigInt64Array), f.set(BigInt64Array, "int64")), s && (d.set("uint64", BigUint64Array), f.set(BigUint64Array, "uint64"));
      class h {
        static {
          __name(this, "h");
        }
        constructor(e2, t2, r2) {
          let n2, o2, i2;
          if ("string" == typeof e2) if (n2 = e2, i2 = r2, "string" === e2) {
            if (!Array.isArray(t2)) throw new TypeError("A string tensor's data must be a string array.");
            o2 = t2;
          } else {
            const r3 = d.get(e2);
            if (void 0 === r3) throw new TypeError(`Unsupported tensor type: ${e2}.`);
            if (Array.isArray(t2)) o2 = r3.from(t2);
            else {
              if (!(t2 instanceof r3)) throw new TypeError(`A ${n2} tensor's data must be type of ${r3}`);
              o2 = t2;
            }
          }
          else if (i2 = t2, Array.isArray(e2)) {
            if (0 === e2.length) throw new TypeError("Tensor type cannot be inferred from an empty array.");
            const t3 = typeof e2[0];
            if ("string" === t3) n2 = "string", o2 = e2;
            else {
              if ("boolean" !== t3) throw new TypeError(`Invalid element type of data array: ${t3}.`);
              n2 = "bool", o2 = Uint8Array.from(e2);
            }
          } else {
            const t3 = f.get(e2.constructor);
            if (void 0 === t3) throw new TypeError(`Unsupported type for tensor data: ${e2.constructor}.`);
            n2 = t3, o2 = e2;
          }
          if (void 0 === i2) i2 = [o2.length];
          else if (!Array.isArray(i2)) throw new TypeError("A tensor's dims must be a number array");
          const a2 = ((e3) => {
            let t3 = 1;
            for (let r3 = 0; r3 < e3.length; r3++) {
              const n3 = e3[r3];
              if ("number" != typeof n3 || !Number.isSafeInteger(n3)) throw new TypeError(`dims[${r3}] must be an integer, got: ${n3}`);
              if (n3 < 0) throw new RangeError(`dims[${r3}] must be a non-negative integer, got: ${n3}`);
              t3 *= n3;
            }
            return t3;
          })(i2);
          if (a2 !== o2.length) throw new Error(`Tensor's size(${a2}) does not match data length(${o2.length}).`);
          this.dims = i2, this.type = n2, this.data = o2, this.size = a2;
        }
        static bufferToTensor(e2, t2) {
          if (void 0 === e2) throw new Error("Image buffer must be defined");
          if (void 0 === t2.height || void 0 === t2.width) throw new Error("Image height and width must be defined");
          const { height: r2, width: n2 } = t2, o2 = t2.norm;
          let i2, a2;
          i2 = void 0 === o2 || void 0 === o2.mean ? 255 : o2.mean, a2 = void 0 === o2 || void 0 === o2.bias ? 0 : o2.bias;
          const s2 = void 0 !== t2.bitmapFormat ? t2.bitmapFormat : "RGBA", d2 = void 0 !== t2.tensorFormat && void 0 !== t2.tensorFormat ? t2.tensorFormat : "RGB", f2 = r2 * n2, g2 = "RGBA" === d2 ? new Float32Array(4 * f2) : new Float32Array(3 * f2);
          let m2 = 4, c2 = 0, l2 = 1, w2 = 2, u = 3, p = 0, y = f2, b = 2 * f2, v = -1;
          "RGB" === s2 && (m2 = 3, c2 = 0, l2 = 1, w2 = 2, u = -1), "RGBA" === d2 ? v = 3 * f2 : "RBG" === d2 ? (p = 0, b = f2, y = 2 * f2) : "BGR" === d2 && (b = 0, y = f2, p = 2 * f2);
          for (let t3 = 0; t3 < f2; t3++, c2 += m2, w2 += m2, l2 += m2, u += m2) g2[p++] = (e2[c2] + a2) / i2, g2[y++] = (e2[l2] + a2) / i2, g2[b++] = (e2[w2] + a2) / i2, -1 !== v && -1 !== u && (g2[v++] = (e2[u] + a2) / i2);
          return new h("float32", g2, "RGBA" === d2 ? [1, 4, r2, n2] : [1, 3, r2, n2]);
        }
        static async fromImage(e2, t2) {
          const r2 = "undefined" != typeof HTMLImageElement && e2 instanceof HTMLImageElement, n2 = "undefined" != typeof ImageData && e2 instanceof ImageData, o2 = "undefined" != typeof ImageBitmap && e2 instanceof ImageBitmap, i2 = "undefined" != typeof String && (e2 instanceof String || "string" == typeof e2);
          let a2, s2 = {};
          if (r2) {
            const r3 = document.createElement("canvas"), n3 = r3.getContext("2d");
            if (null == n3) throw new Error("Can not access image data");
            {
              let o3 = e2.naturalHeight, i3 = e2.naturalWidth;
              if (void 0 !== t2 && void 0 !== t2.resizedHeight && void 0 !== t2.resizedWidth && (o3 = t2.resizedHeight, i3 = t2.resizedWidth), void 0 !== t2) {
                if (s2 = t2, void 0 !== t2.tensorFormat) throw new Error("Image input config format must be RGBA for HTMLImageElement");
                if (s2.tensorFormat = "RGBA", void 0 !== t2.height && t2.height !== o3) throw new Error("Image input config height doesn't match HTMLImageElement height");
                if (s2.height = o3, void 0 !== t2.width && t2.width !== i3) throw new Error("Image input config width doesn't match HTMLImageElement width");
                s2.width = i3;
              } else s2.tensorFormat = "RGBA", s2.height = o3, s2.width = i3;
              r3.width = i3, r3.height = o3, n3.drawImage(e2, 0, 0, i3, o3), a2 = n3.getImageData(0, 0, i3, o3).data;
            }
          } else {
            if (!n2) {
              if (o2) {
                if (void 0 === t2) throw new Error("Please provide image config with format for Imagebitmap");
                if (void 0 !== t2.bitmapFormat) throw new Error("Image input config format must be defined for ImageBitmap");
                const r3 = document.createElement("canvas").getContext("2d");
                if (null != r3) {
                  const n3 = e2.height, o3 = e2.width;
                  if (r3.drawImage(e2, 0, 0, o3, n3), a2 = r3.getImageData(0, 0, o3, n3).data, void 0 !== t2) {
                    if (void 0 !== t2.height && t2.height !== n3) throw new Error("Image input config height doesn't match ImageBitmap height");
                    if (s2.height = n3, void 0 !== t2.width && t2.width !== o3) throw new Error("Image input config width doesn't match ImageBitmap width");
                    s2.width = o3;
                  } else s2.height = n3, s2.width = o3;
                  return h.bufferToTensor(a2, s2);
                }
                throw new Error("Can not access image data");
              }
              if (i2) return new Promise((r3, n3) => {
                const o3 = document.createElement("canvas"), i3 = o3.getContext("2d");
                if (!e2 || !i3) return n3();
                const a3 = new Image();
                a3.crossOrigin = "Anonymous", a3.src = e2, a3.onload = () => {
                  o3.width = a3.width, o3.height = a3.height, i3.drawImage(a3, 0, 0, o3.width, o3.height);
                  const e3 = i3.getImageData(0, 0, o3.width, o3.height);
                  if (void 0 !== t2) {
                    if (void 0 !== t2.height && t2.height !== o3.height) throw new Error("Image input config height doesn't match ImageBitmap height");
                    if (s2.height = o3.height, void 0 !== t2.width && t2.width !== o3.width) throw new Error("Image input config width doesn't match ImageBitmap width");
                    s2.width = o3.width;
                  } else s2.height = o3.height, s2.width = o3.width;
                  r3(h.bufferToTensor(e3.data, s2));
                };
              });
              throw new Error("Input data provided is not supported - aborted tensor creation");
            }
            {
              const r3 = "RGBA";
              let n3, o3;
              if (void 0 !== t2 && void 0 !== t2.resizedWidth && void 0 !== t2.resizedHeight ? (n3 = t2.resizedHeight, o3 = t2.resizedWidth) : (n3 = e2.height, o3 = e2.width), void 0 !== t2) {
                if (s2 = t2, void 0 !== t2.bitmapFormat && t2.bitmapFormat !== r3) throw new Error("Image input config format must be RGBA for ImageData");
                s2.bitmapFormat = "RGBA";
              } else s2.bitmapFormat = "RGBA";
              if (s2.height = n3, s2.width = o3, void 0 !== t2) {
                const t3 = document.createElement("canvas");
                t3.width = o3, t3.height = n3;
                const r4 = t3.getContext("2d");
                if (null == r4) throw new Error("Can not access image data");
                r4.putImageData(e2, 0, 0), a2 = r4.getImageData(0, 0, o3, n3).data;
              } else a2 = e2.data;
            }
          }
          if (void 0 !== a2) return h.bufferToTensor(a2, s2);
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        toImageData(e2) {
          var t2, r2;
          const n2 = document.createElement("canvas").getContext("2d");
          let o2;
          if (null == n2) throw new Error("Can not access image data");
          {
            const i2 = this.dims[3], a2 = this.dims[2], s2 = this.dims[1], d2 = void 0 !== e2 && void 0 !== e2.format ? e2.format : "RGB", f2 = void 0 !== e2 && void 0 !== (null === (t2 = e2.norm) || void 0 === t2 ? void 0 : t2.mean) ? e2.norm.mean : 255, h2 = void 0 !== e2 && void 0 !== (null === (r2 = e2.norm) || void 0 === r2 ? void 0 : r2.bias) ? e2.norm.bias : 0, g2 = a2 * i2;
            if (void 0 !== e2) {
              if (void 0 !== e2.height && e2.height !== a2) throw new Error("Image output config height doesn't match tensor height");
              if (void 0 !== e2.width && e2.width !== i2) throw new Error("Image output config width doesn't match tensor width");
              if (void 0 !== e2.format && 4 === s2 && "RGBA" !== e2.format || 3 === s2 && "RGB" !== e2.format && "BGR" !== e2.format) throw new Error("Tensor format doesn't match input tensor dims");
            }
            const m2 = 4;
            let c2 = 0, l2 = 1, w2 = 2, u = 3, p = 0, y = g2, b = 2 * g2, v = -1;
            "RGBA" === d2 ? (p = 0, y = g2, b = 2 * g2, v = 3 * g2) : "RGB" === d2 ? (p = 0, y = g2, b = 2 * g2) : "RBG" === d2 && (p = 0, b = g2, y = 2 * g2), o2 = n2.createImageData(i2, a2);
            for (let e3 = 0; e3 < a2 * i2; c2 += m2, l2 += m2, w2 += m2, u += m2, e3++) o2.data[c2] = (this.data[p++] - h2) * f2, o2.data[l2] = (this.data[y++] - h2) * f2, o2.data[w2] = (this.data[b++] - h2) * f2, o2.data[u] = -1 === v ? 255 : (this.data[v++] - h2) * f2;
          }
          return o2;
        }
        reshape(e2) {
          return new h(this.type, this.data, e2);
        }
      }
      const g = h;
      class m {
        static {
          __name(this, "m");
        }
        constructor(e2) {
          this.handler = e2;
        }
        async run(e2, t2, r2) {
          const n2 = {};
          let o2 = {};
          if ("object" != typeof e2 || null === e2 || e2 instanceof g || Array.isArray(e2)) throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          let i2 = true;
          if ("object" == typeof t2) {
            if (null === t2) throw new TypeError("Unexpected argument[1]: cannot be null.");
            if (t2 instanceof g) throw new TypeError("'fetches' cannot be a Tensor");
            if (Array.isArray(t2)) {
              if (0 === t2.length) throw new TypeError("'fetches' cannot be an empty array.");
              i2 = false;
              for (const e3 of t2) {
                if ("string" != typeof e3) throw new TypeError("'fetches' must be a string array or an object.");
                if (-1 === this.outputNames.indexOf(e3)) throw new RangeError(`'fetches' contains invalid output name: ${e3}.`);
                n2[e3] = null;
              }
              if ("object" == typeof r2 && null !== r2) o2 = r2;
              else if (void 0 !== r2) throw new TypeError("'options' must be an object.");
            } else {
              let e3 = false;
              const a3 = Object.getOwnPropertyNames(t2);
              for (const r3 of this.outputNames) if (-1 !== a3.indexOf(r3)) {
                const o3 = t2[r3];
                (null === o3 || o3 instanceof g) && (e3 = true, i2 = false, n2[r3] = o3);
              }
              if (e3) {
                if ("object" == typeof r2 && null !== r2) o2 = r2;
                else if (void 0 !== r2) throw new TypeError("'options' must be an object.");
              } else o2 = t2;
            }
          } else if (void 0 !== t2) throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          for (const t3 of this.inputNames) if (void 0 === e2[t3]) throw new Error(`input '${t3}' is missing in 'feeds'.`);
          if (i2) for (const e3 of this.outputNames) n2[e3] = null;
          const a2 = await this.handler.run(e2, n2, o2), s2 = {};
          for (const e3 in a2) Object.hasOwnProperty.call(a2, e3) && (s2[e3] = new g(a2[e3].type, a2[e3].data, a2[e3].dims));
          return s2;
        }
        static async create(e2, t2, o2, i2) {
          let a2, s2 = {};
          if ("string" == typeof e2) {
            if (a2 = e2, "object" == typeof t2 && null !== t2) s2 = t2;
            else if (void 0 !== t2) throw new TypeError("'options' must be an object.");
          } else if (e2 instanceof Uint8Array) {
            if (a2 = e2, "object" == typeof t2 && null !== t2) s2 = t2;
            else if (void 0 !== t2) throw new TypeError("'options' must be an object.");
          } else {
            if (!(e2 instanceof ArrayBuffer || "undefined" != typeof SharedArrayBuffer && e2 instanceof SharedArrayBuffer)) throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
            {
              const r2 = e2;
              let n2 = 0, d3 = e2.byteLength;
              if ("object" == typeof t2 && null !== t2) s2 = t2;
              else if ("number" == typeof t2) {
                if (n2 = t2, !Number.isSafeInteger(n2)) throw new RangeError("'byteOffset' must be an integer.");
                if (n2 < 0 || n2 >= r2.byteLength) throw new RangeError(`'byteOffset' is out of range [0, ${r2.byteLength}).`);
                if (d3 = e2.byteLength - n2, "number" == typeof o2) {
                  if (d3 = o2, !Number.isSafeInteger(d3)) throw new RangeError("'byteLength' must be an integer.");
                  if (d3 <= 0 || n2 + d3 > r2.byteLength) throw new RangeError(`'byteLength' is out of range (0, ${r2.byteLength - n2}].`);
                  if ("object" == typeof i2 && null !== i2) s2 = i2;
                  else if (void 0 !== i2) throw new TypeError("'options' must be an object.");
                } else if (void 0 !== o2) throw new TypeError("'byteLength' must be a number.");
              } else if (void 0 !== t2) throw new TypeError("'options' must be an object.");
              a2 = new Uint8Array(r2, n2, d3);
            }
          }
          const d2 = (s2.executionProviders || []).map((e3) => "string" == typeof e3 ? e3 : e3.name), f2 = await (async (e3) => {
            const t3 = 0 === e3.length ? n : e3, o3 = [];
            for (const e4 of t3) {
              const t4 = r[e4];
              if (t4) {
                if (t4.initialized) return t4.backend;
                if (t4.aborted) continue;
                const r2 = !!t4.initPromise;
                try {
                  return r2 || (t4.initPromise = t4.backend.init()), await t4.initPromise, t4.initialized = true, t4.backend;
                } catch (n2) {
                  r2 || o3.push({ name: e4, err: n2 }), t4.aborted = true;
                } finally {
                  delete t4.initPromise;
                }
              }
            }
            throw new Error(`no available backend found. ERR: ${o3.map((e4) => `[${e4.name}] ${e4.err}`).join(", ")}`);
          })(d2), h2 = await f2.createSessionHandler(a2, s2);
          return new m(h2);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      }
      const c = m;
      var l = exports2;
      for (var w in t) l[w] = t[w];
      t.__esModule && Object.defineProperty(l, "__esModule", { value: true });
    })();
  }
});

// node_modules/onnxruntime-web/dist/ort-web.min.js
var require_ort_web_min = __commonJS({
  "node_modules/onnxruntime-web/dist/ort-web.min.js"(exports, module) {
    init_checked_fetch();
    init_modules_watch_stub();
    !function(t, e) {
      if ("object" == typeof exports && "object" == typeof module) module.exports = e(require_ort_common_node());
      else if ("function" == typeof define && define.amd) define([], e);
      else {
        var n = "object" == typeof exports ? e(require_ort_common_node()) : e(t.ort);
        for (var r in n) ("object" == typeof exports ? exports : t)[r] = n[r];
      }
    }(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => (() => {
      var __webpack_modules__ = { 3474: (t, e, n) => {
        var _scriptDir, r = (_scriptDir = (_scriptDir = "undefined" != typeof document && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(t2) {
          function e2() {
            return $2.buffer != C && H($2.buffer), F;
          }
          __name(e2, "e");
          function r2() {
            return $2.buffer != C && H($2.buffer), N;
          }
          __name(r2, "r");
          function i() {
            return $2.buffer != C && H($2.buffer), L;
          }
          __name(i, "i");
          function o() {
            return $2.buffer != C && H($2.buffer), R;
          }
          __name(o, "o");
          function a() {
            return $2.buffer != C && H($2.buffer), j;
          }
          __name(a, "a");
          var s, u, c;
          t2 = t2 || {}, s || (s = void 0 !== t2 ? t2 : {}), s.ready = new Promise(function(t3, e3) {
            u = t3, c = e3;
          });
          var l, p, f, d, h, g, b = Object.assign({}, s), m = "./this.program", y = /* @__PURE__ */ __name((t3, e3) => {
            throw e3;
          }, "y"), _ = "object" == typeof window, v = "function" == typeof importScripts, w = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, x = s.ENVIRONMENT_IS_PTHREAD || false, T = "";
          function S(t3) {
            return s.locateFile ? s.locateFile(t3, T) : T + t3;
          }
          __name(S, "S");
          if (w) {
            let e3;
            T = v ? n(908).dirname(T) + "/" : "//", g = /* @__PURE__ */ __name(() => {
              h || (d = n(1384), h = n(908));
            }, "g"), l = /* @__PURE__ */ __name(function(t3, e4) {
              return g(), t3 = h.normalize(t3), d.readFileSync(t3, e4 ? void 0 : "utf8");
            }, "l"), f = /* @__PURE__ */ __name((t3) => ((t3 = l(t3, true)).buffer || (t3 = new Uint8Array(t3)), t3), "f"), p = /* @__PURE__ */ __name((t3, e4, n2) => {
              g(), t3 = h.normalize(t3), d.readFile(t3, function(t4, r3) {
                t4 ? n2(t4) : e4(r3.buffer);
              });
            }, "p"), 1 < process.argv.length && (m = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(t3) {
              if (!(t3 instanceof ut)) throw t3;
            }), process.on("unhandledRejection", function(t3) {
              throw t3;
            }), y = /* @__PURE__ */ __name((t3, e4) => {
              if (J()) throw process.exitCode = t3, e4;
              e4 instanceof ut || P("exiting due to exception: " + e4), process.exit(t3);
            }, "y"), s.inspect = function() {
              return "[Emscripten Module object]";
            };
            try {
              e3 = n(9925);
            } catch (t3) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), t3;
            }
            n.g.Worker = e3.Worker;
          } else (_ || v) && (v ? T = self.location.href : "undefined" != typeof document && document.currentScript && (T = document.currentScript.src), _scriptDir && (T = _scriptDir), T = 0 !== T.indexOf("blob:") ? T.substr(0, T.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", w || (l = /* @__PURE__ */ __name((t3) => {
            var e3 = new XMLHttpRequest();
            return e3.open("GET", t3, false), e3.send(null), e3.responseText;
          }, "l"), v && (f = /* @__PURE__ */ __name((t3) => {
            var e3 = new XMLHttpRequest();
            return e3.open("GET", t3, false), e3.responseType = "arraybuffer", e3.send(null), new Uint8Array(e3.response);
          }, "f")), p = /* @__PURE__ */ __name((t3, e3, n2) => {
            var r3 = new XMLHttpRequest();
            r3.open("GET", t3, true), r3.responseType = "arraybuffer", r3.onload = () => {
              200 == r3.status || 0 == r3.status && r3.response ? e3(r3.response) : n2();
            }, r3.onerror = n2, r3.send(null);
          }, "p")));
          w && "undefined" == typeof performance && (n.g.performance = n(6953).performance);
          var O = console.log.bind(console), A = console.warn.bind(console);
          w && (g(), O = /* @__PURE__ */ __name((t3) => d.writeSync(1, t3 + "\n"), "O"), A = /* @__PURE__ */ __name((t3) => d.writeSync(2, t3 + "\n"), "A"));
          var E, I = s.print || O, P = s.printErr || A;
          Object.assign(s, b), b = null, s.thisProgram && (m = s.thisProgram), s.quit && (y = s.quit), s.wasmBinary && (E = s.wasmBinary);
          var D = s.noExitRuntime || false;
          "object" != typeof WebAssembly && it("no native wasm support detected");
          var $2, k, C, F, N, L, R, j, M = false, U = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
          function V(t3, e3, n2) {
            var r3 = (e3 >>>= 0) + n2;
            for (n2 = e3; t3[n2] && !(n2 >= r3); ) ++n2;
            if (16 < n2 - e3 && t3.buffer && U) return U.decode(t3.buffer instanceof SharedArrayBuffer ? t3.slice(e3, n2) : t3.subarray(e3, n2));
            for (r3 = ""; e3 < n2; ) {
              var i2 = t3[e3++];
              if (128 & i2) {
                var o2 = 63 & t3[e3++];
                if (192 == (224 & i2)) r3 += String.fromCharCode((31 & i2) << 6 | o2);
                else {
                  var a2 = 63 & t3[e3++];
                  65536 > (i2 = 224 == (240 & i2) ? (15 & i2) << 12 | o2 << 6 | a2 : (7 & i2) << 18 | o2 << 12 | a2 << 6 | 63 & t3[e3++]) ? r3 += String.fromCharCode(i2) : (i2 -= 65536, r3 += String.fromCharCode(55296 | i2 >> 10, 56320 | 1023 & i2));
                }
              } else r3 += String.fromCharCode(i2);
            }
            return r3;
          }
          __name(V, "V");
          function B(t3, e3) {
            return (t3 >>>= 0) ? V(r2(), t3, e3) : "";
          }
          __name(B, "B");
          function z(t3, e3, n2, r3) {
            if (!(0 < r3)) return 0;
            var i2 = n2 >>>= 0;
            r3 = n2 + r3 - 1;
            for (var o2 = 0; o2 < t3.length; ++o2) {
              var a2 = t3.charCodeAt(o2);
              if (55296 <= a2 && 57343 >= a2 && (a2 = 65536 + ((1023 & a2) << 10) | 1023 & t3.charCodeAt(++o2)), 127 >= a2) {
                if (n2 >= r3) break;
                e3[n2++ >>> 0] = a2;
              } else {
                if (2047 >= a2) {
                  if (n2 + 1 >= r3) break;
                  e3[n2++ >>> 0] = 192 | a2 >> 6;
                } else {
                  if (65535 >= a2) {
                    if (n2 + 2 >= r3) break;
                    e3[n2++ >>> 0] = 224 | a2 >> 12;
                  } else {
                    if (n2 + 3 >= r3) break;
                    e3[n2++ >>> 0] = 240 | a2 >> 18, e3[n2++ >>> 0] = 128 | a2 >> 12 & 63;
                  }
                  e3[n2++ >>> 0] = 128 | a2 >> 6 & 63;
                }
                e3[n2++ >>> 0] = 128 | 63 & a2;
              }
            }
            return e3[n2 >>> 0] = 0, n2 - i2;
          }
          __name(z, "z");
          function G(t3) {
            for (var e3 = 0, n2 = 0; n2 < t3.length; ++n2) {
              var r3 = t3.charCodeAt(n2);
              127 >= r3 ? e3++ : 2047 >= r3 ? e3 += 2 : 55296 <= r3 && 57343 >= r3 ? (e3 += 4, ++n2) : e3 += 3;
            }
            return e3;
          }
          __name(G, "G");
          function H(t3) {
            C = t3, s.HEAP8 = F = new Int8Array(t3), s.HEAP16 = new Int16Array(t3), s.HEAP32 = L = new Int32Array(t3), s.HEAPU8 = N = new Uint8Array(t3), s.HEAPU16 = new Uint16Array(t3), s.HEAPU32 = R = new Uint32Array(t3), s.HEAPF32 = new Float32Array(t3), s.HEAPF64 = j = new Float64Array(t3);
          }
          __name(H, "H");
          x && (C = s.buffer);
          var W = s.INITIAL_MEMORY || 16777216;
          if (x) $2 = s.wasmMemory, C = s.buffer;
          else if (s.wasmMemory) $2 = s.wasmMemory;
          else if (!(($2 = new WebAssembly.Memory({ initial: W / 65536, maximum: 65536, shared: true })).buffer instanceof SharedArrayBuffer)) throw P("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), w && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
          $2 && (C = $2.buffer), W = C.byteLength, H(C);
          var q, X = [], Y = [], K = [], Z = [];
          function J() {
            return D || false;
          }
          __name(J, "J");
          function Q() {
            var t3 = s.preRun.shift();
            X.unshift(t3);
          }
          __name(Q, "Q");
          var tt, et = 0, nt = null, rt = null;
          function it(t3) {
            throw x ? postMessage({ cmd: "onAbort", arg: t3 }) : s.onAbort && s.onAbort(t3), P(t3 = "Aborted(" + t3 + ")"), M = true, t3 = new WebAssembly.RuntimeError(t3 + ". Build with -sASSERTIONS for more info."), c(t3), t3;
          }
          __name(it, "it");
          function ot() {
            return tt.startsWith("data:application/octet-stream;base64,");
          }
          __name(ot, "ot");
          function at() {
            var t3 = tt;
            try {
              if (t3 == tt && E) return new Uint8Array(E);
              if (f) return f(t3);
              throw "both async and sync fetching of the wasm failed";
            } catch (t4) {
              it(t4);
            }
          }
          __name(at, "at");
          tt = "ort-wasm-threaded.wasm", ot() || (tt = S(tt));
          var st = {};
          function ut(t3) {
            this.name = "ExitStatus", this.message = "Program terminated with exit(" + t3 + ")", this.status = t3;
          }
          __name(ut, "ut");
          function ct(t3) {
            (t3 = dt.Vb[t3]) || it(), dt.mc(t3);
          }
          __name(ct, "ct");
          function lt2(t3) {
            var e3 = dt.Cc();
            if (!e3) return 6;
            dt.ac.push(e3), dt.Vb[t3.Ub] = e3, e3.Ub = t3.Ub;
            var n2 = { cmd: "run", start_routine: t3.Ic, arg: t3.zc, pthread_ptr: t3.Ub };
            return e3.$b = () => {
              n2.time = performance.now(), e3.postMessage(n2, t3.Nc);
            }, e3.loaded && (e3.$b(), delete e3.$b), 0;
          }
          __name(lt2, "lt");
          function pt(t3) {
            if (x) return qt(1, 1, t3);
            J() || (dt.oc(), s.onExit && s.onExit(t3), M = true), y(t3, new ut(t3));
          }
          __name(pt, "pt");
          function ft(t3, e3) {
            if (!e3 && x) throw bt(t3), "unwind";
            J() || x || (me(), ht(K), be(0), re[1].length && ie(1, 10), re[2].length && ie(2, 10), dt.oc()), pt(t3);
          }
          __name(ft, "ft");
          var dt = { Yb: [], ac: [], qc: [], Vb: {}, fc: /* @__PURE__ */ __name(function() {
            x && dt.Ec();
          }, "fc"), Pc: /* @__PURE__ */ __name(function() {
          }, "Pc"), Ec: /* @__PURE__ */ __name(function() {
            dt.receiveObjectTransfer = dt.Gc, dt.threadInitTLS = dt.pc, dt.setExitStatus = dt.nc, D = false;
          }, "Ec"), nc: /* @__PURE__ */ __name(function() {
          }, "nc"), oc: /* @__PURE__ */ __name(function() {
            for (var t3 of Object.values(dt.Vb)) dt.mc(t3);
            for (t3 of dt.Yb) t3.terminate();
            dt.Yb = [];
          }, "oc"), mc: /* @__PURE__ */ __name(function(t3) {
            var e3 = t3.Ub;
            delete dt.Vb[e3], dt.Yb.push(t3), dt.ac.splice(dt.ac.indexOf(t3), 1), t3.Ub = 0, xe(e3);
          }, "mc"), Gc: /* @__PURE__ */ __name(function() {
          }, "Gc"), pc: /* @__PURE__ */ __name(function() {
            dt.qc.forEach((t3) => t3());
          }, "pc"), Fc: /* @__PURE__ */ __name(function(t3, e3) {
            t3.onmessage = (n2) => {
              var r3 = (n2 = n2.data).cmd;
              if (t3.Ub && (dt.Bc = t3.Ub), n2.targetThread && n2.targetThread != de()) {
                var i2 = dt.Vb[n2.Qc];
                i2 ? i2.postMessage(n2, n2.transferList) : P('Internal error! Worker sent a message "' + r3 + '" to target pthread ' + n2.targetThread + ", but that thread no longer exists!");
              } else "processProxyingQueue" === r3 ? Vt(n2.queue) : "spawnThread" === r3 ? lt2(n2) : "cleanupThread" === r3 ? ct(n2.thread) : "killThread" === r3 ? (n2 = n2.thread, r3 = dt.Vb[n2], delete dt.Vb[n2], r3.terminate(), xe(n2), dt.ac.splice(dt.ac.indexOf(r3), 1), r3.Ub = 0) : "cancelThread" === r3 ? dt.Vb[n2.thread].postMessage({ cmd: "cancel" }) : "loaded" === r3 ? (t3.loaded = true, e3 && e3(t3), t3.$b && (t3.$b(), delete t3.$b)) : "print" === r3 ? I("Thread " + n2.threadId + ": " + n2.text) : "printErr" === r3 ? P("Thread " + n2.threadId + ": " + n2.text) : "alert" === r3 ? alert("Thread " + n2.threadId + ": " + n2.text) : "setimmediate" === n2.target ? t3.postMessage(n2) : "onAbort" === r3 ? s.onAbort && s.onAbort(n2.arg) : r3 && P("worker sent an unknown command " + r3);
              dt.Bc = void 0;
            }, t3.onerror = (t4) => {
              throw P("worker sent an error! " + t4.filename + ":" + t4.lineno + ": " + t4.message), t4;
            }, w && (t3.on("message", function(e4) {
              t3.onmessage({ data: e4 });
            }), t3.on("error", function(e4) {
              t3.onerror(e4);
            }), t3.on("detachedExit", function() {
            })), t3.postMessage({ cmd: "load", urlOrBlob: s.mainScriptUrlOrBlob || _scriptDir, wasmMemory: $2, wasmModule: k });
          }, "Fc"), yc: /* @__PURE__ */ __name(function() {
            var t3 = S("ort-wasm-threaded.worker.js");
            dt.Yb.push(new Worker(t3));
          }, "yc"), Cc: /* @__PURE__ */ __name(function() {
            return 0 == dt.Yb.length && (dt.yc(), dt.Fc(dt.Yb[0])), dt.Yb.pop();
          }, "Cc") };
          function ht(t3) {
            for (; 0 < t3.length; ) t3.shift()(s);
          }
          __name(ht, "ht");
          function gt2(t3) {
            var e3 = Ae();
            return t3 = t3(), Ee(e3), t3;
          }
          __name(gt2, "gt");
          function bt(t3) {
            if (x) return qt(2, 0, t3);
            try {
              ft(t3);
            } catch (t4) {
              t4 instanceof ut || "unwind" == t4 || y(1, t4);
            }
          }
          __name(bt, "bt");
          s.PThread = dt, s.establishStackSpace = function() {
            var t3 = de(), e3 = i()[t3 + 44 >> 2 >>> 0];
            t3 = i()[t3 + 48 >> 2 >>> 0], Oe(e3, e3 - t3), Ee(e3);
          };
          var mt = [];
          function yt(t3) {
            var e3 = mt[t3];
            return e3 || (t3 >= mt.length && (mt.length = t3 + 1), mt[t3] = e3 = q.get(t3)), e3;
          }
          __name(yt, "yt");
          s.invokeEntryPoint = function(t3, e3) {
            t3 = yt(t3)(e3), J() ? dt.nc(t3) : Te(t3);
          };
          var _t, vt, wt = [], xt = 0, Tt = 0;
          function St(t3) {
            this.Zb = t3, this.Sb = t3 - 24, this.xc = function(t4) {
              o()[this.Sb + 4 >> 2 >>> 0] = t4;
            }, this.bc = function() {
              return o()[this.Sb + 4 >> 2 >>> 0];
            }, this.wc = function(t4) {
              o()[this.Sb + 8 >> 2 >>> 0] = t4;
            }, this.Dc = function() {
              return o()[this.Sb + 8 >> 2 >>> 0];
            }, this.rc = function() {
              i()[this.Sb >> 2 >>> 0] = 0;
            }, this.hc = function(t4) {
              t4 = t4 ? 1 : 0, e2()[this.Sb + 12 >> 0 >>> 0] = t4;
            }, this.uc = function() {
              return 0 != e2()[this.Sb + 12 >> 0 >>> 0];
            }, this.ic = function(t4) {
              t4 = t4 ? 1 : 0, e2()[this.Sb + 13 >> 0 >>> 0] = t4;
            }, this.kc = function() {
              return 0 != e2()[this.Sb + 13 >> 0 >>> 0];
            }, this.fc = function(t4, e3) {
              this.cc(0), this.xc(t4), this.wc(e3), this.rc(), this.hc(false), this.ic(false);
            }, this.sc = function() {
              Atomics.add(i(), this.Sb >> 2, 1);
            }, this.Hc = function() {
              return 1 === Atomics.sub(i(), this.Sb >> 2, 1);
            }, this.cc = function(t4) {
              o()[this.Sb + 16 >> 2 >>> 0] = t4;
            }, this.tc = function() {
              return o()[this.Sb + 16 >> 2 >>> 0];
            }, this.vc = function() {
              if (De(this.bc())) return o()[this.Zb >> 2 >>> 0];
              var t4 = this.tc();
              return 0 !== t4 ? t4 : this.Zb;
            };
          }
          __name(St, "St");
          function Ot(t3) {
            return ge(new St(t3).Sb);
          }
          __name(Ot, "Ot");
          function At(t3, e3, n2, r3) {
            return x ? qt(3, 1, t3, e3, n2, r3) : Et(t3, e3, n2, r3);
          }
          __name(At, "At");
          function Et(t3, e3, n2, r3) {
            if ("undefined" == typeof SharedArrayBuffer) return P("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var i2 = [];
            return x && 0 === i2.length ? At(t3, e3, n2, r3) : (t3 = { Ic: n2, Ub: t3, zc: r3, Nc: i2 }, x ? (t3.Oc = "spawnThread", postMessage(t3, i2), 0) : lt2(t3));
          }
          __name(Et, "Et");
          function It(t3, e3, n2) {
            return x ? qt(4, 1, t3, e3, n2) : 0;
          }
          __name(It, "It");
          function Pt(t3, e3) {
            if (x) return qt(5, 1, t3, e3);
          }
          __name(Pt, "Pt");
          function Dt(t3, e3) {
            if (x) return qt(6, 1, t3, e3);
          }
          __name(Dt, "Dt");
          function $t(t3, e3, n2) {
            if (x) return qt(7, 1, t3, e3, n2);
          }
          __name($t, "$t");
          function kt(t3, e3, n2) {
            return x ? qt(8, 1, t3, e3, n2) : 0;
          }
          __name(kt, "kt");
          function Ct(t3, e3) {
            if (x) return qt(9, 1, t3, e3);
          }
          __name(Ct, "Ct");
          function Ft(t3, e3, n2) {
            if (x) return qt(10, 1, t3, e3, n2);
          }
          __name(Ft, "Ft");
          function Nt(t3, e3, n2, r3) {
            if (x) return qt(11, 1, t3, e3, n2, r3);
          }
          __name(Nt, "Nt");
          function Lt(t3, e3, n2, r3) {
            if (x) return qt(12, 1, t3, e3, n2, r3);
          }
          __name(Lt, "Lt");
          function Rt(t3, e3, n2, r3) {
            if (x) return qt(13, 1, t3, e3, n2, r3);
          }
          __name(Rt, "Rt");
          function jt(t3) {
            if (x) return qt(14, 1, t3);
          }
          __name(jt, "jt");
          function Mt(t3, e3) {
            if (x) return qt(15, 1, t3, e3);
          }
          __name(Mt, "Mt");
          function Ut(t3, e3, n2) {
            if (x) return qt(16, 1, t3, e3, n2);
          }
          __name(Ut, "Ut");
          function Vt(t3) {
            Atomics.store(i(), t3 >> 2, 1), de() && we(t3), Atomics.compareExchange(i(), t3 >> 2, 1, 0);
          }
          __name(Vt, "Vt");
          function Bt(t3) {
            return o()[t3 >>> 2] + 4294967296 * i()[t3 + 4 >>> 2];
          }
          __name(Bt, "Bt");
          function zt(t3, e3, n2, r3, i2, o2) {
            return x ? qt(17, 1, t3, e3, n2, r3, i2, o2) : -52;
          }
          __name(zt, "zt");
          function Gt(t3, e3, n2, r3, i2, o2) {
            if (x) return qt(18, 1, t3, e3, n2, r3, i2, o2);
          }
          __name(Gt, "Gt");
          function Ht(t3) {
            var n2 = G(t3) + 1, r3 = he(n2);
            return r3 && z(t3, e2(), r3, n2), r3;
          }
          __name(Ht, "Ht");
          function Wt(t3, e3, n2) {
            function r3(t4) {
              return (t4 = t4.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? t4[1] : "GMT";
            }
            __name(r3, "r");
            if (x) return qt(19, 1, t3, e3, n2);
            var a2 = (/* @__PURE__ */ new Date()).getFullYear(), s2 = new Date(a2, 0, 1), u2 = new Date(a2, 6, 1);
            a2 = s2.getTimezoneOffset();
            var c2 = u2.getTimezoneOffset(), l2 = Math.max(a2, c2);
            i()[t3 >> 2 >>> 0] = 60 * l2, i()[e3 >> 2 >>> 0] = Number(a2 != c2), t3 = r3(s2), e3 = r3(u2), t3 = Ht(t3), e3 = Ht(e3), c2 < a2 ? (o()[n2 >> 2 >>> 0] = t3, o()[n2 + 4 >> 2 >>> 0] = e3) : (o()[n2 >> 2 >>> 0] = e3, o()[n2 + 4 >> 2 >>> 0] = t3);
          }
          __name(Wt, "Wt");
          function qt(t3, e3) {
            var n2 = arguments.length - 2, r3 = arguments;
            return gt2(() => {
              for (var i2 = Ie(8 * n2), o2 = i2 >> 3, s2 = 0; s2 < n2; s2++) {
                var u2 = r3[2 + s2];
                a()[o2 + s2 >>> 0] = u2;
              }
              return ve(t3, n2, i2, e3);
            });
          }
          __name(qt, "qt");
          s.executeNotifiedProxyingQueue = Vt, vt = w ? () => {
            var t3 = process.hrtime();
            return 1e3 * t3[0] + t3[1] / 1e6;
          } : x ? () => performance.now() - s.__performance_now_clock_drift : () => performance.now();
          var Xt, Yt = [], Kt = {};
          function Zt() {
            if (!Xt) {
              var t3, e3 = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: m || "./this.program" };
              for (t3 in Kt) void 0 === Kt[t3] ? delete e3[t3] : e3[t3] = Kt[t3];
              var n2 = [];
              for (t3 in e3) n2.push(t3 + "=" + e3[t3]);
              Xt = n2;
            }
            return Xt;
          }
          __name(Zt, "Zt");
          function Jt(t3, n2) {
            if (x) return qt(20, 1, t3, n2);
            var r3 = 0;
            return Zt().forEach(function(i2, a2) {
              var s2 = n2 + r3;
              for (a2 = o()[t3 + 4 * a2 >> 2 >>> 0] = s2, s2 = 0; s2 < i2.length; ++s2) e2()[a2++ >> 0 >>> 0] = i2.charCodeAt(s2);
              e2()[a2 >> 0 >>> 0] = 0, r3 += i2.length + 1;
            }), 0;
          }
          __name(Jt, "Jt");
          function Qt(t3, e3) {
            if (x) return qt(21, 1, t3, e3);
            var n2 = Zt();
            o()[t3 >> 2 >>> 0] = n2.length;
            var r3 = 0;
            return n2.forEach(function(t4) {
              r3 += t4.length + 1;
            }), o()[e3 >> 2 >>> 0] = r3, 0;
          }
          __name(Qt, "Qt");
          function te(t3) {
            return x ? qt(22, 1, t3) : 52;
          }
          __name(te, "te");
          function ee(t3, e3, n2, r3) {
            return x ? qt(23, 1, t3, e3, n2, r3) : 52;
          }
          __name(ee, "ee");
          function ne2(t3, e3, n2, r3, i2) {
            return x ? qt(24, 1, t3, e3, n2, r3, i2) : 70;
          }
          __name(ne2, "ne");
          var re = [null, [], []];
          function ie(t3, e3) {
            var n2 = re[t3];
            0 === e3 || 10 === e3 ? ((1 === t3 ? I : P)(V(n2, 0)), n2.length = 0) : n2.push(e3);
          }
          __name(ie, "ie");
          function oe(t3, e3, n2, i2) {
            if (x) return qt(25, 1, t3, e3, n2, i2);
            for (var a2 = 0, s2 = 0; s2 < n2; s2++) {
              var u2 = o()[e3 >> 2 >>> 0], c2 = o()[e3 + 4 >> 2 >>> 0];
              e3 += 8;
              for (var l2 = 0; l2 < c2; l2++) ie(t3, r2()[u2 + l2 >>> 0]);
              a2 += c2;
            }
            return o()[i2 >> 2 >>> 0] = a2, 0;
          }
          __name(oe, "oe");
          var ae = 0;
          function se(t3) {
            return 0 == t3 % 4 && (0 != t3 % 100 || 0 == t3 % 400);
          }
          __name(se, "se");
          var ue = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ce = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function le(t3, n2, r3, o2) {
            function a2(t4, e3, n3) {
              for (t4 = "number" == typeof t4 ? t4.toString() : t4 || ""; t4.length < e3; ) t4 = n3[0] + t4;
              return t4;
            }
            __name(a2, "a");
            function s2(t4, e3) {
              return a2(t4, e3, "0");
            }
            __name(s2, "s");
            function u2(t4, e3) {
              function n3(t5) {
                return 0 > t5 ? -1 : 0 < t5 ? 1 : 0;
              }
              __name(n3, "n");
              var r4;
              return 0 === (r4 = n3(t4.getFullYear() - e3.getFullYear())) && 0 === (r4 = n3(t4.getMonth() - e3.getMonth())) && (r4 = n3(t4.getDate() - e3.getDate())), r4;
            }
            __name(u2, "u");
            function c2(t4) {
              switch (t4.getDay()) {
                case 0:
                  return new Date(t4.getFullYear() - 1, 11, 29);
                case 1:
                  return t4;
                case 2:
                  return new Date(t4.getFullYear(), 0, 3);
                case 3:
                  return new Date(t4.getFullYear(), 0, 2);
                case 4:
                  return new Date(t4.getFullYear(), 0, 1);
                case 5:
                  return new Date(t4.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(t4.getFullYear() - 1, 11, 30);
              }
            }
            __name(c2, "c");
            function l2(t4) {
              var e3 = t4.Wb;
              for (t4 = new Date(new Date(t4.Xb + 1900, 0, 1).getTime()); 0 < e3; ) {
                var n3 = t4.getMonth(), r4 = (se(t4.getFullYear()) ? ue : ce)[n3];
                if (!(e3 > r4 - t4.getDate())) {
                  t4.setDate(t4.getDate() + e3);
                  break;
                }
                e3 -= r4 - t4.getDate() + 1, t4.setDate(1), 11 > n3 ? t4.setMonth(n3 + 1) : (t4.setMonth(0), t4.setFullYear(t4.getFullYear() + 1));
              }
              return n3 = new Date(t4.getFullYear() + 1, 0, 4), e3 = c2(new Date(t4.getFullYear(), 0, 4)), n3 = c2(n3), 0 >= u2(e3, t4) ? 0 >= u2(n3, t4) ? t4.getFullYear() + 1 : t4.getFullYear() : t4.getFullYear() - 1;
            }
            __name(l2, "l");
            var p2 = i()[o2 + 40 >> 2 >>> 0];
            for (var f2 in o2 = { Lc: i()[o2 >> 2 >>> 0], Kc: i()[o2 + 4 >> 2 >>> 0], dc: i()[o2 + 8 >> 2 >>> 0], jc: i()[o2 + 12 >> 2 >>> 0], ec: i()[o2 + 16 >> 2 >>> 0], Xb: i()[o2 + 20 >> 2 >>> 0], Tb: i()[o2 + 24 >> 2 >>> 0], Wb: i()[o2 + 28 >> 2 >>> 0], Rc: i()[o2 + 32 >> 2 >>> 0], Jc: i()[o2 + 36 >> 2 >>> 0], Mc: p2 ? B(p2) : "" }, r3 = B(r3), p2 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" }) r3 = r3.replace(new RegExp(f2, "g"), p2[f2]);
            var d2 = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), h2 = "January February March April May June July August September October November December".split(" ");
            for (f2 in p2 = { "%a": /* @__PURE__ */ __name(function(t4) {
              return d2[t4.Tb].substring(0, 3);
            }, "%a"), "%A": /* @__PURE__ */ __name(function(t4) {
              return d2[t4.Tb];
            }, "%A"), "%b": /* @__PURE__ */ __name(function(t4) {
              return h2[t4.ec].substring(0, 3);
            }, "%b"), "%B": /* @__PURE__ */ __name(function(t4) {
              return h2[t4.ec];
            }, "%B"), "%C": /* @__PURE__ */ __name(function(t4) {
              return s2((t4.Xb + 1900) / 100 | 0, 2);
            }, "%C"), "%d": /* @__PURE__ */ __name(function(t4) {
              return s2(t4.jc, 2);
            }, "%d"), "%e": /* @__PURE__ */ __name(function(t4) {
              return a2(t4.jc, 2, " ");
            }, "%e"), "%g": /* @__PURE__ */ __name(function(t4) {
              return l2(t4).toString().substring(2);
            }, "%g"), "%G": /* @__PURE__ */ __name(function(t4) {
              return l2(t4);
            }, "%G"), "%H": /* @__PURE__ */ __name(function(t4) {
              return s2(t4.dc, 2);
            }, "%H"), "%I": /* @__PURE__ */ __name(function(t4) {
              return 0 == (t4 = t4.dc) ? t4 = 12 : 12 < t4 && (t4 -= 12), s2(t4, 2);
            }, "%I"), "%j": /* @__PURE__ */ __name(function(t4) {
              for (var e3 = 0, n3 = 0; n3 <= t4.ec - 1; e3 += (se(t4.Xb + 1900) ? ue : ce)[n3++]) ;
              return s2(t4.jc + e3, 3);
            }, "%j"), "%m": /* @__PURE__ */ __name(function(t4) {
              return s2(t4.ec + 1, 2);
            }, "%m"), "%M": /* @__PURE__ */ __name(function(t4) {
              return s2(t4.Kc, 2);
            }, "%M"), "%n": /* @__PURE__ */ __name(function() {
              return "\n";
            }, "%n"), "%p": /* @__PURE__ */ __name(function(t4) {
              return 0 <= t4.dc && 12 > t4.dc ? "AM" : "PM";
            }, "%p"), "%S": /* @__PURE__ */ __name(function(t4) {
              return s2(t4.Lc, 2);
            }, "%S"), "%t": /* @__PURE__ */ __name(function() {
              return "	";
            }, "%t"), "%u": /* @__PURE__ */ __name(function(t4) {
              return t4.Tb || 7;
            }, "%u"), "%U": /* @__PURE__ */ __name(function(t4) {
              return s2(Math.floor((t4.Wb + 7 - t4.Tb) / 7), 2);
            }, "%U"), "%V": /* @__PURE__ */ __name(function(t4) {
              var e3 = Math.floor((t4.Wb + 7 - (t4.Tb + 6) % 7) / 7);
              if (2 >= (t4.Tb + 371 - t4.Wb - 2) % 7 && e3++, e3) 53 == e3 && (4 == (n3 = (t4.Tb + 371 - t4.Wb) % 7) || 3 == n3 && se(t4.Xb) || (e3 = 1));
              else {
                e3 = 52;
                var n3 = (t4.Tb + 7 - t4.Wb - 1) % 7;
                (4 == n3 || 5 == n3 && se(t4.Xb % 400 - 1)) && e3++;
              }
              return s2(e3, 2);
            }, "%V"), "%w": /* @__PURE__ */ __name(function(t4) {
              return t4.Tb;
            }, "%w"), "%W": /* @__PURE__ */ __name(function(t4) {
              return s2(Math.floor((t4.Wb + 7 - (t4.Tb + 6) % 7) / 7), 2);
            }, "%W"), "%y": /* @__PURE__ */ __name(function(t4) {
              return (t4.Xb + 1900).toString().substring(2);
            }, "%y"), "%Y": /* @__PURE__ */ __name(function(t4) {
              return t4.Xb + 1900;
            }, "%Y"), "%z": /* @__PURE__ */ __name(function(t4) {
              var e3 = 0 <= (t4 = t4.Jc);
              return t4 = Math.abs(t4) / 60, (e3 ? "+" : "-") + String("0000" + (t4 / 60 * 100 + t4 % 60)).slice(-4);
            }, "%z"), "%Z": /* @__PURE__ */ __name(function(t4) {
              return t4.Mc;
            }, "%Z"), "%%": /* @__PURE__ */ __name(function() {
              return "%";
            }, "%%") }, r3 = r3.replace(/%%/g, "\0\0"), p2) r3.includes(f2) && (r3 = r3.replace(new RegExp(f2, "g"), p2[f2](o2)));
            return f2 = function(t4) {
              var e3 = Array(G(t4) + 1);
              return z(t4, e3, 0, e3.length), e3;
            }(r3 = r3.replace(/\0\0/g, "%")), f2.length > n2 ? 0 : (function(t4, n3) {
              e2().set(t4, n3 >>> 0);
            }(f2, t3), f2.length - 1);
          }
          __name(le, "le");
          dt.fc();
          var pe = [null, pt, bt, At, It, Pt, Dt, $t, kt, Ct, Ft, Nt, Lt, Rt, jt, Mt, Ut, zt, Gt, Wt, Jt, Qt, te, ee, ne2, oe], fe = { b: /* @__PURE__ */ __name(function(t3) {
            return he(t3 + 24) + 24;
          }, "b"), n: /* @__PURE__ */ __name(function(t3) {
            return (t3 = new St(t3)).uc() || (t3.hc(true), xt--), t3.ic(false), wt.push(t3), t3.sc(), t3.vc();
          }, "n"), ma: /* @__PURE__ */ __name(function(t3) {
            throw P("Unexpected exception thrown, this is not properly supported - aborting"), M = true, t3;
          }, "ma"), x: /* @__PURE__ */ __name(function() {
            Se(0);
            var t3 = wt.pop();
            if (t3.Hc() && !t3.kc()) {
              var e3 = t3.Dc();
              e3 && yt(e3)(t3.Zb), Ot(t3.Zb);
            }
            Tt = 0;
          }, "x"), e: /* @__PURE__ */ __name(function() {
            var t3 = Tt;
            if (!t3) return ae = 0;
            var e3 = new St(t3);
            e3.cc(t3);
            var n2 = e3.bc();
            if (!n2) return ae = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (Pe(o2, n2, e3.Sb + 16)) return ae = o2, t3;
            }
            return ae = n2, t3;
          }, "e"), l: /* @__PURE__ */ __name(function() {
            var t3 = Tt;
            if (!t3) return ae = 0;
            var e3 = new St(t3);
            e3.cc(t3);
            var n2 = e3.bc();
            if (!n2) return ae = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (Pe(o2, n2, e3.Sb + 16)) return ae = o2, t3;
            }
            return ae = n2, t3;
          }, "l"), h: /* @__PURE__ */ __name(function() {
            var t3 = Tt;
            if (!t3) return ae = 0;
            var e3 = new St(t3);
            e3.cc(t3);
            var n2 = e3.bc();
            if (!n2) return ae = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (Pe(o2, n2, e3.Sb + 16)) return ae = o2, t3;
            }
            return ae = n2, t3;
          }, "h"), t: Ot, M: /* @__PURE__ */ __name(function() {
            var t3 = wt.pop();
            t3 || it("no exception to throw");
            var e3 = t3.Zb;
            throw t3.kc() || (wt.push(t3), t3.ic(true), t3.hc(false), xt++), Tt = e3, e3;
          }, "M"), c: /* @__PURE__ */ __name(function(t3, e3, n2) {
            throw new St(t3).fc(e3, n2), Tt = t3, xt++, t3;
          }, "c"), pa: /* @__PURE__ */ __name(function() {
            return xt;
          }, "pa"), Fa: /* @__PURE__ */ __name(function(t3) {
            ye(t3, !v, 1, !_), dt.pc();
          }, "Fa"), T: /* @__PURE__ */ __name(function(t3) {
            x ? postMessage({ cmd: "cleanupThread", thread: t3 }) : ct(t3);
          }, "T"), xa: Et, j: /* @__PURE__ */ __name(function(t3) {
            throw Tt || (Tt = t3), t3;
          }, "j"), H: It, Ma: Pt, ua: Dt, wa: $t, oa: kt, Ka: Ct, Ca: Ft, Ja: Nt, V: Lt, va: Rt, sa: jt, La: Mt, ta: Ut, Ta: /* @__PURE__ */ __name(function() {
          }, "Ta"), X: /* @__PURE__ */ __name(function() {
            it("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, "X"), Ua: /* @__PURE__ */ __name(function() {
            it("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, "Ua"), W: /* @__PURE__ */ __name(function() {
            return Date.now();
          }, "W"), ya: /* @__PURE__ */ __name(function() {
            return 2097152;
          }, "ya"), Oa: /* @__PURE__ */ __name(function() {
            return true;
          }, "Oa"), za: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            if (t3 == e3) setTimeout(() => Vt(r3));
            else if (x) postMessage({ targetThread: t3, cmd: "processProxyingQueue", queue: r3 });
            else {
              if (!(t3 = dt.Vb[t3])) return;
              t3.postMessage({ cmd: "processProxyingQueue", queue: r3 });
            }
            return 1;
          }, "za"), Ea: /* @__PURE__ */ __name(function() {
            return -1;
          }, "Ea"), Pa: /* @__PURE__ */ __name(function(t3, e3) {
            t3 = new Date(1e3 * Bt(t3)), i()[e3 >> 2 >>> 0] = t3.getUTCSeconds(), i()[e3 + 4 >> 2 >>> 0] = t3.getUTCMinutes(), i()[e3 + 8 >> 2 >>> 0] = t3.getUTCHours(), i()[e3 + 12 >> 2 >>> 0] = t3.getUTCDate(), i()[e3 + 16 >> 2 >>> 0] = t3.getUTCMonth(), i()[e3 + 20 >> 2 >>> 0] = t3.getUTCFullYear() - 1900, i()[e3 + 24 >> 2 >>> 0] = t3.getUTCDay(), t3 = (t3.getTime() - Date.UTC(t3.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, i()[e3 + 28 >> 2 >>> 0] = t3;
          }, "Pa"), Qa: /* @__PURE__ */ __name(function(t3, e3) {
            t3 = new Date(1e3 * Bt(t3)), i()[e3 >> 2 >>> 0] = t3.getSeconds(), i()[e3 + 4 >> 2 >>> 0] = t3.getMinutes(), i()[e3 + 8 >> 2 >>> 0] = t3.getHours(), i()[e3 + 12 >> 2 >>> 0] = t3.getDate(), i()[e3 + 16 >> 2 >>> 0] = t3.getMonth(), i()[e3 + 20 >> 2 >>> 0] = t3.getFullYear() - 1900, i()[e3 + 24 >> 2 >>> 0] = t3.getDay();
            var n2 = new Date(t3.getFullYear(), 0, 1), r3 = (t3.getTime() - n2.getTime()) / 864e5 | 0;
            i()[e3 + 28 >> 2 >>> 0] = r3, i()[e3 + 36 >> 2 >>> 0] = -60 * t3.getTimezoneOffset(), r3 = new Date(t3.getFullYear(), 6, 1).getTimezoneOffset(), t3 = 0 | (r3 != (n2 = n2.getTimezoneOffset()) && t3.getTimezoneOffset() == Math.min(n2, r3)), i()[e3 + 32 >> 2 >>> 0] = t3;
          }, "Qa"), Ra: /* @__PURE__ */ __name(function(t3) {
            var e3 = new Date(i()[t3 + 20 >> 2 >>> 0] + 1900, i()[t3 + 16 >> 2 >>> 0], i()[t3 + 12 >> 2 >>> 0], i()[t3 + 8 >> 2 >>> 0], i()[t3 + 4 >> 2 >>> 0], i()[t3 >> 2 >>> 0], 0), n2 = i()[t3 + 32 >> 2 >>> 0], r3 = e3.getTimezoneOffset(), o2 = new Date(e3.getFullYear(), 0, 1), a2 = new Date(e3.getFullYear(), 6, 1).getTimezoneOffset(), s2 = o2.getTimezoneOffset(), u2 = Math.min(s2, a2);
            return 0 > n2 ? i()[t3 + 32 >> 2 >>> 0] = Number(a2 != s2 && u2 == r3) : 0 < n2 != (u2 == r3) && (a2 = Math.max(s2, a2), e3.setTime(e3.getTime() + 6e4 * ((0 < n2 ? u2 : a2) - r3))), i()[t3 + 24 >> 2 >>> 0] = e3.getDay(), n2 = (e3.getTime() - o2.getTime()) / 864e5 | 0, i()[t3 + 28 >> 2 >>> 0] = n2, i()[t3 >> 2 >>> 0] = e3.getSeconds(), i()[t3 + 4 >> 2 >>> 0] = e3.getMinutes(), i()[t3 + 8 >> 2 >>> 0] = e3.getHours(), i()[t3 + 12 >> 2 >>> 0] = e3.getDate(), i()[t3 + 16 >> 2 >>> 0] = e3.getMonth(), e3.getTime() / 1e3 | 0;
          }, "Ra"), Aa: zt, Ba: Gt, Sa: /* @__PURE__ */ __name(function t3(e3, n2, r3) {
            t3.Ac || (t3.Ac = true, Wt(e3, n2, r3));
          }, "t"), y: /* @__PURE__ */ __name(function() {
            it("");
          }, "y"), U: /* @__PURE__ */ __name(function() {
            if (!w && !v) {
              var t3 = "Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";
              _t || (_t = {}), _t[t3] || (_t[t3] = 1, w && (t3 = "warning: " + t3), P(t3));
            }
          }, "U"), ra: /* @__PURE__ */ __name(function() {
            return 4294901760;
          }, "ra"), B: vt, Ia: /* @__PURE__ */ __name(function(t3, e3, n2) {
            r2().copyWithin(t3 >>> 0, e3 >>> 0, e3 + n2 >>> 0);
          }, "Ia"), F: /* @__PURE__ */ __name(function() {
            return w ? n(3993).cpus().length : navigator.hardwareConcurrency;
          }, "F"), Da: /* @__PURE__ */ __name(function(t3, e3, n2) {
            Yt.length = e3, n2 >>= 3;
            for (var r3 = 0; r3 < e3; r3++) Yt[r3] = a()[n2 + r3 >>> 0];
            return (0 > t3 ? st[-t3 - 1] : pe[t3]).apply(null, Yt);
          }, "Da"), qa: /* @__PURE__ */ __name(function(t3) {
            var e3 = r2().length;
            if ((t3 >>>= 0) <= e3 || 4294901760 < t3) return false;
            for (var n2 = 1; 4 >= n2; n2 *= 2) {
              var i2 = e3 * (1 + 0.2 / n2);
              i2 = Math.min(i2, t3 + 100663296);
              var o2 = Math;
              i2 = Math.max(t3, i2), o2 = o2.min.call(o2, 4294901760, i2 + (65536 - i2 % 65536) % 65536);
              t: {
                try {
                  $2.grow(o2 - C.byteLength + 65535 >>> 16), H($2.buffer);
                  var a2 = 1;
                  break t;
                } catch (t4) {
                }
                a2 = void 0;
              }
              if (a2) return true;
            }
            return false;
          }, "qa"), Na: /* @__PURE__ */ __name(function() {
            throw "unwind";
          }, "Na"), Ga: Jt, Ha: Qt, J: ft, I: te, S: ee, ga: ne2, R: oe, d: /* @__PURE__ */ __name(function() {
            return ae;
          }, "d"), na: /* @__PURE__ */ __name(function t3(r3, i2) {
            t3.lc || (t3.lc = function() {
              if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues) {
                var t4 = new Uint8Array(1);
                return () => (crypto.getRandomValues(t4), t4[0]);
              }
              if (w) try {
                var e3 = n(Object(function() {
                  var t5 = new Error("Cannot find module 'crypto'");
                  throw t5.code = "MODULE_NOT_FOUND", t5;
                }()));
                return () => e3.randomBytes(1)[0];
              } catch (t5) {
              }
              return () => it("randomDevice");
            }());
            for (var o2 = 0; o2 < i2; o2++) e2()[r3 + o2 >> 0 >>> 0] = t3.lc();
            return 0;
          }, "t"), ia: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ia"), ja: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ja"), K: /* @__PURE__ */ __name(function(t3) {
            var e3 = Ae();
            try {
              return yt(t3)();
            } catch (t4) {
              if (Ee(e3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "K"), f: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Ae();
            try {
              return yt(t3)(e3);
            } catch (t4) {
              if (Ee(n2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "f"), P: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "P"), Q: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "Q"), k: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "k"), p: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Ae();
            try {
              return yt(t3)(e3, n2, r3);
            } catch (t4) {
              if (Ee(i2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "p"), q: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2);
            } catch (t4) {
              if (Ee(o2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "q"), N: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (Ee(a2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "N"), s: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (Ee(a2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "s"), w: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (Ee(s2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "w"), L: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (Ee(u2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "L"), E: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2) {
            var f2 = Ae();
            try {
              return yt(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2);
            } catch (t4) {
              if (Ee(f2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "E"), aa: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Ae();
            try {
              return Me(t3, e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (Ee(u2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "aa"), _: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Ae();
            try {
              return ke(t3, e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (Ee(s2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "_"), Z: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Ae();
            try {
              return Ue(t3, e3, n2, r3, i2);
            } catch (t4) {
              if (Ee(o2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "Z"), ca: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Ae();
            try {
              return Re(t3, e3, n2, r3);
            } catch (t4) {
              if (Ee(i2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ca"), $: /* @__PURE__ */ __name(function(t3) {
            var e3 = Ae();
            try {
              return $e(t3);
            } catch (t4) {
              if (Ee(e3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "$"), ba: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Ae();
            try {
              return je(t3, e3);
            } catch (t4) {
              if (Ee(n2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ba"), Y: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              return Ce(t3, e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "Y"), g: /* @__PURE__ */ __name(function(t3) {
            var e3 = Ae();
            try {
              yt(t3)();
            } catch (t4) {
              if (Ee(e3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "g"), r: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Ae();
            try {
              yt(t3)(e3);
            } catch (t4) {
              if (Ee(n2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "r"), i: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Ae();
            try {
              yt(t3)(e3, n2);
            } catch (t4) {
              if (Ee(r3), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "i"), ha: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Ae();
            try {
              yt(t3)(e3, n2, r3);
            } catch (t4) {
              if (Ee(i2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ha"), m: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Ae();
            try {
              yt(t3)(e3, n2, r3);
            } catch (t4) {
              if (Ee(i2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "m"), v: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2);
            } catch (t4) {
              if (Ee(o2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "v"), u: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (Ee(a2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "u"), O: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (Ee(s2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "O"), A: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (Ee(u2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "A"), ka: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2) {
            var c2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2, a2, s2, u2);
            } catch (t4) {
              if (Ee(c2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ka"), C: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2) {
            var p2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2);
            } catch (t4) {
              if (Ee(p2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "C"), D: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2, f2, d2, h2, g2) {
            var b2 = Ae();
            try {
              yt(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2, f2, d2, h2, g2);
            } catch (t4) {
              if (Ee(b2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "D"), fa: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Ae();
            try {
              Fe(t3, e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (Ee(u2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "fa"), da: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2) {
            var f2 = Ae();
            try {
              Le(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2);
            } catch (t4) {
              if (Ee(f2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "da"), ea: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Ae();
            try {
              Ne(t3, e3, n2, r3, i2, o2);
            } catch (t4) {
              if (Ee(a2), t4 !== t4 + 0) throw t4;
              Se(1, 0);
            }
          }, "ea"), o: /* @__PURE__ */ __name(function(t3) {
            return t3;
          }, "o"), a: $2 || s.wasmMemory, G: /* @__PURE__ */ __name(function(t3) {
            ae = t3;
          }, "G"), la: le, z: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            return le(t3, e3, n2, r3);
          }, "z") };
          !function() {
            function t3(t4, e4) {
              s.asm = t4.exports, dt.qc.push(s.asm.sb), q = s.asm.ub, Y.unshift(s.asm.Va), k = e4, x || (et--, s.monitorRunDependencies && s.monitorRunDependencies(et), 0 == et && (null !== nt && (clearInterval(nt), nt = null), rt && (t4 = rt, rt = null, t4())));
            }
            __name(t3, "t");
            function e3(e4) {
              t3(e4.instance, e4.module);
            }
            __name(e3, "e");
            function n2(t4) {
              return function() {
                if (!E && (_ || v)) {
                  if ("function" == typeof fetch && !tt.startsWith("file://")) return fetch(tt, { credentials: "same-origin" }).then(function(t5) {
                    if (!t5.ok) throw "failed to load wasm binary file at '" + tt + "'";
                    return t5.arrayBuffer();
                  }).catch(function() {
                    return at();
                  });
                  if (p) return new Promise(function(t5, e4) {
                    p(tt, function(e5) {
                      t5(new Uint8Array(e5));
                    }, e4);
                  });
                }
                return Promise.resolve().then(function() {
                  return at();
                });
              }().then(function(t5) {
                return WebAssembly.instantiate(t5, r3);
              }).then(function(t5) {
                return t5;
              }).then(t4, function(t5) {
                P("failed to asynchronously prepare wasm: " + t5), it(t5);
              });
            }
            __name(n2, "n");
            var r3 = { a: fe };
            if (x || (et++, s.monitorRunDependencies && s.monitorRunDependencies(et)), s.instantiateWasm) try {
              return s.instantiateWasm(r3, t3);
            } catch (t4) {
              return P("Module.instantiateWasm callback failed with error: " + t4), false;
            }
            (E || "function" != typeof WebAssembly.instantiateStreaming || ot() || tt.startsWith("file://") || w || "function" != typeof fetch ? n2(e3) : fetch(tt, { credentials: "same-origin" }).then(function(t4) {
              return WebAssembly.instantiateStreaming(t4, r3).then(e3, function(t5) {
                return P("wasm streaming compile failed: " + t5), P("falling back to ArrayBuffer instantiation"), n2(e3);
              });
            })).catch(c);
          }(), s.___wasm_call_ctors = function() {
            return (s.___wasm_call_ctors = s.asm.Va).apply(null, arguments);
          }, s._OrtInit = function() {
            return (s._OrtInit = s.asm.Wa).apply(null, arguments);
          }, s._OrtCreateSessionOptions = function() {
            return (s._OrtCreateSessionOptions = s.asm.Xa).apply(null, arguments);
          }, s._OrtAppendExecutionProvider = function() {
            return (s._OrtAppendExecutionProvider = s.asm.Ya).apply(null, arguments);
          }, s._OrtAddSessionConfigEntry = function() {
            return (s._OrtAddSessionConfigEntry = s.asm.Za).apply(null, arguments);
          }, s._OrtReleaseSessionOptions = function() {
            return (s._OrtReleaseSessionOptions = s.asm._a).apply(null, arguments);
          }, s._OrtCreateSession = function() {
            return (s._OrtCreateSession = s.asm.$a).apply(null, arguments);
          }, s._OrtReleaseSession = function() {
            return (s._OrtReleaseSession = s.asm.ab).apply(null, arguments);
          }, s._OrtGetInputCount = function() {
            return (s._OrtGetInputCount = s.asm.bb).apply(null, arguments);
          }, s._OrtGetOutputCount = function() {
            return (s._OrtGetOutputCount = s.asm.cb).apply(null, arguments);
          }, s._OrtGetInputName = function() {
            return (s._OrtGetInputName = s.asm.db).apply(null, arguments);
          }, s._OrtGetOutputName = function() {
            return (s._OrtGetOutputName = s.asm.eb).apply(null, arguments);
          }, s._OrtFree = function() {
            return (s._OrtFree = s.asm.fb).apply(null, arguments);
          }, s._OrtCreateTensor = function() {
            return (s._OrtCreateTensor = s.asm.gb).apply(null, arguments);
          }, s._OrtGetTensorData = function() {
            return (s._OrtGetTensorData = s.asm.hb).apply(null, arguments);
          }, s._OrtReleaseTensor = function() {
            return (s._OrtReleaseTensor = s.asm.ib).apply(null, arguments);
          }, s._OrtCreateRunOptions = function() {
            return (s._OrtCreateRunOptions = s.asm.jb).apply(null, arguments);
          }, s._OrtAddRunConfigEntry = function() {
            return (s._OrtAddRunConfigEntry = s.asm.kb).apply(null, arguments);
          }, s._OrtReleaseRunOptions = function() {
            return (s._OrtReleaseRunOptions = s.asm.lb).apply(null, arguments);
          }, s._OrtRun = function() {
            return (s._OrtRun = s.asm.mb).apply(null, arguments);
          }, s._OrtEndProfiling = function() {
            return (s._OrtEndProfiling = s.asm.nb).apply(null, arguments);
          };
          var de = s._pthread_self = function() {
            return (de = s._pthread_self = s.asm.ob).apply(null, arguments);
          }, he = s._malloc = function() {
            return (he = s._malloc = s.asm.pb).apply(null, arguments);
          }, ge = s._free = function() {
            return (ge = s._free = s.asm.qb).apply(null, arguments);
          }, be = s._fflush = function() {
            return (be = s._fflush = s.asm.rb).apply(null, arguments);
          };
          s.__emscripten_tls_init = function() {
            return (s.__emscripten_tls_init = s.asm.sb).apply(null, arguments);
          };
          var me = s.___funcs_on_exit = function() {
            return (me = s.___funcs_on_exit = s.asm.tb).apply(null, arguments);
          }, ye = s.__emscripten_thread_init = function() {
            return (ye = s.__emscripten_thread_init = s.asm.vb).apply(null, arguments);
          };
          s.__emscripten_thread_crashed = function() {
            return (s.__emscripten_thread_crashed = s.asm.wb).apply(null, arguments);
          };
          var _e, ve = s._emscripten_run_in_main_runtime_thread_js = function() {
            return (ve = s._emscripten_run_in_main_runtime_thread_js = s.asm.xb).apply(null, arguments);
          }, we = s.__emscripten_proxy_execute_task_queue = function() {
            return (we = s.__emscripten_proxy_execute_task_queue = s.asm.yb).apply(null, arguments);
          }, xe = s.__emscripten_thread_free_data = function() {
            return (xe = s.__emscripten_thread_free_data = s.asm.zb).apply(null, arguments);
          }, Te = s.__emscripten_thread_exit = function() {
            return (Te = s.__emscripten_thread_exit = s.asm.Ab).apply(null, arguments);
          }, Se = s._setThrew = function() {
            return (Se = s._setThrew = s.asm.Bb).apply(null, arguments);
          }, Oe = s._emscripten_stack_set_limits = function() {
            return (Oe = s._emscripten_stack_set_limits = s.asm.Cb).apply(null, arguments);
          }, Ae = s.stackSave = function() {
            return (Ae = s.stackSave = s.asm.Db).apply(null, arguments);
          }, Ee = s.stackRestore = function() {
            return (Ee = s.stackRestore = s.asm.Eb).apply(null, arguments);
          }, Ie = s.stackAlloc = function() {
            return (Ie = s.stackAlloc = s.asm.Fb).apply(null, arguments);
          }, Pe = s.___cxa_can_catch = function() {
            return (Pe = s.___cxa_can_catch = s.asm.Gb).apply(null, arguments);
          }, De = s.___cxa_is_pointer_type = function() {
            return (De = s.___cxa_is_pointer_type = s.asm.Hb).apply(null, arguments);
          }, $e = s.dynCall_j = function() {
            return ($e = s.dynCall_j = s.asm.Ib).apply(null, arguments);
          }, ke = s.dynCall_iiiiij = function() {
            return (ke = s.dynCall_iiiiij = s.asm.Jb).apply(null, arguments);
          }, Ce = s.dynCall_jii = function() {
            return (Ce = s.dynCall_jii = s.asm.Kb).apply(null, arguments);
          }, Fe = s.dynCall_viiiiij = function() {
            return (Fe = s.dynCall_viiiiij = s.asm.Lb).apply(null, arguments);
          }, Ne = s.dynCall_vjji = function() {
            return (Ne = s.dynCall_vjji = s.asm.Mb).apply(null, arguments);
          }, Le = s.dynCall_viiijjjii = function() {
            return (Le = s.dynCall_viiijjjii = s.asm.Nb).apply(null, arguments);
          }, Re = s.dynCall_iij = function() {
            return (Re = s.dynCall_iij = s.asm.Ob).apply(null, arguments);
          }, je = s.dynCall_ji = function() {
            return (je = s.dynCall_ji = s.asm.Pb).apply(null, arguments);
          }, Me = s.dynCall_iiiiiij = function() {
            return (Me = s.dynCall_iiiiiij = s.asm.Qb).apply(null, arguments);
          }, Ue = s.dynCall_iiij = function() {
            return (Ue = s.dynCall_iiij = s.asm.Rb).apply(null, arguments);
          };
          function Ve() {
            function t3() {
              if (!_e && (_e = true, s.calledRun = true, !M) && (x || ht(Y), u(s), s.onRuntimeInitialized && s.onRuntimeInitialized(), !x)) {
                if (s.postRun) for ("function" == typeof s.postRun && (s.postRun = [s.postRun]); s.postRun.length; ) {
                  var t4 = s.postRun.shift();
                  Z.unshift(t4);
                }
                ht(Z);
              }
            }
            __name(t3, "t");
            if (!(0 < et)) if (x) u(s), x || ht(Y), postMessage({ cmd: "loaded" });
            else {
              if (s.preRun) for ("function" == typeof s.preRun && (s.preRun = [s.preRun]); s.preRun.length; ) Q();
              ht(X), 0 < et || (s.setStatus ? (s.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  s.setStatus("");
                }, 1), t3();
              }, 1)) : t3());
            }
          }
          __name(Ve, "Ve");
          if (s.UTF8ToString = B, s.stringToUTF8 = function(t3, e3, n2) {
            return z(t3, r2(), e3, n2);
          }, s.lengthBytesUTF8 = G, s.keepRuntimeAlive = J, s.wasmMemory = $2, s.stackSave = Ae, s.stackRestore = Ee, s.stackAlloc = Ie, s.ExitStatus = ut, s.PThread = dt, rt = /* @__PURE__ */ __name(function t3() {
            _e || Ve(), _e || (rt = t3);
          }, "t"), s.preInit) for ("function" == typeof s.preInit && (s.preInit = [s.preInit]); 0 < s.preInit.length; ) s.preInit.pop()();
          return Ve(), t2.ready;
        });
        t.exports = r;
      }, 932: (t, e, n) => {
        var _scriptDir, r = (_scriptDir = (_scriptDir = "undefined" != typeof document && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(t2) {
          var e2, r2, i;
          t2 = t2 || {}, e2 || (e2 = void 0 !== t2 ? t2 : {}), e2.ready = new Promise(function(t3, e3) {
            r2 = t3, i = e3;
          });
          var o, a, s, u, c, l, p = Object.assign({}, e2), f = "./this.program", d = /* @__PURE__ */ __name((t3, e3) => {
            throw e3;
          }, "d"), h = "object" == typeof window, g = "function" == typeof importScripts, b = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, m = "";
          b ? (m = g ? n(908).dirname(m) + "/" : "//", l = /* @__PURE__ */ __name(() => {
            c || (u = n(1384), c = n(908));
          }, "l"), o = /* @__PURE__ */ __name(function(t3, e3) {
            return l(), t3 = c.normalize(t3), u.readFileSync(t3, e3 ? void 0 : "utf8");
          }, "o"), s = /* @__PURE__ */ __name((t3) => ((t3 = o(t3, true)).buffer || (t3 = new Uint8Array(t3)), t3), "s"), a = /* @__PURE__ */ __name((t3, e3, n2) => {
            l(), t3 = c.normalize(t3), u.readFile(t3, function(t4, r3) {
              t4 ? n2(t4) : e3(r3.buffer);
            });
          }, "a"), 1 < process.argv.length && (f = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(t3) {
            if (!(t3 instanceof K)) throw t3;
          }), process.on("unhandledRejection", function(t3) {
            throw t3;
          }), d = /* @__PURE__ */ __name((t3, e3) => {
            if (w || 0 < U) throw process.exitCode = t3, e3;
            e3 instanceof K || v("exiting due to exception: " + e3), process.exit(t3);
          }, "d"), e2.inspect = function() {
            return "[Emscripten Module object]";
          }) : (h || g) && (g ? m = self.location.href : "undefined" != typeof document && document.currentScript && (m = document.currentScript.src), _scriptDir && (m = _scriptDir), m = 0 !== m.indexOf("blob:") ? m.substr(0, m.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", o = /* @__PURE__ */ __name((t3) => {
            var e3 = new XMLHttpRequest();
            return e3.open("GET", t3, false), e3.send(null), e3.responseText;
          }, "o"), g && (s = /* @__PURE__ */ __name((t3) => {
            var e3 = new XMLHttpRequest();
            return e3.open("GET", t3, false), e3.responseType = "arraybuffer", e3.send(null), new Uint8Array(e3.response);
          }, "s")), a = /* @__PURE__ */ __name((t3, e3, n2) => {
            var r3 = new XMLHttpRequest();
            r3.open("GET", t3, true), r3.responseType = "arraybuffer", r3.onload = () => {
              200 == r3.status || 0 == r3.status && r3.response ? e3(r3.response) : n2();
            }, r3.onerror = n2, r3.send(null);
          }, "a"));
          var y, _ = e2.print || console.log.bind(console), v = e2.printErr || console.warn.bind(console);
          Object.assign(e2, p), p = null, e2.thisProgram && (f = e2.thisProgram), e2.quit && (d = e2.quit), e2.wasmBinary && (y = e2.wasmBinary);
          var w = e2.noExitRuntime || false;
          "object" != typeof WebAssembly && W("no native wasm support detected");
          var x, T, S, O, A, E, I = false, P = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
          function D(t3, e3, n2) {
            var r3 = (e3 >>>= 0) + n2;
            for (n2 = e3; t3[n2] && !(n2 >= r3); ) ++n2;
            if (16 < n2 - e3 && t3.buffer && P) return P.decode(t3.subarray(e3, n2));
            for (r3 = ""; e3 < n2; ) {
              var i2 = t3[e3++];
              if (128 & i2) {
                var o2 = 63 & t3[e3++];
                if (192 == (224 & i2)) r3 += String.fromCharCode((31 & i2) << 6 | o2);
                else {
                  var a2 = 63 & t3[e3++];
                  65536 > (i2 = 224 == (240 & i2) ? (15 & i2) << 12 | o2 << 6 | a2 : (7 & i2) << 18 | o2 << 12 | a2 << 6 | 63 & t3[e3++]) ? r3 += String.fromCharCode(i2) : (i2 -= 65536, r3 += String.fromCharCode(55296 | i2 >> 10, 56320 | 1023 & i2));
                }
              } else r3 += String.fromCharCode(i2);
            }
            return r3;
          }
          __name(D, "D");
          function $2(t3, e3) {
            return (t3 >>>= 0) ? D(O, t3, e3) : "";
          }
          __name($2, "$");
          function k(t3, e3, n2, r3) {
            if (!(0 < r3)) return 0;
            var i2 = n2 >>>= 0;
            r3 = n2 + r3 - 1;
            for (var o2 = 0; o2 < t3.length; ++o2) {
              var a2 = t3.charCodeAt(o2);
              if (55296 <= a2 && 57343 >= a2 && (a2 = 65536 + ((1023 & a2) << 10) | 1023 & t3.charCodeAt(++o2)), 127 >= a2) {
                if (n2 >= r3) break;
                e3[n2++ >>> 0] = a2;
              } else {
                if (2047 >= a2) {
                  if (n2 + 1 >= r3) break;
                  e3[n2++ >>> 0] = 192 | a2 >> 6;
                } else {
                  if (65535 >= a2) {
                    if (n2 + 2 >= r3) break;
                    e3[n2++ >>> 0] = 224 | a2 >> 12;
                  } else {
                    if (n2 + 3 >= r3) break;
                    e3[n2++ >>> 0] = 240 | a2 >> 18, e3[n2++ >>> 0] = 128 | a2 >> 12 & 63;
                  }
                  e3[n2++ >>> 0] = 128 | a2 >> 6 & 63;
                }
                e3[n2++ >>> 0] = 128 | 63 & a2;
              }
            }
            return e3[n2 >>> 0] = 0, n2 - i2;
          }
          __name(k, "k");
          function C(t3) {
            for (var e3 = 0, n2 = 0; n2 < t3.length; ++n2) {
              var r3 = t3.charCodeAt(n2);
              127 >= r3 ? e3++ : 2047 >= r3 ? e3 += 2 : 55296 <= r3 && 57343 >= r3 ? (e3 += 4, ++n2) : e3 += 3;
            }
            return e3;
          }
          __name(C, "C");
          function F() {
            var t3 = x.buffer;
            T = t3, e2.HEAP8 = S = new Int8Array(t3), e2.HEAP16 = new Int16Array(t3), e2.HEAP32 = A = new Int32Array(t3), e2.HEAPU8 = O = new Uint8Array(t3), e2.HEAPU16 = new Uint16Array(t3), e2.HEAPU32 = E = new Uint32Array(t3), e2.HEAPF32 = new Float32Array(t3), e2.HEAPF64 = new Float64Array(t3);
          }
          __name(F, "F");
          var N, L = [], R = [], j = [], M = [], U = 0;
          function V() {
            var t3 = e2.preRun.shift();
            L.unshift(t3);
          }
          __name(V, "V");
          var B, z = 0, G = null, H = null;
          function W(t3) {
            throw e2.onAbort && e2.onAbort(t3), v(t3 = "Aborted(" + t3 + ")"), I = true, t3 = new WebAssembly.RuntimeError(t3 + ". Build with -sASSERTIONS for more info."), i(t3), t3;
          }
          __name(W, "W");
          function q() {
            return B.startsWith("data:application/octet-stream;base64,");
          }
          __name(q, "q");
          if (B = "ort-wasm.wasm", !q()) {
            var X = B;
            B = e2.locateFile ? e2.locateFile(X, m) : m + X;
          }
          function Y() {
            var t3 = B;
            try {
              if (t3 == B && y) return new Uint8Array(y);
              if (s) return s(t3);
              throw "both async and sync fetching of the wasm failed";
            } catch (t4) {
              W(t4);
            }
          }
          __name(Y, "Y");
          function K(t3) {
            this.name = "ExitStatus", this.message = "Program terminated with exit(" + t3 + ")", this.status = t3;
          }
          __name(K, "K");
          function Z(t3) {
            for (; 0 < t3.length; ) t3.shift()(e2);
          }
          __name(Z, "Z");
          var J = [], Q = 0, tt = 0;
          function et(t3) {
            this.Db = t3, this.zb = t3 - 24, this.Ub = function(t4) {
              E[this.zb + 4 >> 2 >>> 0] = t4;
            }, this.Eb = function() {
              return E[this.zb + 4 >> 2 >>> 0];
            }, this.Sb = function(t4) {
              E[this.zb + 8 >> 2 >>> 0] = t4;
            }, this.Wb = function() {
              return E[this.zb + 8 >> 2 >>> 0];
            }, this.Tb = function() {
              A[this.zb >> 2 >>> 0] = 0;
            }, this.Ib = function(t4) {
              S[this.zb + 12 >> 0 >>> 0] = t4 ? 1 : 0;
            }, this.Pb = function() {
              return 0 != S[this.zb + 12 >> 0 >>> 0];
            }, this.Jb = function(t4) {
              S[this.zb + 13 >> 0 >>> 0] = t4 ? 1 : 0;
            }, this.Lb = function() {
              return 0 != S[this.zb + 13 >> 0 >>> 0];
            }, this.Rb = function(t4, e3) {
              this.Fb(0), this.Ub(t4), this.Sb(e3), this.Tb(), this.Ib(false), this.Jb(false);
            }, this.Nb = function() {
              A[this.zb >> 2 >>> 0] += 1;
            }, this.Xb = function() {
              var t4 = A[this.zb >> 2 >>> 0];
              return A[this.zb >> 2 >>> 0] = t4 - 1, 1 === t4;
            }, this.Fb = function(t4) {
              E[this.zb + 16 >> 2 >>> 0] = t4;
            }, this.Ob = function() {
              return E[this.zb + 16 >> 2 >>> 0];
            }, this.Qb = function() {
              if (Et(this.Eb())) return E[this.Db >> 2 >>> 0];
              var t4 = this.Ob();
              return 0 !== t4 ? t4 : this.Db;
            };
          }
          __name(et, "et");
          function nt(t3) {
            return _t(new et(t3).zb);
          }
          __name(nt, "nt");
          var rt = [];
          function it(t3) {
            var e3 = rt[t3];
            return e3 || (t3 >= rt.length && (rt.length = t3 + 1), rt[t3] = e3 = N.get(t3)), e3;
          }
          __name(it, "it");
          function ot(t3) {
            var e3 = C(t3) + 1, n2 = yt(e3);
            return n2 && k(t3, S, n2, e3), n2;
          }
          __name(ot, "ot");
          var at = {};
          function st() {
            if (!ut) {
              var t3, e3 = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: f || "./this.program" };
              for (t3 in at) void 0 === at[t3] ? delete e3[t3] : e3[t3] = at[t3];
              var n2 = [];
              for (t3 in e3) n2.push(t3 + "=" + e3[t3]);
              ut = n2;
            }
            return ut;
          }
          __name(st, "st");
          var ut, ct = [null, [], []];
          function lt2(t3, e3) {
            var n2 = ct[t3];
            0 === e3 || 10 === e3 ? ((1 === t3 ? _ : v)(D(n2, 0)), n2.length = 0) : n2.push(e3);
          }
          __name(lt2, "lt");
          var pt = 0;
          function ft(t3) {
            return 0 == t3 % 4 && (0 != t3 % 100 || 0 == t3 % 400);
          }
          __name(ft, "ft");
          var dt = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ht = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function gt2(t3, e3, n2, r3) {
            function i2(t4, e4, n3) {
              for (t4 = "number" == typeof t4 ? t4.toString() : t4 || ""; t4.length < e4; ) t4 = n3[0] + t4;
              return t4;
            }
            __name(i2, "i");
            function o2(t4, e4) {
              return i2(t4, e4, "0");
            }
            __name(o2, "o");
            function a2(t4, e4) {
              function n3(t5) {
                return 0 > t5 ? -1 : 0 < t5 ? 1 : 0;
              }
              __name(n3, "n");
              var r4;
              return 0 === (r4 = n3(t4.getFullYear() - e4.getFullYear())) && 0 === (r4 = n3(t4.getMonth() - e4.getMonth())) && (r4 = n3(t4.getDate() - e4.getDate())), r4;
            }
            __name(a2, "a");
            function s2(t4) {
              switch (t4.getDay()) {
                case 0:
                  return new Date(t4.getFullYear() - 1, 11, 29);
                case 1:
                  return t4;
                case 2:
                  return new Date(t4.getFullYear(), 0, 3);
                case 3:
                  return new Date(t4.getFullYear(), 0, 2);
                case 4:
                  return new Date(t4.getFullYear(), 0, 1);
                case 5:
                  return new Date(t4.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(t4.getFullYear() - 1, 11, 30);
              }
            }
            __name(s2, "s");
            function u2(t4) {
              var e4 = t4.Bb;
              for (t4 = new Date(new Date(t4.Cb + 1900, 0, 1).getTime()); 0 < e4; ) {
                var n3 = t4.getMonth(), r4 = (ft(t4.getFullYear()) ? dt : ht)[n3];
                if (!(e4 > r4 - t4.getDate())) {
                  t4.setDate(t4.getDate() + e4);
                  break;
                }
                e4 -= r4 - t4.getDate() + 1, t4.setDate(1), 11 > n3 ? t4.setMonth(n3 + 1) : (t4.setMonth(0), t4.setFullYear(t4.getFullYear() + 1));
              }
              return n3 = new Date(t4.getFullYear() + 1, 0, 4), e4 = s2(new Date(t4.getFullYear(), 0, 4)), n3 = s2(n3), 0 >= a2(e4, t4) ? 0 >= a2(n3, t4) ? t4.getFullYear() + 1 : t4.getFullYear() : t4.getFullYear() - 1;
            }
            __name(u2, "u");
            var c2 = A[r3 + 40 >> 2 >>> 0];
            for (var l2 in r3 = { $b: A[r3 >> 2 >>> 0], Zb: A[r3 + 4 >> 2 >>> 0], Gb: A[r3 + 8 >> 2 >>> 0], Kb: A[r3 + 12 >> 2 >>> 0], Hb: A[r3 + 16 >> 2 >>> 0], Cb: A[r3 + 20 >> 2 >>> 0], Ab: A[r3 + 24 >> 2 >>> 0], Bb: A[r3 + 28 >> 2 >>> 0], bc: A[r3 + 32 >> 2 >>> 0], Yb: A[r3 + 36 >> 2 >>> 0], ac: c2 ? $2(c2) : "" }, n2 = $2(n2), c2 = { "%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y" }) n2 = n2.replace(new RegExp(l2, "g"), c2[l2]);
            var p2 = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), f2 = "January February March April May June July August September October November December".split(" ");
            for (l2 in c2 = { "%a": /* @__PURE__ */ __name(function(t4) {
              return p2[t4.Ab].substring(0, 3);
            }, "%a"), "%A": /* @__PURE__ */ __name(function(t4) {
              return p2[t4.Ab];
            }, "%A"), "%b": /* @__PURE__ */ __name(function(t4) {
              return f2[t4.Hb].substring(0, 3);
            }, "%b"), "%B": /* @__PURE__ */ __name(function(t4) {
              return f2[t4.Hb];
            }, "%B"), "%C": /* @__PURE__ */ __name(function(t4) {
              return o2((t4.Cb + 1900) / 100 | 0, 2);
            }, "%C"), "%d": /* @__PURE__ */ __name(function(t4) {
              return o2(t4.Kb, 2);
            }, "%d"), "%e": /* @__PURE__ */ __name(function(t4) {
              return i2(t4.Kb, 2, " ");
            }, "%e"), "%g": /* @__PURE__ */ __name(function(t4) {
              return u2(t4).toString().substring(2);
            }, "%g"), "%G": /* @__PURE__ */ __name(function(t4) {
              return u2(t4);
            }, "%G"), "%H": /* @__PURE__ */ __name(function(t4) {
              return o2(t4.Gb, 2);
            }, "%H"), "%I": /* @__PURE__ */ __name(function(t4) {
              return 0 == (t4 = t4.Gb) ? t4 = 12 : 12 < t4 && (t4 -= 12), o2(t4, 2);
            }, "%I"), "%j": /* @__PURE__ */ __name(function(t4) {
              for (var e4 = 0, n3 = 0; n3 <= t4.Hb - 1; e4 += (ft(t4.Cb + 1900) ? dt : ht)[n3++]) ;
              return o2(t4.Kb + e4, 3);
            }, "%j"), "%m": /* @__PURE__ */ __name(function(t4) {
              return o2(t4.Hb + 1, 2);
            }, "%m"), "%M": /* @__PURE__ */ __name(function(t4) {
              return o2(t4.Zb, 2);
            }, "%M"), "%n": /* @__PURE__ */ __name(function() {
              return "\n";
            }, "%n"), "%p": /* @__PURE__ */ __name(function(t4) {
              return 0 <= t4.Gb && 12 > t4.Gb ? "AM" : "PM";
            }, "%p"), "%S": /* @__PURE__ */ __name(function(t4) {
              return o2(t4.$b, 2);
            }, "%S"), "%t": /* @__PURE__ */ __name(function() {
              return "	";
            }, "%t"), "%u": /* @__PURE__ */ __name(function(t4) {
              return t4.Ab || 7;
            }, "%u"), "%U": /* @__PURE__ */ __name(function(t4) {
              return o2(Math.floor((t4.Bb + 7 - t4.Ab) / 7), 2);
            }, "%U"), "%V": /* @__PURE__ */ __name(function(t4) {
              var e4 = Math.floor((t4.Bb + 7 - (t4.Ab + 6) % 7) / 7);
              if (2 >= (t4.Ab + 371 - t4.Bb - 2) % 7 && e4++, e4) 53 == e4 && (4 == (n3 = (t4.Ab + 371 - t4.Bb) % 7) || 3 == n3 && ft(t4.Cb) || (e4 = 1));
              else {
                e4 = 52;
                var n3 = (t4.Ab + 7 - t4.Bb - 1) % 7;
                (4 == n3 || 5 == n3 && ft(t4.Cb % 400 - 1)) && e4++;
              }
              return o2(e4, 2);
            }, "%V"), "%w": /* @__PURE__ */ __name(function(t4) {
              return t4.Ab;
            }, "%w"), "%W": /* @__PURE__ */ __name(function(t4) {
              return o2(Math.floor((t4.Bb + 7 - (t4.Ab + 6) % 7) / 7), 2);
            }, "%W"), "%y": /* @__PURE__ */ __name(function(t4) {
              return (t4.Cb + 1900).toString().substring(2);
            }, "%y"), "%Y": /* @__PURE__ */ __name(function(t4) {
              return t4.Cb + 1900;
            }, "%Y"), "%z": /* @__PURE__ */ __name(function(t4) {
              var e4 = 0 <= (t4 = t4.Yb);
              return t4 = Math.abs(t4) / 60, (e4 ? "+" : "-") + String("0000" + (t4 / 60 * 100 + t4 % 60)).slice(-4);
            }, "%z"), "%Z": /* @__PURE__ */ __name(function(t4) {
              return t4.ac;
            }, "%Z"), "%%": /* @__PURE__ */ __name(function() {
              return "%";
            }, "%%") }, n2 = n2.replace(/%%/g, "\0\0"), c2) n2.includes(l2) && (n2 = n2.replace(new RegExp(l2, "g"), c2[l2](r3)));
            return l2 = function(t4) {
              var e4 = Array(C(t4) + 1);
              return k(t4, e4, 0, e4.length), e4;
            }(n2 = n2.replace(/\0\0/g, "%")), l2.length > e3 ? 0 : (S.set(l2, t3 >>> 0), l2.length - 1);
          }
          __name(gt2, "gt");
          var bt = { a: /* @__PURE__ */ __name(function(t3) {
            return yt(t3 + 24) + 24;
          }, "a"), m: /* @__PURE__ */ __name(function(t3) {
            return (t3 = new et(t3)).Pb() || (t3.Ib(true), Q--), t3.Jb(false), J.push(t3), t3.Nb(), t3.Qb();
          }, "m"), ia: /* @__PURE__ */ __name(function(t3) {
            throw v("Unexpected exception thrown, this is not properly supported - aborting"), I = true, t3;
          }, "ia"), w: /* @__PURE__ */ __name(function() {
            xt(0);
            var t3 = J.pop();
            if (t3.Xb() && !t3.Lb()) {
              var e3 = t3.Wb();
              e3 && it(e3)(t3.Db), nt(t3.Db);
            }
            tt = 0;
          }, "w"), d: /* @__PURE__ */ __name(function() {
            var t3 = tt;
            if (!t3) return pt = 0;
            var e3 = new et(t3);
            e3.Fb(t3);
            var n2 = e3.Eb();
            if (!n2) return pt = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (At(o2, n2, e3.zb + 16)) return pt = o2, t3;
            }
            return pt = n2, t3;
          }, "d"), k: /* @__PURE__ */ __name(function() {
            var t3 = tt;
            if (!t3) return pt = 0;
            var e3 = new et(t3);
            e3.Fb(t3);
            var n2 = e3.Eb();
            if (!n2) return pt = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (At(o2, n2, e3.zb + 16)) return pt = o2, t3;
            }
            return pt = n2, t3;
          }, "k"), g: /* @__PURE__ */ __name(function() {
            var t3 = tt;
            if (!t3) return pt = 0;
            var e3 = new et(t3);
            e3.Fb(t3);
            var n2 = e3.Eb();
            if (!n2) return pt = 0, t3;
            for (var r3 = Array.prototype.slice.call(arguments), i2 = 0; i2 < r3.length; i2++) {
              var o2 = r3[i2];
              if (0 === o2 || o2 === n2) break;
              if (At(o2, n2, e3.zb + 16)) return pt = o2, t3;
            }
            return pt = n2, t3;
          }, "g"), s: nt, L: /* @__PURE__ */ __name(function() {
            var t3 = J.pop();
            t3 || W("no exception to throw");
            var e3 = t3.Db;
            throw t3.Lb() || (J.push(t3), t3.Jb(true), t3.Ib(false), Q++), tt = e3, e3;
          }, "L"), b: /* @__PURE__ */ __name(function(t3, e3, n2) {
            throw new et(t3).Rb(e3, n2), tt = t3, Q++, t3;
          }, "b"), la: /* @__PURE__ */ __name(function() {
            return Q;
          }, "la"), i: /* @__PURE__ */ __name(function(t3) {
            throw tt || (tt = t3), t3;
          }, "i"), H: /* @__PURE__ */ __name(function() {
            return 0;
          }, "H"), Ba: /* @__PURE__ */ __name(function() {
          }, "Ba"), pa: /* @__PURE__ */ __name(function() {
          }, "pa"), ra: /* @__PURE__ */ __name(function() {
          }, "ra"), ka: /* @__PURE__ */ __name(function() {
            return 0;
          }, "ka"), za: /* @__PURE__ */ __name(function() {
          }, "za"), ua: /* @__PURE__ */ __name(function() {
          }, "ua"), ya: /* @__PURE__ */ __name(function() {
          }, "ya"), R: /* @__PURE__ */ __name(function() {
          }, "R"), qa: /* @__PURE__ */ __name(function() {
          }, "qa"), na: /* @__PURE__ */ __name(function() {
          }, "na"), Aa: /* @__PURE__ */ __name(function() {
          }, "Aa"), oa: /* @__PURE__ */ __name(function() {
          }, "oa"), Ha: /* @__PURE__ */ __name(function() {
          }, "Ha"), Ja: /* @__PURE__ */ __name(function() {
            W("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, "Ja"), Ia: /* @__PURE__ */ __name(function() {
            W("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, "Ia"), S: /* @__PURE__ */ __name(function() {
            return Date.now();
          }, "S"), Ca: /* @__PURE__ */ __name(function() {
            return true;
          }, "Ca"), Da: /* @__PURE__ */ __name(function(t3, e3) {
            t3 = new Date(1e3 * (E[t3 >>> 2] + 4294967296 * A[t3 + 4 >>> 2])), A[e3 >> 2 >>> 0] = t3.getUTCSeconds(), A[e3 + 4 >> 2 >>> 0] = t3.getUTCMinutes(), A[e3 + 8 >> 2 >>> 0] = t3.getUTCHours(), A[e3 + 12 >> 2 >>> 0] = t3.getUTCDate(), A[e3 + 16 >> 2 >>> 0] = t3.getUTCMonth(), A[e3 + 20 >> 2 >>> 0] = t3.getUTCFullYear() - 1900, A[e3 + 24 >> 2 >>> 0] = t3.getUTCDay(), A[e3 + 28 >> 2 >>> 0] = (t3.getTime() - Date.UTC(t3.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          }, "Da"), Ea: /* @__PURE__ */ __name(function(t3, e3) {
            t3 = new Date(1e3 * (E[t3 >>> 2] + 4294967296 * A[t3 + 4 >>> 2])), A[e3 >> 2 >>> 0] = t3.getSeconds(), A[e3 + 4 >> 2 >>> 0] = t3.getMinutes(), A[e3 + 8 >> 2 >>> 0] = t3.getHours(), A[e3 + 12 >> 2 >>> 0] = t3.getDate(), A[e3 + 16 >> 2 >>> 0] = t3.getMonth(), A[e3 + 20 >> 2 >>> 0] = t3.getFullYear() - 1900, A[e3 + 24 >> 2 >>> 0] = t3.getDay();
            var n2 = new Date(t3.getFullYear(), 0, 1);
            A[e3 + 28 >> 2 >>> 0] = (t3.getTime() - n2.getTime()) / 864e5 | 0, A[e3 + 36 >> 2 >>> 0] = -60 * t3.getTimezoneOffset();
            var r3 = new Date(t3.getFullYear(), 6, 1).getTimezoneOffset();
            n2 = n2.getTimezoneOffset(), A[e3 + 32 >> 2 >>> 0] = 0 | (r3 != n2 && t3.getTimezoneOffset() == Math.min(n2, r3));
          }, "Ea"), Fa: /* @__PURE__ */ __name(function(t3) {
            var e3 = new Date(A[t3 + 20 >> 2 >>> 0] + 1900, A[t3 + 16 >> 2 >>> 0], A[t3 + 12 >> 2 >>> 0], A[t3 + 8 >> 2 >>> 0], A[t3 + 4 >> 2 >>> 0], A[t3 >> 2 >>> 0], 0), n2 = A[t3 + 32 >> 2 >>> 0], r3 = e3.getTimezoneOffset(), i2 = new Date(e3.getFullYear(), 0, 1), o2 = new Date(e3.getFullYear(), 6, 1).getTimezoneOffset(), a2 = i2.getTimezoneOffset(), s2 = Math.min(a2, o2);
            return 0 > n2 ? A[t3 + 32 >> 2 >>> 0] = Number(o2 != a2 && s2 == r3) : 0 < n2 != (s2 == r3) && (o2 = Math.max(a2, o2), e3.setTime(e3.getTime() + 6e4 * ((0 < n2 ? s2 : o2) - r3))), A[t3 + 24 >> 2 >>> 0] = e3.getDay(), A[t3 + 28 >> 2 >>> 0] = (e3.getTime() - i2.getTime()) / 864e5 | 0, A[t3 >> 2 >>> 0] = e3.getSeconds(), A[t3 + 4 >> 2 >>> 0] = e3.getMinutes(), A[t3 + 8 >> 2 >>> 0] = e3.getHours(), A[t3 + 12 >> 2 >>> 0] = e3.getDate(), A[t3 + 16 >> 2 >>> 0] = e3.getMonth(), e3.getTime() / 1e3 | 0;
          }, "Fa"), sa: /* @__PURE__ */ __name(function() {
            return -52;
          }, "sa"), ta: /* @__PURE__ */ __name(function() {
          }, "ta"), Ga: /* @__PURE__ */ __name(function t3(e3, n2, r3) {
            t3.Vb || (t3.Vb = true, function(t4, e4, n3) {
              function r4(t5) {
                return (t5 = t5.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? t5[1] : "GMT";
              }
              __name(r4, "r");
              var i2 = (/* @__PURE__ */ new Date()).getFullYear(), o2 = new Date(i2, 0, 1), a2 = new Date(i2, 6, 1);
              i2 = o2.getTimezoneOffset();
              var s2 = a2.getTimezoneOffset();
              A[t4 >> 2 >>> 0] = 60 * Math.max(i2, s2), A[e4 >> 2 >>> 0] = Number(i2 != s2), t4 = r4(o2), e4 = r4(a2), t4 = ot(t4), e4 = ot(e4), s2 < i2 ? (E[n3 >> 2 >>> 0] = t4, E[n3 + 4 >> 2 >>> 0] = e4) : (E[n3 >> 2 >>> 0] = e4, E[n3 + 4 >> 2 >>> 0] = t4);
            }(e3, n2, r3));
          }, "t"), B: /* @__PURE__ */ __name(function() {
            W("");
          }, "B"), ma: /* @__PURE__ */ __name(function() {
            return 4294901760;
          }, "ma"), I: b ? () => {
            var t3 = process.hrtime();
            return 1e3 * t3[0] + t3[1] / 1e6;
          } : () => performance.now(), xa: /* @__PURE__ */ __name(function(t3, e3, n2) {
            O.copyWithin(t3 >>> 0, e3 >>> 0, e3 + n2 >>> 0);
          }, "xa"), G: /* @__PURE__ */ __name(function(t3) {
            var e3 = O.length;
            if (4294901760 < (t3 >>>= 0)) return false;
            for (var n2 = 1; 4 >= n2; n2 *= 2) {
              var r3 = e3 * (1 + 0.2 / n2);
              r3 = Math.min(r3, t3 + 100663296);
              var i2 = Math;
              r3 = Math.max(t3, r3), i2 = i2.min.call(i2, 4294901760, r3 + (65536 - r3 % 65536) % 65536);
              t: {
                try {
                  x.grow(i2 - T.byteLength + 65535 >>> 16), F();
                  var o2 = 1;
                  break t;
                } catch (t4) {
                }
                o2 = void 0;
              }
              if (o2) return true;
            }
            return false;
          }, "G"), va: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = 0;
            return st().forEach(function(r3, i2) {
              var o2 = e3 + n2;
              for (i2 = E[t3 + 4 * i2 >> 2 >>> 0] = o2, o2 = 0; o2 < r3.length; ++o2) S[i2++ >> 0 >>> 0] = r3.charCodeAt(o2);
              S[i2 >> 0 >>> 0] = 0, n2 += r3.length + 1;
            }), 0;
          }, "va"), wa: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = st();
            E[t3 >> 2 >>> 0] = n2.length;
            var r3 = 0;
            return n2.forEach(function(t4) {
              r3 += t4.length + 1;
            }), E[e3 >> 2 >>> 0] = r3, 0;
          }, "wa"), ba: /* @__PURE__ */ __name(function(t3) {
            w || 0 < U || (wt(), Z(j), vt(0), ct[1].length && lt2(1, 10), ct[2].length && lt2(2, 10)), w || 0 < U || (e2.onExit && e2.onExit(t3), I = true), d(t3, new K(t3));
          }, "ba"), E: /* @__PURE__ */ __name(function() {
            return 52;
          }, "E"), Q: /* @__PURE__ */ __name(function() {
            return 52;
          }, "Q"), ca: /* @__PURE__ */ __name(function() {
            return 70;
          }, "ca"), P: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            for (var i2 = 0, o2 = 0; o2 < n2; o2++) {
              var a2 = E[e3 >> 2 >>> 0], s2 = E[e3 + 4 >> 2 >>> 0];
              e3 += 8;
              for (var u2 = 0; u2 < s2; u2++) lt2(t3, O[a2 + u2 >>> 0]);
              i2 += s2;
            }
            return E[r3 >> 2 >>> 0] = i2, 0;
          }, "P"), c: /* @__PURE__ */ __name(function() {
            return pt;
          }, "c"), ja: /* @__PURE__ */ __name(function t3(e3, r3) {
            t3.Mb || (t3.Mb = function() {
              if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues) {
                var t4 = new Uint8Array(1);
                return () => (crypto.getRandomValues(t4), t4[0]);
              }
              if (b) try {
                var e4 = n(Object(function() {
                  var t5 = new Error("Cannot find module 'crypto'");
                  throw t5.code = "MODULE_NOT_FOUND", t5;
                }()));
                return () => e4.randomBytes(1)[0];
              } catch (t5) {
              }
              return () => W("randomDevice");
            }());
            for (var i2 = 0; i2 < r3; i2++) S[e3 + i2 >> 0 >>> 0] = t3.Mb();
            return 0;
          }, "t"), ea: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "ea"), fa: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "fa"), J: /* @__PURE__ */ __name(function(t3) {
            var e3 = Tt();
            try {
              return it(t3)();
            } catch (t4) {
              if (St(e3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "J"), e: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Tt();
            try {
              return it(t3)(e3);
            } catch (t4) {
              if (St(n2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "e"), N: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "N"), O: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "O"), j: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "j"), o: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Tt();
            try {
              return it(t3)(e3, n2, r3);
            } catch (t4) {
              if (St(i2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "o"), p: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2);
            } catch (t4) {
              if (St(o2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "p"), M: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (St(a2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "M"), r: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (St(a2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "r"), v: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (St(s2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "v"), K: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (St(u2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "K"), D: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2) {
            var f2 = Tt();
            try {
              return it(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2);
            } catch (t4) {
              if (St(f2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "D"), X: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Tt();
            try {
              return Lt(t3, e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (St(u2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "X"), V: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Tt();
            try {
              return Pt(t3, e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (St(s2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "V"), U: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Tt();
            try {
              return Rt(t3, e3, n2, r3, i2);
            } catch (t4) {
              if (St(o2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "U"), Z: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Tt();
            try {
              return Ft(t3, e3, n2, r3);
            } catch (t4) {
              if (St(i2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "Z"), W: /* @__PURE__ */ __name(function(t3) {
            var e3 = Tt();
            try {
              return It(t3);
            } catch (t4) {
              if (St(e3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "W"), Y: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Tt();
            try {
              return Nt(t3, e3);
            } catch (t4) {
              if (St(n2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "Y"), T: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              return Dt(t3, e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "T"), f: /* @__PURE__ */ __name(function(t3) {
            var e3 = Tt();
            try {
              it(t3)();
            } catch (t4) {
              if (St(e3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "f"), q: /* @__PURE__ */ __name(function(t3, e3) {
            var n2 = Tt();
            try {
              it(t3)(e3);
            } catch (t4) {
              if (St(n2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "q"), h: /* @__PURE__ */ __name(function(t3, e3, n2) {
            var r3 = Tt();
            try {
              it(t3)(e3, n2);
            } catch (t4) {
              if (St(r3), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "h"), da: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Tt();
            try {
              it(t3)(e3, n2, r3);
            } catch (t4) {
              if (St(i2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "da"), l: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            var i2 = Tt();
            try {
              it(t3)(e3, n2, r3);
            } catch (t4) {
              if (St(i2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "l"), t: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2) {
            var o2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2);
            } catch (t4) {
              if (St(o2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "t"), u: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2);
            } catch (t4) {
              if (St(a2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "u"), x: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2) {
            var s2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2, a2);
            } catch (t4) {
              if (St(s2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "x"), z: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (St(u2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "z"), ga: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2) {
            var c2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2, a2, s2, u2);
            } catch (t4) {
              if (St(c2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "ga"), A: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2) {
            var p2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2);
            } catch (t4) {
              if (St(p2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "A"), C: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2, f2, d2, h2, g2) {
            var b2 = Tt();
            try {
              it(t3)(e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2, f2, d2, h2, g2);
            } catch (t4) {
              if (St(b2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "C"), aa: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2) {
            var u2 = Tt();
            try {
              $t(t3, e3, n2, r3, i2, o2, a2, s2);
            } catch (t4) {
              if (St(u2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "aa"), _: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2) {
            var f2 = Tt();
            try {
              Ct(t3, e3, n2, r3, i2, o2, a2, s2, u2, c2, l2, p2);
            } catch (t4) {
              if (St(f2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "_"), $: /* @__PURE__ */ __name(function(t3, e3, n2, r3, i2, o2) {
            var a2 = Tt();
            try {
              kt(t3, e3, n2, r3, i2, o2);
            } catch (t4) {
              if (St(a2), t4 !== t4 + 0) throw t4;
              xt(1, 0);
            }
          }, "$"), n: /* @__PURE__ */ __name(function(t3) {
            return t3;
          }, "n"), F: /* @__PURE__ */ __name(function(t3) {
            pt = t3;
          }, "F"), ha: gt2, y: /* @__PURE__ */ __name(function(t3, e3, n2, r3) {
            return gt2(t3, e3, n2, r3);
          }, "y") };
          !function() {
            function t3(t4) {
              e2.asm = t4.exports, x = e2.asm.Ka, F(), N = e2.asm.ib, R.unshift(e2.asm.La), z--, e2.monitorRunDependencies && e2.monitorRunDependencies(z), 0 == z && (null !== G && (clearInterval(G), G = null), H && (t4 = H, H = null, t4()));
            }
            __name(t3, "t");
            function n2(e3) {
              t3(e3.instance);
            }
            __name(n2, "n");
            function r3(t4) {
              return function() {
                if (!y && (h || g)) {
                  if ("function" == typeof fetch && !B.startsWith("file://")) return fetch(B, { credentials: "same-origin" }).then(function(t5) {
                    if (!t5.ok) throw "failed to load wasm binary file at '" + B + "'";
                    return t5.arrayBuffer();
                  }).catch(function() {
                    return Y();
                  });
                  if (a) return new Promise(function(t5, e3) {
                    a(B, function(e4) {
                      t5(new Uint8Array(e4));
                    }, e3);
                  });
                }
                return Promise.resolve().then(function() {
                  return Y();
                });
              }().then(function(t5) {
                return WebAssembly.instantiate(t5, o2);
              }).then(function(t5) {
                return t5;
              }).then(t4, function(t5) {
                v("failed to asynchronously prepare wasm: " + t5), W(t5);
              });
            }
            __name(r3, "r");
            var o2 = { a: bt };
            if (z++, e2.monitorRunDependencies && e2.monitorRunDependencies(z), e2.instantiateWasm) try {
              return e2.instantiateWasm(o2, t3);
            } catch (t4) {
              return v("Module.instantiateWasm callback failed with error: " + t4), false;
            }
            (y || "function" != typeof WebAssembly.instantiateStreaming || q() || B.startsWith("file://") || b || "function" != typeof fetch ? r3(n2) : fetch(B, { credentials: "same-origin" }).then(function(t4) {
              return WebAssembly.instantiateStreaming(t4, o2).then(n2, function(t5) {
                return v("wasm streaming compile failed: " + t5), v("falling back to ArrayBuffer instantiation"), r3(n2);
              });
            })).catch(i);
          }(), e2.___wasm_call_ctors = function() {
            return (e2.___wasm_call_ctors = e2.asm.La).apply(null, arguments);
          }, e2._OrtInit = function() {
            return (e2._OrtInit = e2.asm.Ma).apply(null, arguments);
          }, e2._OrtCreateSessionOptions = function() {
            return (e2._OrtCreateSessionOptions = e2.asm.Na).apply(null, arguments);
          }, e2._OrtAppendExecutionProvider = function() {
            return (e2._OrtAppendExecutionProvider = e2.asm.Oa).apply(null, arguments);
          }, e2._OrtAddSessionConfigEntry = function() {
            return (e2._OrtAddSessionConfigEntry = e2.asm.Pa).apply(null, arguments);
          }, e2._OrtReleaseSessionOptions = function() {
            return (e2._OrtReleaseSessionOptions = e2.asm.Qa).apply(null, arguments);
          }, e2._OrtCreateSession = function() {
            return (e2._OrtCreateSession = e2.asm.Ra).apply(null, arguments);
          }, e2._OrtReleaseSession = function() {
            return (e2._OrtReleaseSession = e2.asm.Sa).apply(null, arguments);
          }, e2._OrtGetInputCount = function() {
            return (e2._OrtGetInputCount = e2.asm.Ta).apply(null, arguments);
          }, e2._OrtGetOutputCount = function() {
            return (e2._OrtGetOutputCount = e2.asm.Ua).apply(null, arguments);
          }, e2._OrtGetInputName = function() {
            return (e2._OrtGetInputName = e2.asm.Va).apply(null, arguments);
          }, e2._OrtGetOutputName = function() {
            return (e2._OrtGetOutputName = e2.asm.Wa).apply(null, arguments);
          }, e2._OrtFree = function() {
            return (e2._OrtFree = e2.asm.Xa).apply(null, arguments);
          }, e2._OrtCreateTensor = function() {
            return (e2._OrtCreateTensor = e2.asm.Ya).apply(null, arguments);
          }, e2._OrtGetTensorData = function() {
            return (e2._OrtGetTensorData = e2.asm.Za).apply(null, arguments);
          }, e2._OrtReleaseTensor = function() {
            return (e2._OrtReleaseTensor = e2.asm._a).apply(null, arguments);
          }, e2._OrtCreateRunOptions = function() {
            return (e2._OrtCreateRunOptions = e2.asm.$a).apply(null, arguments);
          }, e2._OrtAddRunConfigEntry = function() {
            return (e2._OrtAddRunConfigEntry = e2.asm.ab).apply(null, arguments);
          }, e2._OrtReleaseRunOptions = function() {
            return (e2._OrtReleaseRunOptions = e2.asm.bb).apply(null, arguments);
          }, e2._OrtRun = function() {
            return (e2._OrtRun = e2.asm.cb).apply(null, arguments);
          }, e2._OrtEndProfiling = function() {
            return (e2._OrtEndProfiling = e2.asm.db).apply(null, arguments);
          };
          var mt, yt = e2._malloc = function() {
            return (yt = e2._malloc = e2.asm.eb).apply(null, arguments);
          }, _t = e2._free = function() {
            return (_t = e2._free = e2.asm.fb).apply(null, arguments);
          }, vt = e2._fflush = function() {
            return (vt = e2._fflush = e2.asm.gb).apply(null, arguments);
          }, wt = e2.___funcs_on_exit = function() {
            return (wt = e2.___funcs_on_exit = e2.asm.hb).apply(null, arguments);
          }, xt = e2._setThrew = function() {
            return (xt = e2._setThrew = e2.asm.jb).apply(null, arguments);
          }, Tt = e2.stackSave = function() {
            return (Tt = e2.stackSave = e2.asm.kb).apply(null, arguments);
          }, St = e2.stackRestore = function() {
            return (St = e2.stackRestore = e2.asm.lb).apply(null, arguments);
          }, Ot = e2.stackAlloc = function() {
            return (Ot = e2.stackAlloc = e2.asm.mb).apply(null, arguments);
          }, At = e2.___cxa_can_catch = function() {
            return (At = e2.___cxa_can_catch = e2.asm.nb).apply(null, arguments);
          }, Et = e2.___cxa_is_pointer_type = function() {
            return (Et = e2.___cxa_is_pointer_type = e2.asm.ob).apply(null, arguments);
          }, It = e2.dynCall_j = function() {
            return (It = e2.dynCall_j = e2.asm.pb).apply(null, arguments);
          }, Pt = e2.dynCall_iiiiij = function() {
            return (Pt = e2.dynCall_iiiiij = e2.asm.qb).apply(null, arguments);
          }, Dt = e2.dynCall_jii = function() {
            return (Dt = e2.dynCall_jii = e2.asm.rb).apply(null, arguments);
          }, $t = e2.dynCall_viiiiij = function() {
            return ($t = e2.dynCall_viiiiij = e2.asm.sb).apply(null, arguments);
          }, kt = e2.dynCall_vjji = function() {
            return (kt = e2.dynCall_vjji = e2.asm.tb).apply(null, arguments);
          }, Ct = e2.dynCall_viiijjjii = function() {
            return (Ct = e2.dynCall_viiijjjii = e2.asm.ub).apply(null, arguments);
          }, Ft = e2.dynCall_iij = function() {
            return (Ft = e2.dynCall_iij = e2.asm.vb).apply(null, arguments);
          }, Nt = e2.dynCall_ji = function() {
            return (Nt = e2.dynCall_ji = e2.asm.wb).apply(null, arguments);
          }, Lt = e2.dynCall_iiiiiij = function() {
            return (Lt = e2.dynCall_iiiiiij = e2.asm.xb).apply(null, arguments);
          }, Rt = e2.dynCall_iiij = function() {
            return (Rt = e2.dynCall_iiij = e2.asm.yb).apply(null, arguments);
          };
          function jt() {
            function t3() {
              if (!mt && (mt = true, e2.calledRun = true, !I)) {
                if (Z(R), r2(e2), e2.onRuntimeInitialized && e2.onRuntimeInitialized(), e2.postRun) for ("function" == typeof e2.postRun && (e2.postRun = [e2.postRun]); e2.postRun.length; ) {
                  var t4 = e2.postRun.shift();
                  M.unshift(t4);
                }
                Z(M);
              }
            }
            __name(t3, "t");
            if (!(0 < z)) {
              if (e2.preRun) for ("function" == typeof e2.preRun && (e2.preRun = [e2.preRun]); e2.preRun.length; ) V();
              Z(L), 0 < z || (e2.setStatus ? (e2.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  e2.setStatus("");
                }, 1), t3();
              }, 1)) : t3());
            }
          }
          __name(jt, "jt");
          if (e2.UTF8ToString = $2, e2.stringToUTF8 = function(t3, e3, n2) {
            return k(t3, O, e3, n2);
          }, e2.lengthBytesUTF8 = C, e2.stackSave = Tt, e2.stackRestore = St, e2.stackAlloc = Ot, H = /* @__PURE__ */ __name(function t3() {
            mt || jt(), mt || (H = t3);
          }, "t"), e2.preInit) for ("function" == typeof e2.preInit && (e2.preInit = [e2.preInit]); 0 < e2.preInit.length; ) e2.preInit.pop()();
          return jt(), t2.ready;
        });
        t.exports = r;
      }, 4537: (t) => {
        "use strict";
        t.exports = function(t2, e) {
          for (var n = new Array(arguments.length - 1), r = 0, i = 2, o = true; i < arguments.length; ) n[r++] = arguments[i++];
          return new Promise(function(i2, a) {
            n[r] = function(t3) {
              if (o) if (o = false, t3) a(t3);
              else {
                for (var e2 = new Array(arguments.length - 1), n2 = 0; n2 < e2.length; ) e2[n2++] = arguments[n2];
                i2.apply(null, e2);
              }
            };
            try {
              t2.apply(e || null, n);
            } catch (t3) {
              o && (o = false, a(t3));
            }
          });
        };
      }, 7419: (t, e) => {
        "use strict";
        var n = e;
        n.length = function(t2) {
          var e2 = t2.length;
          if (!e2) return 0;
          for (var n2 = 0; --e2 % 4 > 1 && "=" === t2.charAt(e2); ) ++n2;
          return Math.ceil(3 * t2.length) / 4 - n2;
        };
        for (var r = new Array(64), i = new Array(123), o = 0; o < 64; ) i[r[o] = o < 26 ? o + 65 : o < 52 ? o + 71 : o < 62 ? o - 4 : o - 59 | 43] = o++;
        n.encode = function(t2, e2, n2) {
          for (var i2, o2 = null, a2 = [], s = 0, u = 0; e2 < n2; ) {
            var c = t2[e2++];
            switch (u) {
              case 0:
                a2[s++] = r[c >> 2], i2 = (3 & c) << 4, u = 1;
                break;
              case 1:
                a2[s++] = r[i2 | c >> 4], i2 = (15 & c) << 2, u = 2;
                break;
              case 2:
                a2[s++] = r[i2 | c >> 6], a2[s++] = r[63 & c], u = 0;
            }
            s > 8191 && ((o2 || (o2 = [])).push(String.fromCharCode.apply(String, a2)), s = 0);
          }
          return u && (a2[s++] = r[i2], a2[s++] = 61, 1 === u && (a2[s++] = 61)), o2 ? (s && o2.push(String.fromCharCode.apply(String, a2.slice(0, s))), o2.join("")) : String.fromCharCode.apply(String, a2.slice(0, s));
        };
        var a = "invalid encoding";
        n.decode = function(t2, e2, n2) {
          for (var r2, o2 = n2, s = 0, u = 0; u < t2.length; ) {
            var c = t2.charCodeAt(u++);
            if (61 === c && s > 1) break;
            if (void 0 === (c = i[c])) throw Error(a);
            switch (s) {
              case 0:
                r2 = c, s = 1;
                break;
              case 1:
                e2[n2++] = r2 << 2 | (48 & c) >> 4, r2 = c, s = 2;
                break;
              case 2:
                e2[n2++] = (15 & r2) << 4 | (60 & c) >> 2, r2 = c, s = 3;
                break;
              case 3:
                e2[n2++] = (3 & r2) << 6 | c, s = 0;
            }
          }
          if (1 === s) throw Error(a);
          return n2 - o2;
        }, n.test = function(t2) {
          return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t2);
        };
      }, 9211: (t) => {
        "use strict";
        function e() {
          this._listeners = {};
        }
        __name(e, "e");
        t.exports = e, e.prototype.on = function(t2, e2, n) {
          return (this._listeners[t2] || (this._listeners[t2] = [])).push({ fn: e2, ctx: n || this }), this;
        }, e.prototype.off = function(t2, e2) {
          if (void 0 === t2) this._listeners = {};
          else if (void 0 === e2) this._listeners[t2] = [];
          else for (var n = this._listeners[t2], r = 0; r < n.length; ) n[r].fn === e2 ? n.splice(r, 1) : ++r;
          return this;
        }, e.prototype.emit = function(t2) {
          var e2 = this._listeners[t2];
          if (e2) {
            for (var n = [], r = 1; r < arguments.length; ) n.push(arguments[r++]);
            for (r = 0; r < e2.length; ) e2[r].fn.apply(e2[r++].ctx, n);
          }
          return this;
        };
      }, 945: (t) => {
        "use strict";
        function e(t2) {
          return "undefined" != typeof Float32Array ? function() {
            var e2 = new Float32Array([-0]), n2 = new Uint8Array(e2.buffer), r2 = 128 === n2[3];
            function i2(t3, r3, i3) {
              e2[0] = t3, r3[i3] = n2[0], r3[i3 + 1] = n2[1], r3[i3 + 2] = n2[2], r3[i3 + 3] = n2[3];
            }
            __name(i2, "i");
            function o2(t3, r3, i3) {
              e2[0] = t3, r3[i3] = n2[3], r3[i3 + 1] = n2[2], r3[i3 + 2] = n2[1], r3[i3 + 3] = n2[0];
            }
            __name(o2, "o");
            function a(t3, r3) {
              return n2[0] = t3[r3], n2[1] = t3[r3 + 1], n2[2] = t3[r3 + 2], n2[3] = t3[r3 + 3], e2[0];
            }
            __name(a, "a");
            function s(t3, r3) {
              return n2[3] = t3[r3], n2[2] = t3[r3 + 1], n2[1] = t3[r3 + 2], n2[0] = t3[r3 + 3], e2[0];
            }
            __name(s, "s");
            t2.writeFloatLE = r2 ? i2 : o2, t2.writeFloatBE = r2 ? o2 : i2, t2.readFloatLE = r2 ? a : s, t2.readFloatBE = r2 ? s : a;
          }() : function() {
            function e2(t3, e3, n2, r2) {
              var i2 = e3 < 0 ? 1 : 0;
              if (i2 && (e3 = -e3), 0 === e3) t3(1 / e3 > 0 ? 0 : 2147483648, n2, r2);
              else if (isNaN(e3)) t3(2143289344, n2, r2);
              else if (e3 > 34028234663852886e22) t3((i2 << 31 | 2139095040) >>> 0, n2, r2);
              else if (e3 < 11754943508222875e-54) t3((i2 << 31 | Math.round(e3 / 1401298464324817e-60)) >>> 0, n2, r2);
              else {
                var o2 = Math.floor(Math.log(e3) / Math.LN2);
                t3((i2 << 31 | o2 + 127 << 23 | 8388607 & Math.round(e3 * Math.pow(2, -o2) * 8388608)) >>> 0, n2, r2);
              }
            }
            __name(e2, "e");
            function a(t3, e3, n2) {
              var r2 = t3(e3, n2), i2 = 2 * (r2 >> 31) + 1, o2 = r2 >>> 23 & 255, a2 = 8388607 & r2;
              return 255 === o2 ? a2 ? NaN : i2 * (1 / 0) : 0 === o2 ? 1401298464324817e-60 * i2 * a2 : i2 * Math.pow(2, o2 - 150) * (a2 + 8388608);
            }
            __name(a, "a");
            t2.writeFloatLE = e2.bind(null, n), t2.writeFloatBE = e2.bind(null, r), t2.readFloatLE = a.bind(null, i), t2.readFloatBE = a.bind(null, o);
          }(), "undefined" != typeof Float64Array ? function() {
            var e2 = new Float64Array([-0]), n2 = new Uint8Array(e2.buffer), r2 = 128 === n2[7];
            function i2(t3, r3, i3) {
              e2[0] = t3, r3[i3] = n2[0], r3[i3 + 1] = n2[1], r3[i3 + 2] = n2[2], r3[i3 + 3] = n2[3], r3[i3 + 4] = n2[4], r3[i3 + 5] = n2[5], r3[i3 + 6] = n2[6], r3[i3 + 7] = n2[7];
            }
            __name(i2, "i");
            function o2(t3, r3, i3) {
              e2[0] = t3, r3[i3] = n2[7], r3[i3 + 1] = n2[6], r3[i3 + 2] = n2[5], r3[i3 + 3] = n2[4], r3[i3 + 4] = n2[3], r3[i3 + 5] = n2[2], r3[i3 + 6] = n2[1], r3[i3 + 7] = n2[0];
            }
            __name(o2, "o");
            function a(t3, r3) {
              return n2[0] = t3[r3], n2[1] = t3[r3 + 1], n2[2] = t3[r3 + 2], n2[3] = t3[r3 + 3], n2[4] = t3[r3 + 4], n2[5] = t3[r3 + 5], n2[6] = t3[r3 + 6], n2[7] = t3[r3 + 7], e2[0];
            }
            __name(a, "a");
            function s(t3, r3) {
              return n2[7] = t3[r3], n2[6] = t3[r3 + 1], n2[5] = t3[r3 + 2], n2[4] = t3[r3 + 3], n2[3] = t3[r3 + 4], n2[2] = t3[r3 + 5], n2[1] = t3[r3 + 6], n2[0] = t3[r3 + 7], e2[0];
            }
            __name(s, "s");
            t2.writeDoubleLE = r2 ? i2 : o2, t2.writeDoubleBE = r2 ? o2 : i2, t2.readDoubleLE = r2 ? a : s, t2.readDoubleBE = r2 ? s : a;
          }() : function() {
            function e2(t3, e3, n2, r2, i2, o2) {
              var a2 = r2 < 0 ? 1 : 0;
              if (a2 && (r2 = -r2), 0 === r2) t3(0, i2, o2 + e3), t3(1 / r2 > 0 ? 0 : 2147483648, i2, o2 + n2);
              else if (isNaN(r2)) t3(0, i2, o2 + e3), t3(2146959360, i2, o2 + n2);
              else if (r2 > 17976931348623157e292) t3(0, i2, o2 + e3), t3((a2 << 31 | 2146435072) >>> 0, i2, o2 + n2);
              else {
                var s;
                if (r2 < 22250738585072014e-324) t3((s = r2 / 5e-324) >>> 0, i2, o2 + e3), t3((a2 << 31 | s / 4294967296) >>> 0, i2, o2 + n2);
                else {
                  var u = Math.floor(Math.log(r2) / Math.LN2);
                  1024 === u && (u = 1023), t3(4503599627370496 * (s = r2 * Math.pow(2, -u)) >>> 0, i2, o2 + e3), t3((a2 << 31 | u + 1023 << 20 | 1048576 * s & 1048575) >>> 0, i2, o2 + n2);
                }
              }
            }
            __name(e2, "e");
            function a(t3, e3, n2, r2, i2) {
              var o2 = t3(r2, i2 + e3), a2 = t3(r2, i2 + n2), s = 2 * (a2 >> 31) + 1, u = a2 >>> 20 & 2047, c = 4294967296 * (1048575 & a2) + o2;
              return 2047 === u ? c ? NaN : s * (1 / 0) : 0 === u ? 5e-324 * s * c : s * Math.pow(2, u - 1075) * (c + 4503599627370496);
            }
            __name(a, "a");
            t2.writeDoubleLE = e2.bind(null, n, 0, 4), t2.writeDoubleBE = e2.bind(null, r, 4, 0), t2.readDoubleLE = a.bind(null, i, 0, 4), t2.readDoubleBE = a.bind(null, o, 4, 0);
          }(), t2;
        }
        __name(e, "e");
        function n(t2, e2, n2) {
          e2[n2] = 255 & t2, e2[n2 + 1] = t2 >>> 8 & 255, e2[n2 + 2] = t2 >>> 16 & 255, e2[n2 + 3] = t2 >>> 24;
        }
        __name(n, "n");
        function r(t2, e2, n2) {
          e2[n2] = t2 >>> 24, e2[n2 + 1] = t2 >>> 16 & 255, e2[n2 + 2] = t2 >>> 8 & 255, e2[n2 + 3] = 255 & t2;
        }
        __name(r, "r");
        function i(t2, e2) {
          return (t2[e2] | t2[e2 + 1] << 8 | t2[e2 + 2] << 16 | t2[e2 + 3] << 24) >>> 0;
        }
        __name(i, "i");
        function o(t2, e2) {
          return (t2[e2] << 24 | t2[e2 + 1] << 16 | t2[e2 + 2] << 8 | t2[e2 + 3]) >>> 0;
        }
        __name(o, "o");
        t.exports = e(e);
      }, 7199: (module) => {
        "use strict";
        function inquire(moduleName) {
          try {
            var mod = eval("quire".replace(/^/, "re"))(moduleName);
            if (mod && (mod.length || Object.keys(mod).length)) return mod;
          } catch (t) {
          }
          return null;
        }
        __name(inquire, "inquire");
        module.exports = inquire;
      }, 6662: (t) => {
        "use strict";
        t.exports = function(t2, e, n) {
          var r = n || 8192, i = r >>> 1, o = null, a = r;
          return function(n2) {
            if (n2 < 1 || n2 > i) return t2(n2);
            a + n2 > r && (o = t2(r), a = 0);
            var s = e.call(o, a, a += n2);
            return 7 & a && (a = 1 + (7 | a)), s;
          };
        };
      }, 4997: (t, e) => {
        "use strict";
        var n = e;
        n.length = function(t2) {
          for (var e2 = 0, n2 = 0, r = 0; r < t2.length; ++r) (n2 = t2.charCodeAt(r)) < 128 ? e2 += 1 : n2 < 2048 ? e2 += 2 : 55296 == (64512 & n2) && 56320 == (64512 & t2.charCodeAt(r + 1)) ? (++r, e2 += 4) : e2 += 3;
          return e2;
        }, n.read = function(t2, e2, n2) {
          if (n2 - e2 < 1) return "";
          for (var r, i = null, o = [], a = 0; e2 < n2; ) (r = t2[e2++]) < 128 ? o[a++] = r : r > 191 && r < 224 ? o[a++] = (31 & r) << 6 | 63 & t2[e2++] : r > 239 && r < 365 ? (r = ((7 & r) << 18 | (63 & t2[e2++]) << 12 | (63 & t2[e2++]) << 6 | 63 & t2[e2++]) - 65536, o[a++] = 55296 + (r >> 10), o[a++] = 56320 + (1023 & r)) : o[a++] = (15 & r) << 12 | (63 & t2[e2++]) << 6 | 63 & t2[e2++], a > 8191 && ((i || (i = [])).push(String.fromCharCode.apply(String, o)), a = 0);
          return i ? (a && i.push(String.fromCharCode.apply(String, o.slice(0, a))), i.join("")) : String.fromCharCode.apply(String, o.slice(0, a));
        }, n.write = function(t2, e2, n2) {
          for (var r, i, o = n2, a = 0; a < t2.length; ++a) (r = t2.charCodeAt(a)) < 128 ? e2[n2++] = r : r < 2048 ? (e2[n2++] = r >> 6 | 192, e2[n2++] = 63 & r | 128) : 55296 == (64512 & r) && 56320 == (64512 & (i = t2.charCodeAt(a + 1))) ? (r = 65536 + ((1023 & r) << 10) + (1023 & i), ++a, e2[n2++] = r >> 18 | 240, e2[n2++] = r >> 12 & 63 | 128, e2[n2++] = r >> 6 & 63 | 128, e2[n2++] = 63 & r | 128) : (e2[n2++] = r >> 12 | 224, e2[n2++] = r >> 6 & 63 | 128, e2[n2++] = 63 & r | 128);
          return n2 - o;
        };
      }, 3442: (t, e) => {
        "use strict";
        e.__esModule = true;
        var n = function() {
          function t2(e2) {
            if (!e2) throw new TypeError("Invalid argument; `value` has no value.");
            this.value = t2.EMPTY, e2 && t2.isGuid(e2) && (this.value = e2);
          }
          __name(t2, "t");
          return t2.isGuid = function(e2) {
            var n2 = e2.toString();
            return e2 && (e2 instanceof t2 || t2.validator.test(n2));
          }, t2.create = function() {
            return new t2([t2.gen(2), t2.gen(1), t2.gen(1), t2.gen(1), t2.gen(3)].join("-"));
          }, t2.createEmpty = function() {
            return new t2("emptyguid");
          }, t2.parse = function(e2) {
            return new t2(e2);
          }, t2.raw = function() {
            return [t2.gen(2), t2.gen(1), t2.gen(1), t2.gen(1), t2.gen(3)].join("-");
          }, t2.gen = function(t3) {
            for (var e2 = "", n2 = 0; n2 < t3; n2++) e2 += (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
            return e2;
          }, t2.prototype.equals = function(e2) {
            return t2.isGuid(e2) && this.value === e2.toString();
          }, t2.prototype.isEmpty = function() {
            return this.value === t2.EMPTY;
          }, t2.prototype.toString = function() {
            return this.value;
          }, t2.prototype.toJSON = function() {
            return { value: this.value };
          }, t2.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i"), t2.EMPTY = "00000000-0000-0000-0000-000000000000", t2;
        }();
        e.Guid = n;
      }, 3720: (t) => {
        t.exports = n;
        var e = null;
        try {
          e = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
        } catch (t2) {
        }
        function n(t2, e2, n2) {
          this.low = 0 | t2, this.high = 0 | e2, this.unsigned = !!n2;
        }
        __name(n, "n");
        function r(t2) {
          return true === (t2 && t2.__isLong__);
        }
        __name(r, "r");
        n.prototype.__isLong__, Object.defineProperty(n.prototype, "__isLong__", { value: true }), n.isLong = r;
        var i = {}, o = {};
        function a(t2, e2) {
          var n2, r2, a2;
          return e2 ? (a2 = 0 <= (t2 >>>= 0) && t2 < 256) && (r2 = o[t2]) ? r2 : (n2 = u(t2, (0 | t2) < 0 ? -1 : 0, true), a2 && (o[t2] = n2), n2) : (a2 = -128 <= (t2 |= 0) && t2 < 128) && (r2 = i[t2]) ? r2 : (n2 = u(t2, t2 < 0 ? -1 : 0, false), a2 && (i[t2] = n2), n2);
        }
        __name(a, "a");
        function s(t2, e2) {
          if (isNaN(t2)) return e2 ? m : b;
          if (e2) {
            if (t2 < 0) return m;
            if (t2 >= d) return x;
          } else {
            if (t2 <= -h) return T;
            if (t2 + 1 >= h) return w;
          }
          return t2 < 0 ? s(-t2, e2).neg() : u(t2 % f | 0, t2 / f | 0, e2);
        }
        __name(s, "s");
        function u(t2, e2, r2) {
          return new n(t2, e2, r2);
        }
        __name(u, "u");
        n.fromInt = a, n.fromNumber = s, n.fromBits = u;
        var c = Math.pow;
        function l(t2, e2, n2) {
          if (0 === t2.length) throw Error("empty string");
          if ("NaN" === t2 || "Infinity" === t2 || "+Infinity" === t2 || "-Infinity" === t2) return b;
          if ("number" == typeof e2 ? (n2 = e2, e2 = false) : e2 = !!e2, (n2 = n2 || 10) < 2 || 36 < n2) throw RangeError("radix");
          var r2;
          if ((r2 = t2.indexOf("-")) > 0) throw Error("interior hyphen");
          if (0 === r2) return l(t2.substring(1), e2, n2).neg();
          for (var i2 = s(c(n2, 8)), o2 = b, a2 = 0; a2 < t2.length; a2 += 8) {
            var u2 = Math.min(8, t2.length - a2), p2 = parseInt(t2.substring(a2, a2 + u2), n2);
            if (u2 < 8) {
              var f2 = s(c(n2, u2));
              o2 = o2.mul(f2).add(s(p2));
            } else o2 = (o2 = o2.mul(i2)).add(s(p2));
          }
          return o2.unsigned = e2, o2;
        }
        __name(l, "l");
        function p(t2, e2) {
          return "number" == typeof t2 ? s(t2, e2) : "string" == typeof t2 ? l(t2, e2) : u(t2.low, t2.high, "boolean" == typeof e2 ? e2 : t2.unsigned);
        }
        __name(p, "p");
        n.fromString = l, n.fromValue = p;
        var f = 4294967296, d = f * f, h = d / 2, g = a(1 << 24), b = a(0);
        n.ZERO = b;
        var m = a(0, true);
        n.UZERO = m;
        var y = a(1);
        n.ONE = y;
        var _ = a(1, true);
        n.UONE = _;
        var v = a(-1);
        n.NEG_ONE = v;
        var w = u(-1, 2147483647, false);
        n.MAX_VALUE = w;
        var x = u(-1, -1, true);
        n.MAX_UNSIGNED_VALUE = x;
        var T = u(0, -2147483648, false);
        n.MIN_VALUE = T;
        var S = n.prototype;
        S.toInt = function() {
          return this.unsigned ? this.low >>> 0 : this.low;
        }, S.toNumber = function() {
          return this.unsigned ? (this.high >>> 0) * f + (this.low >>> 0) : this.high * f + (this.low >>> 0);
        }, S.toString = function(t2) {
          if ((t2 = t2 || 10) < 2 || 36 < t2) throw RangeError("radix");
          if (this.isZero()) return "0";
          if (this.isNegative()) {
            if (this.eq(T)) {
              var e2 = s(t2), n2 = this.div(e2), r2 = n2.mul(e2).sub(this);
              return n2.toString(t2) + r2.toInt().toString(t2);
            }
            return "-" + this.neg().toString(t2);
          }
          for (var i2 = s(c(t2, 6), this.unsigned), o2 = this, a2 = ""; ; ) {
            var u2 = o2.div(i2), l2 = (o2.sub(u2.mul(i2)).toInt() >>> 0).toString(t2);
            if ((o2 = u2).isZero()) return l2 + a2;
            for (; l2.length < 6; ) l2 = "0" + l2;
            a2 = "" + l2 + a2;
          }
        }, S.getHighBits = function() {
          return this.high;
        }, S.getHighBitsUnsigned = function() {
          return this.high >>> 0;
        }, S.getLowBits = function() {
          return this.low;
        }, S.getLowBitsUnsigned = function() {
          return this.low >>> 0;
        }, S.getNumBitsAbs = function() {
          if (this.isNegative()) return this.eq(T) ? 64 : this.neg().getNumBitsAbs();
          for (var t2 = 0 != this.high ? this.high : this.low, e2 = 31; e2 > 0 && 0 == (t2 & 1 << e2); e2--) ;
          return 0 != this.high ? e2 + 33 : e2 + 1;
        }, S.isZero = function() {
          return 0 === this.high && 0 === this.low;
        }, S.eqz = S.isZero, S.isNegative = function() {
          return !this.unsigned && this.high < 0;
        }, S.isPositive = function() {
          return this.unsigned || this.high >= 0;
        }, S.isOdd = function() {
          return 1 == (1 & this.low);
        }, S.isEven = function() {
          return 0 == (1 & this.low);
        }, S.equals = function(t2) {
          return r(t2) || (t2 = p(t2)), (this.unsigned === t2.unsigned || this.high >>> 31 != 1 || t2.high >>> 31 != 1) && this.high === t2.high && this.low === t2.low;
        }, S.eq = S.equals, S.notEquals = function(t2) {
          return !this.eq(t2);
        }, S.neq = S.notEquals, S.ne = S.notEquals, S.lessThan = function(t2) {
          return this.comp(t2) < 0;
        }, S.lt = S.lessThan, S.lessThanOrEqual = function(t2) {
          return this.comp(t2) <= 0;
        }, S.lte = S.lessThanOrEqual, S.le = S.lessThanOrEqual, S.greaterThan = function(t2) {
          return this.comp(t2) > 0;
        }, S.gt = S.greaterThan, S.greaterThanOrEqual = function(t2) {
          return this.comp(t2) >= 0;
        }, S.gte = S.greaterThanOrEqual, S.ge = S.greaterThanOrEqual, S.compare = function(t2) {
          if (r(t2) || (t2 = p(t2)), this.eq(t2)) return 0;
          var e2 = this.isNegative(), n2 = t2.isNegative();
          return e2 && !n2 ? -1 : !e2 && n2 ? 1 : this.unsigned ? t2.high >>> 0 > this.high >>> 0 || t2.high === this.high && t2.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t2).isNegative() ? -1 : 1;
        }, S.comp = S.compare, S.negate = function() {
          return !this.unsigned && this.eq(T) ? T : this.not().add(y);
        }, S.neg = S.negate, S.add = function(t2) {
          r(t2) || (t2 = p(t2));
          var e2 = this.high >>> 16, n2 = 65535 & this.high, i2 = this.low >>> 16, o2 = 65535 & this.low, a2 = t2.high >>> 16, s2 = 65535 & t2.high, c2 = t2.low >>> 16, l2 = 0, f2 = 0, d2 = 0, h2 = 0;
          return d2 += (h2 += o2 + (65535 & t2.low)) >>> 16, f2 += (d2 += i2 + c2) >>> 16, l2 += (f2 += n2 + s2) >>> 16, l2 += e2 + a2, u((d2 &= 65535) << 16 | (h2 &= 65535), (l2 &= 65535) << 16 | (f2 &= 65535), this.unsigned);
        }, S.subtract = function(t2) {
          return r(t2) || (t2 = p(t2)), this.add(t2.neg());
        }, S.sub = S.subtract, S.multiply = function(t2) {
          if (this.isZero()) return b;
          if (r(t2) || (t2 = p(t2)), e) return u(e.mul(this.low, this.high, t2.low, t2.high), e.get_high(), this.unsigned);
          if (t2.isZero()) return b;
          if (this.eq(T)) return t2.isOdd() ? T : b;
          if (t2.eq(T)) return this.isOdd() ? T : b;
          if (this.isNegative()) return t2.isNegative() ? this.neg().mul(t2.neg()) : this.neg().mul(t2).neg();
          if (t2.isNegative()) return this.mul(t2.neg()).neg();
          if (this.lt(g) && t2.lt(g)) return s(this.toNumber() * t2.toNumber(), this.unsigned);
          var n2 = this.high >>> 16, i2 = 65535 & this.high, o2 = this.low >>> 16, a2 = 65535 & this.low, c2 = t2.high >>> 16, l2 = 65535 & t2.high, f2 = t2.low >>> 16, d2 = 65535 & t2.low, h2 = 0, m2 = 0, y2 = 0, _2 = 0;
          return y2 += (_2 += a2 * d2) >>> 16, m2 += (y2 += o2 * d2) >>> 16, y2 &= 65535, m2 += (y2 += a2 * f2) >>> 16, h2 += (m2 += i2 * d2) >>> 16, m2 &= 65535, h2 += (m2 += o2 * f2) >>> 16, m2 &= 65535, h2 += (m2 += a2 * l2) >>> 16, h2 += n2 * d2 + i2 * f2 + o2 * l2 + a2 * c2, u((y2 &= 65535) << 16 | (_2 &= 65535), (h2 &= 65535) << 16 | (m2 &= 65535), this.unsigned);
        }, S.mul = S.multiply, S.divide = function(t2) {
          if (r(t2) || (t2 = p(t2)), t2.isZero()) throw Error("division by zero");
          var n2, i2, o2;
          if (e) return this.unsigned || -2147483648 !== this.high || -1 !== t2.low || -1 !== t2.high ? u((this.unsigned ? e.div_u : e.div_s)(this.low, this.high, t2.low, t2.high), e.get_high(), this.unsigned) : this;
          if (this.isZero()) return this.unsigned ? m : b;
          if (this.unsigned) {
            if (t2.unsigned || (t2 = t2.toUnsigned()), t2.gt(this)) return m;
            if (t2.gt(this.shru(1))) return _;
            o2 = m;
          } else {
            if (this.eq(T)) return t2.eq(y) || t2.eq(v) ? T : t2.eq(T) ? y : (n2 = this.shr(1).div(t2).shl(1)).eq(b) ? t2.isNegative() ? y : v : (i2 = this.sub(t2.mul(n2)), o2 = n2.add(i2.div(t2)));
            if (t2.eq(T)) return this.unsigned ? m : b;
            if (this.isNegative()) return t2.isNegative() ? this.neg().div(t2.neg()) : this.neg().div(t2).neg();
            if (t2.isNegative()) return this.div(t2.neg()).neg();
            o2 = b;
          }
          for (i2 = this; i2.gte(t2); ) {
            n2 = Math.max(1, Math.floor(i2.toNumber() / t2.toNumber()));
            for (var a2 = Math.ceil(Math.log(n2) / Math.LN2), l2 = a2 <= 48 ? 1 : c(2, a2 - 48), f2 = s(n2), d2 = f2.mul(t2); d2.isNegative() || d2.gt(i2); ) d2 = (f2 = s(n2 -= l2, this.unsigned)).mul(t2);
            f2.isZero() && (f2 = y), o2 = o2.add(f2), i2 = i2.sub(d2);
          }
          return o2;
        }, S.div = S.divide, S.modulo = function(t2) {
          return r(t2) || (t2 = p(t2)), e ? u((this.unsigned ? e.rem_u : e.rem_s)(this.low, this.high, t2.low, t2.high), e.get_high(), this.unsigned) : this.sub(this.div(t2).mul(t2));
        }, S.mod = S.modulo, S.rem = S.modulo, S.not = function() {
          return u(~this.low, ~this.high, this.unsigned);
        }, S.and = function(t2) {
          return r(t2) || (t2 = p(t2)), u(this.low & t2.low, this.high & t2.high, this.unsigned);
        }, S.or = function(t2) {
          return r(t2) || (t2 = p(t2)), u(this.low | t2.low, this.high | t2.high, this.unsigned);
        }, S.xor = function(t2) {
          return r(t2) || (t2 = p(t2)), u(this.low ^ t2.low, this.high ^ t2.high, this.unsigned);
        }, S.shiftLeft = function(t2) {
          return r(t2) && (t2 = t2.toInt()), 0 == (t2 &= 63) ? this : t2 < 32 ? u(this.low << t2, this.high << t2 | this.low >>> 32 - t2, this.unsigned) : u(0, this.low << t2 - 32, this.unsigned);
        }, S.shl = S.shiftLeft, S.shiftRight = function(t2) {
          return r(t2) && (t2 = t2.toInt()), 0 == (t2 &= 63) ? this : t2 < 32 ? u(this.low >>> t2 | this.high << 32 - t2, this.high >> t2, this.unsigned) : u(this.high >> t2 - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        }, S.shr = S.shiftRight, S.shiftRightUnsigned = function(t2) {
          if (r(t2) && (t2 = t2.toInt()), 0 == (t2 &= 63)) return this;
          var e2 = this.high;
          return t2 < 32 ? u(this.low >>> t2 | e2 << 32 - t2, e2 >>> t2, this.unsigned) : u(32 === t2 ? e2 : e2 >>> t2 - 32, 0, this.unsigned);
        }, S.shru = S.shiftRightUnsigned, S.shr_u = S.shiftRightUnsigned, S.toSigned = function() {
          return this.unsigned ? u(this.low, this.high, false) : this;
        }, S.toUnsigned = function() {
          return this.unsigned ? this : u(this.low, this.high, true);
        }, S.toBytes = function(t2) {
          return t2 ? this.toBytesLE() : this.toBytesBE();
        }, S.toBytesLE = function() {
          var t2 = this.high, e2 = this.low;
          return [255 & e2, e2 >>> 8 & 255, e2 >>> 16 & 255, e2 >>> 24, 255 & t2, t2 >>> 8 & 255, t2 >>> 16 & 255, t2 >>> 24];
        }, S.toBytesBE = function() {
          var t2 = this.high, e2 = this.low;
          return [t2 >>> 24, t2 >>> 16 & 255, t2 >>> 8 & 255, 255 & t2, e2 >>> 24, e2 >>> 16 & 255, e2 >>> 8 & 255, 255 & e2];
        }, n.fromBytes = function(t2, e2, r2) {
          return r2 ? n.fromBytesLE(t2, e2) : n.fromBytesBE(t2, e2);
        }, n.fromBytesLE = function(t2, e2) {
          return new n(t2[0] | t2[1] << 8 | t2[2] << 16 | t2[3] << 24, t2[4] | t2[5] << 8 | t2[6] << 16 | t2[7] << 24, e2);
        }, n.fromBytesBE = function(t2, e2) {
          return new n(t2[4] << 24 | t2[5] << 16 | t2[6] << 8 | t2[7], t2[0] << 24 | t2[1] << 16 | t2[2] << 8 | t2[3], e2);
        };
      }, 1446: (t, e, n) => {
        "use strict";
        var r, i, o, a = n(2100), s = a.Reader, u = a.Writer, c = a.util, l = a.roots.default || (a.roots.default = {});
        l.onnx = ((o = {}).Version = (r = {}, (i = Object.create(r))[r[0] = "_START_VERSION"] = 0, i[r[1] = "IR_VERSION_2017_10_10"] = 1, i[r[2] = "IR_VERSION_2017_10_30"] = 2, i[r[3] = "IR_VERSION_2017_11_3"] = 3, i[r[4] = "IR_VERSION_2019_1_22"] = 4, i[r[5] = "IR_VERSION"] = 5, i), o.AttributeProto = function() {
          function t2(t3) {
            if (this.floats = [], this.ints = [], this.strings = [], this.tensors = [], this.graphs = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.name = "", t2.prototype.refAttrName = "", t2.prototype.docString = "", t2.prototype.type = 0, t2.prototype.f = 0, t2.prototype.i = c.Long ? c.Long.fromBits(0, 0, false) : 0, t2.prototype.s = c.newBuffer([]), t2.prototype.t = null, t2.prototype.g = null, t2.prototype.floats = c.emptyArray, t2.prototype.ints = c.emptyArray, t2.prototype.strings = c.emptyArray, t2.prototype.tensors = c.emptyArray, t2.prototype.graphs = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.name && t3.hasOwnProperty("name") && e2.uint32(10).string(t3.name), null != t3.f && t3.hasOwnProperty("f") && e2.uint32(21).float(t3.f), null != t3.i && t3.hasOwnProperty("i") && e2.uint32(24).int64(t3.i), null != t3.s && t3.hasOwnProperty("s") && e2.uint32(34).bytes(t3.s), null != t3.t && t3.hasOwnProperty("t") && l.onnx.TensorProto.encode(t3.t, e2.uint32(42).fork()).ldelim(), null != t3.g && t3.hasOwnProperty("g") && l.onnx.GraphProto.encode(t3.g, e2.uint32(50).fork()).ldelim(), null != t3.floats && t3.floats.length) {
              e2.uint32(58).fork();
              for (var n2 = 0; n2 < t3.floats.length; ++n2) e2.float(t3.floats[n2]);
              e2.ldelim();
            }
            if (null != t3.ints && t3.ints.length) {
              for (e2.uint32(66).fork(), n2 = 0; n2 < t3.ints.length; ++n2) e2.int64(t3.ints[n2]);
              e2.ldelim();
            }
            if (null != t3.strings && t3.strings.length) for (n2 = 0; n2 < t3.strings.length; ++n2) e2.uint32(74).bytes(t3.strings[n2]);
            if (null != t3.tensors && t3.tensors.length) for (n2 = 0; n2 < t3.tensors.length; ++n2) l.onnx.TensorProto.encode(t3.tensors[n2], e2.uint32(82).fork()).ldelim();
            if (null != t3.graphs && t3.graphs.length) for (n2 = 0; n2 < t3.graphs.length; ++n2) l.onnx.GraphProto.encode(t3.graphs[n2], e2.uint32(90).fork()).ldelim();
            return null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(106).string(t3.docString), null != t3.type && t3.hasOwnProperty("type") && e2.uint32(160).int32(t3.type), null != t3.refAttrName && t3.hasOwnProperty("refAttrName") && e2.uint32(170).string(t3.refAttrName), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.AttributeProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.name = t3.string();
                  break;
                case 21:
                  r2.refAttrName = t3.string();
                  break;
                case 13:
                  r2.docString = t3.string();
                  break;
                case 20:
                  r2.type = t3.int32();
                  break;
                case 2:
                  r2.f = t3.float();
                  break;
                case 3:
                  r2.i = t3.int64();
                  break;
                case 4:
                  r2.s = t3.bytes();
                  break;
                case 5:
                  r2.t = l.onnx.TensorProto.decode(t3, t3.uint32());
                  break;
                case 6:
                  r2.g = l.onnx.GraphProto.decode(t3, t3.uint32());
                  break;
                case 7:
                  if (r2.floats && r2.floats.length || (r2.floats = []), 2 == (7 & i2)) for (var o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.floats.push(t3.float());
                  else r2.floats.push(t3.float());
                  break;
                case 8:
                  if (r2.ints && r2.ints.length || (r2.ints = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.ints.push(t3.int64());
                  else r2.ints.push(t3.int64());
                  break;
                case 9:
                  r2.strings && r2.strings.length || (r2.strings = []), r2.strings.push(t3.bytes());
                  break;
                case 10:
                  r2.tensors && r2.tensors.length || (r2.tensors = []), r2.tensors.push(l.onnx.TensorProto.decode(t3, t3.uint32()));
                  break;
                case 11:
                  r2.graphs && r2.graphs.length || (r2.graphs = []), r2.graphs.push(l.onnx.GraphProto.decode(t3, t3.uint32()));
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.name && t3.hasOwnProperty("name") && !c.isString(t3.name)) return "name: string expected";
            if (null != t3.refAttrName && t3.hasOwnProperty("refAttrName") && !c.isString(t3.refAttrName)) return "refAttrName: string expected";
            if (null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString)) return "docString: string expected";
            if (null != t3.type && t3.hasOwnProperty("type")) switch (t3.type) {
              default:
                return "type: enum value expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
            }
            if (null != t3.f && t3.hasOwnProperty("f") && "number" != typeof t3.f) return "f: number expected";
            if (null != t3.i && t3.hasOwnProperty("i") && !(c.isInteger(t3.i) || t3.i && c.isInteger(t3.i.low) && c.isInteger(t3.i.high))) return "i: integer|Long expected";
            if (null != t3.s && t3.hasOwnProperty("s") && !(t3.s && "number" == typeof t3.s.length || c.isString(t3.s))) return "s: buffer expected";
            if (null != t3.t && t3.hasOwnProperty("t") && (n2 = l.onnx.TensorProto.verify(t3.t))) return "t." + n2;
            if (null != t3.g && t3.hasOwnProperty("g") && (n2 = l.onnx.GraphProto.verify(t3.g))) return "g." + n2;
            if (null != t3.floats && t3.hasOwnProperty("floats")) {
              if (!Array.isArray(t3.floats)) return "floats: array expected";
              for (var e2 = 0; e2 < t3.floats.length; ++e2) if ("number" != typeof t3.floats[e2]) return "floats: number[] expected";
            }
            if (null != t3.ints && t3.hasOwnProperty("ints")) {
              if (!Array.isArray(t3.ints)) return "ints: array expected";
              for (e2 = 0; e2 < t3.ints.length; ++e2) if (!(c.isInteger(t3.ints[e2]) || t3.ints[e2] && c.isInteger(t3.ints[e2].low) && c.isInteger(t3.ints[e2].high))) return "ints: integer|Long[] expected";
            }
            if (null != t3.strings && t3.hasOwnProperty("strings")) {
              if (!Array.isArray(t3.strings)) return "strings: array expected";
              for (e2 = 0; e2 < t3.strings.length; ++e2) if (!(t3.strings[e2] && "number" == typeof t3.strings[e2].length || c.isString(t3.strings[e2]))) return "strings: buffer[] expected";
            }
            if (null != t3.tensors && t3.hasOwnProperty("tensors")) {
              if (!Array.isArray(t3.tensors)) return "tensors: array expected";
              for (e2 = 0; e2 < t3.tensors.length; ++e2) if (n2 = l.onnx.TensorProto.verify(t3.tensors[e2])) return "tensors." + n2;
            }
            if (null != t3.graphs && t3.hasOwnProperty("graphs")) {
              if (!Array.isArray(t3.graphs)) return "graphs: array expected";
              for (e2 = 0; e2 < t3.graphs.length; ++e2) {
                var n2;
                if (n2 = l.onnx.GraphProto.verify(t3.graphs[e2])) return "graphs." + n2;
              }
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.AttributeProto) return t3;
            var e2 = new l.onnx.AttributeProto();
            switch (null != t3.name && (e2.name = String(t3.name)), null != t3.refAttrName && (e2.refAttrName = String(t3.refAttrName)), null != t3.docString && (e2.docString = String(t3.docString)), t3.type) {
              case "UNDEFINED":
              case 0:
                e2.type = 0;
                break;
              case "FLOAT":
              case 1:
                e2.type = 1;
                break;
              case "INT":
              case 2:
                e2.type = 2;
                break;
              case "STRING":
              case 3:
                e2.type = 3;
                break;
              case "TENSOR":
              case 4:
                e2.type = 4;
                break;
              case "GRAPH":
              case 5:
                e2.type = 5;
                break;
              case "FLOATS":
              case 6:
                e2.type = 6;
                break;
              case "INTS":
              case 7:
                e2.type = 7;
                break;
              case "STRINGS":
              case 8:
                e2.type = 8;
                break;
              case "TENSORS":
              case 9:
                e2.type = 9;
                break;
              case "GRAPHS":
              case 10:
                e2.type = 10;
            }
            if (null != t3.f && (e2.f = Number(t3.f)), null != t3.i && (c.Long ? (e2.i = c.Long.fromValue(t3.i)).unsigned = false : "string" == typeof t3.i ? e2.i = parseInt(t3.i, 10) : "number" == typeof t3.i ? e2.i = t3.i : "object" == typeof t3.i && (e2.i = new c.LongBits(t3.i.low >>> 0, t3.i.high >>> 0).toNumber())), null != t3.s && ("string" == typeof t3.s ? c.base64.decode(t3.s, e2.s = c.newBuffer(c.base64.length(t3.s)), 0) : t3.s.length && (e2.s = t3.s)), null != t3.t) {
              if ("object" != typeof t3.t) throw TypeError(".onnx.AttributeProto.t: object expected");
              e2.t = l.onnx.TensorProto.fromObject(t3.t);
            }
            if (null != t3.g) {
              if ("object" != typeof t3.g) throw TypeError(".onnx.AttributeProto.g: object expected");
              e2.g = l.onnx.GraphProto.fromObject(t3.g);
            }
            if (t3.floats) {
              if (!Array.isArray(t3.floats)) throw TypeError(".onnx.AttributeProto.floats: array expected");
              e2.floats = [];
              for (var n2 = 0; n2 < t3.floats.length; ++n2) e2.floats[n2] = Number(t3.floats[n2]);
            }
            if (t3.ints) {
              if (!Array.isArray(t3.ints)) throw TypeError(".onnx.AttributeProto.ints: array expected");
              for (e2.ints = [], n2 = 0; n2 < t3.ints.length; ++n2) c.Long ? (e2.ints[n2] = c.Long.fromValue(t3.ints[n2])).unsigned = false : "string" == typeof t3.ints[n2] ? e2.ints[n2] = parseInt(t3.ints[n2], 10) : "number" == typeof t3.ints[n2] ? e2.ints[n2] = t3.ints[n2] : "object" == typeof t3.ints[n2] && (e2.ints[n2] = new c.LongBits(t3.ints[n2].low >>> 0, t3.ints[n2].high >>> 0).toNumber());
            }
            if (t3.strings) {
              if (!Array.isArray(t3.strings)) throw TypeError(".onnx.AttributeProto.strings: array expected");
              for (e2.strings = [], n2 = 0; n2 < t3.strings.length; ++n2) "string" == typeof t3.strings[n2] ? c.base64.decode(t3.strings[n2], e2.strings[n2] = c.newBuffer(c.base64.length(t3.strings[n2])), 0) : t3.strings[n2].length && (e2.strings[n2] = t3.strings[n2]);
            }
            if (t3.tensors) {
              if (!Array.isArray(t3.tensors)) throw TypeError(".onnx.AttributeProto.tensors: array expected");
              for (e2.tensors = [], n2 = 0; n2 < t3.tensors.length; ++n2) {
                if ("object" != typeof t3.tensors[n2]) throw TypeError(".onnx.AttributeProto.tensors: object expected");
                e2.tensors[n2] = l.onnx.TensorProto.fromObject(t3.tensors[n2]);
              }
            }
            if (t3.graphs) {
              if (!Array.isArray(t3.graphs)) throw TypeError(".onnx.AttributeProto.graphs: array expected");
              for (e2.graphs = [], n2 = 0; n2 < t3.graphs.length; ++n2) {
                if ("object" != typeof t3.graphs[n2]) throw TypeError(".onnx.AttributeProto.graphs: object expected");
                e2.graphs[n2] = l.onnx.GraphProto.fromObject(t3.graphs[n2]);
              }
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.floats = [], n2.ints = [], n2.strings = [], n2.tensors = [], n2.graphs = []), e2.defaults) {
              if (n2.name = "", n2.f = 0, c.Long) {
                var r2 = new c.Long(0, 0, false);
                n2.i = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2;
              } else n2.i = e2.longs === String ? "0" : 0;
              e2.bytes === String ? n2.s = "" : (n2.s = [], e2.bytes !== Array && (n2.s = c.newBuffer(n2.s))), n2.t = null, n2.g = null, n2.docString = "", n2.type = e2.enums === String ? "UNDEFINED" : 0, n2.refAttrName = "";
            }
            if (null != t3.name && t3.hasOwnProperty("name") && (n2.name = t3.name), null != t3.f && t3.hasOwnProperty("f") && (n2.f = e2.json && !isFinite(t3.f) ? String(t3.f) : t3.f), null != t3.i && t3.hasOwnProperty("i") && ("number" == typeof t3.i ? n2.i = e2.longs === String ? String(t3.i) : t3.i : n2.i = e2.longs === String ? c.Long.prototype.toString.call(t3.i) : e2.longs === Number ? new c.LongBits(t3.i.low >>> 0, t3.i.high >>> 0).toNumber() : t3.i), null != t3.s && t3.hasOwnProperty("s") && (n2.s = e2.bytes === String ? c.base64.encode(t3.s, 0, t3.s.length) : e2.bytes === Array ? Array.prototype.slice.call(t3.s) : t3.s), null != t3.t && t3.hasOwnProperty("t") && (n2.t = l.onnx.TensorProto.toObject(t3.t, e2)), null != t3.g && t3.hasOwnProperty("g") && (n2.g = l.onnx.GraphProto.toObject(t3.g, e2)), t3.floats && t3.floats.length) {
              n2.floats = [];
              for (var i2 = 0; i2 < t3.floats.length; ++i2) n2.floats[i2] = e2.json && !isFinite(t3.floats[i2]) ? String(t3.floats[i2]) : t3.floats[i2];
            }
            if (t3.ints && t3.ints.length) for (n2.ints = [], i2 = 0; i2 < t3.ints.length; ++i2) "number" == typeof t3.ints[i2] ? n2.ints[i2] = e2.longs === String ? String(t3.ints[i2]) : t3.ints[i2] : n2.ints[i2] = e2.longs === String ? c.Long.prototype.toString.call(t3.ints[i2]) : e2.longs === Number ? new c.LongBits(t3.ints[i2].low >>> 0, t3.ints[i2].high >>> 0).toNumber() : t3.ints[i2];
            if (t3.strings && t3.strings.length) for (n2.strings = [], i2 = 0; i2 < t3.strings.length; ++i2) n2.strings[i2] = e2.bytes === String ? c.base64.encode(t3.strings[i2], 0, t3.strings[i2].length) : e2.bytes === Array ? Array.prototype.slice.call(t3.strings[i2]) : t3.strings[i2];
            if (t3.tensors && t3.tensors.length) for (n2.tensors = [], i2 = 0; i2 < t3.tensors.length; ++i2) n2.tensors[i2] = l.onnx.TensorProto.toObject(t3.tensors[i2], e2);
            if (t3.graphs && t3.graphs.length) for (n2.graphs = [], i2 = 0; i2 < t3.graphs.length; ++i2) n2.graphs[i2] = l.onnx.GraphProto.toObject(t3.graphs[i2], e2);
            return null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), null != t3.type && t3.hasOwnProperty("type") && (n2.type = e2.enums === String ? l.onnx.AttributeProto.AttributeType[t3.type] : t3.type), null != t3.refAttrName && t3.hasOwnProperty("refAttrName") && (n2.refAttrName = t3.refAttrName), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2.AttributeType = function() {
            var t3 = {}, e2 = Object.create(t3);
            return e2[t3[0] = "UNDEFINED"] = 0, e2[t3[1] = "FLOAT"] = 1, e2[t3[2] = "INT"] = 2, e2[t3[3] = "STRING"] = 3, e2[t3[4] = "TENSOR"] = 4, e2[t3[5] = "GRAPH"] = 5, e2[t3[6] = "FLOATS"] = 6, e2[t3[7] = "INTS"] = 7, e2[t3[8] = "STRINGS"] = 8, e2[t3[9] = "TENSORS"] = 9, e2[t3[10] = "GRAPHS"] = 10, e2;
          }(), t2;
        }(), o.ValueInfoProto = function() {
          function t2(t3) {
            if (t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.name = "", t2.prototype.type = null, t2.prototype.docString = "", t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            return e2 || (e2 = u.create()), null != t3.name && t3.hasOwnProperty("name") && e2.uint32(10).string(t3.name), null != t3.type && t3.hasOwnProperty("type") && l.onnx.TypeProto.encode(t3.type, e2.uint32(18).fork()).ldelim(), null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(26).string(t3.docString), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.ValueInfoProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.name = t3.string();
                  break;
                case 2:
                  r2.type = l.onnx.TypeProto.decode(t3, t3.uint32());
                  break;
                case 3:
                  r2.docString = t3.string();
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.name && t3.hasOwnProperty("name") && !c.isString(t3.name)) return "name: string expected";
            if (null != t3.type && t3.hasOwnProperty("type")) {
              var e2 = l.onnx.TypeProto.verify(t3.type);
              if (e2) return "type." + e2;
            }
            return null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString) ? "docString: string expected" : null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.ValueInfoProto) return t3;
            var e2 = new l.onnx.ValueInfoProto();
            if (null != t3.name && (e2.name = String(t3.name)), null != t3.type) {
              if ("object" != typeof t3.type) throw TypeError(".onnx.ValueInfoProto.type: object expected");
              e2.type = l.onnx.TypeProto.fromObject(t3.type);
            }
            return null != t3.docString && (e2.docString = String(t3.docString)), e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            return e2.defaults && (n2.name = "", n2.type = null, n2.docString = ""), null != t3.name && t3.hasOwnProperty("name") && (n2.name = t3.name), null != t3.type && t3.hasOwnProperty("type") && (n2.type = l.onnx.TypeProto.toObject(t3.type, e2)), null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.NodeProto = function() {
          function t2(t3) {
            if (this.input = [], this.output = [], this.attribute = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.input = c.emptyArray, t2.prototype.output = c.emptyArray, t2.prototype.name = "", t2.prototype.opType = "", t2.prototype.domain = "", t2.prototype.attribute = c.emptyArray, t2.prototype.docString = "", t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.input && t3.input.length) for (var n2 = 0; n2 < t3.input.length; ++n2) e2.uint32(10).string(t3.input[n2]);
            if (null != t3.output && t3.output.length) for (n2 = 0; n2 < t3.output.length; ++n2) e2.uint32(18).string(t3.output[n2]);
            if (null != t3.name && t3.hasOwnProperty("name") && e2.uint32(26).string(t3.name), null != t3.opType && t3.hasOwnProperty("opType") && e2.uint32(34).string(t3.opType), null != t3.attribute && t3.attribute.length) for (n2 = 0; n2 < t3.attribute.length; ++n2) l.onnx.AttributeProto.encode(t3.attribute[n2], e2.uint32(42).fork()).ldelim();
            return null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(50).string(t3.docString), null != t3.domain && t3.hasOwnProperty("domain") && e2.uint32(58).string(t3.domain), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.NodeProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.input && r2.input.length || (r2.input = []), r2.input.push(t3.string());
                  break;
                case 2:
                  r2.output && r2.output.length || (r2.output = []), r2.output.push(t3.string());
                  break;
                case 3:
                  r2.name = t3.string();
                  break;
                case 4:
                  r2.opType = t3.string();
                  break;
                case 7:
                  r2.domain = t3.string();
                  break;
                case 5:
                  r2.attribute && r2.attribute.length || (r2.attribute = []), r2.attribute.push(l.onnx.AttributeProto.decode(t3, t3.uint32()));
                  break;
                case 6:
                  r2.docString = t3.string();
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.input && t3.hasOwnProperty("input")) {
              if (!Array.isArray(t3.input)) return "input: array expected";
              for (var e2 = 0; e2 < t3.input.length; ++e2) if (!c.isString(t3.input[e2])) return "input: string[] expected";
            }
            if (null != t3.output && t3.hasOwnProperty("output")) {
              if (!Array.isArray(t3.output)) return "output: array expected";
              for (e2 = 0; e2 < t3.output.length; ++e2) if (!c.isString(t3.output[e2])) return "output: string[] expected";
            }
            if (null != t3.name && t3.hasOwnProperty("name") && !c.isString(t3.name)) return "name: string expected";
            if (null != t3.opType && t3.hasOwnProperty("opType") && !c.isString(t3.opType)) return "opType: string expected";
            if (null != t3.domain && t3.hasOwnProperty("domain") && !c.isString(t3.domain)) return "domain: string expected";
            if (null != t3.attribute && t3.hasOwnProperty("attribute")) {
              if (!Array.isArray(t3.attribute)) return "attribute: array expected";
              for (e2 = 0; e2 < t3.attribute.length; ++e2) {
                var n2 = l.onnx.AttributeProto.verify(t3.attribute[e2]);
                if (n2) return "attribute." + n2;
              }
            }
            return null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString) ? "docString: string expected" : null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.NodeProto) return t3;
            var e2 = new l.onnx.NodeProto();
            if (t3.input) {
              if (!Array.isArray(t3.input)) throw TypeError(".onnx.NodeProto.input: array expected");
              e2.input = [];
              for (var n2 = 0; n2 < t3.input.length; ++n2) e2.input[n2] = String(t3.input[n2]);
            }
            if (t3.output) {
              if (!Array.isArray(t3.output)) throw TypeError(".onnx.NodeProto.output: array expected");
              for (e2.output = [], n2 = 0; n2 < t3.output.length; ++n2) e2.output[n2] = String(t3.output[n2]);
            }
            if (null != t3.name && (e2.name = String(t3.name)), null != t3.opType && (e2.opType = String(t3.opType)), null != t3.domain && (e2.domain = String(t3.domain)), t3.attribute) {
              if (!Array.isArray(t3.attribute)) throw TypeError(".onnx.NodeProto.attribute: array expected");
              for (e2.attribute = [], n2 = 0; n2 < t3.attribute.length; ++n2) {
                if ("object" != typeof t3.attribute[n2]) throw TypeError(".onnx.NodeProto.attribute: object expected");
                e2.attribute[n2] = l.onnx.AttributeProto.fromObject(t3.attribute[n2]);
              }
            }
            return null != t3.docString && (e2.docString = String(t3.docString)), e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.input = [], n2.output = [], n2.attribute = []), e2.defaults && (n2.name = "", n2.opType = "", n2.docString = "", n2.domain = ""), t3.input && t3.input.length) {
              n2.input = [];
              for (var r2 = 0; r2 < t3.input.length; ++r2) n2.input[r2] = t3.input[r2];
            }
            if (t3.output && t3.output.length) for (n2.output = [], r2 = 0; r2 < t3.output.length; ++r2) n2.output[r2] = t3.output[r2];
            if (null != t3.name && t3.hasOwnProperty("name") && (n2.name = t3.name), null != t3.opType && t3.hasOwnProperty("opType") && (n2.opType = t3.opType), t3.attribute && t3.attribute.length) for (n2.attribute = [], r2 = 0; r2 < t3.attribute.length; ++r2) n2.attribute[r2] = l.onnx.AttributeProto.toObject(t3.attribute[r2], e2);
            return null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), null != t3.domain && t3.hasOwnProperty("domain") && (n2.domain = t3.domain), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.ModelProto = function() {
          function t2(t3) {
            if (this.opsetImport = [], this.metadataProps = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.irVersion = c.Long ? c.Long.fromBits(0, 0, false) : 0, t2.prototype.opsetImport = c.emptyArray, t2.prototype.producerName = "", t2.prototype.producerVersion = "", t2.prototype.domain = "", t2.prototype.modelVersion = c.Long ? c.Long.fromBits(0, 0, false) : 0, t2.prototype.docString = "", t2.prototype.graph = null, t2.prototype.metadataProps = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.irVersion && t3.hasOwnProperty("irVersion") && e2.uint32(8).int64(t3.irVersion), null != t3.producerName && t3.hasOwnProperty("producerName") && e2.uint32(18).string(t3.producerName), null != t3.producerVersion && t3.hasOwnProperty("producerVersion") && e2.uint32(26).string(t3.producerVersion), null != t3.domain && t3.hasOwnProperty("domain") && e2.uint32(34).string(t3.domain), null != t3.modelVersion && t3.hasOwnProperty("modelVersion") && e2.uint32(40).int64(t3.modelVersion), null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(50).string(t3.docString), null != t3.graph && t3.hasOwnProperty("graph") && l.onnx.GraphProto.encode(t3.graph, e2.uint32(58).fork()).ldelim(), null != t3.opsetImport && t3.opsetImport.length) for (var n2 = 0; n2 < t3.opsetImport.length; ++n2) l.onnx.OperatorSetIdProto.encode(t3.opsetImport[n2], e2.uint32(66).fork()).ldelim();
            if (null != t3.metadataProps && t3.metadataProps.length) for (n2 = 0; n2 < t3.metadataProps.length; ++n2) l.onnx.StringStringEntryProto.encode(t3.metadataProps[n2], e2.uint32(114).fork()).ldelim();
            return e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.ModelProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.irVersion = t3.int64();
                  break;
                case 8:
                  r2.opsetImport && r2.opsetImport.length || (r2.opsetImport = []), r2.opsetImport.push(l.onnx.OperatorSetIdProto.decode(t3, t3.uint32()));
                  break;
                case 2:
                  r2.producerName = t3.string();
                  break;
                case 3:
                  r2.producerVersion = t3.string();
                  break;
                case 4:
                  r2.domain = t3.string();
                  break;
                case 5:
                  r2.modelVersion = t3.int64();
                  break;
                case 6:
                  r2.docString = t3.string();
                  break;
                case 7:
                  r2.graph = l.onnx.GraphProto.decode(t3, t3.uint32());
                  break;
                case 14:
                  r2.metadataProps && r2.metadataProps.length || (r2.metadataProps = []), r2.metadataProps.push(l.onnx.StringStringEntryProto.decode(t3, t3.uint32()));
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.irVersion && t3.hasOwnProperty("irVersion") && !(c.isInteger(t3.irVersion) || t3.irVersion && c.isInteger(t3.irVersion.low) && c.isInteger(t3.irVersion.high))) return "irVersion: integer|Long expected";
            if (null != t3.opsetImport && t3.hasOwnProperty("opsetImport")) {
              if (!Array.isArray(t3.opsetImport)) return "opsetImport: array expected";
              for (var e2 = 0; e2 < t3.opsetImport.length; ++e2) if (n2 = l.onnx.OperatorSetIdProto.verify(t3.opsetImport[e2])) return "opsetImport." + n2;
            }
            if (null != t3.producerName && t3.hasOwnProperty("producerName") && !c.isString(t3.producerName)) return "producerName: string expected";
            if (null != t3.producerVersion && t3.hasOwnProperty("producerVersion") && !c.isString(t3.producerVersion)) return "producerVersion: string expected";
            if (null != t3.domain && t3.hasOwnProperty("domain") && !c.isString(t3.domain)) return "domain: string expected";
            if (null != t3.modelVersion && t3.hasOwnProperty("modelVersion") && !(c.isInteger(t3.modelVersion) || t3.modelVersion && c.isInteger(t3.modelVersion.low) && c.isInteger(t3.modelVersion.high))) return "modelVersion: integer|Long expected";
            if (null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString)) return "docString: string expected";
            if (null != t3.graph && t3.hasOwnProperty("graph") && (n2 = l.onnx.GraphProto.verify(t3.graph))) return "graph." + n2;
            if (null != t3.metadataProps && t3.hasOwnProperty("metadataProps")) {
              if (!Array.isArray(t3.metadataProps)) return "metadataProps: array expected";
              for (e2 = 0; e2 < t3.metadataProps.length; ++e2) {
                var n2;
                if (n2 = l.onnx.StringStringEntryProto.verify(t3.metadataProps[e2])) return "metadataProps." + n2;
              }
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.ModelProto) return t3;
            var e2 = new l.onnx.ModelProto();
            if (null != t3.irVersion && (c.Long ? (e2.irVersion = c.Long.fromValue(t3.irVersion)).unsigned = false : "string" == typeof t3.irVersion ? e2.irVersion = parseInt(t3.irVersion, 10) : "number" == typeof t3.irVersion ? e2.irVersion = t3.irVersion : "object" == typeof t3.irVersion && (e2.irVersion = new c.LongBits(t3.irVersion.low >>> 0, t3.irVersion.high >>> 0).toNumber())), t3.opsetImport) {
              if (!Array.isArray(t3.opsetImport)) throw TypeError(".onnx.ModelProto.opsetImport: array expected");
              e2.opsetImport = [];
              for (var n2 = 0; n2 < t3.opsetImport.length; ++n2) {
                if ("object" != typeof t3.opsetImport[n2]) throw TypeError(".onnx.ModelProto.opsetImport: object expected");
                e2.opsetImport[n2] = l.onnx.OperatorSetIdProto.fromObject(t3.opsetImport[n2]);
              }
            }
            if (null != t3.producerName && (e2.producerName = String(t3.producerName)), null != t3.producerVersion && (e2.producerVersion = String(t3.producerVersion)), null != t3.domain && (e2.domain = String(t3.domain)), null != t3.modelVersion && (c.Long ? (e2.modelVersion = c.Long.fromValue(t3.modelVersion)).unsigned = false : "string" == typeof t3.modelVersion ? e2.modelVersion = parseInt(t3.modelVersion, 10) : "number" == typeof t3.modelVersion ? e2.modelVersion = t3.modelVersion : "object" == typeof t3.modelVersion && (e2.modelVersion = new c.LongBits(t3.modelVersion.low >>> 0, t3.modelVersion.high >>> 0).toNumber())), null != t3.docString && (e2.docString = String(t3.docString)), null != t3.graph) {
              if ("object" != typeof t3.graph) throw TypeError(".onnx.ModelProto.graph: object expected");
              e2.graph = l.onnx.GraphProto.fromObject(t3.graph);
            }
            if (t3.metadataProps) {
              if (!Array.isArray(t3.metadataProps)) throw TypeError(".onnx.ModelProto.metadataProps: array expected");
              for (e2.metadataProps = [], n2 = 0; n2 < t3.metadataProps.length; ++n2) {
                if ("object" != typeof t3.metadataProps[n2]) throw TypeError(".onnx.ModelProto.metadataProps: object expected");
                e2.metadataProps[n2] = l.onnx.StringStringEntryProto.fromObject(t3.metadataProps[n2]);
              }
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.opsetImport = [], n2.metadataProps = []), e2.defaults) {
              if (c.Long) {
                var r2 = new c.Long(0, 0, false);
                n2.irVersion = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2;
              } else n2.irVersion = e2.longs === String ? "0" : 0;
              n2.producerName = "", n2.producerVersion = "", n2.domain = "", c.Long ? (r2 = new c.Long(0, 0, false), n2.modelVersion = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2) : n2.modelVersion = e2.longs === String ? "0" : 0, n2.docString = "", n2.graph = null;
            }
            if (null != t3.irVersion && t3.hasOwnProperty("irVersion") && ("number" == typeof t3.irVersion ? n2.irVersion = e2.longs === String ? String(t3.irVersion) : t3.irVersion : n2.irVersion = e2.longs === String ? c.Long.prototype.toString.call(t3.irVersion) : e2.longs === Number ? new c.LongBits(t3.irVersion.low >>> 0, t3.irVersion.high >>> 0).toNumber() : t3.irVersion), null != t3.producerName && t3.hasOwnProperty("producerName") && (n2.producerName = t3.producerName), null != t3.producerVersion && t3.hasOwnProperty("producerVersion") && (n2.producerVersion = t3.producerVersion), null != t3.domain && t3.hasOwnProperty("domain") && (n2.domain = t3.domain), null != t3.modelVersion && t3.hasOwnProperty("modelVersion") && ("number" == typeof t3.modelVersion ? n2.modelVersion = e2.longs === String ? String(t3.modelVersion) : t3.modelVersion : n2.modelVersion = e2.longs === String ? c.Long.prototype.toString.call(t3.modelVersion) : e2.longs === Number ? new c.LongBits(t3.modelVersion.low >>> 0, t3.modelVersion.high >>> 0).toNumber() : t3.modelVersion), null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), null != t3.graph && t3.hasOwnProperty("graph") && (n2.graph = l.onnx.GraphProto.toObject(t3.graph, e2)), t3.opsetImport && t3.opsetImport.length) {
              n2.opsetImport = [];
              for (var i2 = 0; i2 < t3.opsetImport.length; ++i2) n2.opsetImport[i2] = l.onnx.OperatorSetIdProto.toObject(t3.opsetImport[i2], e2);
            }
            if (t3.metadataProps && t3.metadataProps.length) for (n2.metadataProps = [], i2 = 0; i2 < t3.metadataProps.length; ++i2) n2.metadataProps[i2] = l.onnx.StringStringEntryProto.toObject(t3.metadataProps[i2], e2);
            return n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.StringStringEntryProto = function() {
          function t2(t3) {
            if (t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.key = "", t2.prototype.value = "", t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            return e2 || (e2 = u.create()), null != t3.key && t3.hasOwnProperty("key") && e2.uint32(10).string(t3.key), null != t3.value && t3.hasOwnProperty("value") && e2.uint32(18).string(t3.value), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.StringStringEntryProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.key = t3.string();
                  break;
                case 2:
                  r2.value = t3.string();
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            return "object" != typeof t3 || null === t3 ? "object expected" : null != t3.key && t3.hasOwnProperty("key") && !c.isString(t3.key) ? "key: string expected" : null != t3.value && t3.hasOwnProperty("value") && !c.isString(t3.value) ? "value: string expected" : null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.StringStringEntryProto) return t3;
            var e2 = new l.onnx.StringStringEntryProto();
            return null != t3.key && (e2.key = String(t3.key)), null != t3.value && (e2.value = String(t3.value)), e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            return e2.defaults && (n2.key = "", n2.value = ""), null != t3.key && t3.hasOwnProperty("key") && (n2.key = t3.key), null != t3.value && t3.hasOwnProperty("value") && (n2.value = t3.value), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.TensorAnnotation = function() {
          function t2(t3) {
            if (this.quantParameterTensorNames = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.tensorName = "", t2.prototype.quantParameterTensorNames = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.tensorName && t3.hasOwnProperty("tensorName") && e2.uint32(10).string(t3.tensorName), null != t3.quantParameterTensorNames && t3.quantParameterTensorNames.length) for (var n2 = 0; n2 < t3.quantParameterTensorNames.length; ++n2) l.onnx.StringStringEntryProto.encode(t3.quantParameterTensorNames[n2], e2.uint32(18).fork()).ldelim();
            return e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.TensorAnnotation(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.tensorName = t3.string();
                  break;
                case 2:
                  r2.quantParameterTensorNames && r2.quantParameterTensorNames.length || (r2.quantParameterTensorNames = []), r2.quantParameterTensorNames.push(l.onnx.StringStringEntryProto.decode(t3, t3.uint32()));
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.tensorName && t3.hasOwnProperty("tensorName") && !c.isString(t3.tensorName)) return "tensorName: string expected";
            if (null != t3.quantParameterTensorNames && t3.hasOwnProperty("quantParameterTensorNames")) {
              if (!Array.isArray(t3.quantParameterTensorNames)) return "quantParameterTensorNames: array expected";
              for (var e2 = 0; e2 < t3.quantParameterTensorNames.length; ++e2) {
                var n2 = l.onnx.StringStringEntryProto.verify(t3.quantParameterTensorNames[e2]);
                if (n2) return "quantParameterTensorNames." + n2;
              }
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.TensorAnnotation) return t3;
            var e2 = new l.onnx.TensorAnnotation();
            if (null != t3.tensorName && (e2.tensorName = String(t3.tensorName)), t3.quantParameterTensorNames) {
              if (!Array.isArray(t3.quantParameterTensorNames)) throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");
              e2.quantParameterTensorNames = [];
              for (var n2 = 0; n2 < t3.quantParameterTensorNames.length; ++n2) {
                if ("object" != typeof t3.quantParameterTensorNames[n2]) throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");
                e2.quantParameterTensorNames[n2] = l.onnx.StringStringEntryProto.fromObject(t3.quantParameterTensorNames[n2]);
              }
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.quantParameterTensorNames = []), e2.defaults && (n2.tensorName = ""), null != t3.tensorName && t3.hasOwnProperty("tensorName") && (n2.tensorName = t3.tensorName), t3.quantParameterTensorNames && t3.quantParameterTensorNames.length) {
              n2.quantParameterTensorNames = [];
              for (var r2 = 0; r2 < t3.quantParameterTensorNames.length; ++r2) n2.quantParameterTensorNames[r2] = l.onnx.StringStringEntryProto.toObject(t3.quantParameterTensorNames[r2], e2);
            }
            return n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.GraphProto = function() {
          function t2(t3) {
            if (this.node = [], this.initializer = [], this.input = [], this.output = [], this.valueInfo = [], this.quantizationAnnotation = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.node = c.emptyArray, t2.prototype.name = "", t2.prototype.initializer = c.emptyArray, t2.prototype.docString = "", t2.prototype.input = c.emptyArray, t2.prototype.output = c.emptyArray, t2.prototype.valueInfo = c.emptyArray, t2.prototype.quantizationAnnotation = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.node && t3.node.length) for (var n2 = 0; n2 < t3.node.length; ++n2) l.onnx.NodeProto.encode(t3.node[n2], e2.uint32(10).fork()).ldelim();
            if (null != t3.name && t3.hasOwnProperty("name") && e2.uint32(18).string(t3.name), null != t3.initializer && t3.initializer.length) for (n2 = 0; n2 < t3.initializer.length; ++n2) l.onnx.TensorProto.encode(t3.initializer[n2], e2.uint32(42).fork()).ldelim();
            if (null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(82).string(t3.docString), null != t3.input && t3.input.length) for (n2 = 0; n2 < t3.input.length; ++n2) l.onnx.ValueInfoProto.encode(t3.input[n2], e2.uint32(90).fork()).ldelim();
            if (null != t3.output && t3.output.length) for (n2 = 0; n2 < t3.output.length; ++n2) l.onnx.ValueInfoProto.encode(t3.output[n2], e2.uint32(98).fork()).ldelim();
            if (null != t3.valueInfo && t3.valueInfo.length) for (n2 = 0; n2 < t3.valueInfo.length; ++n2) l.onnx.ValueInfoProto.encode(t3.valueInfo[n2], e2.uint32(106).fork()).ldelim();
            if (null != t3.quantizationAnnotation && t3.quantizationAnnotation.length) for (n2 = 0; n2 < t3.quantizationAnnotation.length; ++n2) l.onnx.TensorAnnotation.encode(t3.quantizationAnnotation[n2], e2.uint32(114).fork()).ldelim();
            return e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.GraphProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.node && r2.node.length || (r2.node = []), r2.node.push(l.onnx.NodeProto.decode(t3, t3.uint32()));
                  break;
                case 2:
                  r2.name = t3.string();
                  break;
                case 5:
                  r2.initializer && r2.initializer.length || (r2.initializer = []), r2.initializer.push(l.onnx.TensorProto.decode(t3, t3.uint32()));
                  break;
                case 10:
                  r2.docString = t3.string();
                  break;
                case 11:
                  r2.input && r2.input.length || (r2.input = []), r2.input.push(l.onnx.ValueInfoProto.decode(t3, t3.uint32()));
                  break;
                case 12:
                  r2.output && r2.output.length || (r2.output = []), r2.output.push(l.onnx.ValueInfoProto.decode(t3, t3.uint32()));
                  break;
                case 13:
                  r2.valueInfo && r2.valueInfo.length || (r2.valueInfo = []), r2.valueInfo.push(l.onnx.ValueInfoProto.decode(t3, t3.uint32()));
                  break;
                case 14:
                  r2.quantizationAnnotation && r2.quantizationAnnotation.length || (r2.quantizationAnnotation = []), r2.quantizationAnnotation.push(l.onnx.TensorAnnotation.decode(t3, t3.uint32()));
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.node && t3.hasOwnProperty("node")) {
              if (!Array.isArray(t3.node)) return "node: array expected";
              for (var e2 = 0; e2 < t3.node.length; ++e2) if (n2 = l.onnx.NodeProto.verify(t3.node[e2])) return "node." + n2;
            }
            if (null != t3.name && t3.hasOwnProperty("name") && !c.isString(t3.name)) return "name: string expected";
            if (null != t3.initializer && t3.hasOwnProperty("initializer")) {
              if (!Array.isArray(t3.initializer)) return "initializer: array expected";
              for (e2 = 0; e2 < t3.initializer.length; ++e2) if (n2 = l.onnx.TensorProto.verify(t3.initializer[e2])) return "initializer." + n2;
            }
            if (null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString)) return "docString: string expected";
            if (null != t3.input && t3.hasOwnProperty("input")) {
              if (!Array.isArray(t3.input)) return "input: array expected";
              for (e2 = 0; e2 < t3.input.length; ++e2) if (n2 = l.onnx.ValueInfoProto.verify(t3.input[e2])) return "input." + n2;
            }
            if (null != t3.output && t3.hasOwnProperty("output")) {
              if (!Array.isArray(t3.output)) return "output: array expected";
              for (e2 = 0; e2 < t3.output.length; ++e2) if (n2 = l.onnx.ValueInfoProto.verify(t3.output[e2])) return "output." + n2;
            }
            if (null != t3.valueInfo && t3.hasOwnProperty("valueInfo")) {
              if (!Array.isArray(t3.valueInfo)) return "valueInfo: array expected";
              for (e2 = 0; e2 < t3.valueInfo.length; ++e2) if (n2 = l.onnx.ValueInfoProto.verify(t3.valueInfo[e2])) return "valueInfo." + n2;
            }
            if (null != t3.quantizationAnnotation && t3.hasOwnProperty("quantizationAnnotation")) {
              if (!Array.isArray(t3.quantizationAnnotation)) return "quantizationAnnotation: array expected";
              for (e2 = 0; e2 < t3.quantizationAnnotation.length; ++e2) {
                var n2;
                if (n2 = l.onnx.TensorAnnotation.verify(t3.quantizationAnnotation[e2])) return "quantizationAnnotation." + n2;
              }
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.GraphProto) return t3;
            var e2 = new l.onnx.GraphProto();
            if (t3.node) {
              if (!Array.isArray(t3.node)) throw TypeError(".onnx.GraphProto.node: array expected");
              e2.node = [];
              for (var n2 = 0; n2 < t3.node.length; ++n2) {
                if ("object" != typeof t3.node[n2]) throw TypeError(".onnx.GraphProto.node: object expected");
                e2.node[n2] = l.onnx.NodeProto.fromObject(t3.node[n2]);
              }
            }
            if (null != t3.name && (e2.name = String(t3.name)), t3.initializer) {
              if (!Array.isArray(t3.initializer)) throw TypeError(".onnx.GraphProto.initializer: array expected");
              for (e2.initializer = [], n2 = 0; n2 < t3.initializer.length; ++n2) {
                if ("object" != typeof t3.initializer[n2]) throw TypeError(".onnx.GraphProto.initializer: object expected");
                e2.initializer[n2] = l.onnx.TensorProto.fromObject(t3.initializer[n2]);
              }
            }
            if (null != t3.docString && (e2.docString = String(t3.docString)), t3.input) {
              if (!Array.isArray(t3.input)) throw TypeError(".onnx.GraphProto.input: array expected");
              for (e2.input = [], n2 = 0; n2 < t3.input.length; ++n2) {
                if ("object" != typeof t3.input[n2]) throw TypeError(".onnx.GraphProto.input: object expected");
                e2.input[n2] = l.onnx.ValueInfoProto.fromObject(t3.input[n2]);
              }
            }
            if (t3.output) {
              if (!Array.isArray(t3.output)) throw TypeError(".onnx.GraphProto.output: array expected");
              for (e2.output = [], n2 = 0; n2 < t3.output.length; ++n2) {
                if ("object" != typeof t3.output[n2]) throw TypeError(".onnx.GraphProto.output: object expected");
                e2.output[n2] = l.onnx.ValueInfoProto.fromObject(t3.output[n2]);
              }
            }
            if (t3.valueInfo) {
              if (!Array.isArray(t3.valueInfo)) throw TypeError(".onnx.GraphProto.valueInfo: array expected");
              for (e2.valueInfo = [], n2 = 0; n2 < t3.valueInfo.length; ++n2) {
                if ("object" != typeof t3.valueInfo[n2]) throw TypeError(".onnx.GraphProto.valueInfo: object expected");
                e2.valueInfo[n2] = l.onnx.ValueInfoProto.fromObject(t3.valueInfo[n2]);
              }
            }
            if (t3.quantizationAnnotation) {
              if (!Array.isArray(t3.quantizationAnnotation)) throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");
              for (e2.quantizationAnnotation = [], n2 = 0; n2 < t3.quantizationAnnotation.length; ++n2) {
                if ("object" != typeof t3.quantizationAnnotation[n2]) throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");
                e2.quantizationAnnotation[n2] = l.onnx.TensorAnnotation.fromObject(t3.quantizationAnnotation[n2]);
              }
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.node = [], n2.initializer = [], n2.input = [], n2.output = [], n2.valueInfo = [], n2.quantizationAnnotation = []), e2.defaults && (n2.name = "", n2.docString = ""), t3.node && t3.node.length) {
              n2.node = [];
              for (var r2 = 0; r2 < t3.node.length; ++r2) n2.node[r2] = l.onnx.NodeProto.toObject(t3.node[r2], e2);
            }
            if (null != t3.name && t3.hasOwnProperty("name") && (n2.name = t3.name), t3.initializer && t3.initializer.length) for (n2.initializer = [], r2 = 0; r2 < t3.initializer.length; ++r2) n2.initializer[r2] = l.onnx.TensorProto.toObject(t3.initializer[r2], e2);
            if (null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), t3.input && t3.input.length) for (n2.input = [], r2 = 0; r2 < t3.input.length; ++r2) n2.input[r2] = l.onnx.ValueInfoProto.toObject(t3.input[r2], e2);
            if (t3.output && t3.output.length) for (n2.output = [], r2 = 0; r2 < t3.output.length; ++r2) n2.output[r2] = l.onnx.ValueInfoProto.toObject(t3.output[r2], e2);
            if (t3.valueInfo && t3.valueInfo.length) for (n2.valueInfo = [], r2 = 0; r2 < t3.valueInfo.length; ++r2) n2.valueInfo[r2] = l.onnx.ValueInfoProto.toObject(t3.valueInfo[r2], e2);
            if (t3.quantizationAnnotation && t3.quantizationAnnotation.length) for (n2.quantizationAnnotation = [], r2 = 0; r2 < t3.quantizationAnnotation.length; ++r2) n2.quantizationAnnotation[r2] = l.onnx.TensorAnnotation.toObject(t3.quantizationAnnotation[r2], e2);
            return n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o.TensorProto = function() {
          function t2(t3) {
            if (this.dims = [], this.floatData = [], this.int32Data = [], this.stringData = [], this.int64Data = [], this.externalData = [], this.doubleData = [], this.uint64Data = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.dims = c.emptyArray, t2.prototype.dataType = 0, t2.prototype.segment = null, t2.prototype.floatData = c.emptyArray, t2.prototype.int32Data = c.emptyArray, t2.prototype.stringData = c.emptyArray, t2.prototype.int64Data = c.emptyArray, t2.prototype.name = "", t2.prototype.docString = "", t2.prototype.rawData = c.newBuffer([]), t2.prototype.externalData = c.emptyArray, t2.prototype.dataLocation = 0, t2.prototype.doubleData = c.emptyArray, t2.prototype.uint64Data = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.dims && t3.dims.length) {
              e2.uint32(10).fork();
              for (var n2 = 0; n2 < t3.dims.length; ++n2) e2.int64(t3.dims[n2]);
              e2.ldelim();
            }
            if (null != t3.dataType && t3.hasOwnProperty("dataType") && e2.uint32(16).int32(t3.dataType), null != t3.segment && t3.hasOwnProperty("segment") && l.onnx.TensorProto.Segment.encode(t3.segment, e2.uint32(26).fork()).ldelim(), null != t3.floatData && t3.floatData.length) {
              for (e2.uint32(34).fork(), n2 = 0; n2 < t3.floatData.length; ++n2) e2.float(t3.floatData[n2]);
              e2.ldelim();
            }
            if (null != t3.int32Data && t3.int32Data.length) {
              for (e2.uint32(42).fork(), n2 = 0; n2 < t3.int32Data.length; ++n2) e2.int32(t3.int32Data[n2]);
              e2.ldelim();
            }
            if (null != t3.stringData && t3.stringData.length) for (n2 = 0; n2 < t3.stringData.length; ++n2) e2.uint32(50).bytes(t3.stringData[n2]);
            if (null != t3.int64Data && t3.int64Data.length) {
              for (e2.uint32(58).fork(), n2 = 0; n2 < t3.int64Data.length; ++n2) e2.int64(t3.int64Data[n2]);
              e2.ldelim();
            }
            if (null != t3.name && t3.hasOwnProperty("name") && e2.uint32(66).string(t3.name), null != t3.rawData && t3.hasOwnProperty("rawData") && e2.uint32(74).bytes(t3.rawData), null != t3.doubleData && t3.doubleData.length) {
              for (e2.uint32(82).fork(), n2 = 0; n2 < t3.doubleData.length; ++n2) e2.double(t3.doubleData[n2]);
              e2.ldelim();
            }
            if (null != t3.uint64Data && t3.uint64Data.length) {
              for (e2.uint32(90).fork(), n2 = 0; n2 < t3.uint64Data.length; ++n2) e2.uint64(t3.uint64Data[n2]);
              e2.ldelim();
            }
            if (null != t3.docString && t3.hasOwnProperty("docString") && e2.uint32(98).string(t3.docString), null != t3.externalData && t3.externalData.length) for (n2 = 0; n2 < t3.externalData.length; ++n2) l.onnx.StringStringEntryProto.encode(t3.externalData[n2], e2.uint32(106).fork()).ldelim();
            return null != t3.dataLocation && t3.hasOwnProperty("dataLocation") && e2.uint32(112).int32(t3.dataLocation), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.TensorProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  if (r2.dims && r2.dims.length || (r2.dims = []), 2 == (7 & i2)) for (var o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.dims.push(t3.int64());
                  else r2.dims.push(t3.int64());
                  break;
                case 2:
                  r2.dataType = t3.int32();
                  break;
                case 3:
                  r2.segment = l.onnx.TensorProto.Segment.decode(t3, t3.uint32());
                  break;
                case 4:
                  if (r2.floatData && r2.floatData.length || (r2.floatData = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.floatData.push(t3.float());
                  else r2.floatData.push(t3.float());
                  break;
                case 5:
                  if (r2.int32Data && r2.int32Data.length || (r2.int32Data = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.int32Data.push(t3.int32());
                  else r2.int32Data.push(t3.int32());
                  break;
                case 6:
                  r2.stringData && r2.stringData.length || (r2.stringData = []), r2.stringData.push(t3.bytes());
                  break;
                case 7:
                  if (r2.int64Data && r2.int64Data.length || (r2.int64Data = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.int64Data.push(t3.int64());
                  else r2.int64Data.push(t3.int64());
                  break;
                case 8:
                  r2.name = t3.string();
                  break;
                case 12:
                  r2.docString = t3.string();
                  break;
                case 9:
                  r2.rawData = t3.bytes();
                  break;
                case 13:
                  r2.externalData && r2.externalData.length || (r2.externalData = []), r2.externalData.push(l.onnx.StringStringEntryProto.decode(t3, t3.uint32()));
                  break;
                case 14:
                  r2.dataLocation = t3.int32();
                  break;
                case 10:
                  if (r2.doubleData && r2.doubleData.length || (r2.doubleData = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.doubleData.push(t3.double());
                  else r2.doubleData.push(t3.double());
                  break;
                case 11:
                  if (r2.uint64Data && r2.uint64Data.length || (r2.uint64Data = []), 2 == (7 & i2)) for (o2 = t3.uint32() + t3.pos; t3.pos < o2; ) r2.uint64Data.push(t3.uint64());
                  else r2.uint64Data.push(t3.uint64());
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.dims && t3.hasOwnProperty("dims")) {
              if (!Array.isArray(t3.dims)) return "dims: array expected";
              for (var e2 = 0; e2 < t3.dims.length; ++e2) if (!(c.isInteger(t3.dims[e2]) || t3.dims[e2] && c.isInteger(t3.dims[e2].low) && c.isInteger(t3.dims[e2].high))) return "dims: integer|Long[] expected";
            }
            if (null != t3.dataType && t3.hasOwnProperty("dataType") && !c.isInteger(t3.dataType)) return "dataType: integer expected";
            if (null != t3.segment && t3.hasOwnProperty("segment") && (n2 = l.onnx.TensorProto.Segment.verify(t3.segment))) return "segment." + n2;
            if (null != t3.floatData && t3.hasOwnProperty("floatData")) {
              if (!Array.isArray(t3.floatData)) return "floatData: array expected";
              for (e2 = 0; e2 < t3.floatData.length; ++e2) if ("number" != typeof t3.floatData[e2]) return "floatData: number[] expected";
            }
            if (null != t3.int32Data && t3.hasOwnProperty("int32Data")) {
              if (!Array.isArray(t3.int32Data)) return "int32Data: array expected";
              for (e2 = 0; e2 < t3.int32Data.length; ++e2) if (!c.isInteger(t3.int32Data[e2])) return "int32Data: integer[] expected";
            }
            if (null != t3.stringData && t3.hasOwnProperty("stringData")) {
              if (!Array.isArray(t3.stringData)) return "stringData: array expected";
              for (e2 = 0; e2 < t3.stringData.length; ++e2) if (!(t3.stringData[e2] && "number" == typeof t3.stringData[e2].length || c.isString(t3.stringData[e2]))) return "stringData: buffer[] expected";
            }
            if (null != t3.int64Data && t3.hasOwnProperty("int64Data")) {
              if (!Array.isArray(t3.int64Data)) return "int64Data: array expected";
              for (e2 = 0; e2 < t3.int64Data.length; ++e2) if (!(c.isInteger(t3.int64Data[e2]) || t3.int64Data[e2] && c.isInteger(t3.int64Data[e2].low) && c.isInteger(t3.int64Data[e2].high))) return "int64Data: integer|Long[] expected";
            }
            if (null != t3.name && t3.hasOwnProperty("name") && !c.isString(t3.name)) return "name: string expected";
            if (null != t3.docString && t3.hasOwnProperty("docString") && !c.isString(t3.docString)) return "docString: string expected";
            if (null != t3.rawData && t3.hasOwnProperty("rawData") && !(t3.rawData && "number" == typeof t3.rawData.length || c.isString(t3.rawData))) return "rawData: buffer expected";
            if (null != t3.externalData && t3.hasOwnProperty("externalData")) {
              if (!Array.isArray(t3.externalData)) return "externalData: array expected";
              for (e2 = 0; e2 < t3.externalData.length; ++e2) {
                var n2;
                if (n2 = l.onnx.StringStringEntryProto.verify(t3.externalData[e2])) return "externalData." + n2;
              }
            }
            if (null != t3.dataLocation && t3.hasOwnProperty("dataLocation")) switch (t3.dataLocation) {
              default:
                return "dataLocation: enum value expected";
              case 0:
              case 1:
            }
            if (null != t3.doubleData && t3.hasOwnProperty("doubleData")) {
              if (!Array.isArray(t3.doubleData)) return "doubleData: array expected";
              for (e2 = 0; e2 < t3.doubleData.length; ++e2) if ("number" != typeof t3.doubleData[e2]) return "doubleData: number[] expected";
            }
            if (null != t3.uint64Data && t3.hasOwnProperty("uint64Data")) {
              if (!Array.isArray(t3.uint64Data)) return "uint64Data: array expected";
              for (e2 = 0; e2 < t3.uint64Data.length; ++e2) if (!(c.isInteger(t3.uint64Data[e2]) || t3.uint64Data[e2] && c.isInteger(t3.uint64Data[e2].low) && c.isInteger(t3.uint64Data[e2].high))) return "uint64Data: integer|Long[] expected";
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.TensorProto) return t3;
            var e2 = new l.onnx.TensorProto();
            if (t3.dims) {
              if (!Array.isArray(t3.dims)) throw TypeError(".onnx.TensorProto.dims: array expected");
              e2.dims = [];
              for (var n2 = 0; n2 < t3.dims.length; ++n2) c.Long ? (e2.dims[n2] = c.Long.fromValue(t3.dims[n2])).unsigned = false : "string" == typeof t3.dims[n2] ? e2.dims[n2] = parseInt(t3.dims[n2], 10) : "number" == typeof t3.dims[n2] ? e2.dims[n2] = t3.dims[n2] : "object" == typeof t3.dims[n2] && (e2.dims[n2] = new c.LongBits(t3.dims[n2].low >>> 0, t3.dims[n2].high >>> 0).toNumber());
            }
            if (null != t3.dataType && (e2.dataType = 0 | t3.dataType), null != t3.segment) {
              if ("object" != typeof t3.segment) throw TypeError(".onnx.TensorProto.segment: object expected");
              e2.segment = l.onnx.TensorProto.Segment.fromObject(t3.segment);
            }
            if (t3.floatData) {
              if (!Array.isArray(t3.floatData)) throw TypeError(".onnx.TensorProto.floatData: array expected");
              for (e2.floatData = [], n2 = 0; n2 < t3.floatData.length; ++n2) e2.floatData[n2] = Number(t3.floatData[n2]);
            }
            if (t3.int32Data) {
              if (!Array.isArray(t3.int32Data)) throw TypeError(".onnx.TensorProto.int32Data: array expected");
              for (e2.int32Data = [], n2 = 0; n2 < t3.int32Data.length; ++n2) e2.int32Data[n2] = 0 | t3.int32Data[n2];
            }
            if (t3.stringData) {
              if (!Array.isArray(t3.stringData)) throw TypeError(".onnx.TensorProto.stringData: array expected");
              for (e2.stringData = [], n2 = 0; n2 < t3.stringData.length; ++n2) "string" == typeof t3.stringData[n2] ? c.base64.decode(t3.stringData[n2], e2.stringData[n2] = c.newBuffer(c.base64.length(t3.stringData[n2])), 0) : t3.stringData[n2].length && (e2.stringData[n2] = t3.stringData[n2]);
            }
            if (t3.int64Data) {
              if (!Array.isArray(t3.int64Data)) throw TypeError(".onnx.TensorProto.int64Data: array expected");
              for (e2.int64Data = [], n2 = 0; n2 < t3.int64Data.length; ++n2) c.Long ? (e2.int64Data[n2] = c.Long.fromValue(t3.int64Data[n2])).unsigned = false : "string" == typeof t3.int64Data[n2] ? e2.int64Data[n2] = parseInt(t3.int64Data[n2], 10) : "number" == typeof t3.int64Data[n2] ? e2.int64Data[n2] = t3.int64Data[n2] : "object" == typeof t3.int64Data[n2] && (e2.int64Data[n2] = new c.LongBits(t3.int64Data[n2].low >>> 0, t3.int64Data[n2].high >>> 0).toNumber());
            }
            if (null != t3.name && (e2.name = String(t3.name)), null != t3.docString && (e2.docString = String(t3.docString)), null != t3.rawData && ("string" == typeof t3.rawData ? c.base64.decode(t3.rawData, e2.rawData = c.newBuffer(c.base64.length(t3.rawData)), 0) : t3.rawData.length && (e2.rawData = t3.rawData)), t3.externalData) {
              if (!Array.isArray(t3.externalData)) throw TypeError(".onnx.TensorProto.externalData: array expected");
              for (e2.externalData = [], n2 = 0; n2 < t3.externalData.length; ++n2) {
                if ("object" != typeof t3.externalData[n2]) throw TypeError(".onnx.TensorProto.externalData: object expected");
                e2.externalData[n2] = l.onnx.StringStringEntryProto.fromObject(t3.externalData[n2]);
              }
            }
            switch (t3.dataLocation) {
              case "DEFAULT":
              case 0:
                e2.dataLocation = 0;
                break;
              case "EXTERNAL":
              case 1:
                e2.dataLocation = 1;
            }
            if (t3.doubleData) {
              if (!Array.isArray(t3.doubleData)) throw TypeError(".onnx.TensorProto.doubleData: array expected");
              for (e2.doubleData = [], n2 = 0; n2 < t3.doubleData.length; ++n2) e2.doubleData[n2] = Number(t3.doubleData[n2]);
            }
            if (t3.uint64Data) {
              if (!Array.isArray(t3.uint64Data)) throw TypeError(".onnx.TensorProto.uint64Data: array expected");
              for (e2.uint64Data = [], n2 = 0; n2 < t3.uint64Data.length; ++n2) c.Long ? (e2.uint64Data[n2] = c.Long.fromValue(t3.uint64Data[n2])).unsigned = true : "string" == typeof t3.uint64Data[n2] ? e2.uint64Data[n2] = parseInt(t3.uint64Data[n2], 10) : "number" == typeof t3.uint64Data[n2] ? e2.uint64Data[n2] = t3.uint64Data[n2] : "object" == typeof t3.uint64Data[n2] && (e2.uint64Data[n2] = new c.LongBits(t3.uint64Data[n2].low >>> 0, t3.uint64Data[n2].high >>> 0).toNumber(true));
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.dims = [], n2.floatData = [], n2.int32Data = [], n2.stringData = [], n2.int64Data = [], n2.doubleData = [], n2.uint64Data = [], n2.externalData = []), e2.defaults && (n2.dataType = 0, n2.segment = null, n2.name = "", e2.bytes === String ? n2.rawData = "" : (n2.rawData = [], e2.bytes !== Array && (n2.rawData = c.newBuffer(n2.rawData))), n2.docString = "", n2.dataLocation = e2.enums === String ? "DEFAULT" : 0), t3.dims && t3.dims.length) {
              n2.dims = [];
              for (var r2 = 0; r2 < t3.dims.length; ++r2) "number" == typeof t3.dims[r2] ? n2.dims[r2] = e2.longs === String ? String(t3.dims[r2]) : t3.dims[r2] : n2.dims[r2] = e2.longs === String ? c.Long.prototype.toString.call(t3.dims[r2]) : e2.longs === Number ? new c.LongBits(t3.dims[r2].low >>> 0, t3.dims[r2].high >>> 0).toNumber() : t3.dims[r2];
            }
            if (null != t3.dataType && t3.hasOwnProperty("dataType") && (n2.dataType = t3.dataType), null != t3.segment && t3.hasOwnProperty("segment") && (n2.segment = l.onnx.TensorProto.Segment.toObject(t3.segment, e2)), t3.floatData && t3.floatData.length) for (n2.floatData = [], r2 = 0; r2 < t3.floatData.length; ++r2) n2.floatData[r2] = e2.json && !isFinite(t3.floatData[r2]) ? String(t3.floatData[r2]) : t3.floatData[r2];
            if (t3.int32Data && t3.int32Data.length) for (n2.int32Data = [], r2 = 0; r2 < t3.int32Data.length; ++r2) n2.int32Data[r2] = t3.int32Data[r2];
            if (t3.stringData && t3.stringData.length) for (n2.stringData = [], r2 = 0; r2 < t3.stringData.length; ++r2) n2.stringData[r2] = e2.bytes === String ? c.base64.encode(t3.stringData[r2], 0, t3.stringData[r2].length) : e2.bytes === Array ? Array.prototype.slice.call(t3.stringData[r2]) : t3.stringData[r2];
            if (t3.int64Data && t3.int64Data.length) for (n2.int64Data = [], r2 = 0; r2 < t3.int64Data.length; ++r2) "number" == typeof t3.int64Data[r2] ? n2.int64Data[r2] = e2.longs === String ? String(t3.int64Data[r2]) : t3.int64Data[r2] : n2.int64Data[r2] = e2.longs === String ? c.Long.prototype.toString.call(t3.int64Data[r2]) : e2.longs === Number ? new c.LongBits(t3.int64Data[r2].low >>> 0, t3.int64Data[r2].high >>> 0).toNumber() : t3.int64Data[r2];
            if (null != t3.name && t3.hasOwnProperty("name") && (n2.name = t3.name), null != t3.rawData && t3.hasOwnProperty("rawData") && (n2.rawData = e2.bytes === String ? c.base64.encode(t3.rawData, 0, t3.rawData.length) : e2.bytes === Array ? Array.prototype.slice.call(t3.rawData) : t3.rawData), t3.doubleData && t3.doubleData.length) for (n2.doubleData = [], r2 = 0; r2 < t3.doubleData.length; ++r2) n2.doubleData[r2] = e2.json && !isFinite(t3.doubleData[r2]) ? String(t3.doubleData[r2]) : t3.doubleData[r2];
            if (t3.uint64Data && t3.uint64Data.length) for (n2.uint64Data = [], r2 = 0; r2 < t3.uint64Data.length; ++r2) "number" == typeof t3.uint64Data[r2] ? n2.uint64Data[r2] = e2.longs === String ? String(t3.uint64Data[r2]) : t3.uint64Data[r2] : n2.uint64Data[r2] = e2.longs === String ? c.Long.prototype.toString.call(t3.uint64Data[r2]) : e2.longs === Number ? new c.LongBits(t3.uint64Data[r2].low >>> 0, t3.uint64Data[r2].high >>> 0).toNumber(true) : t3.uint64Data[r2];
            if (null != t3.docString && t3.hasOwnProperty("docString") && (n2.docString = t3.docString), t3.externalData && t3.externalData.length) for (n2.externalData = [], r2 = 0; r2 < t3.externalData.length; ++r2) n2.externalData[r2] = l.onnx.StringStringEntryProto.toObject(t3.externalData[r2], e2);
            return null != t3.dataLocation && t3.hasOwnProperty("dataLocation") && (n2.dataLocation = e2.enums === String ? l.onnx.TensorProto.DataLocation[t3.dataLocation] : t3.dataLocation), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2.DataType = function() {
            var t3 = {}, e2 = Object.create(t3);
            return e2[t3[0] = "UNDEFINED"] = 0, e2[t3[1] = "FLOAT"] = 1, e2[t3[2] = "UINT8"] = 2, e2[t3[3] = "INT8"] = 3, e2[t3[4] = "UINT16"] = 4, e2[t3[5] = "INT16"] = 5, e2[t3[6] = "INT32"] = 6, e2[t3[7] = "INT64"] = 7, e2[t3[8] = "STRING"] = 8, e2[t3[9] = "BOOL"] = 9, e2[t3[10] = "FLOAT16"] = 10, e2[t3[11] = "DOUBLE"] = 11, e2[t3[12] = "UINT32"] = 12, e2[t3[13] = "UINT64"] = 13, e2[t3[14] = "COMPLEX64"] = 14, e2[t3[15] = "COMPLEX128"] = 15, e2[t3[16] = "BFLOAT16"] = 16, e2;
          }(), t2.Segment = function() {
            function t3(t4) {
              if (t4) for (var e2 = Object.keys(t4), n2 = 0; n2 < e2.length; ++n2) null != t4[e2[n2]] && (this[e2[n2]] = t4[e2[n2]]);
            }
            __name(t3, "t");
            return t3.prototype.begin = c.Long ? c.Long.fromBits(0, 0, false) : 0, t3.prototype.end = c.Long ? c.Long.fromBits(0, 0, false) : 0, t3.create = function(e2) {
              return new t3(e2);
            }, t3.encode = function(t4, e2) {
              return e2 || (e2 = u.create()), null != t4.begin && t4.hasOwnProperty("begin") && e2.uint32(8).int64(t4.begin), null != t4.end && t4.hasOwnProperty("end") && e2.uint32(16).int64(t4.end), e2;
            }, t3.encodeDelimited = function(t4, e2) {
              return this.encode(t4, e2).ldelim();
            }, t3.decode = function(t4, e2) {
              t4 instanceof s || (t4 = s.create(t4));
              for (var n2 = void 0 === e2 ? t4.len : t4.pos + e2, r2 = new l.onnx.TensorProto.Segment(); t4.pos < n2; ) {
                var i2 = t4.uint32();
                switch (i2 >>> 3) {
                  case 1:
                    r2.begin = t4.int64();
                    break;
                  case 2:
                    r2.end = t4.int64();
                    break;
                  default:
                    t4.skipType(7 & i2);
                }
              }
              return r2;
            }, t3.decodeDelimited = function(t4) {
              return t4 instanceof s || (t4 = new s(t4)), this.decode(t4, t4.uint32());
            }, t3.verify = function(t4) {
              return "object" != typeof t4 || null === t4 ? "object expected" : null != t4.begin && t4.hasOwnProperty("begin") && !(c.isInteger(t4.begin) || t4.begin && c.isInteger(t4.begin.low) && c.isInteger(t4.begin.high)) ? "begin: integer|Long expected" : null != t4.end && t4.hasOwnProperty("end") && !(c.isInteger(t4.end) || t4.end && c.isInteger(t4.end.low) && c.isInteger(t4.end.high)) ? "end: integer|Long expected" : null;
            }, t3.fromObject = function(t4) {
              if (t4 instanceof l.onnx.TensorProto.Segment) return t4;
              var e2 = new l.onnx.TensorProto.Segment();
              return null != t4.begin && (c.Long ? (e2.begin = c.Long.fromValue(t4.begin)).unsigned = false : "string" == typeof t4.begin ? e2.begin = parseInt(t4.begin, 10) : "number" == typeof t4.begin ? e2.begin = t4.begin : "object" == typeof t4.begin && (e2.begin = new c.LongBits(t4.begin.low >>> 0, t4.begin.high >>> 0).toNumber())), null != t4.end && (c.Long ? (e2.end = c.Long.fromValue(t4.end)).unsigned = false : "string" == typeof t4.end ? e2.end = parseInt(t4.end, 10) : "number" == typeof t4.end ? e2.end = t4.end : "object" == typeof t4.end && (e2.end = new c.LongBits(t4.end.low >>> 0, t4.end.high >>> 0).toNumber())), e2;
            }, t3.toObject = function(t4, e2) {
              e2 || (e2 = {});
              var n2 = {};
              if (e2.defaults) {
                if (c.Long) {
                  var r2 = new c.Long(0, 0, false);
                  n2.begin = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2;
                } else n2.begin = e2.longs === String ? "0" : 0;
                c.Long ? (r2 = new c.Long(0, 0, false), n2.end = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2) : n2.end = e2.longs === String ? "0" : 0;
              }
              return null != t4.begin && t4.hasOwnProperty("begin") && ("number" == typeof t4.begin ? n2.begin = e2.longs === String ? String(t4.begin) : t4.begin : n2.begin = e2.longs === String ? c.Long.prototype.toString.call(t4.begin) : e2.longs === Number ? new c.LongBits(t4.begin.low >>> 0, t4.begin.high >>> 0).toNumber() : t4.begin), null != t4.end && t4.hasOwnProperty("end") && ("number" == typeof t4.end ? n2.end = e2.longs === String ? String(t4.end) : t4.end : n2.end = e2.longs === String ? c.Long.prototype.toString.call(t4.end) : e2.longs === Number ? new c.LongBits(t4.end.low >>> 0, t4.end.high >>> 0).toNumber() : t4.end), n2;
            }, t3.prototype.toJSON = function() {
              return this.constructor.toObject(this, a.util.toJSONOptions);
            }, t3;
          }(), t2.DataLocation = function() {
            var t3 = {}, e2 = Object.create(t3);
            return e2[t3[0] = "DEFAULT"] = 0, e2[t3[1] = "EXTERNAL"] = 1, e2;
          }(), t2;
        }(), o.TensorShapeProto = function() {
          function t2(t3) {
            if (this.dim = [], t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.dim = c.emptyArray, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            if (e2 || (e2 = u.create()), null != t3.dim && t3.dim.length) for (var n2 = 0; n2 < t3.dim.length; ++n2) l.onnx.TensorShapeProto.Dimension.encode(t3.dim[n2], e2.uint32(10).fork()).ldelim();
            return e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.TensorShapeProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              i2 >>> 3 == 1 ? (r2.dim && r2.dim.length || (r2.dim = []), r2.dim.push(l.onnx.TensorShapeProto.Dimension.decode(t3, t3.uint32()))) : t3.skipType(7 & i2);
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.dim && t3.hasOwnProperty("dim")) {
              if (!Array.isArray(t3.dim)) return "dim: array expected";
              for (var e2 = 0; e2 < t3.dim.length; ++e2) {
                var n2 = l.onnx.TensorShapeProto.Dimension.verify(t3.dim[e2]);
                if (n2) return "dim." + n2;
              }
            }
            return null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.TensorShapeProto) return t3;
            var e2 = new l.onnx.TensorShapeProto();
            if (t3.dim) {
              if (!Array.isArray(t3.dim)) throw TypeError(".onnx.TensorShapeProto.dim: array expected");
              e2.dim = [];
              for (var n2 = 0; n2 < t3.dim.length; ++n2) {
                if ("object" != typeof t3.dim[n2]) throw TypeError(".onnx.TensorShapeProto.dim: object expected");
                e2.dim[n2] = l.onnx.TensorShapeProto.Dimension.fromObject(t3.dim[n2]);
              }
            }
            return e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if ((e2.arrays || e2.defaults) && (n2.dim = []), t3.dim && t3.dim.length) {
              n2.dim = [];
              for (var r2 = 0; r2 < t3.dim.length; ++r2) n2.dim[r2] = l.onnx.TensorShapeProto.Dimension.toObject(t3.dim[r2], e2);
            }
            return n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2.Dimension = function() {
            function t3(t4) {
              if (t4) for (var e3 = Object.keys(t4), n2 = 0; n2 < e3.length; ++n2) null != t4[e3[n2]] && (this[e3[n2]] = t4[e3[n2]]);
            }
            __name(t3, "t");
            var e2;
            return t3.prototype.dimValue = c.Long ? c.Long.fromBits(0, 0, false) : 0, t3.prototype.dimParam = "", t3.prototype.denotation = "", Object.defineProperty(t3.prototype, "value", { get: c.oneOfGetter(e2 = ["dimValue", "dimParam"]), set: c.oneOfSetter(e2) }), t3.create = function(e3) {
              return new t3(e3);
            }, t3.encode = function(t4, e3) {
              return e3 || (e3 = u.create()), null != t4.dimValue && t4.hasOwnProperty("dimValue") && e3.uint32(8).int64(t4.dimValue), null != t4.dimParam && t4.hasOwnProperty("dimParam") && e3.uint32(18).string(t4.dimParam), null != t4.denotation && t4.hasOwnProperty("denotation") && e3.uint32(26).string(t4.denotation), e3;
            }, t3.encodeDelimited = function(t4, e3) {
              return this.encode(t4, e3).ldelim();
            }, t3.decode = function(t4, e3) {
              t4 instanceof s || (t4 = s.create(t4));
              for (var n2 = void 0 === e3 ? t4.len : t4.pos + e3, r2 = new l.onnx.TensorShapeProto.Dimension(); t4.pos < n2; ) {
                var i2 = t4.uint32();
                switch (i2 >>> 3) {
                  case 1:
                    r2.dimValue = t4.int64();
                    break;
                  case 2:
                    r2.dimParam = t4.string();
                    break;
                  case 3:
                    r2.denotation = t4.string();
                    break;
                  default:
                    t4.skipType(7 & i2);
                }
              }
              return r2;
            }, t3.decodeDelimited = function(t4) {
              return t4 instanceof s || (t4 = new s(t4)), this.decode(t4, t4.uint32());
            }, t3.verify = function(t4) {
              if ("object" != typeof t4 || null === t4) return "object expected";
              var e3 = {};
              if (null != t4.dimValue && t4.hasOwnProperty("dimValue") && (e3.value = 1, !(c.isInteger(t4.dimValue) || t4.dimValue && c.isInteger(t4.dimValue.low) && c.isInteger(t4.dimValue.high)))) return "dimValue: integer|Long expected";
              if (null != t4.dimParam && t4.hasOwnProperty("dimParam")) {
                if (1 === e3.value) return "value: multiple values";
                if (e3.value = 1, !c.isString(t4.dimParam)) return "dimParam: string expected";
              }
              return null != t4.denotation && t4.hasOwnProperty("denotation") && !c.isString(t4.denotation) ? "denotation: string expected" : null;
            }, t3.fromObject = function(t4) {
              if (t4 instanceof l.onnx.TensorShapeProto.Dimension) return t4;
              var e3 = new l.onnx.TensorShapeProto.Dimension();
              return null != t4.dimValue && (c.Long ? (e3.dimValue = c.Long.fromValue(t4.dimValue)).unsigned = false : "string" == typeof t4.dimValue ? e3.dimValue = parseInt(t4.dimValue, 10) : "number" == typeof t4.dimValue ? e3.dimValue = t4.dimValue : "object" == typeof t4.dimValue && (e3.dimValue = new c.LongBits(t4.dimValue.low >>> 0, t4.dimValue.high >>> 0).toNumber())), null != t4.dimParam && (e3.dimParam = String(t4.dimParam)), null != t4.denotation && (e3.denotation = String(t4.denotation)), e3;
            }, t3.toObject = function(t4, e3) {
              e3 || (e3 = {});
              var n2 = {};
              return e3.defaults && (n2.denotation = ""), null != t4.dimValue && t4.hasOwnProperty("dimValue") && ("number" == typeof t4.dimValue ? n2.dimValue = e3.longs === String ? String(t4.dimValue) : t4.dimValue : n2.dimValue = e3.longs === String ? c.Long.prototype.toString.call(t4.dimValue) : e3.longs === Number ? new c.LongBits(t4.dimValue.low >>> 0, t4.dimValue.high >>> 0).toNumber() : t4.dimValue, e3.oneofs && (n2.value = "dimValue")), null != t4.dimParam && t4.hasOwnProperty("dimParam") && (n2.dimParam = t4.dimParam, e3.oneofs && (n2.value = "dimParam")), null != t4.denotation && t4.hasOwnProperty("denotation") && (n2.denotation = t4.denotation), n2;
            }, t3.prototype.toJSON = function() {
              return this.constructor.toObject(this, a.util.toJSONOptions);
            }, t3;
          }(), t2;
        }(), o.TypeProto = function() {
          function t2(t3) {
            if (t3) for (var e3 = Object.keys(t3), n2 = 0; n2 < e3.length; ++n2) null != t3[e3[n2]] && (this[e3[n2]] = t3[e3[n2]]);
          }
          __name(t2, "t");
          var e2;
          return t2.prototype.tensorType = null, t2.prototype.denotation = "", Object.defineProperty(t2.prototype, "value", { get: c.oneOfGetter(e2 = ["tensorType"]), set: c.oneOfSetter(e2) }), t2.create = function(e3) {
            return new t2(e3);
          }, t2.encode = function(t3, e3) {
            return e3 || (e3 = u.create()), null != t3.tensorType && t3.hasOwnProperty("tensorType") && l.onnx.TypeProto.Tensor.encode(t3.tensorType, e3.uint32(10).fork()).ldelim(), null != t3.denotation && t3.hasOwnProperty("denotation") && e3.uint32(50).string(t3.denotation), e3;
          }, t2.encodeDelimited = function(t3, e3) {
            return this.encode(t3, e3).ldelim();
          }, t2.decode = function(t3, e3) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e3 ? t3.len : t3.pos + e3, r2 = new l.onnx.TypeProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.tensorType = l.onnx.TypeProto.Tensor.decode(t3, t3.uint32());
                  break;
                case 6:
                  r2.denotation = t3.string();
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            if ("object" != typeof t3 || null === t3) return "object expected";
            if (null != t3.tensorType && t3.hasOwnProperty("tensorType")) {
              var e3 = l.onnx.TypeProto.Tensor.verify(t3.tensorType);
              if (e3) return "tensorType." + e3;
            }
            return null != t3.denotation && t3.hasOwnProperty("denotation") && !c.isString(t3.denotation) ? "denotation: string expected" : null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.TypeProto) return t3;
            var e3 = new l.onnx.TypeProto();
            if (null != t3.tensorType) {
              if ("object" != typeof t3.tensorType) throw TypeError(".onnx.TypeProto.tensorType: object expected");
              e3.tensorType = l.onnx.TypeProto.Tensor.fromObject(t3.tensorType);
            }
            return null != t3.denotation && (e3.denotation = String(t3.denotation)), e3;
          }, t2.toObject = function(t3, e3) {
            e3 || (e3 = {});
            var n2 = {};
            return e3.defaults && (n2.denotation = ""), null != t3.tensorType && t3.hasOwnProperty("tensorType") && (n2.tensorType = l.onnx.TypeProto.Tensor.toObject(t3.tensorType, e3), e3.oneofs && (n2.value = "tensorType")), null != t3.denotation && t3.hasOwnProperty("denotation") && (n2.denotation = t3.denotation), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2.Tensor = function() {
            function t3(t4) {
              if (t4) for (var e3 = Object.keys(t4), n2 = 0; n2 < e3.length; ++n2) null != t4[e3[n2]] && (this[e3[n2]] = t4[e3[n2]]);
            }
            __name(t3, "t");
            return t3.prototype.elemType = 0, t3.prototype.shape = null, t3.create = function(e3) {
              return new t3(e3);
            }, t3.encode = function(t4, e3) {
              return e3 || (e3 = u.create()), null != t4.elemType && t4.hasOwnProperty("elemType") && e3.uint32(8).int32(t4.elemType), null != t4.shape && t4.hasOwnProperty("shape") && l.onnx.TensorShapeProto.encode(t4.shape, e3.uint32(18).fork()).ldelim(), e3;
            }, t3.encodeDelimited = function(t4, e3) {
              return this.encode(t4, e3).ldelim();
            }, t3.decode = function(t4, e3) {
              t4 instanceof s || (t4 = s.create(t4));
              for (var n2 = void 0 === e3 ? t4.len : t4.pos + e3, r2 = new l.onnx.TypeProto.Tensor(); t4.pos < n2; ) {
                var i2 = t4.uint32();
                switch (i2 >>> 3) {
                  case 1:
                    r2.elemType = t4.int32();
                    break;
                  case 2:
                    r2.shape = l.onnx.TensorShapeProto.decode(t4, t4.uint32());
                    break;
                  default:
                    t4.skipType(7 & i2);
                }
              }
              return r2;
            }, t3.decodeDelimited = function(t4) {
              return t4 instanceof s || (t4 = new s(t4)), this.decode(t4, t4.uint32());
            }, t3.verify = function(t4) {
              if ("object" != typeof t4 || null === t4) return "object expected";
              if (null != t4.elemType && t4.hasOwnProperty("elemType") && !c.isInteger(t4.elemType)) return "elemType: integer expected";
              if (null != t4.shape && t4.hasOwnProperty("shape")) {
                var e3 = l.onnx.TensorShapeProto.verify(t4.shape);
                if (e3) return "shape." + e3;
              }
              return null;
            }, t3.fromObject = function(t4) {
              if (t4 instanceof l.onnx.TypeProto.Tensor) return t4;
              var e3 = new l.onnx.TypeProto.Tensor();
              if (null != t4.elemType && (e3.elemType = 0 | t4.elemType), null != t4.shape) {
                if ("object" != typeof t4.shape) throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");
                e3.shape = l.onnx.TensorShapeProto.fromObject(t4.shape);
              }
              return e3;
            }, t3.toObject = function(t4, e3) {
              e3 || (e3 = {});
              var n2 = {};
              return e3.defaults && (n2.elemType = 0, n2.shape = null), null != t4.elemType && t4.hasOwnProperty("elemType") && (n2.elemType = t4.elemType), null != t4.shape && t4.hasOwnProperty("shape") && (n2.shape = l.onnx.TensorShapeProto.toObject(t4.shape, e3)), n2;
            }, t3.prototype.toJSON = function() {
              return this.constructor.toObject(this, a.util.toJSONOptions);
            }, t3;
          }(), t2;
        }(), o.OperatorSetIdProto = function() {
          function t2(t3) {
            if (t3) for (var e2 = Object.keys(t3), n2 = 0; n2 < e2.length; ++n2) null != t3[e2[n2]] && (this[e2[n2]] = t3[e2[n2]]);
          }
          __name(t2, "t");
          return t2.prototype.domain = "", t2.prototype.version = c.Long ? c.Long.fromBits(0, 0, false) : 0, t2.create = function(e2) {
            return new t2(e2);
          }, t2.encode = function(t3, e2) {
            return e2 || (e2 = u.create()), null != t3.domain && t3.hasOwnProperty("domain") && e2.uint32(10).string(t3.domain), null != t3.version && t3.hasOwnProperty("version") && e2.uint32(16).int64(t3.version), e2;
          }, t2.encodeDelimited = function(t3, e2) {
            return this.encode(t3, e2).ldelim();
          }, t2.decode = function(t3, e2) {
            t3 instanceof s || (t3 = s.create(t3));
            for (var n2 = void 0 === e2 ? t3.len : t3.pos + e2, r2 = new l.onnx.OperatorSetIdProto(); t3.pos < n2; ) {
              var i2 = t3.uint32();
              switch (i2 >>> 3) {
                case 1:
                  r2.domain = t3.string();
                  break;
                case 2:
                  r2.version = t3.int64();
                  break;
                default:
                  t3.skipType(7 & i2);
              }
            }
            return r2;
          }, t2.decodeDelimited = function(t3) {
            return t3 instanceof s || (t3 = new s(t3)), this.decode(t3, t3.uint32());
          }, t2.verify = function(t3) {
            return "object" != typeof t3 || null === t3 ? "object expected" : null != t3.domain && t3.hasOwnProperty("domain") && !c.isString(t3.domain) ? "domain: string expected" : null != t3.version && t3.hasOwnProperty("version") && !(c.isInteger(t3.version) || t3.version && c.isInteger(t3.version.low) && c.isInteger(t3.version.high)) ? "version: integer|Long expected" : null;
          }, t2.fromObject = function(t3) {
            if (t3 instanceof l.onnx.OperatorSetIdProto) return t3;
            var e2 = new l.onnx.OperatorSetIdProto();
            return null != t3.domain && (e2.domain = String(t3.domain)), null != t3.version && (c.Long ? (e2.version = c.Long.fromValue(t3.version)).unsigned = false : "string" == typeof t3.version ? e2.version = parseInt(t3.version, 10) : "number" == typeof t3.version ? e2.version = t3.version : "object" == typeof t3.version && (e2.version = new c.LongBits(t3.version.low >>> 0, t3.version.high >>> 0).toNumber())), e2;
          }, t2.toObject = function(t3, e2) {
            e2 || (e2 = {});
            var n2 = {};
            if (e2.defaults) if (n2.domain = "", c.Long) {
              var r2 = new c.Long(0, 0, false);
              n2.version = e2.longs === String ? r2.toString() : e2.longs === Number ? r2.toNumber() : r2;
            } else n2.version = e2.longs === String ? "0" : 0;
            return null != t3.domain && t3.hasOwnProperty("domain") && (n2.domain = t3.domain), null != t3.version && t3.hasOwnProperty("version") && ("number" == typeof t3.version ? n2.version = e2.longs === String ? String(t3.version) : t3.version : n2.version = e2.longs === String ? c.Long.prototype.toString.call(t3.version) : e2.longs === Number ? new c.LongBits(t3.version.low >>> 0, t3.version.high >>> 0).toNumber() : t3.version), n2;
          }, t2.prototype.toJSON = function() {
            return this.constructor.toObject(this, a.util.toJSONOptions);
          }, t2;
        }(), o), t.exports = l;
      }, 2100: (t, e, n) => {
        "use strict";
        t.exports = n(9482);
      }, 9482: (t, e, n) => {
        "use strict";
        var r = e;
        function i() {
          r.util._configure(), r.Writer._configure(r.BufferWriter), r.Reader._configure(r.BufferReader);
        }
        __name(i, "i");
        r.build = "minimal", r.Writer = n(1173), r.BufferWriter = n(3155), r.Reader = n(1408), r.BufferReader = n(593), r.util = n(9693), r.rpc = n(5994), r.roots = n(5054), r.configure = i, i();
      }, 1408: (t, e, n) => {
        "use strict";
        t.exports = u;
        var r, i = n(9693), o = i.LongBits, a = i.utf8;
        function s(t2, e2) {
          return RangeError("index out of range: " + t2.pos + " + " + (e2 || 1) + " > " + t2.len);
        }
        __name(s, "s");
        function u(t2) {
          this.buf = t2, this.pos = 0, this.len = t2.length;
        }
        __name(u, "u");
        var c, l = "undefined" != typeof Uint8Array ? function(t2) {
          if (t2 instanceof Uint8Array || Array.isArray(t2)) return new u(t2);
          throw Error("illegal buffer");
        } : function(t2) {
          if (Array.isArray(t2)) return new u(t2);
          throw Error("illegal buffer");
        }, p = /* @__PURE__ */ __name(function() {
          return i.Buffer ? function(t2) {
            return (u.create = function(t3) {
              return i.Buffer.isBuffer(t3) ? new r(t3) : l(t3);
            })(t2);
          } : l;
        }, "p");
        function f() {
          var t2 = new o(0, 0), e2 = 0;
          if (!(this.len - this.pos > 4)) {
            for (; e2 < 3; ++e2) {
              if (this.pos >= this.len) throw s(this);
              if (t2.lo = (t2.lo | (127 & this.buf[this.pos]) << 7 * e2) >>> 0, this.buf[this.pos++] < 128) return t2;
            }
            return t2.lo = (t2.lo | (127 & this.buf[this.pos++]) << 7 * e2) >>> 0, t2;
          }
          for (; e2 < 4; ++e2) if (t2.lo = (t2.lo | (127 & this.buf[this.pos]) << 7 * e2) >>> 0, this.buf[this.pos++] < 128) return t2;
          if (t2.lo = (t2.lo | (127 & this.buf[this.pos]) << 28) >>> 0, t2.hi = (t2.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return t2;
          if (e2 = 0, this.len - this.pos > 4) {
            for (; e2 < 5; ++e2) if (t2.hi = (t2.hi | (127 & this.buf[this.pos]) << 7 * e2 + 3) >>> 0, this.buf[this.pos++] < 128) return t2;
          } else for (; e2 < 5; ++e2) {
            if (this.pos >= this.len) throw s(this);
            if (t2.hi = (t2.hi | (127 & this.buf[this.pos]) << 7 * e2 + 3) >>> 0, this.buf[this.pos++] < 128) return t2;
          }
          throw Error("invalid varint encoding");
        }
        __name(f, "f");
        function d(t2, e2) {
          return (t2[e2 - 4] | t2[e2 - 3] << 8 | t2[e2 - 2] << 16 | t2[e2 - 1] << 24) >>> 0;
        }
        __name(d, "d");
        function h() {
          if (this.pos + 8 > this.len) throw s(this, 8);
          return new o(d(this.buf, this.pos += 4), d(this.buf, this.pos += 4));
        }
        __name(h, "h");
        u.create = p(), u.prototype._slice = i.Array.prototype.subarray || i.Array.prototype.slice, u.prototype.uint32 = (c = 4294967295, function() {
          if (c = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return c;
          if (c = (c | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return c;
          if (c = (c | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return c;
          if (c = (c | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return c;
          if (c = (c | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return c;
          if ((this.pos += 5) > this.len) throw this.pos = this.len, s(this, 10);
          return c;
        }), u.prototype.int32 = function() {
          return 0 | this.uint32();
        }, u.prototype.sint32 = function() {
          var t2 = this.uint32();
          return t2 >>> 1 ^ -(1 & t2) | 0;
        }, u.prototype.bool = function() {
          return 0 !== this.uint32();
        }, u.prototype.fixed32 = function() {
          if (this.pos + 4 > this.len) throw s(this, 4);
          return d(this.buf, this.pos += 4);
        }, u.prototype.sfixed32 = function() {
          if (this.pos + 4 > this.len) throw s(this, 4);
          return 0 | d(this.buf, this.pos += 4);
        }, u.prototype.float = function() {
          if (this.pos + 4 > this.len) throw s(this, 4);
          var t2 = i.float.readFloatLE(this.buf, this.pos);
          return this.pos += 4, t2;
        }, u.prototype.double = function() {
          if (this.pos + 8 > this.len) throw s(this, 4);
          var t2 = i.float.readDoubleLE(this.buf, this.pos);
          return this.pos += 8, t2;
        }, u.prototype.bytes = function() {
          var t2 = this.uint32(), e2 = this.pos, n2 = this.pos + t2;
          if (n2 > this.len) throw s(this, t2);
          return this.pos += t2, Array.isArray(this.buf) ? this.buf.slice(e2, n2) : e2 === n2 ? new this.buf.constructor(0) : this._slice.call(this.buf, e2, n2);
        }, u.prototype.string = function() {
          var t2 = this.bytes();
          return a.read(t2, 0, t2.length);
        }, u.prototype.skip = function(t2) {
          if ("number" == typeof t2) {
            if (this.pos + t2 > this.len) throw s(this, t2);
            this.pos += t2;
          } else do {
            if (this.pos >= this.len) throw s(this);
          } while (128 & this.buf[this.pos++]);
          return this;
        }, u.prototype.skipType = function(t2) {
          switch (t2) {
            case 0:
              this.skip();
              break;
            case 1:
              this.skip(8);
              break;
            case 2:
              this.skip(this.uint32());
              break;
            case 3:
              for (; 4 != (t2 = 7 & this.uint32()); ) this.skipType(t2);
              break;
            case 5:
              this.skip(4);
              break;
            default:
              throw Error("invalid wire type " + t2 + " at offset " + this.pos);
          }
          return this;
        }, u._configure = function(t2) {
          r = t2, u.create = p(), r._configure();
          var e2 = i.Long ? "toLong" : "toNumber";
          i.merge(u.prototype, { int64: /* @__PURE__ */ __name(function() {
            return f.call(this)[e2](false);
          }, "int64"), uint64: /* @__PURE__ */ __name(function() {
            return f.call(this)[e2](true);
          }, "uint64"), sint64: /* @__PURE__ */ __name(function() {
            return f.call(this).zzDecode()[e2](false);
          }, "sint64"), fixed64: /* @__PURE__ */ __name(function() {
            return h.call(this)[e2](true);
          }, "fixed64"), sfixed64: /* @__PURE__ */ __name(function() {
            return h.call(this)[e2](false);
          }, "sfixed64") });
        };
      }, 593: (t, e, n) => {
        "use strict";
        t.exports = o;
        var r = n(1408);
        (o.prototype = Object.create(r.prototype)).constructor = o;
        var i = n(9693);
        function o(t2) {
          r.call(this, t2);
        }
        __name(o, "o");
        o._configure = function() {
          i.Buffer && (o.prototype._slice = i.Buffer.prototype.slice);
        }, o.prototype.string = function() {
          var t2 = this.uint32();
          return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + t2, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + t2, this.len));
        }, o._configure();
      }, 5054: (t) => {
        "use strict";
        t.exports = {};
      }, 5994: (t, e, n) => {
        "use strict";
        e.Service = n(7948);
      }, 7948: (t, e, n) => {
        "use strict";
        t.exports = i;
        var r = n(9693);
        function i(t2, e2, n2) {
          if ("function" != typeof t2) throw TypeError("rpcImpl must be a function");
          r.EventEmitter.call(this), this.rpcImpl = t2, this.requestDelimited = Boolean(e2), this.responseDelimited = Boolean(n2);
        }
        __name(i, "i");
        (i.prototype = Object.create(r.EventEmitter.prototype)).constructor = i, i.prototype.rpcCall = /* @__PURE__ */ __name(function t2(e2, n2, i2, o, a) {
          if (!o) throw TypeError("request must be specified");
          var s = this;
          if (!a) return r.asPromise(t2, s, e2, n2, i2, o);
          if (s.rpcImpl) try {
            return s.rpcImpl(e2, n2[s.requestDelimited ? "encodeDelimited" : "encode"](o).finish(), function(t3, n3) {
              if (t3) return s.emit("error", t3, e2), a(t3);
              if (null !== n3) {
                if (!(n3 instanceof i2)) try {
                  n3 = i2[s.responseDelimited ? "decodeDelimited" : "decode"](n3);
                } catch (t4) {
                  return s.emit("error", t4, e2), a(t4);
                }
                return s.emit("data", n3, e2), a(null, n3);
              }
              s.end(true);
            });
          } catch (t3) {
            return s.emit("error", t3, e2), void setTimeout(function() {
              a(t3);
            }, 0);
          }
          else setTimeout(function() {
            a(Error("already ended"));
          }, 0);
        }, "t"), i.prototype.end = function(t2) {
          return this.rpcImpl && (t2 || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
        };
      }, 1945: (t, e, n) => {
        "use strict";
        t.exports = i;
        var r = n(9693);
        function i(t2, e2) {
          this.lo = t2 >>> 0, this.hi = e2 >>> 0;
        }
        __name(i, "i");
        var o = i.zero = new i(0, 0);
        o.toNumber = function() {
          return 0;
        }, o.zzEncode = o.zzDecode = function() {
          return this;
        }, o.length = function() {
          return 1;
        };
        var a = i.zeroHash = "\0\0\0\0\0\0\0\0";
        i.fromNumber = function(t2) {
          if (0 === t2) return o;
          var e2 = t2 < 0;
          e2 && (t2 = -t2);
          var n2 = t2 >>> 0, r2 = (t2 - n2) / 4294967296 >>> 0;
          return e2 && (r2 = ~r2 >>> 0, n2 = ~n2 >>> 0, ++n2 > 4294967295 && (n2 = 0, ++r2 > 4294967295 && (r2 = 0))), new i(n2, r2);
        }, i.from = function(t2) {
          if ("number" == typeof t2) return i.fromNumber(t2);
          if (r.isString(t2)) {
            if (!r.Long) return i.fromNumber(parseInt(t2, 10));
            t2 = r.Long.fromString(t2);
          }
          return t2.low || t2.high ? new i(t2.low >>> 0, t2.high >>> 0) : o;
        }, i.prototype.toNumber = function(t2) {
          if (!t2 && this.hi >>> 31) {
            var e2 = 1 + ~this.lo >>> 0, n2 = ~this.hi >>> 0;
            return e2 || (n2 = n2 + 1 >>> 0), -(e2 + 4294967296 * n2);
          }
          return this.lo + 4294967296 * this.hi;
        }, i.prototype.toLong = function(t2) {
          return r.Long ? new r.Long(0 | this.lo, 0 | this.hi, Boolean(t2)) : { low: 0 | this.lo, high: 0 | this.hi, unsigned: Boolean(t2) };
        };
        var s = String.prototype.charCodeAt;
        i.fromHash = function(t2) {
          return t2 === a ? o : new i((s.call(t2, 0) | s.call(t2, 1) << 8 | s.call(t2, 2) << 16 | s.call(t2, 3) << 24) >>> 0, (s.call(t2, 4) | s.call(t2, 5) << 8 | s.call(t2, 6) << 16 | s.call(t2, 7) << 24) >>> 0);
        }, i.prototype.toHash = function() {
          return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
        }, i.prototype.zzEncode = function() {
          var t2 = this.hi >> 31;
          return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ t2) >>> 0, this.lo = (this.lo << 1 ^ t2) >>> 0, this;
        }, i.prototype.zzDecode = function() {
          var t2 = -(1 & this.lo);
          return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ t2) >>> 0, this.hi = (this.hi >>> 1 ^ t2) >>> 0, this;
        }, i.prototype.length = function() {
          var t2 = this.lo, e2 = (this.lo >>> 28 | this.hi << 4) >>> 0, n2 = this.hi >>> 24;
          return 0 === n2 ? 0 === e2 ? t2 < 16384 ? t2 < 128 ? 1 : 2 : t2 < 2097152 ? 3 : 4 : e2 < 16384 ? e2 < 128 ? 5 : 6 : e2 < 2097152 ? 7 : 8 : n2 < 128 ? 9 : 10;
        };
      }, 9693: function(t, e, n) {
        "use strict";
        var r = e;
        function i(t2, e2, n2) {
          for (var r2 = Object.keys(e2), i2 = 0; i2 < r2.length; ++i2) void 0 !== t2[r2[i2]] && n2 || (t2[r2[i2]] = e2[r2[i2]]);
          return t2;
        }
        __name(i, "i");
        function o(t2) {
          function e2(t3, n2) {
            if (!(this instanceof e2)) return new e2(t3, n2);
            Object.defineProperty(this, "message", { get: /* @__PURE__ */ __name(function() {
              return t3;
            }, "get") }), Error.captureStackTrace ? Error.captureStackTrace(this, e2) : Object.defineProperty(this, "stack", { value: new Error().stack || "" }), n2 && i(this, n2);
          }
          __name(e2, "e");
          return (e2.prototype = Object.create(Error.prototype)).constructor = e2, Object.defineProperty(e2.prototype, "name", { get: /* @__PURE__ */ __name(function() {
            return t2;
          }, "get") }), e2.prototype.toString = function() {
            return this.name + ": " + this.message;
          }, e2;
        }
        __name(o, "o");
        r.asPromise = n(4537), r.base64 = n(7419), r.EventEmitter = n(9211), r.float = n(945), r.inquire = n(7199), r.utf8 = n(4997), r.pool = n(6662), r.LongBits = n(1945), r.isNode = Boolean(void 0 !== n.g && n.g && n.g.process && n.g.process.versions && n.g.process.versions.node), r.global = r.isNode && n.g || "undefined" != typeof window && window || "undefined" != typeof self && self || this, r.emptyArray = Object.freeze ? Object.freeze([]) : [], r.emptyObject = Object.freeze ? Object.freeze({}) : {}, r.isInteger = Number.isInteger || function(t2) {
          return "number" == typeof t2 && isFinite(t2) && Math.floor(t2) === t2;
        }, r.isString = function(t2) {
          return "string" == typeof t2 || t2 instanceof String;
        }, r.isObject = function(t2) {
          return t2 && "object" == typeof t2;
        }, r.isset = r.isSet = function(t2, e2) {
          var n2 = t2[e2];
          return !(null == n2 || !t2.hasOwnProperty(e2)) && ("object" != typeof n2 || (Array.isArray(n2) ? n2.length : Object.keys(n2).length) > 0);
        }, r.Buffer = function() {
          try {
            var t2 = r.inquire("buffer").Buffer;
            return t2.prototype.utf8Write ? t2 : null;
          } catch (t3) {
            return null;
          }
        }(), r._Buffer_from = null, r._Buffer_allocUnsafe = null, r.newBuffer = function(t2) {
          return "number" == typeof t2 ? r.Buffer ? r._Buffer_allocUnsafe(t2) : new r.Array(t2) : r.Buffer ? r._Buffer_from(t2) : "undefined" == typeof Uint8Array ? t2 : new Uint8Array(t2);
        }, r.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array, r.Long = r.global.dcodeIO && r.global.dcodeIO.Long || r.global.Long || r.inquire("long"), r.key2Re = /^true|false|0|1$/, r.key32Re = /^-?(?:0|[1-9][0-9]*)$/, r.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, r.longToHash = function(t2) {
          return t2 ? r.LongBits.from(t2).toHash() : r.LongBits.zeroHash;
        }, r.longFromHash = function(t2, e2) {
          var n2 = r.LongBits.fromHash(t2);
          return r.Long ? r.Long.fromBits(n2.lo, n2.hi, e2) : n2.toNumber(Boolean(e2));
        }, r.merge = i, r.lcFirst = function(t2) {
          return t2.charAt(0).toLowerCase() + t2.substring(1);
        }, r.newError = o, r.ProtocolError = o("ProtocolError"), r.oneOfGetter = function(t2) {
          for (var e2 = {}, n2 = 0; n2 < t2.length; ++n2) e2[t2[n2]] = 1;
          return function() {
            for (var t3 = Object.keys(this), n3 = t3.length - 1; n3 > -1; --n3) if (1 === e2[t3[n3]] && void 0 !== this[t3[n3]] && null !== this[t3[n3]]) return t3[n3];
          };
        }, r.oneOfSetter = function(t2) {
          return function(e2) {
            for (var n2 = 0; n2 < t2.length; ++n2) t2[n2] !== e2 && delete this[t2[n2]];
          };
        }, r.toJSONOptions = { longs: String, enums: String, bytes: String, json: true }, r._configure = function() {
          var t2 = r.Buffer;
          t2 ? (r._Buffer_from = t2.from !== Uint8Array.from && t2.from || function(e2, n2) {
            return new t2(e2, n2);
          }, r._Buffer_allocUnsafe = t2.allocUnsafe || function(e2) {
            return new t2(e2);
          }) : r._Buffer_from = r._Buffer_allocUnsafe = null;
        };
      }, 1173: (t, e, n) => {
        "use strict";
        t.exports = p;
        var r, i = n(9693), o = i.LongBits, a = i.base64, s = i.utf8;
        function u(t2, e2, n2) {
          this.fn = t2, this.len = e2, this.next = void 0, this.val = n2;
        }
        __name(u, "u");
        function c() {
        }
        __name(c, "c");
        function l(t2) {
          this.head = t2.head, this.tail = t2.tail, this.len = t2.len, this.next = t2.states;
        }
        __name(l, "l");
        function p() {
          this.len = 0, this.head = new u(c, 0, 0), this.tail = this.head, this.states = null;
        }
        __name(p, "p");
        var f = /* @__PURE__ */ __name(function() {
          return i.Buffer ? function() {
            return (p.create = function() {
              return new r();
            })();
          } : function() {
            return new p();
          };
        }, "f");
        function d(t2, e2, n2) {
          e2[n2] = 255 & t2;
        }
        __name(d, "d");
        function h(t2, e2) {
          this.len = t2, this.next = void 0, this.val = e2;
        }
        __name(h, "h");
        function g(t2, e2, n2) {
          for (; t2.hi; ) e2[n2++] = 127 & t2.lo | 128, t2.lo = (t2.lo >>> 7 | t2.hi << 25) >>> 0, t2.hi >>>= 7;
          for (; t2.lo > 127; ) e2[n2++] = 127 & t2.lo | 128, t2.lo = t2.lo >>> 7;
          e2[n2++] = t2.lo;
        }
        __name(g, "g");
        function b(t2, e2, n2) {
          e2[n2] = 255 & t2, e2[n2 + 1] = t2 >>> 8 & 255, e2[n2 + 2] = t2 >>> 16 & 255, e2[n2 + 3] = t2 >>> 24;
        }
        __name(b, "b");
        p.create = f(), p.alloc = function(t2) {
          return new i.Array(t2);
        }, i.Array !== Array && (p.alloc = i.pool(p.alloc, i.Array.prototype.subarray)), p.prototype._push = function(t2, e2, n2) {
          return this.tail = this.tail.next = new u(t2, e2, n2), this.len += e2, this;
        }, h.prototype = Object.create(u.prototype), h.prototype.fn = function(t2, e2, n2) {
          for (; t2 > 127; ) e2[n2++] = 127 & t2 | 128, t2 >>>= 7;
          e2[n2] = t2;
        }, p.prototype.uint32 = function(t2) {
          return this.len += (this.tail = this.tail.next = new h((t2 >>>= 0) < 128 ? 1 : t2 < 16384 ? 2 : t2 < 2097152 ? 3 : t2 < 268435456 ? 4 : 5, t2)).len, this;
        }, p.prototype.int32 = function(t2) {
          return t2 < 0 ? this._push(g, 10, o.fromNumber(t2)) : this.uint32(t2);
        }, p.prototype.sint32 = function(t2) {
          return this.uint32((t2 << 1 ^ t2 >> 31) >>> 0);
        }, p.prototype.uint64 = function(t2) {
          var e2 = o.from(t2);
          return this._push(g, e2.length(), e2);
        }, p.prototype.int64 = p.prototype.uint64, p.prototype.sint64 = function(t2) {
          var e2 = o.from(t2).zzEncode();
          return this._push(g, e2.length(), e2);
        }, p.prototype.bool = function(t2) {
          return this._push(d, 1, t2 ? 1 : 0);
        }, p.prototype.fixed32 = function(t2) {
          return this._push(b, 4, t2 >>> 0);
        }, p.prototype.sfixed32 = p.prototype.fixed32, p.prototype.fixed64 = function(t2) {
          var e2 = o.from(t2);
          return this._push(b, 4, e2.lo)._push(b, 4, e2.hi);
        }, p.prototype.sfixed64 = p.prototype.fixed64, p.prototype.float = function(t2) {
          return this._push(i.float.writeFloatLE, 4, t2);
        }, p.prototype.double = function(t2) {
          return this._push(i.float.writeDoubleLE, 8, t2);
        };
        var m = i.Array.prototype.set ? function(t2, e2, n2) {
          e2.set(t2, n2);
        } : function(t2, e2, n2) {
          for (var r2 = 0; r2 < t2.length; ++r2) e2[n2 + r2] = t2[r2];
        };
        p.prototype.bytes = function(t2) {
          var e2 = t2.length >>> 0;
          if (!e2) return this._push(d, 1, 0);
          if (i.isString(t2)) {
            var n2 = p.alloc(e2 = a.length(t2));
            a.decode(t2, n2, 0), t2 = n2;
          }
          return this.uint32(e2)._push(m, e2, t2);
        }, p.prototype.string = function(t2) {
          var e2 = s.length(t2);
          return e2 ? this.uint32(e2)._push(s.write, e2, t2) : this._push(d, 1, 0);
        }, p.prototype.fork = function() {
          return this.states = new l(this), this.head = this.tail = new u(c, 0, 0), this.len = 0, this;
        }, p.prototype.reset = function() {
          return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new u(c, 0, 0), this.len = 0), this;
        }, p.prototype.ldelim = function() {
          var t2 = this.head, e2 = this.tail, n2 = this.len;
          return this.reset().uint32(n2), n2 && (this.tail.next = t2.next, this.tail = e2, this.len += n2), this;
        }, p.prototype.finish = function() {
          for (var t2 = this.head.next, e2 = this.constructor.alloc(this.len), n2 = 0; t2; ) t2.fn(t2.val, e2, n2), n2 += t2.len, t2 = t2.next;
          return e2;
        }, p._configure = function(t2) {
          r = t2, p.create = f(), r._configure();
        };
      }, 3155: (t, e, n) => {
        "use strict";
        t.exports = o;
        var r = n(1173);
        (o.prototype = Object.create(r.prototype)).constructor = o;
        var i = n(9693);
        function o() {
          r.call(this);
        }
        __name(o, "o");
        function a(t2, e2, n2) {
          t2.length < 40 ? i.utf8.write(t2, e2, n2) : e2.utf8Write ? e2.utf8Write(t2, n2) : e2.write(t2, n2);
        }
        __name(a, "a");
        o._configure = function() {
          o.alloc = i._Buffer_allocUnsafe, o.writeBytesBuffer = i.Buffer && i.Buffer.prototype instanceof Uint8Array && "set" === i.Buffer.prototype.set.name ? function(t2, e2, n2) {
            e2.set(t2, n2);
          } : function(t2, e2, n2) {
            if (t2.copy) t2.copy(e2, n2, 0, t2.length);
            else for (var r2 = 0; r2 < t2.length; ) e2[n2++] = t2[r2++];
          };
        }, o.prototype.bytes = function(t2) {
          i.isString(t2) && (t2 = i._Buffer_from(t2, "base64"));
          var e2 = t2.length >>> 0;
          return this.uint32(e2), e2 && this._push(o.writeBytesBuffer, e2, t2), this;
        }, o.prototype.string = function(t2) {
          var e2 = i.Buffer.byteLength(t2);
          return this.uint32(e2), e2 && this._push(a, e2, t2), this;
        }, o._configure();
      }, 7714: (t, e, n) => {
        "use strict";
        e.R = void 0;
        const r = n(6919), i = n(7448);
        e.R = new class {
          async init() {
          }
          async createSessionHandler(t2, e2) {
            const n2 = new r.Session(e2);
            return await n2.loadModel(t2), new i.OnnxjsSessionHandler(n2);
          }
        }();
      }, 4200: (t, e, n) => {
        "use strict";
        e.c8 = e.rX = void 0;
        const r = n(1670), i = n(5381), o = n(2157), a = n(2306);
        e.rX = () => {
          if (("number" != typeof r.env.wasm.initTimeout || r.env.wasm.initTimeout < 0) && (r.env.wasm.initTimeout = 0), "boolean" != typeof r.env.wasm.simd && (r.env.wasm.simd = true), "boolean" != typeof r.env.wasm.proxy && (r.env.wasm.proxy = false), "number" != typeof r.env.wasm.numThreads || !Number.isInteger(r.env.wasm.numThreads) || r.env.wasm.numThreads <= 0) {
            const t2 = "undefined" == typeof navigator ? (0, i.cpus)().length : navigator.hardwareConcurrency;
            r.env.wasm.numThreads = Math.min(4, Math.ceil((t2 || 1) / 2));
          }
        }, e.c8 = new class {
          async init() {
            (0, e.rX)(), await (0, o.initWasm)();
          }
          async createSessionHandler(t2, e2) {
            const n2 = new a.OnnxruntimeWebAssemblySessionHandler();
            return await n2.loadModel(t2, e2), Promise.resolve(n2);
          }
        }();
      }, 6018: function(t, e, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2);
          var i2 = Object.getOwnPropertyDescriptor(e2, n2);
          i2 && !("get" in i2 ? !e2.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return e2[n2];
          }, "get") }), Object.defineProperty(t2, r2, i2);
        } : function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2), t2[r2] = e2[n2];
        }), i = this && this.__exportStar || function(t2, e2) {
          for (var n2 in t2) "default" === n2 || Object.prototype.hasOwnProperty.call(e2, n2) || r(e2, t2, n2);
        };
        Object.defineProperty(e, "__esModule", { value: true }), i(n(1670), e);
        const o = n(1670);
        {
          const t2 = n(7714).R;
          (0, o.registerBackend)("webgl", t2, -10);
        }
        {
          const t2 = n(4200).c8;
          (0, o.registerBackend)("cpu", t2, 10), (0, o.registerBackend)("wasm", t2, 10), (0, o.registerBackend)("xnnpack", t2, 9);
        }
      }, 246: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createAttributeWithCacheKey = void 0;
        class n {
          static {
            __name(this, "n");
          }
          constructor(t2) {
            Object.assign(this, t2);
          }
          get cacheKey() {
            return this._cacheKey || (this._cacheKey = Object.getOwnPropertyNames(this).sort().map((t2) => `${this[t2]}`).join(";")), this._cacheKey;
          }
        }
        e.createAttributeWithCacheKey = (t2) => new n(t2);
      }, 7778: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Attribute = void 0;
        const r = n(1446), i = n(9395), o = n(9162), a = n(2517);
        var s = i.onnxruntime.experimental.fbs;
        class u {
          static {
            __name(this, "u");
          }
          constructor(t2) {
            if (this._attributes = /* @__PURE__ */ new Map(), null != t2) {
              for (const e2 of t2) e2 instanceof r.onnx.AttributeProto ? this._attributes.set(e2.name, [u.getValue(e2), u.getType(e2)]) : e2 instanceof s.Attribute && this._attributes.set(e2.name(), [u.getValue(e2), u.getType(e2)]);
              if (this._attributes.size < t2.length) throw new Error("duplicated attribute names");
            }
          }
          set(t2, e2, n2) {
            this._attributes.set(t2, [n2, e2]);
          }
          delete(t2) {
            this._attributes.delete(t2);
          }
          getFloat(t2, e2) {
            return this.get(t2, "float", e2);
          }
          getInt(t2, e2) {
            return this.get(t2, "int", e2);
          }
          getString(t2, e2) {
            return this.get(t2, "string", e2);
          }
          getTensor(t2, e2) {
            return this.get(t2, "tensor", e2);
          }
          getFloats(t2, e2) {
            return this.get(t2, "floats", e2);
          }
          getInts(t2, e2) {
            return this.get(t2, "ints", e2);
          }
          getStrings(t2, e2) {
            return this.get(t2, "strings", e2);
          }
          getTensors(t2, e2) {
            return this.get(t2, "tensors", e2);
          }
          get(t2, e2, n2) {
            const r2 = this._attributes.get(t2);
            if (void 0 === r2) {
              if (void 0 !== n2) return n2;
              throw new Error(`required attribute not found: ${t2}`);
            }
            if (r2[1] !== e2) throw new Error(`type mismatch: expected ${e2} but got ${r2[1]}`);
            return r2[0];
          }
          static getType(t2) {
            const e2 = t2 instanceof r.onnx.AttributeProto ? t2.type : t2.type();
            switch (e2) {
              case r.onnx.AttributeProto.AttributeType.FLOAT:
                return "float";
              case r.onnx.AttributeProto.AttributeType.INT:
                return "int";
              case r.onnx.AttributeProto.AttributeType.STRING:
                return "string";
              case r.onnx.AttributeProto.AttributeType.TENSOR:
                return "tensor";
              case r.onnx.AttributeProto.AttributeType.FLOATS:
                return "floats";
              case r.onnx.AttributeProto.AttributeType.INTS:
                return "ints";
              case r.onnx.AttributeProto.AttributeType.STRINGS:
                return "strings";
              case r.onnx.AttributeProto.AttributeType.TENSORS:
                return "tensors";
              default:
                throw new Error(`attribute type is not supported yet: ${r.onnx.AttributeProto.AttributeType[e2]}`);
            }
          }
          static getValue(t2) {
            const e2 = t2 instanceof r.onnx.AttributeProto ? t2.type : t2.type();
            if (e2 === r.onnx.AttributeProto.AttributeType.GRAPH || e2 === r.onnx.AttributeProto.AttributeType.GRAPHS) throw new Error("graph attribute is not supported yet");
            const n2 = this.getValueNoCheck(t2);
            if (e2 === r.onnx.AttributeProto.AttributeType.INT && a.LongUtil.isLong(n2)) return a.LongUtil.longToNumber(n2);
            if (e2 === r.onnx.AttributeProto.AttributeType.INTS) {
              const t3 = n2, e3 = new Array(t3.length);
              for (let n3 = 0; n3 < t3.length; n3++) {
                const r2 = t3[n3];
                e3[n3] = a.LongUtil.longToNumber(r2);
              }
              return e3;
            }
            if (e2 === r.onnx.AttributeProto.AttributeType.TENSOR) return t2 instanceof r.onnx.AttributeProto ? o.Tensor.fromProto(n2) : o.Tensor.fromOrtTensor(n2);
            if (e2 === r.onnx.AttributeProto.AttributeType.TENSORS) {
              if (t2 instanceof r.onnx.AttributeProto) return n2.map((t3) => o.Tensor.fromProto(t3));
              if (t2 instanceof s.Attribute) return n2.map((t3) => o.Tensor.fromOrtTensor(t3));
            }
            if (e2 === r.onnx.AttributeProto.AttributeType.STRING && t2 instanceof r.onnx.AttributeProto) {
              const t3 = n2;
              return (0, a.decodeUtf8String)(t3);
            }
            return e2 === r.onnx.AttributeProto.AttributeType.STRINGS && t2 instanceof r.onnx.AttributeProto ? n2.map(a.decodeUtf8String) : n2;
          }
          static getValueNoCheck(t2) {
            return t2 instanceof r.onnx.AttributeProto ? this.getValueNoCheckFromOnnxFormat(t2) : this.getValueNoCheckFromOrtFormat(t2);
          }
          static getValueNoCheckFromOnnxFormat(t2) {
            switch (t2.type) {
              case r.onnx.AttributeProto.AttributeType.FLOAT:
                return t2.f;
              case r.onnx.AttributeProto.AttributeType.INT:
                return t2.i;
              case r.onnx.AttributeProto.AttributeType.STRING:
                return t2.s;
              case r.onnx.AttributeProto.AttributeType.TENSOR:
                return t2.t;
              case r.onnx.AttributeProto.AttributeType.GRAPH:
                return t2.g;
              case r.onnx.AttributeProto.AttributeType.FLOATS:
                return t2.floats;
              case r.onnx.AttributeProto.AttributeType.INTS:
                return t2.ints;
              case r.onnx.AttributeProto.AttributeType.STRINGS:
                return t2.strings;
              case r.onnx.AttributeProto.AttributeType.TENSORS:
                return t2.tensors;
              case r.onnx.AttributeProto.AttributeType.GRAPHS:
                return t2.graphs;
              default:
                throw new Error(`unsupported attribute type: ${r.onnx.AttributeProto.AttributeType[t2.type]}`);
            }
          }
          static getValueNoCheckFromOrtFormat(t2) {
            switch (t2.type()) {
              case s.AttributeType.FLOAT:
                return t2.f();
              case s.AttributeType.INT:
                return t2.i();
              case s.AttributeType.STRING:
                return t2.s();
              case s.AttributeType.TENSOR:
                return t2.t();
              case s.AttributeType.GRAPH:
                return t2.g();
              case s.AttributeType.FLOATS:
                return t2.floatsArray();
              case s.AttributeType.INTS: {
                const e2 = [];
                for (let n2 = 0; n2 < t2.intsLength(); n2++) e2.push(t2.ints(n2));
                return e2;
              }
              case s.AttributeType.STRINGS: {
                const e2 = [];
                for (let n2 = 0; n2 < t2.stringsLength(); n2++) e2.push(t2.strings(n2));
                return e2;
              }
              case s.AttributeType.TENSORS: {
                const e2 = [];
                for (let n2 = 0; n2 < t2.tensorsLength(); n2++) e2.push(t2.tensors(n2));
                return e2;
              }
              default:
                throw new Error(`unsupported attribute type: ${s.AttributeType[t2.type()]}`);
            }
          }
        }
        e.Attribute = u;
      }, 7091: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.resolveBackend = e.backend = void 0;
        const r = n(5038), i = /* @__PURE__ */ new Map();
        async function o(t2) {
          const n2 = e.backend;
          if (void 0 !== n2[t2] && function(t3) {
            const e2 = t3;
            return "initialize" in e2 && "function" == typeof e2.initialize && "createSessionHandler" in e2 && "function" == typeof e2.createSessionHandler && "dispose" in e2 && "function" == typeof e2.dispose;
          }(n2[t2])) {
            const e2 = n2[t2];
            let r2 = e2.initialize();
            if ("object" == typeof r2 && "then" in r2 && (r2 = await r2), r2) return i.set(t2, e2), e2;
          }
        }
        __name(o, "o");
        e.backend = { webgl: new r.WebGLBackend() }, e.resolveBackend = /* @__PURE__ */ __name(async function t2(e2) {
          if (!e2) return t2(["webgl"]);
          {
            const t3 = "string" == typeof e2 ? [e2] : e2;
            for (const e3 of t3) {
              const t4 = i.get(e3);
              if (t4) return t4;
              const n2 = await o(e3);
              if (n2) return n2;
            }
          }
          throw new Error("no available backend to use");
        }, "t");
      }, 5038: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.WebGLBackend = void 0;
        const r = n(1670), i = n(6231), o = n(6416), a = n(7305);
        e.WebGLBackend = class {
          get contextId() {
            return r.env.webgl.contextId;
          }
          set contextId(t2) {
            r.env.webgl.contextId = t2;
          }
          get matmulMaxBatchSize() {
            return r.env.webgl.matmulMaxBatchSize;
          }
          set matmulMaxBatchSize(t2) {
            r.env.webgl.matmulMaxBatchSize = t2;
          }
          get textureCacheMode() {
            return r.env.webgl.textureCacheMode;
          }
          set textureCacheMode(t2) {
            r.env.webgl.textureCacheMode = t2;
          }
          get pack() {
            return r.env.webgl.pack;
          }
          set pack(t2) {
            r.env.webgl.pack = t2;
          }
          get async() {
            return r.env.webgl.async;
          }
          set async(t2) {
            r.env.webgl.async = t2;
          }
          initialize() {
            try {
              return this.glContext = (0, a.createWebGLContext)(this.contextId), "number" != typeof this.matmulMaxBatchSize && (this.matmulMaxBatchSize = 16), "string" != typeof this.textureCacheMode && (this.textureCacheMode = "full"), "boolean" != typeof this.pack && (this.pack = false), "boolean" != typeof this.async && (this.async = false), i.Logger.setWithEnv(r.env), i.Logger.verbose("WebGLBackend", `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`), true;
            } catch (t2) {
              return i.Logger.warning("WebGLBackend", `Unable to initialize WebGLBackend. ${t2}`), false;
            }
          }
          createSessionHandler(t2) {
            return new o.WebGLSessionHandler(this, t2);
          }
          dispose() {
            this.glContext.dispose();
          }
        };
      }, 5107: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.CoordsGlslLib = void 0;
        const r = n(2517), i = n(8520), o = n(5060), a = n(7859), s = n(9390);
        class u extends i.GlslLib {
          static {
            __name(this, "u");
          }
          constructor(t2) {
            super(t2);
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.offsetToCoords()), this.coordsToOffset()), this.toVec()), this.valueFrom()), this.getCommonUtilFuncs()), this.getInputsSamplingSnippets()), this.getOutputSamplingSnippet());
          }
          getCustomTypes() {
            return {};
          }
          offsetToCoords() {
            return { offsetToCoords: new i.GlslLibRoutine("\n      vec2 offsetToCoords(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      ") };
          }
          coordsToOffset() {
            return { coordsToOffset: new i.GlslLibRoutine("\n      int coordsToOffset(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      ") };
          }
          getOutputSamplingSnippet() {
            const t2 = this.context.outputTextureLayout;
            return t2.isPacked ? this.getPackedOutputSamplingSnippet(t2) : this.getUnpackedOutputSamplingSnippet(t2);
          }
          getPackedOutputSamplingSnippet(t2) {
            const e2 = t2.unpackedShape, n2 = [t2.width, t2.height], r2 = {}, a2 = "getOutputCoords";
            switch (e2.length) {
              case 0:
                r2[a2] = this.getOutputScalarCoords();
                break;
              case 1:
                r2[a2] = this.getOutputPacked1DCoords(e2, n2);
                break;
              case 2:
                r2[a2] = this.getOutputPacked2DCoords(e2, n2);
                break;
              case 3:
                r2[a2] = this.getOutputPacked3DCoords(e2, n2);
                break;
              default:
                r2[a2] = this.getOutputPackedNDCoords(e2, n2);
            }
            const s2 = `
      void setOutput(vec4 val) {
        ${(0, o.getGlsl)(this.context.glContext.version).output} = val;
      }
    `;
            return r2.floatTextureSetRGBA = new i.GlslLibRoutine(s2), r2;
          }
          getUnpackedOutputSamplingSnippet(t2) {
            const e2 = t2.unpackedShape, n2 = [t2.width, t2.height], r2 = {}, a2 = "getOutputCoords";
            switch (e2.length) {
              case 0:
                r2[a2] = this.getOutputScalarCoords();
                break;
              case 1:
                r2[a2] = this.getOutputUnpacked1DCoords(e2, n2);
                break;
              case 2:
                r2[a2] = this.getOutputUnpacked2DCoords(e2, n2);
                break;
              case 3:
                r2[a2] = this.getOutputUnpacked3DCoords(e2, n2);
                break;
              case 4:
                r2[a2] = this.getOutputUnpacked4DCoords(e2, n2);
                break;
              case 5:
                r2[a2] = this.getOutputUnpacked5DCoords(e2, n2);
                break;
              case 6:
                r2[a2] = this.getOutputUnpacked6DCoords(e2, n2);
                break;
              default:
                throw new Error(`Unsupported output dimensionality: ${e2.length}`);
            }
            const s2 = `
        void setOutput(float val) {
          ${(0, o.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);
        }
    `;
            return r2.floatTextureSetR = new i.GlslLibRoutine(s2), r2;
          }
          getOutputScalarCoords() {
            return new i.GlslLibRoutine("\n      int getOutputCoords() {\n        return 0;\n      }\n    ");
          }
          getOutputPacked1DCoords(t2, e2) {
            const n2 = e2;
            let r2 = "";
            return 1 === n2[0] ? (r2 = `
          int getOutputCoords() {
            return 2 * int(TexCoords.y * ${n2[1]}.0);
          }
        `, new i.GlslLibRoutine(r2)) : 1 === n2[1] ? (r2 = `
          int getOutputCoords() {
            return 2 * int(TexCoords.x * ${n2[0]}.0);
          }
        `, new i.GlslLibRoutine(r2)) : (r2 = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                 vec2(${n2[0]}, ${n2[1]}));
          return 2 * (resTexRC.y * ${n2[0]} + resTexRC.x);
        }
      `, new i.GlslLibRoutine(r2));
          }
          getOutputPacked2DCoords(t2, e2) {
            let n2 = "";
            if (r.ArrayUtil.arraysEqual(t2, e2)) return n2 = `
        ivec2 getOutputCoords() {
          return 2 * ivec2(TexCoords.xy * vec2(${e2[0]}, ${e2[1]}));
        }
      `, new i.GlslLibRoutine(n2);
            const o2 = e2, a2 = Math.ceil(t2[1] / 2);
            return n2 = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${o2[0]}, ${o2[1]}));

          int index = resTexRC.y * ${o2[0]} + resTexRC.x;

          // reverse r and c order for packed texture
          int r = imod(index, ${a2}) * 2;
          int c = 2 * (index / ${a2});

          return ivec2(r, c);
        }
      `, new i.GlslLibRoutine(n2);
          }
          getOutputPacked3DCoords(t2, e2) {
            const n2 = [e2[0], e2[1]], r2 = Math.ceil(t2[2] / 2), o2 = r2 * Math.ceil(t2[1] / 2), a2 = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${n2[0]}, ${n2[1]}));
          int index = resTexRC.y * ${n2[0]} + resTexRC.x;

          int b = index / ${o2};
          index -= b * ${o2};

          // reverse r and c order for packed texture
          int r = imod(index, ${r2}) * 2;
          int c = 2 * (index / ${r2});

          return ivec3(b, r, c);
        }
      `;
            return new i.GlslLibRoutine(a2);
          }
          getOutputPackedNDCoords(t2, e2) {
            const n2 = [e2[0], e2[1]], r2 = Math.ceil(t2[t2.length - 1] / 2), o2 = r2 * Math.ceil(t2[t2.length - 2] / 2);
            let a2 = o2, s2 = "", u2 = "b, r, c";
            for (let e3 = 2; e3 < t2.length - 1; e3++) a2 *= t2[t2.length - e3 - 1], s2 = `
      int b${e3} = index / ${a2};
      index -= b${e3} * ${a2};
    ` + s2, u2 = `b${e3}, ` + u2;
            const c = `
      ivec${t2.length} getOutputCoords() {
        ivec2 resTexRC = ivec2(TexCoords.xy *
                              vec2(${n2[0]}, ${n2[1]}));
        int index = resTexRC.y * ${n2[0]} + resTexRC.x;

        ${s2}

        int b = index / ${o2};
        index -= b * ${o2};

        // reverse r and c order for packed texture
        int r = imod(index, ${r2}) * 2;
        int c = 2 * (index / ${r2});

        return ivec${t2.length}(${u2});
      }
    `;
            return new i.GlslLibRoutine(c);
          }
          getOutputUnpacked1DCoords(t2, e2) {
            const n2 = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e2[0]}, ${e2[1]}));
          return resTexRC.y * ${e2[0]} + resTexRC.x;
        }
      `;
            return new i.GlslLibRoutine(n2);
          }
          getOutputUnpacked2DCoords(t2, e2) {
            const n2 = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e2[0]}, ${e2[1]}));
          int index = resTexRC.y * ${e2[0]} + resTexRC.x;
          int r = index / ${t2[1]};
          int c = index - r * ${t2[1]};
          return ivec2(r, c);
        }
      `;
            return new i.GlslLibRoutine(n2);
          }
          getOutputUnpacked3DCoords(t2, e2) {
            let n2 = "";
            const r2 = t2.length;
            let o2 = null;
            r2 < 2 && (o2 = []), o2 = new Array(r2 - 1), o2[r2 - 2] = t2[r2 - 1];
            for (let e3 = r2 - 3; e3 >= 0; --e3) o2[e3] = o2[e3 + 1] * t2[e3 + 1];
            const a2 = ["r", "c", "d"], s2 = o2.map((t3, e3) => `int ${a2[e3]} = index / ${t3}; ${e3 === o2.length - 1 ? `int ${a2[e3 + 1]} = index - ${a2[e3]} * ${t3}` : `index -= ${a2[e3]} * ${t3}`};`).join("");
            return n2 = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e2[0]}, ${e2[1]}));
          int index = resTexRC.y * ${e2[0]} + resTexRC.x;
          ${s2}
          return ivec3(r, c, d);
        }
      `, new i.GlslLibRoutine(n2);
          }
          getOutputUnpacked4DCoords(t2, e2) {
            let n2 = "";
            const r2 = t2.length;
            let o2 = null;
            r2 < 2 && (o2 = []), o2 = new Array(r2 - 1), o2[r2 - 2] = t2[r2 - 1];
            for (let e3 = r2 - 3; e3 >= 0; --e3) o2[e3] = o2[e3 + 1] * t2[e3 + 1];
            const a2 = ["r", "c", "d", "d2"], s2 = o2.map((t3, e3) => `int ${a2[e3]} = index / ${t3}; ${e3 === o2.length - 1 ? `int ${a2[e3 + 1]} = index - ${a2[e3]} * ${t3}` : `index -= ${a2[e3]} * ${t3}`};`).join("");
            return n2 = `
      ivec4 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e2[0]}, ${e2[1]}));
          int index = resTexRC.y * ${e2[0]} + resTexRC.x;
          ${s2}
          return ivec4(r, c, d, d2);
        }
      `, new i.GlslLibRoutine(n2);
          }
          getOutputUnpacked5DCoords(t2, e2) {
            let n2 = "";
            const r2 = t2.length;
            let o2 = null;
            r2 < 2 && (o2 = []), o2 = new Array(r2 - 1), o2[r2 - 2] = t2[r2 - 1];
            for (let e3 = r2 - 3; e3 >= 0; --e3) o2[e3] = o2[e3 + 1] * t2[e3 + 1];
            const a2 = ["r", "c", "d", "d2", "d3"], s2 = o2.map((t3, e3) => `int ${a2[e3]} = index / ${t3}; ${e3 === o2.length - 1 ? `int ${a2[e3 + 1]} = index - ${a2[e3]} * ${t3}` : `index -= ${a2[e3]} * ${t3}`};`).join("");
            return n2 = `
      ivec5 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e2[0]}, ${e2[1]}));
          int index = resTexRC.y * ${e2[0]} + resTexRC.x;
          ${s2}
          return ivec5(r, c, d, d2, d3);
        }
      `, new i.GlslLibRoutine(n2);
          }
          getOutputUnpacked6DCoords(t2, e2) {
            let n2 = "";
            const r2 = t2.length;
            let o2 = null;
            r2 < 2 && (o2 = []), o2 = new Array(r2 - 1), o2[r2 - 2] = t2[r2 - 1];
            for (let e3 = r2 - 3; e3 >= 0; --e3) o2[e3] = o2[e3 + 1] * t2[e3 + 1];
            const a2 = ["r", "c", "d", "d2", "d3", "d4"], s2 = o2.map((t3, e3) => `int ${a2[e3]} = index / ${t3}; ${e3 === o2.length - 1 ? `int ${a2[e3 + 1]} = index - ${a2[e3]} * ${t3}` : `index -= ${a2[e3]} * ${t3}`};`).join("");
            return n2 = `
     ivec6 getOutputCoords() {
         ivec2 resTexRC = ivec2(TexCoords.xy *
                               vec2(${e2[0]}, ${e2[1]}));
         int index = resTexRC.y * ${e2[0]} + resTexRC.x;
         ${s2}
         return ivec6(r, c, d, d2, d3, d4);
       }
     `, new i.GlslLibRoutine(n2);
          }
          getCommonUtilFuncs() {
            const t2 = {};
            let e2 = "uvFromFlat";
            t2[e2] = new i.GlslLibRoutine("\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    "), e2 = "packedUVfrom1D", t2[e2] = new i.GlslLibRoutine("\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e2 = "packedUVfrom2D", t2[e2] = new i.GlslLibRoutine("\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e2 = "packedUVfrom3D", t2[e2] = new i.GlslLibRoutine("\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e2 = "sampleTexture";
            const n2 = (0, o.getGlsl)(this.context.glContext.version);
            return t2[e2] = new i.GlslLibRoutine(`
        float sampleTexture(sampler2D textureSampler, vec2 uv) {
            return ${n2.texture2D}(textureSampler, uv).r;
        }`), t2;
          }
          getInputsSamplingSnippets() {
            const t2 = {}, e2 = this.context.outputTextureLayout;
            return this.context.programInfo.inputNames.forEach((n2, r2) => {
              const i2 = this.context.inputTextureLayouts[r2], o2 = (0, s.generateShaderFuncNameFromInputSamplerName)(n2);
              i2.isPacked ? t2[o2] = this.getPackedSamplerFromInput(o2, n2, i2) : t2[o2] = this.getUnpackedSamplerFromInput(o2, n2, i2);
              const a2 = (0, s.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n2);
              i2.unpackedShape.length <= e2.unpackedShape.length && (i2.isPacked ? t2[a2] = this.getPackedSamplerAtOutputCoords(a2, i2, e2, n2) : t2[a2] = this.getUnpackedSamplerAtOutputCoords(a2, i2, e2, n2));
            }), t2;
          }
          getPackedSamplerAtOutputCoords(t2, e2, n2, o2) {
            const a2 = e2.unpackedShape, u2 = n2.unpackedShape, c = o2, l = (0, s.generateShaderFuncNameFromInputSamplerName)(c), p = a2.length, f = u2.length, d = r.BroadcastUtil.getBroadcastDims(a2, u2), h = (0, s.getCoordsDataType)(f), g = f - p;
            let b;
            const m = (0, s.getGlChannels)();
            b = 0 === p ? "" : f < 2 && d.length >= 1 ? "coords = 0;" : d.map((t3) => `coords.${m[t3 + g]} = 0;`).join("\n");
            let y = "";
            y = f < 2 && p > 0 ? "coords" : a2.map((t3, e3) => `coords.${m[e3 + g]}`).join(", ");
            let _ = "return outputValue;";
            const v = 1 === r.ShapeUtil.size(a2), w = 1 === r.ShapeUtil.size(u2);
            if (1 !== p || v || w) {
              if (v && !w) _ = 1 === f ? "\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        " : "\n          return vec4(outputValue.x);\n        ";
              else if (d.length) {
                const t3 = p - 2, e3 = p - 1;
                d.indexOf(t3) > -1 && d.indexOf(e3) > -1 ? _ = "return vec4(outputValue.x);" : d.indexOf(t3) > -1 ? _ = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : d.indexOf(e3) > -1 && (_ = "return vec4(outputValue.xx, outputValue.zz);");
              }
            } else _ = "\n        return vec4(outputValue.xy, outputValue.xy);\n      ";
            const x = `
      vec4 ${t2}() {
        ${h} coords = getOutputCoords();
        
        int lastDim = coords.${m[f - 1]};
        coords.${m[f - 1]} = coords.${m[f - 2]};
        coords.${m[f - 2]} = lastDim;
      
        ${b}
        vec4 outputValue = ${l}(${y});
        ${_}
      }
    `;
            return new i.GlslLibRoutine(x, ["coordinates.getOutputCoords"]);
          }
          getUnpackedSamplerAtOutputCoords(t2, e2, n2, o2) {
            const a2 = [n2.width, n2.height], u2 = [e2.width, e2.height], c = e2.unpackedShape.length, l = n2.unpackedShape.length, p = e2.unpackedShape, f = n2.unpackedShape, d = (0, s.generateShaderFuncNameFromInputSamplerName)(o2);
            if (c === l && r.ArrayUtil.arraysEqual(u2, a2)) {
              const e3 = `
          float ${t2}() {
            return sampleTexture(${o2}, TexCoords);
          }
        `;
              return new i.GlslLibRoutine(e3, ["coordinates.sampleTexture"]);
            }
            const h = (0, s.getCoordsDataType)(l), g = r.BroadcastUtil.getBroadcastDims(p, f), b = l - c;
            let m;
            const y = (0, s.getGlChannels)();
            m = 0 === c ? "" : l < 2 && g.length >= 1 ? "coords = 0;" : g.map((t3) => `coords.${y[t3 + b]} = 0;`).join("\n");
            let _ = "";
            _ = l < 2 && c > 0 ? "coords" : e2.unpackedShape.map((t3, e3) => `coords.${y[e3 + b]}`).join(", ");
            const v = `
        float ${t2}() {
          ${h} coords = getOutputCoords();
          ${m}
          return ${d}(${_});
        }
      `;
            return new i.GlslLibRoutine(v, ["coordinates.getOutputCoords"]);
          }
          getPackedSamplerFromInput(t2, e2, n2) {
            switch (n2.unpackedShape.length) {
              case 0:
                return this.getPackedSamplerScalar(t2, e2);
              case 1:
                return this.getPackedSampler1D(t2, e2, n2);
              case 2:
                return this.getPackedSampler2D(t2, e2, n2);
              case 3:
                return this.getPackedSampler3D(t2, e2, n2);
              default:
                return this.getPackedSamplerND(t2, e2, n2);
            }
          }
          getUnpackedSamplerFromInput(t2, e2, n2) {
            const r2 = n2.unpackedShape;
            switch (r2.length) {
              case 0:
                return this.getUnpackedSamplerScalar(t2, e2, n2);
              case 1:
                return this.getUnpackedSampler1D(t2, e2, n2);
              case 2:
                return this.getUnpackedSampler2D(t2, e2, n2);
              case 3:
                return this.getUnpackedSampler3D(t2, e2, n2);
              case 4:
                return this.getUnpackedSampler4D(t2, e2, n2);
              case 5:
                return this.getUnpackedSampler5D(t2, e2, n2);
              case 6:
                return this.getUnpackedSampler6D(t2, e2, n2);
              default:
                throw new Error(`Unsupported dimension ${r2.length}-D`);
            }
          }
          getPackedSamplerScalar(t2, e2) {
            const n2 = `
          vec4 ${t2}() {
            return ${(0, o.getGlsl)(this.context.glContext.version).texture2D}(${e2}, halfCR);
          }
        `;
            return new i.GlslLibRoutine(n2);
          }
          getPackedSampler1D(t2, e2, n2) {
            const r2 = [n2.width, n2.height], a2 = [r2[1], r2[0]], s2 = (0, o.getGlsl)(this.context.glContext.version), u2 = `vec4 ${t2}(int index) {
      vec2 uv = packedUVfrom1D(
      ${a2[0]}, ${a2[1]}, index);
      return ${s2.texture2D}(${e2}, uv);
    }`;
            return new i.GlslLibRoutine(u2, ["coordinates.packedUVfrom1D"]);
          }
          getPackedSampler2D(t2, e2, n2) {
            const a2 = n2.unpackedShape, s2 = [n2.width, n2.height], u2 = (0, o.getGlsl)(this.context.glContext.version), c = s2[0], l = s2[1];
            if (null != s2 && r.ArrayUtil.arraysEqual(a2, s2)) {
              const n3 = `vec4 ${t2}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${c}.0);
        return ${u2.texture2D}(${e2}, uv);
      }`;
              return new i.GlslLibRoutine(n3);
            }
            const p = s2, f = Math.ceil(a2[1] / 2), d = `vec4 ${t2}(int row, int col) {
      vec2 uv = packedUVfrom2D(${p[1]}, ${p[0]}, ${f}, row, col);
      return ${u2.texture2D}(${e2}, uv);
    }`;
            return new i.GlslLibRoutine(d, ["coordinates.packedUVfrom2D"]);
          }
          getPackedSampler3D(t2, e2, n2) {
            const r2 = n2.unpackedShape, a2 = [n2.width, n2.height], u2 = [a2[0], a2[1]], c = (0, o.getGlsl)(this.context.glContext.version);
            if (1 === r2[0]) {
              const o2 = r2.slice(1), a3 = [1, 2], u3 = (0, s.squeezeInputShape)(r2, o2), c2 = ["b", "row", "col"], l2 = JSON.parse(JSON.stringify(n2));
              l2.unpackedShape = u3;
              const p2 = this.getPackedSamplerFromInput(t2, e2, l2), f2 = `${p2.routineBody}
      vec4 ${t2}(int b, int row, int col) {
        return ${t2}(${(0, s.getSqueezedParams)(c2, a3)});
      } `;
              return new i.GlslLibRoutine(f2, p2.dependencies);
            }
            const l = u2[0], p = u2[1], f = Math.ceil(r2[2] / 2), d = `vec4 ${t2}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${l}, ${f * Math.ceil(r2[1] / 2)}, ${f}, b, row, col);
      return ${c.texture2D}(${e2}, uv);}`;
            return new i.GlslLibRoutine(d, ["coordinates.packedUVfrom3D"]);
          }
          getPackedSamplerND(t2, e2, n2) {
            const r2 = n2.unpackedShape, a2 = r2.length, s2 = [n2.width, n2.height], u2 = (0, o.getGlsl)(this.context.glContext.version), c = [s2[0], s2[1]], l = c[1], p = c[0], f = Math.ceil(r2[a2 - 1] / 2);
            let d = f * Math.ceil(r2[a2 - 2] / 2), h = "int b, int row, int col", g = `b * ${d} + (row / 2) * ${f} + (col / 2)`;
            for (let t3 = 2; t3 < a2 - 1; t3++) h = `int b${t3}, ` + h, d *= r2[a2 - t3 - 1], g = `b${t3} * ${d} + ` + g;
            const b = `vec4 ${t2}(${h}) {
      int index = ${g};
      int texR = index / ${p};
      int texC = index - texR * ${p};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}, ${l});
      return ${u2.texture2D}(${e2}, uv);
    }`;
            return new i.GlslLibRoutine(b);
          }
          getUnpackedSamplerScalar(t2, e2, n2) {
            const [r2, o2] = [n2.width, n2.height];
            if (1 === r2 && 1 === o2) {
              const n3 = `
          float ${t2}() {
            return sampleTexture(${e2}, halfCR);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture"]);
            }
            const a2 = `
        float ${t2}() {
          int offset_${e2} = coordsToOffset(TexCoords, ${r2}, ${o2});
          vec2 uv = uvFromFlat(${r2}, ${o2}, offset_${e2});
          return sampleTexture(${e2}, uv);
        }
      `;
            return new i.GlslLibRoutine(a2, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler1D(t2, e2, n2) {
            const r2 = n2.width, o2 = n2.height;
            if (1 === o2 && 1 === r2) {
              const n3 = `
        float ${t2}(int index) {
          return sampleTexture(${e2}, halfCR);
        }
      `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture"]);
            }
            if (1 === o2) {
              const n3 = `
          float ${t2}(int index) {
            vec2 uv = vec2((float(index) + 0.5) / ${r2}.0, 0.5);
            return sampleTexture(${e2}, uv);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture"]);
            }
            if (1 === r2) {
              const n3 = `
          float ${t2}(int index) {
            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${o2}.0);
            return sampleTexture(${e2}, uv);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture"]);
            }
            const a2 = `
        float ${t2}(int index) {
          vec2 uv = uvFromFlat(${r2}, ${o2}, index);
          return sampleTexture(${e2}, uv);
        }
      `;
            return new i.GlslLibRoutine(a2, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
          }
          getUnpackedSampler2D(t2, e2, n2) {
            const o2 = n2.unpackedShape, u2 = [n2.height, n2.width];
            if (null != u2 && r.ArrayUtil.arraysEqual(o2, u2)) {
              const n3 = `
          float ${t2}(int row, int col) {
            vec2 uv = (vec2(row, col) + halfCR) / vec2(${u2[1]}.0, ${u2[0]}.0);
            return sampleTexture(${e2}, uv);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture"]);
            }
            const { newShape: c, keptDims: l } = (0, a.squeezeShape)(o2), p = c;
            if (p.length < o2.length) {
              const r2 = (0, s.squeezeInputShape)(o2, p), a2 = JSON.parse(JSON.stringify(n2));
              a2.unpackedShape = r2;
              const u3 = ["col", "row"], c2 = `
          ${this.getUnpackedSamplerFromInput(t2, e2, a2).routineBody}
          float ${t2}(int row, int col) {
            return ${t2}(${(0, s.getSqueezedParams)(u3, l)});
          }
        `;
              return new i.GlslLibRoutine(c2, ["coordinates.sampleTexture"]);
            }
            const f = u2[1], d = u2[0];
            if (1 === d) {
              const n3 = `
          float ${t2}(int row, int col) {
            int offset_${e2} = coordsToOffset(TexCoords, ${f}, ${d});
            float index = dot(vec3(row, col, offset_${e2}), vec3(${o2[1]}, 1, 1));
            vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);
            return sampleTexture(${e2}, uv);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
            }
            if (1 === f) {
              const n3 = `
          float ${t2}(int row, int col) {
            int offset_${e2} = coordsToOffset(TexCoords, ${f}, ${d});
            float index = dot(vec3(row, col, offset_${e2}), vec3(${o2[1]}, 1, 1));
            vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);
            return sampleTexture(${e2}, uv);
          }
        `;
              return new i.GlslLibRoutine(n3, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
            }
            const h = `
        float ${t2}(int row, int col) {
          int index = col * ${o2[1]} + row;
          vec2 uv = uvFromFlat(${f}, ${d}, index);
          return sampleTexture(${e2}, uv);
        }
      `;
            return new i.GlslLibRoutine(h, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler3D(t2, e2, n2) {
            const r2 = n2.unpackedShape, o2 = r2[1] * r2[2], u2 = r2[2], { newShape: c, keptDims: l } = (0, a.squeezeShape)(r2), p = c;
            if (p.length < r2.length) {
              const o3 = (0, s.squeezeInputShape)(r2, p), a2 = ["batch", "col", "row"], u3 = JSON.parse(JSON.stringify(n2));
              u3.unpackedShape = o3;
              const c2 = this.getUnpackedSamplerFromInput(t2, e2, u3), f2 = l.reverse(), d = `
          ${c2.routineBody}
          float ${t2}(int batch, int row, int col) {
            return ${t2}(${(0, s.getSqueezedParams)(a2, f2)});
          }
        `;
              return new i.GlslLibRoutine(d, c2.dependencies);
            }
            const f = `
          float ${t2}(int depth, int row, int col) {
            // Explicitly use integer operations as dot() only works on floats.
            int index = depth * ${o2} + col * ${u2} + row;
            vec2 uv = uvFromFlat(${n2.width}, ${n2.height}, index);
            return sampleTexture(${e2}, uv);
          }
      `;
            return new i.GlslLibRoutine(f, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler4D(t2, e2, n2) {
            const r2 = n2.unpackedShape, o2 = r2[3], a2 = r2[2] * o2, s2 = `
        float ${t2}(int row, int col, int depth, int depth2) {
          int index = row * ${r2[1] * a2} + col * ${a2} +
              depth2 * ${o2} + depth;
          vec2 uv = uvFromFlat(${n2.width}, ${n2.height}, index);
          return sampleTexture(${e2}, uv);
        }
      `;
            return new i.GlslLibRoutine(s2, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
          }
          getUnpackedSampler5D(t2, e2, n2) {
            const r2 = n2.unpackedShape, o2 = r2[4], u2 = r2[3] * o2, c = r2[2] * u2, l = r2[1] * c, { newShape: p, keptDims: f } = (0, a.squeezeShape)(r2);
            if (p.length < r2.length) {
              const o3 = (0, s.squeezeInputShape)(r2, p), a2 = ["row", "col", "depth", "depth2", "depth3"], u3 = JSON.parse(JSON.stringify(n2));
              u3.unpackedShape = o3;
              const c2 = `
          ${this.getUnpackedSamplerFromInput(t2, e2, u3).routineBody}
          float ${t2}(int row, int col, int depth, int depth2, int depth3) {
            return ${t2}(${(0, s.getSqueezedParams)(a2, f)});
          }
        `;
              return new i.GlslLibRoutine(c2, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
            }
            const d = `
        float ${t2}(int row, int col, int depth, int depth2, int depth3) {
          int index = row * ${l} + col * ${c} + depth * ${u2} +
          depth3 * ${o2} + depth2;
          vec2 uv = uvFromFlat(${n2.width}, ${n2.height}, index);
          return sampleTexture(${e2}, uv);
        }
      `;
            return new i.GlslLibRoutine(d, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
          }
          getUnpackedSampler6D(t2, e2, n2) {
            const r2 = n2.unpackedShape, o2 = r2[5], u2 = r2[4] * o2, c = r2[3] * u2, l = r2[2] * c, p = r2[1] * l, { newShape: f, keptDims: d } = (0, a.squeezeShape)(r2);
            if (f.length < r2.length) {
              const o3 = (0, s.squeezeInputShape)(r2, f), a2 = ["row", "col", "depth", "depth2", "depth3", "depth4"], u3 = JSON.parse(JSON.stringify(n2));
              u3.unpackedShape = o3;
              const c2 = `
            ${this.getUnpackedSamplerFromInput(t2, e2, u3).routineBody}
            float ${t2}(int row, int col, int depth,
              int depth2, int depth3, int depth4) {
              return ${t2}(${(0, s.getSqueezedParams)(a2, d)});
            }
          `;
              return new i.GlslLibRoutine(c2, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
            }
            const h = `
          float ${t2}(int row, int col, int depth,
            int depth2, int depth3, int depth4) {
            int index = row * ${p} + col * ${l} + depth * ${c} +
            depth2 * ${u2} + depth3 * ${o2} + depth4;
            vec2 uv = uvFromFlat(${n2.width}, ${n2.height}, index);
            return sampleTexture(${e2}, uv);
          }
        `;
            return new i.GlslLibRoutine(h, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          toVec() {
            const t2 = this.context.outputTextureLayout, e2 = t2.shape.length, n2 = t2.strides, r2 = t2.width, o2 = t2.height, a2 = [];
            for (let t3 = 0; t3 < e2 - 1; ++t3) a2.push(`
        c[${t3}] = offset / ${n2[t3]};`), a2.push(`
        offset -= c[${t3}] * ${n2[t3]};`);
            a2.push(`
        c[${e2 - 1}] = offset;`);
            const s2 = `
      void toVec(vec2 texCoords, out int c[${e2}]) {
        int offset = coordsToOffset(texCoords, ${r2}, ${o2});
        ${a2.join("")}
      }
      void toVec(int offset, out int c[${e2}]) {
        ${a2.join("")}
      }
    `;
            return { toVec: new i.GlslLibRoutine(s2, ["coordinates.coordsToOffset"]) };
          }
          valueFrom() {
            const t2 = {};
            return this.context.programInfo.inputNames.forEach((e2, n2) => {
              const r2 = this.context.inputTextureLayouts[n2], o2 = (r2.unpackedShape.length > 0 ? r2.unpackedShape : r2.shape).length;
              let a2 = `_${e2}`;
              t2[a2] = new i.GlslLibRoutine(this.getValueFromSingle(e2, o2, r2.width, r2.height, false), [`shapeUtils.indicesToOffset${a2}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]), a2 += "_T", t2[a2] = new i.GlslLibRoutine(this.getValueFromSingle(e2, o2, r2.width, r2.height, true), [`shapeUtils.indicesToOffset${a2}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]);
            }), t2;
          }
          getValueFromSingle(t2, e2, n2, r2, i2) {
            let a2 = `_${t2}`;
            return i2 && (a2 += "_T"), `
        float ${a2}(int m[${e2}]) {
          int offset = indicesToOffset${a2}(m);
          vec2 coords = offsetToCoords(offset, ${n2}, ${r2});
          float value = getColorAsFloat(${(0, o.getGlsl)(this.context.glContext.version).texture2D}(${t2}, coords));
          return value;
        }
        `;
          }
          getPackedValueFrom(t2, e2, n2, r2, i2) {
            let a2 = `_${t2}_Pack`;
            return i2 && (a2 += "_T"), `
        vec4 ${a2}(int m[${e2}]) {
          int offset = indicesToOffset_${t2}(m);
          vec2 coords = offsetToCoords(offset, ${n2}, ${r2});
          return ${(0, o.getGlsl)(this.context.glContext.version).texture2D}(${t2}, coords);
        }
        `;
          }
        }
        e.CoordsGlslLib = u;
      }, 8520: (t, e) => {
        "use strict";
        var n;
        Object.defineProperty(e, "__esModule", { value: true }), e.TopologicalSortGlslRoutines = e.GlslLibRoutineNode = e.GlslLibRoutine = e.GlslLib = e.GlslContext = e.FunctionType = void 0, (n = e.FunctionType || (e.FunctionType = {}))[n.ValueBased = 0] = "ValueBased", n[n.Positional = 1] = "Positional", e.GlslContext = class {
          constructor(t2, e2, n2, r) {
            this.glContext = t2, this.programInfo = e2, this.inputTextureLayouts = n2, this.outputTextureLayout = r;
          }
        }, e.GlslLib = class {
          constructor(t2) {
            this.context = t2;
          }
        }, e.GlslLibRoutine = class {
          constructor(t2, e2) {
            this.routineBody = t2, this.dependencies = e2;
          }
        }, e.GlslLibRoutineNode = class {
          constructor(t2, e2, n2) {
            this.name = t2, this.dependencies = n2 || [], e2 && (this.routineBody = e2);
          }
          addDependency(t2) {
            t2 && this.dependencies.push(t2);
          }
        }, e.TopologicalSortGlslRoutines = class {
          static returnOrderedNodes(t2) {
            if (!t2 || 0 === t2.length) return [];
            if (1 === t2.length) return t2;
            const e2 = /* @__PURE__ */ new Set(), n2 = /* @__PURE__ */ new Set(), r = new Array();
            return this.createOrderedNodes(t2, e2, n2, r), r;
          }
          static createOrderedNodes(t2, e2, n2, r) {
            for (let i = 0; i < t2.length; ++i) this.dfsTraverse(t2[i], e2, n2, r);
          }
          static dfsTraverse(t2, e2, n2, r) {
            if (!t2 || n2.has(t2.name)) return;
            if (e2.has(t2.name)) throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");
            e2.add(t2.name);
            const i = t2.dependencies;
            if (i && i.length > 0) for (let t3 = 0; t3 < i.length; ++t3) this.dfsTraverse(i[t3], e2, n2, r);
            r.push(t2), n2.add(t2.name), e2.delete(t2.name);
          }
        };
      }, 7341: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.EncodingGlslLib = void 0;
        const r = n(8520);
        class i extends r.GlslLib {
          static {
            __name(this, "i");
          }
          constructor(t2) {
            super(t2);
          }
          getFunctions() {
            return Object.assign(Object.assign({}, this.encodeFloat32()), this.decodeFloat32());
          }
          getCustomTypes() {
            return {};
          }
          encodeFloat32() {
            return { encode: new r.GlslLibRoutine("highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        ") };
          }
          decodeFloat32() {
            return { decode: new r.GlslLibRoutine("highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        ") };
          }
          encodeUint8() {
            const t2 = i.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
            return { encode: new r.GlslLibRoutine(`
      highp vec4 encode(highp float f) {
        highp float F = abs(f);
        highp float Sign = step(0.0,-f);
        highp float Exponent = floor(log2(F));
        highp float Mantissa = (exp2(- Exponent) * F);
        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));
        highp vec4 rgba;
        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));
        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);
        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));
        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));
        ${t2}
        rgba = rgba / 255.0; // values need to be normalized to [0,1]
        return rgba;
    }
        `) };
          }
          decodeUint8() {
            const t2 = i.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
            return { decode: new r.GlslLibRoutine(`
        highp float decode(highp vec4 rgba) {
          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]
          ${t2}
          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;
          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;
          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);
          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));
          return Result;
      }
        `) };
          }
          static isLittleEndian() {
            const t2 = new ArrayBuffer(4), e2 = new Uint32Array(t2), n2 = new Uint8Array(t2);
            if (e2[0] = 3735928559, 239 === n2[0]) return true;
            if (222 === n2[0]) return false;
            throw new Error("unknown endianness");
          }
        }
        e.EncodingGlslLib = i;
      }, 9894: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.FragColorGlslLib = void 0;
        const r = n(8520), i = n(5060);
        class o extends r.GlslLib {
          static {
            __name(this, "o");
          }
          constructor(t2) {
            super(t2);
          }
          getFunctions() {
            return Object.assign(Object.assign({}, this.setFragColor()), this.getColorAsFloat());
          }
          getCustomTypes() {
            return {};
          }
          setFragColor() {
            const t2 = (0, i.getGlsl)(this.context.glContext.version);
            return { setFragColor: new r.GlslLibRoutine(`
        void setFragColor(float value) {
            ${t2.output} = encode(value);
        }
        `, ["encoding.encode"]) };
          }
          getColorAsFloat() {
            return { getColorAsFloat: new r.GlslLibRoutine("\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        ", ["encoding.decode"]) };
          }
        }
        e.FragColorGlslLib = o;
      }, 2848: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.replaceInlines = void 0;
        const n = /@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm;
        e.replaceInlines = function(t2) {
          const e2 = {};
          let r;
          for (; null !== (r = n.exec(t2)); ) {
            const t3 = r[3].split(",").map((t4) => {
              const e3 = t4.trim().split(" ");
              return e3 && 2 === e3.length ? { type: e3[0], name: e3[1] } : null;
            }).filter((t4) => null !== t4);
            e2[r[2]] = { params: t3, body: r[4] };
          }
          for (const n2 in e2) {
            const i = "(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;".replace("__FUNC__", n2), o = new RegExp(i, "gm");
            for (; null !== (r = o.exec(t2)); ) {
              const i2 = r[1], o2 = r[2], a = r[3].split(","), s = i2 ? `${i2} ${o2};` : "";
              let u = e2[n2].body, c = "";
              e2[n2].params.forEach((t3, e3) => {
                t3 && (c += `${t3.type} ${t3.name} = ${a[e3]};
`);
              }), u = `${c}
 ${u}`, u = u.replace("return", `${o2} = `);
              const l = `
      ${s}
      {
        ${u}
      }
      `;
              t2 = t2.replace(r[0], l);
            }
          }
          return t2.replace(n, "");
        };
      }, 8879: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.GlslPreprocessor = void 0;
        const r = n(8520), i = n(2848), o = n(5483), a = n(5060);
        e.GlslPreprocessor = class {
          constructor(t2, e2, n2, i2) {
            this.libs = {}, this.glslLibRoutineDependencyGraph = {}, this.context = new r.GlslContext(t2, e2, n2, i2), Object.keys(o.glslRegistry).forEach((t3) => {
              const e3 = new o.glslRegistry[t3](this.context);
              this.libs[t3] = e3;
            });
            const a2 = this.glslLibRoutineDependencyGraph;
            for (const t3 in this.libs) {
              const e3 = this.libs[t3].getFunctions();
              for (const n3 in e3) {
                const i3 = t3 + "." + n3;
                let o2;
                a2[i3] ? (o2 = a2[i3], o2.routineBody = e3[n3].routineBody) : (o2 = new r.GlslLibRoutineNode(i3, e3[n3].routineBody), a2[i3] = o2);
                const s = e3[n3].dependencies;
                if (s) for (let t4 = 0; t4 < s.length; ++t4) if (a2[s[t4]]) o2.addDependency(a2[s[t4]]);
                else {
                  const e4 = new r.GlslLibRoutineNode(s[t4]);
                  a2[s[t4]] = e4, o2.addDependency(e4);
                }
              }
            }
          }
          preprocess() {
            const t2 = this.context.programInfo;
            let e2 = t2.shaderSource;
            return this.context.programInfo.hasMain || (e2 = `${e2}
      ${(0, a.getDefaultFragShaderMain)(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`), e2 = (0, i.replaceInlines)(e2), `${(0, a.getFragShaderPreamble)(this.context.glContext.version)}
    ${this.getUniforms(t2.inputNames, t2.variables)}
    ${this.getImports(e2)}
    ${e2}`;
          }
          getImports(t2) {
            const e2 = this.selectGlslLibRoutinesToBeIncluded(t2);
            if (0 === e2.length) return "";
            let n2 = "";
            for (let t3 = 0; t3 < e2.length; ++t3) {
              if (!e2[t3].routineBody) throw new Error(`Missing body for the Glsl Library routine: ${e2[t3].name}`);
              n2 += e2[t3].routineBody + "\n";
            }
            return n2;
          }
          selectGlslLibRoutinesToBeIncluded(t2) {
            const e2 = [];
            return Object.keys(this.glslLibRoutineDependencyGraph).forEach((n2) => {
              const r2 = n2.split(".")[1];
              -1 !== t2.indexOf(r2) && e2.push(this.glslLibRoutineDependencyGraph[n2]);
            }), r.TopologicalSortGlslRoutines.returnOrderedNodes(e2);
          }
          getUniforms(t2, e2) {
            const n2 = [];
            if (t2) for (const e3 of t2) n2.push(`uniform sampler2D ${e3};`);
            if (e2) for (const t3 of e2) n2.push(`uniform ${t3.type} ${t3.name}${t3.arrayLength ? `[${t3.arrayLength}]` : ""};`);
            return n2.join("\n");
          }
        };
      }, 5483: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.glslRegistry = void 0;
        const r = n(5107), i = n(7341), o = n(9894), a = n(2655), s = n(3891);
        e.glslRegistry = { encoding: i.EncodingGlslLib, fragcolor: o.FragColorGlslLib, vec: s.VecGlslLib, shapeUtils: a.ShapeUtilsGlslLib, coordinates: r.CoordsGlslLib };
      }, 2655: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.ShapeUtilsGlslLib = void 0;
        const r = n(8520);
        class i extends r.GlslLib {
          static {
            __name(this, "i");
          }
          constructor(t2) {
            super(t2);
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.bcastIndex()), this.bcastMatmulIndex()), this.offsetToIndices()), this.indicesToOffset()), this.incrementIndices());
          }
          getCustomTypes() {
            return {};
          }
          bcastIndex() {
            const t2 = this.context.outputTextureLayout.shape.length, e2 = {};
            return this.context.programInfo.inputNames.forEach((n2, i2) => {
              const o = this.context.inputTextureLayouts[i2].unpackedShape;
              if (o.length <= t2) {
                const i3 = o.length, a = t2 - i3, s = `bcastIndices_${n2}`;
                let u = "";
                for (let t3 = 0; t3 < i3; ++t3) u += `
          realIndices[${t3}] = int( mod(float(bcastedIndices[${a + t3}]), ${o[t3]}.0) );
          `;
                const c = `
        void ${s} (int bcastedIndices[${t2}], out int realIndices[${i3}]) {
          ${u}
        }
        `;
                e2[s] = new r.GlslLibRoutine(c);
              }
            }), e2;
          }
          bcastMatmulIndex() {
            const t2 = this.context.outputTextureLayout.shape.length, e2 = {};
            return this.context.programInfo.inputNames.forEach((n2, i2) => {
              const o = this.context.inputTextureLayouts[i2].shape;
              if (!(o.length < 2 || o.length > t2)) {
                const i3 = o.length, a = t2 - i3, s = `bcastMatmulIndices_${n2}`;
                let u = "";
                for (let t3 = 0; t3 < i3 - 2; ++t3) u += `
          realIndices[${t3}] = int( mod(float(bcastedIndices[${a + t3}]), ${o[t3]}.0) );
          `;
                const c = `
        void ${s}(int bcastedIndices[${t2}], out int realIndices[${i3}]) {
          ${u}
          realIndices[${i3 - 1}] = bcastedIndices[${t2 - 1}];
          realIndices[${i3 - 2}] = bcastedIndices[${t2 - 2}];
        }
        `;
                e2[s] = new r.GlslLibRoutine(c);
              }
            }), e2;
          }
          indicesToOffset() {
            const t2 = {};
            return this.context.programInfo.inputNames.forEach((e2, n2) => {
              const o = this.context.inputTextureLayouts[n2].shape, a = this.context.inputTextureLayouts[n2].strides, s = o.length;
              let u = `indicesToOffset_${e2}`;
              t2[u] = new r.GlslLibRoutine(i.indexToOffsetSingle(u, s, a)), u = `indicesToOffset_${e2}_T`, t2[u] = new r.GlslLibRoutine(i.indexToOffsetSingle(u, s, a.slice().reverse()));
            }), t2;
          }
          static indexToOffsetSingle(t2, e2, n2) {
            let r2 = "";
            for (let t3 = e2 - 1; t3 >= 0; --t3) r2 += `
        offset += indices[${t3}] * ${n2[t3]};
        `;
            return `
      int ${t2}(int indices[${e2}]) {
        int offset = 0;
        ${r2}
        return offset;
      }
      `;
          }
          offsetToIndices() {
            const t2 = {};
            return this.context.programInfo.inputNames.forEach((e2, n2) => {
              const o = this.context.inputTextureLayouts[n2].shape, a = this.context.inputTextureLayouts[n2].strides, s = o.length;
              let u = `offsetToIndices_${e2}`;
              t2[u] = new r.GlslLibRoutine(i.offsetToIndicesSingle(u, s, a)), u = `offsetToIndices_${e2}_T`, t2[u] = new r.GlslLibRoutine(i.offsetToIndicesSingle(u, s, a.slice().reverse()));
            }), t2;
          }
          static offsetToIndicesSingle(t2, e2, n2) {
            const r2 = [];
            for (let t3 = 0; t3 < e2 - 1; ++t3) r2.push(`
      indices[${t3}] = offset / ${n2[t3]};`), r2.push(`
        offset -= indices[${t3}] * ${n2[t3]};`);
            return r2.push(`
      indices[${e2 - 1}] = offset;`), `
      void ${t2}(int offset, out int indices[${e2}]) {
        ${r2.join("")}
      }
      `;
          }
          incrementIndices() {
            const t2 = {};
            return this.context.programInfo.inputNames.forEach((e2, n2) => {
              const i2 = this.context.inputTextureLayouts[n2].shape, o = i2.length, a = `incrementIndices_${e2}`;
              let s = "";
              for (let t3 = 0; t3 < o; ++t3) s += `
        shape[${t3}] = ${i2[t3]};`;
              const u = `
        void ${a}(int axis, out int indices[${o}]) {
          int shape[${o}];
          ${s};
          for(int i = ${o} -1 ; i >= 0; --i) {
            if(i > axis) continue;
            indices[i] += 1;
            if(indices[i] < shape[i]) {
              break;
            }
            indices[i] = 0;
          }
        }
        `;
              t2[a] = new r.GlslLibRoutine(u);
            }), t2;
          }
        }
        e.ShapeUtilsGlslLib = i;
      }, 5060: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.getDefaultFragShaderMain = e.getFragShaderPreamble = e.getVertexShaderSource = e.getGlsl = void 0;
        const n = { version: "", attribute: "attribute", varyingVertex: "varying", varyingFrag: "varying", texture2D: "texture2D", output: "gl_FragColor", outputDeclaration: "" }, r = { version: "#version 300 es", attribute: "in", varyingVertex: "out", varyingFrag: "in", texture2D: "texture", output: "outputColor", outputDeclaration: "out vec4 outputColor;" };
        function i(t2) {
          return 1 === t2 ? n : r;
        }
        __name(i, "i");
        e.getGlsl = i, e.getVertexShaderSource = function(t2) {
          const e2 = i(t2);
          return `${e2.version}
      precision highp float;
      ${e2.attribute} vec3 position;
      ${e2.attribute} vec2 textureCoord;

      ${e2.varyingVertex} vec2 TexCoords;

      void main()
      {
          gl_Position = vec4(position, 1.0);
          TexCoords = textureCoord;
      }`;
        }, e.getFragShaderPreamble = function(t2) {
          const e2 = i(t2);
          return `${e2.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e2.varyingFrag} vec2 TexCoords;
    ${e2.outputDeclaration}
    const vec2 halfCR = vec2(0.5, 0.5);

    // Custom vector types to handle higher dimenalities.
    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    `;
        }, e.getDefaultFragShaderMain = function(t2, e2) {
          return `
  void main() {
    int indices[${e2}];
    toVec(TexCoords, indices);
    vec4 result = vec4(process(indices));
    ${i(t2).output} = result;
  }
  `;
        };
      }, 3891: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.VecGlslLib = void 0;
        const r = n(8520);
        class i extends r.GlslLib {
          static {
            __name(this, "i");
          }
          constructor(t2) {
            super(t2);
          }
          getCustomTypes() {
            return {};
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign({}, this.binaryVecFunctions()), this.copyVec()), this.setVecItem()), this.getVecItem());
          }
          binaryVecFunctions() {
            const t2 = this.context.outputTextureLayout.shape.length, e2 = { add: "+=", sub: "-=", mul: "*=", div: "/=" }, n2 = {};
            for (const i2 in e2) {
              const o = `${i2}Vec`;
              let a = "";
              for (let n3 = 0; n3 < t2; ++n3) a += `
          dest[${n3}] ${e2[i2]} src[${n3}];
          `;
              const s = `
        void ${o}(int src[${t2}], out int dest[${t2}]) {
          ${a}
        }
        `;
              n2[o] = new r.GlslLibRoutine(s);
            }
            return n2;
          }
          copyVec() {
            const t2 = this.context.outputTextureLayout.shape.length;
            let e2 = "";
            for (let n3 = 0; n3 < t2; ++n3) e2 += `
        dest[${n3}] = src[${n3}];
        `;
            const n2 = `
      void copyVec(int src[${t2}], out int dest[${t2}]) {
        ${e2}
      }
      `;
            return { copyVec: new r.GlslLibRoutine(n2) };
          }
          setVecItem() {
            const t2 = this.context.outputTextureLayout.shape.length;
            let e2 = `
        if(index < 0)
            index =${t2} + index;
        if (index == 0)
            m[0] = value;
        `;
            for (let n3 = 1; n3 < t2 - 1; ++n3) e2 += `
        else if (index == ${n3})
            m[${n3}] = value;
            `;
            e2 += `
        else
            m[${t2 - 1}] = value;
        `;
            const n2 = `
      void setVecItem(out int m[${t2}], int index, int value) {
        ${e2}
      }
        `;
            return { setVecItem: new r.GlslLibRoutine(n2) };
          }
          getVecItem() {
            const t2 = this.context.outputTextureLayout.shape.length;
            let e2 = `
        if(index < 0)
            index = ${t2} + index;
        if (index == 0)
            return m[0];
      `;
            for (let n3 = 1; n3 < t2 - 1; ++n3) e2 += `
        else if (index == ${n3})
            return m[${n3}];
      `;
            e2 += `
        else
            return m[${t2 - 1}];
        `;
            const n2 = `
      int getVecItem(int m[${t2}], int index) {
        ${e2}
      }
    `;
            return { getVecItem: new r.GlslLibRoutine(n2) };
          }
        }
        e.VecGlslLib = i;
      }, 8316: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.WebGLInferenceHandler = void 0;
        const r = n(6231), i = n(9162), o = n(2517), a = n(2403), s = n(7019), u = n(8710), c = n(5611), l = n(4057), p = n(2039);
        e.WebGLInferenceHandler = class {
          constructor(t2) {
            this.session = t2, this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
          }
          calculateTextureWidthAndHeight(t2, e2) {
            return (0, l.calculateTextureWidthAndHeight)(this.session.layoutStrategy, t2, e2);
          }
          executeProgram(t2, e2) {
            if (e2.length < t2.inputNames.length) throw new Error(`Input size mustn't be less than ${t2.inputNames.length}.`);
            if (t2.inputNames.length !== t2.inputTypes.length) throw new Error("input names size does not match input types");
            const n2 = [];
            for (let r3 = 0; r3 < t2.inputNames.length; ++r3) n2[r3] = this.getOrCreateTextureData(e2[r3], t2.inputTypes[r3]);
            const r2 = ((t3, e3) => {
              const n3 = e3.map((t4) => `${t4.unpackedShape.join(",")};${t4.width}x${t4.height}`).join("_");
              let r3 = t3.name;
              return t3.cacheHint && (r3 += "[" + t3.cacheHint + "]"), r3 += ":" + n3, r3;
            })(t2, n2);
            let i2 = this.session.programManager.getArtifact(r2);
            const o2 = i2 ? i2.programInfo : "function" == typeof t2.get ? t2.get() : t2, a2 = (0, l.createTextureLayoutFromTextureType)(this.session.layoutStrategy, o2.output.dims, o2.output.textureType), s2 = this.createTextureData(a2, o2.output.type);
            return i2 || (i2 = this.session.programManager.build(o2, n2, s2), this.session.programManager.setArtifact(r2, i2)), this.runProgram(i2, n2, s2), s2;
          }
          run(t2, e2) {
            return this.executeProgram(t2, e2).tensor;
          }
          runProgram(t2, e2, n2) {
            for (let n3 = 0; n3 < e2.length; ++n3) if (!!e2[n3].isPacked != (t2.programInfo.inputTypes[n3] === p.TextureType.packed)) throw new Error(`input[${n3}] property packed inconsistent`);
            if (!!n2.isPacked != (t2.programInfo.output.textureType === p.TextureType.packed)) throw new Error("output property packed inconsistent");
            this.session.programManager.run(t2, e2, n2);
          }
          getOrCreateTextureData(t2, e2) {
            let n2 = this.getTextureData(t2.dataId, e2 === p.TextureType.packed);
            if (!n2 && (n2 = this.getTextureData(t2.dataId, e2 !== p.TextureType.packed), n2)) return e2 === p.TextureType.packed ? this.pack(n2) : this.unpack(n2);
            if (!n2) {
              const r2 = (0, l.createTextureLayoutFromTextureType)(this.session.layoutStrategy, t2.dims, e2);
              if (e2 === p.TextureType.packedLastDimension) {
                const n3 = 1, r3 = 4, i2 = t2.dims;
                if (4 === i2.length) {
                  const o2 = [i2[0], Math.ceil(i2[1] * i2[2] * i2[3] / r3)], a2 = (0, l.createTextureLayoutFromTextureType)(this.session.layoutStrategy, o2, e2);
                  let s2 = t2.numberData;
                  if (i2[1] * i2[2] * i2[3] % r3 != 0) {
                    const e3 = i2[0], o3 = i2[1] * i2[2] * i2[3], a3 = Math.ceil(o3 * n3 / r3) * r3;
                    s2 = new Float32Array(e3 * a3);
                    for (let r4 = 0; r4 < e3; ++r4) {
                      const e4 = r4 * o3, i3 = r4 * a3 + r4 % n3 * o3;
                      s2.set(t2.numberData.subarray(e4, e4 + o3), i3);
                    }
                  }
                  return this.createTextureData(a2, t2.type, s2, t2, 1);
                }
              }
              if (e2 === p.TextureType.packed) {
                const e3 = (0, l.createTextureLayoutFromShape)(this.session.layoutStrategy, t2.dims, 1, [], { reverseWH: true }), r3 = this.createTextureData(e3, t2.type, t2.numberData, t2, 1);
                n2 = this.pack(r3);
              } else n2 = this.createTextureData(r2, t2.type, t2.numberData, t2, 1);
            }
            return n2;
          }
          createTextureDataFromLayoutBindTensor(t2, e2, n2, r2) {
            return this.createTextureData(t2, e2, n2, r2, 1);
          }
          createTextureData(t2, e2, n2, i2, o2) {
            r.Logger.verbose("InferenceHandler", `Creating TextureData: layout:[${JSON.stringify(t2)}]`);
            const a2 = this.session.textureManager.createTextureFromLayout(e2, t2, n2, o2);
            return this.createTextureDataFromTexture(t2, e2, a2, i2);
          }
          reshapeUnpacked(t2, e2) {
            const n2 = this.getOrCreateTextureData(t2, p.TextureType.unpacked), r2 = { channels: n2.channels, height: n2.height, width: n2.width, shape: 0 !== e2.length ? e2 : [1], strides: o.ShapeUtil.computeStrides(e2), unpackedShape: e2 };
            return this.createTextureDataFromTexture(r2, t2.type, n2.texture).tensor;
          }
          reshapePacked(t2, e2) {
            const n2 = this.getOrCreateTextureData(t2, p.TextureType.packed);
            if ((0, s.isReshapeCheap)(t2.dims, e2)) {
              const r3 = { channels: n2.channels, height: n2.height, width: n2.width, shape: 0 !== e2.length ? e2 : [1], strides: o.ShapeUtil.computeStrides(e2), unpackedShape: e2, isPacked: true };
              return this.createTextureDataFromTexture(r3, t2.type, n2.texture).tensor;
            }
            const r2 = (0, s.processDims3D)(t2.dims), i2 = (0, s.processDims3D)(e2), a2 = this.reshapePacked(t2, r2), u2 = this.run((0, s.createPackedReshape3DProgramInfoLoader)(this, a2, i2), [a2]);
            return this.reshapePacked(u2, e2);
          }
          cast(t2, e2) {
            const n2 = this.getOrCreateTextureData(t2, p.TextureType.unpacked);
            return this.createTextureDataFromTexture(n2, e2, n2.texture).tensor;
          }
          createTextureDataFromTexture(t2, e2, n2, r2, o2) {
            const a2 = Object.assign(Object.assign({}, t2), { tensor: r2 || new i.Tensor(t2.unpackedShape, e2, (t3) => this.readTexture(a2), async (t3) => this.readTextureAsync(a2), void 0, o2), texture: n2 });
            return this.setTextureData(a2.tensor.dataId, a2, t2.isPacked), a2;
          }
          getTextureData(t2, e2 = false) {
            return this.session.isInitializer(t2) ? this.session.getTextureData(t2, e2) : e2 ? this.packedTextureDataCache.get(t2) : this.unpackedTextureDataCache.get(t2);
          }
          setTextureData(t2, e2, n2 = false) {
            this.session.isInitializer(t2) ? this.session.setTextureData(t2, e2, n2) : (n2 ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(t2, e2);
          }
          isTextureLayoutCached(t2, e2 = false) {
            return !!this.getTextureData(t2.dataId, e2);
          }
          dispose() {
            this.session.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((t2) => this.session.textureManager.releaseTexture(t2)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((t2) => this.session.textureManager.releaseTexture(t2)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
          }
          readTexture(t2) {
            return t2.isPacked ? this.readTexture(this.unpack(t2)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTexture(t2, t2.tensor.type, t2.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u.encodeAsUint8)(this, t2));
          }
          async readTextureAsync(t2) {
            return t2.isPacked ? this.readTextureAsync(this.unpack(t2)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTextureAsync(t2, t2.tensor.type, t2.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u.encodeAsUint8)(this, t2));
          }
          pack(t2) {
            return this.executeProgram((0, a.createPackProgramInfoLoader)(this, t2.tensor), [t2.tensor]);
          }
          unpack(t2) {
            return this.executeProgram((0, c.createUnpackProgramInfoLoader)(this, t2.tensor), [t2.tensor]);
          }
        };
      }, 1640: function(t, e, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2);
          var i2 = Object.getOwnPropertyDescriptor(e2, n2);
          i2 && !("get" in i2 ? !e2.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return e2[n2];
          }, "get") }), Object.defineProperty(t2, r2, i2);
        } : function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2), t2[r2] = e2[n2];
        }), i = this && this.__setModuleDefault || (Object.create ? function(t2, e2) {
          Object.defineProperty(t2, "default", { enumerable: true, value: e2 });
        } : function(t2, e2) {
          t2.default = e2;
        }), o = this && this.__importStar || function(t2) {
          if (t2 && t2.__esModule) return t2;
          var e2 = {};
          if (null != t2) for (var n2 in t2) "default" !== n2 && Object.prototype.hasOwnProperty.call(t2, n2) && r(e2, t2, n2);
          return i(e2, t2), e2;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.WEBGL_OP_RESOLVE_RULES = void 0;
        const a = n(2898), s = o(n(7839)), u = n(4196), c = n(2069), l = n(8138), p = n(9663), f = n(5193), d = n(7992), h = n(1253), g = n(4776), b = n(6572), m = n(3346), y = n(5623), _ = n(2870), v = n(2143), w = n(4939), x = n(718), T = n(2268), S = n(8117), O = n(2278), A = n(5524), E = n(5975), I = n(3933), P = n(6558), D = n(5723), $2 = n(3738), k = o(n(4909)), C = n(8428), F = n(9793);
        e.WEBGL_OP_RESOLVE_RULES = [["Abs", "", "6+", k.abs], ["Acos", "", "7+", k.acos], ["Add", "", "7+", s.add], ["And", "", "7+", s.and], ["Asin", "", "7+", k.asin], ["Atan", "", "7+", k.atan], ["AveragePool", "", "7+", v.averagePool, v.parseAveragePoolAttributes], ["BatchNormalization", "", "7+", a.batchNormalization, a.parseBatchNormalizationAttributes], ["Cast", "", "6+", u.cast, u.parseCastAttributes], ["Ceil", "", "6+", k.ceil], ["Clip", "", "6-10", k.clip, k.parseClipAttributes], ["Clip", "", "11+", k.clipV11], ["Concat", "", "4+", c.concat, c.parseConcatAttributes], ["Conv", "", "1+", l.conv, l.parseConvAttributes], ["ConvTranspose", "", "1+", p.convTranspose, p.parseConvTransposeAttributes], ["Cos", "", "7+", k.cos], ["Div", "", "7+", s.div], ["Dropout", "", "7+", k.identity], ["DepthToSpace", "", "1+", f.depthToSpace, f.parseDepthToSpaceAttributes], ["Equal", "", "7+", s.equal], ["Elu", "", "6+", k.elu, k.parseEluAttributes], ["Exp", "", "6+", k.exp], ["Flatten", "", "1+", d.flatten, d.parseFlattenAttributes], ["Floor", "", "6+", k.floor], ["FusedConv", "com.microsoft", "1+", l.conv, l.parseConvAttributes], ["Gather", "", "1+", h.gather, h.parseGatherAttributes], ["Gemm", "", "7-10", g.gemm, g.parseGemmAttributesV7], ["Gemm", "", "11+", g.gemm, g.parseGemmAttributesV11], ["GlobalAveragePool", "", "1+", v.globalAveragePool, v.parseGlobalAveragePoolAttributes], ["GlobalMaxPool", "", "1+", v.globalMaxPool], ["Greater", "", "7+", s.greater], ["Identity", "", "1+", k.identity], ["ImageScaler", "", "1+", b.imageScaler, b.parseImageScalerAttributes], ["InstanceNormalization", "", "6+", m.instanceNormalization, m.parseInstanceNormalizationAttributes], ["LeakyRelu", "", "6+", k.leakyRelu, k.parseLeakyReluAttributes], ["Less", "", "7+", s.less], ["Log", "", "6+", k.log], ["MatMul", "", "1+", y.matMul, y.parseMatMulAttributes], ["MaxPool", "", "1+", v.maxPool, v.parseMaxPoolAttributes], ["Mul", "", "7+", s.mul], ["Neg", "", "6+", k.neg], ["Not", "", "1+", k.not], ["Or", "", "7+", s.or], ["Pad", "", "2-10", _.padV2, _.parsePadAttributesV2], ["Pad", "", "11+", _.padV11, _.parsePadAttributesV11], ["Pow", "", "7+", s.pow], ["PRelu", "", "7+", s.pRelu], ["ReduceLogSum", "", "1+", w.reduceLogSum, w.parseReduceAttributes], ["ReduceMax", "", "1+", w.reduceMax, w.parseReduceAttributes], ["ReduceMean", "", "1+", w.reduceMean, w.parseReduceAttributes], ["ReduceMin", "", "1+", w.reduceMin, w.parseReduceAttributes], ["ReduceProd", "", "1+", w.reduceProd, w.parseReduceAttributes], ["ReduceSum", "", "1-12", w.reduceSum, w.parseReduceAttributes], ["ReduceSumSquare", "", "1+", w.reduceLogSumSquare, w.parseReduceAttributes], ["Relu", "", "6+", k.relu], ["Reshape", "", "5+", x.reshape], ["Resize", "", "10", T.resize, T.parseResizeAttributesV10], ["Resize", "", "11+", T.resize, T.parseResizeAttributesV11], ["Shape", "", "1+", S.shape], ["Sigmoid", "", "6+", k.sigmoid], ["Sin", "", "7+", k.sin], ["Slice", "", "10+", O.sliceV10], ["Slice", "", "1-9", O.slice, O.parseSliceAttributes], ["Softmax", "", "1-12", A.softmax, A.parseSoftmaxAttributes], ["Softmax", "", "13+", A.softmaxV13, A.parseSoftmaxAttributesV13], ["Split", "", "2-12", E.split, E.parseSplitAttributes], ["Sqrt", "", "6+", k.sqrt], ["Squeeze", "", "1-12", I.squeeze, I.parseSqueezeAttributes], ["Squeeze", "", "13+", I.squeezeV13], ["Sub", "", "7+", s.sub], ["Sum", "", "6+", P.sum], ["Tan", "", "7+", k.tan], ["Tanh", "", "6+", k.tanh], ["Tile", "", "6+", D.tile], ["Transpose", "", "1+", $2.transpose, $2.parseTransposeAttributes], ["Upsample", "", "7-8", F.upsample, F.parseUpsampleAttributesV7], ["Upsample", "", "9", F.upsample, F.parseUpsampleAttributesV9], ["Unsqueeze", "", "1-12", C.unsqueeze, C.parseUnsqueezeAttributes], ["Unsqueeze", "", "13+", C.unsqueezeV13], ["Xor", "", "7+", s.xor]];
      }, 2898: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseBatchNormalizationAttributes = e.batchNormalization = void 0;
        const r = n(246), i = n(5060), o = n(2039), a = { name: "BatchNormalization", inputNames: ["A", "Scale", "B", "Mean", "Variance"], inputTypes: [o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked] };
        e.batchNormalization = (t2, e2, n2) => (u(e2), [t2.run(Object.assign(Object.assign({}, a), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => s(t2, e2, n2), "get") }), e2)]), e.parseBatchNormalizationAttributes = (t2) => {
          const e2 = t2.attributes.getFloat("epsilon", 1e-5), n2 = t2.attributes.getFloat("momentum", 0.9), i2 = t2.attributes.getInt("spatial", 1);
          return (0, r.createAttributeWithCacheKey)({ epsilon: e2, momentum: n2, spatial: i2 });
        };
        const s = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = (0, i.getGlsl)(t2.session.backend.glContext.version), s2 = e2[0].dims.length, [u2, c] = t2.calculateTextureWidthAndHeight(e2[1].dims, o.TextureType.unpacked), l = `
  float process(int[${s2}] indices) {
    vec2 position = offsetToCoords(indices[1], ${u2}, ${c});
    float scale = getColorAsFloat(${r2.texture2D}(Scale, position));
    float mean = getColorAsFloat(${r2.texture2D}(Mean, position));
    float variance = getColorAsFloat(${r2.texture2D}(Variance, position));
    float b = getColorAsFloat(${r2.texture2D}(B, position));

    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${n2.epsilon})) ) + b;
  }`;
          return Object.assign(Object.assign({}, a), { output: { dims: e2[0].dims, type: e2[0].type, textureType: o.TextureType.unpacked }, shaderSource: l });
        }, "s"), u = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 5 !== t2.length) throw new Error("BatchNormalization requires 5 inputs.");
          const e2 = t2[0], n2 = t2[1], r2 = t2[2], i2 = t2[3], o2 = t2[4];
          if (e2.dims.length < 3 || 1 !== n2.dims.length || 1 !== r2.dims.length || 1 !== i2.dims.length || 1 !== o2.dims.length) throw new Error("invalid input shape.");
          if (n2.dims[0] !== e2.dims[1] || r2.dims[0] !== e2.dims[1] || i2.dims[0] !== e2.dims[1] || o2.dims[0] !== e2.dims[1]) throw new Error("invalid input shape.");
          if ("float32" !== e2.type && "float64" !== e2.type || "float32" !== n2.type && "float64" !== n2.type || "float32" !== r2.type && "float64" !== r2.type || "float32" !== i2.type && "float64" !== i2.type || "float32" !== o2.type && "float64" !== o2.type) throw new Error("invalid input tensor types.");
        }, "u");
      }, 7839: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.xor = e.sub = e.pRelu = e.pow = e.or = e.mul = e.less = e.greater = e.equal = e.div = e.and = e.add = e.glslPRelu = e.glslPow = e.glslXor = e.glslOr = e.glslAnd = e.glslLess = e.glslGreater = e.glslEqual = e.glslSub = e.glslMul = e.glslDiv = e.glslAdd = void 0;
        const r = n(2517), i = n(8520), o = n(5060), a = n(2039);
        function s() {
          const t2 = "add_";
          return { body: `
  float ${t2}(float a, float b) {
    return a + b;
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return v1 + v2;
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(s, "s");
        function u() {
          const t2 = "div_";
          return { body: `
  float ${t2}(float a, float b) {
    return a / b;
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return v1 / v2;
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(u, "u");
        function c() {
          const t2 = "mul_";
          return { body: `
  float ${t2}(float a, float b) {
    return a * b;
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return v1 * v2;
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(c, "c");
        function l() {
          const t2 = "sub_";
          return { body: `
  float ${t2}(float a, float b) {
    return a - b;
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return v1 - v2;
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(l, "l");
        function p() {
          const t2 = "equal_";
          return { body: `
  float ${t2}(float a, float b) {
    return float(a == b);
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return vec4(equal(v1, v2));
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(p, "p");
        function f() {
          const t2 = "greater_";
          return { body: `
  float ${t2}(float a, float b) {
    return float(a > b);
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return vec4( v1.r > v2.r ,
      v1.g > v2.g,
      v1.b > v2.b,
      v1.a > v2.a );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(f, "f");
        function d() {
          const t2 = "less_";
          return { body: `
  float ${t2}(float a, float b) {
    return float(a < b);
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return vec4( v1.r < v2.r ,
                v1.g < v2.g,
                v1.b < v2.b,
                v1.a < v2.a );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(d, "d");
        function h() {
          const t2 = "and_";
          return { body: `
  float ${t2}(float a, float b) {
    return float( bool(a) && bool(b) );
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r && b2.r ,
                b1.g && b2.g,
                b1.b && b2.b,
                b1.a && b2.a );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(h, "h");
        function g() {
          const t2 = "or_";
          return { body: `
  float ${t2}(float a, float b) {
    return float( bool(a) || bool(b) );
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r || b2.r ,
                b1.g || b2.g,
                b1.b || b2.b,
                b1.a || b2.a );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(g, "g");
        function b() {
          const t2 = "xor_";
          return { body: `
  float ${t2}(float a, float b) {
    return float( bool(a) ^^ bool(b) );
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r ^^ b2.r ,
                b1.g ^^ b2.g,
                b1.b ^^ b2.b,
                b1.a ^^ b2.a );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(b, "b");
        function m() {
          return function(t2) {
            const e2 = `${t2}_`;
            return { body: `
  float ${e2}(float a, float b) {
    return ${t2}(a, b);
  }
  vec4 ${e2}(vec4 v1, vec4 v2) {
    return ${t2}(v1, v2);
  }
  `, name: e2, type: i.FunctionType.ValueBased };
          }("pow");
        }
        __name(m, "m");
        function y() {
          const t2 = "prelu_";
          return { body: `
  float ${t2}(float a, float b) {
    return a < 0.0 ? a * b: a;
  }
  vec4 ${t2}(vec4 v1, vec4 v2) {
    return vec4(
      v1.r < 0.0 ? v1.r * v2.r: v1.r,
      v1.g < 0.0 ? v1.g * v2.g: v1.g,
      v1.b < 0.0 ? v1.b * v2.b: v1.b,
      v1.a < 0.0 ? v1.a * v2.a: v1.a
      );
  }
  `, name: t2, type: i.FunctionType.ValueBased };
        }
        __name(y, "y");
        e.glslAdd = s, e.glslDiv = u, e.glslMul = c, e.glslSub = l, e.glslEqual = p, e.glslGreater = f, e.glslLess = d, e.glslAnd = h, e.glslOr = g, e.glslXor = b, e.glslPow = m, e.glslPRelu = y;
        const _ = /* @__PURE__ */ __name((t2, e2, n2, r2 = e2[0].type, i2) => {
          const o2 = t2.session.pack ? a.TextureType.packed : a.TextureType.unpacked;
          return { name: n2.name, inputNames: ["A", "B"], inputTypes: [o2, o2], cacheHint: i2, get: /* @__PURE__ */ __name(() => v(t2, e2, n2, r2), "get") };
        }, "_"), v = /* @__PURE__ */ __name((t2, e2, n2, i2 = e2[0].type) => {
          const s2 = t2.session.pack ? a.TextureType.packed : a.TextureType.unpacked, u2 = !r.ShapeUtil.areEqual(e2[0].dims, e2[1].dims);
          let c2 = e2[0].dims;
          const l2 = t2.session.pack;
          if (u2) {
            const a2 = r.BroadcastUtil.calcShape(e2[0].dims, e2[1].dims, false);
            if (!a2) throw new Error("Can't perform binary op on the given tensors");
            c2 = a2;
            const u3 = c2.length, p3 = 0 !== e2[0].dims.length ? e2[0].dims.length : 1, f3 = 0 !== e2[1].dims.length ? e2[1].dims.length : 1, d2 = 0 !== e2[0].dims.length ? "bcastIndices_A(indices, aindices);" : "aindices[0] = 0;", h2 = 0 !== e2[1].dims.length ? "bcastIndices_B(indices, bindices);" : "bindices[0] = 0;", g2 = (0, o.getGlsl)(t2.session.backend.glContext.version), b2 = l2 ? `
      ${n2.body}
      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();
        vec4 result = ${n2.name}(a, b);
        ${g2.output} = result;
      }` : `
      ${n2.body}
      float process(int indices[${u3}]) {
        int aindices[${p3}];
        int bindices[${f3}];
        ${d2}
        ${h2}
        return ${n2.name}(_A(aindices), _B(bindices));
      }`;
            return { name: n2.name, inputNames: ["A", "B"], inputTypes: [s2, s2], output: { dims: c2, type: i2, textureType: s2 }, shaderSource: b2, hasMain: l2 };
          }
          const p2 = (0, o.getGlsl)(t2.session.backend.glContext.version), f2 = `
    ${n2.body}
    void main() {
      vec4 v1 = ${p2.texture2D}(A, TexCoords);
      vec4 v2 = ${p2.texture2D}(B, TexCoords);
      vec4 result = ${n2.name}(v1, v2);
      ${p2.output} = result;
    }
    `;
          return { name: n2.name, inputNames: ["A", "B"], inputTypes: [s2, s2], output: { dims: e2[0].dims, type: i2, textureType: s2 }, shaderSource: f2, hasMain: true };
        }, "v");
        e.add = (t2, e2) => [t2.run(_(t2, e2, s()), e2)], e.and = (t2, e2) => [t2.run(_(t2, e2, h(), "bool"), e2)], e.div = (t2, e2) => [t2.run(_(t2, e2, u()), e2)], e.equal = (t2, e2) => [t2.run(_(t2, e2, p(), "bool"), e2)], e.greater = (t2, e2) => [t2.run(_(t2, e2, f(), "bool"), e2)], e.less = (t2, e2) => [t2.run(_(t2, e2, d(), "bool"), e2)], e.mul = (t2, e2) => [t2.run(_(t2, e2, c()), e2)], e.or = (t2, e2) => [t2.run(_(t2, e2, g(), "bool"), e2)], e.pow = (t2, e2) => [t2.run(_(t2, e2, m()), e2)], e.pRelu = (t2, e2) => [t2.run(_(t2, e2, y()), e2)], e.sub = (t2, e2) => [t2.run(_(t2, e2, l()), e2)], e.xor = (t2, e2) => [t2.run(_(t2, e2, b(), "bool"), e2)];
      }, 4196: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseCastAttributes = e.cast = void 0;
        const r = n(2517);
        e.cast = (t2, e2, n2) => (i(e2), [t2.cast(e2[0], n2)]), e.parseCastAttributes = (t2) => r.ProtoUtil.tensorDataTypeFromProto(t2.attributes.getInt("to"));
        const i = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Cast requires 1 input.");
          if ("string" === t2[0].type) throw new Error("Invalid input type.");
        }, "i");
      }, 1163: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createPackedConcatProgramInfoLoader = void 0;
        const r = n(5060), i = n(2039), o = n(9390), a = n(2827);
        e.createPackedConcatProgramInfoLoader = (t2, e2, n2) => {
          const u = (c = e2.length, l = n2.cacheKey, { name: "Concat (packed)", inputNames: Array.from({ length: c }, (t3, e3) => `X${e3}`), inputTypes: Array(c).fill(i.TextureType.packed), cacheHint: l });
          var c, l;
          return Object.assign(Object.assign({}, u), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, u2) => {
            const c2 = n3[0].dims.slice();
            if (u2 >= c2.length || u2 < -1 * c2.length) throw new Error("axis specified for concat doesn't match input dimensionality");
            u2 < 0 && (u2 = c2.length + u2);
            const l2 = c2.slice(0);
            for (let t4 = 1; t4 < n3.length; t4++) {
              const e4 = n3[t4].dims.slice();
              for (let t5 = 0; t5 < c2.length; t5++) if (t5 === u2) l2[u2] += e4[t5];
              else if (c2[t5] !== e4[t5]) throw new Error("non concat dimensions must match");
            }
            const p = l2.length, f = (0, a.getChannels)("coords", p), d = (0, o.getCoordsDataType)(p), h = (0, a.unpackFromChannel)(), g = n3.map((t4) => t4.dims), b = (0, o.getGlChannels)(p), m = new Array(g.length - 1);
            m[0] = g[0][u2];
            for (let t4 = 1; t4 < m.length; t4++) m[t4] = m[t4 - 1] + g[t4][u2];
            const y = b[u2], _ = b.slice(-2), v = b.join();
            let w = `if (${y} < ${m[0]}) {
        return getChannel(
            getX0(${v}), vec2(${_.join()}));
        }`;
            for (let t4 = 1; t4 < m.length; t4++) {
              const e4 = m[t4 - 1];
              w += `
            if (${y} < ${m[t4]}  && ${y} >= ${m[t4 - 1]}) {
              return getChannel(
                getX${t4}(${s(b, y, e4)}),
                vec2(${s(_, y, e4)}));
            }`;
            }
            const x = m.length, T = m[m.length - 1];
            w += `
            return getChannel(
              getX${x}(${s(b, y, T)}),
              vec2(${s(_, y, T)}));`;
            const S = (0, r.getGlsl)(t3.session.backend.glContext.version), O = `
          ${h}
          float getValue(${b.map((t4) => "int " + t4)}) {
            ${w}
          }

          void main() {
            ${d} coords = getOutputCoords();
            int lastDim = coords.${b[p - 1]};
            coords.${b[p - 1]} = coords.${b[p - 2]};
            coords.${b[p - 2]} = lastDim;

            vec4 result = vec4(getValue(${f}), 0., 0., 0.);

            ${f[p - 1]} = ${f[p - 1]} + 1;
            if (${f[p - 1]} < ${l2[p - 1]}) {
              result.g = getValue(${f});
            }

            ${f[p - 2]} = ${f[p - 2]} + 1;
            if (${f[p - 2]} < ${l2[p - 2]}) {
              result.a = getValue(${f});
            }

            ${f[p - 1]} = ${f[p - 1]} - 1;
            if (${f[p - 2]} < ${l2[p - 2]} &&
                ${f[p - 1]} < ${l2[p - 1]}) {
              result.b = getValue(${f});
            }
            ${S.output} = result;
          }
        `;
            return Object.assign(Object.assign({}, e3), { output: { dims: l2, type: n3[0].type, textureType: i.TextureType.packed }, shaderSource: O, hasMain: true });
          })(t2, u, e2, n2.axis), "get") });
        };
        const s = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = t2.indexOf(e2);
          return t2.map((t3, e3) => e3 === r2 ? `${t3} - ${n2}` : t3).join();
        }, "s");
      }, 2069: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseConcatAttributes = e.concat = void 0;
        const r = n(246), i = n(2039), o = n(1163);
        e.concat = (t2, e2, n2) => (p(e2), t2.session.pack && e2[0].dims.length > 1 ? [t2.run((0, o.createPackedConcatProgramInfoLoader)(t2, e2, n2), e2)] : [t2.run(a(t2, e2, n2), e2)]);
        const a = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = (o2 = e2.length, a2 = n2.cacheKey, { name: "Concat", inputNames: Array.from({ length: o2 }, (t3, e3) => `X${e3}`), inputTypes: Array(o2).fill(i.TextureType.unpacked), cacheHint: a2 });
          var o2, a2;
          return Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, r3) => {
            const o3 = n3[0].dims.slice();
            if (r3 >= o3.length || r3 < -1 * o3.length) throw new Error("axis specified for concat doesn't match input dimensionality");
            r3 < 0 && (r3 = o3.length + r3);
            const a3 = o3.slice(0);
            for (let t4 = 1; t4 < n3.length; t4++) {
              const e4 = n3[t4].dims.slice();
              for (let t5 = 0; t5 < o3.length; t5++) if (t5 === r3) a3[r3] += e4[t5];
              else if (o3[t5] !== e4[t5]) throw new Error("non concat dimensions must match");
            }
            const p2 = a3.length, f = new Array(n3.length);
            let d = 0;
            for (let t4 = 0; t4 < f.length; ++t4) d += n3[t4].dims[r3], f[t4] = d;
            let h = "";
            h = n3.length < 5 ? s(f) : u(f);
            const g = `
        ${c(n3.length, p2)}
        ${l(f)}
        ${h}
        float process(int indices[${p2}]) {
          int textureIndex = getTextureWhereDataResides (indices[${r3}]);

          if(textureIndex != 0) {
            indices[${r3}] = indices[${r3}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));
          }

          return fetchDataFromCorrectTexture(textureIndex, indices);
        }`;
            return Object.assign(Object.assign({}, e3), { output: { dims: a3, type: n3[0].type, textureType: i.TextureType.unpacked }, shaderSource: g });
          })(0, r2, e2, n2.axis), "get") });
        }, "a"), s = /* @__PURE__ */ __name((t2) => `int getTextureWhereDataResides(int index) {
      ${t2.map((t3, e2) => `if(index<${t3}) {return ${e2};}
`).join("")}
    }`, "s"), u = /* @__PURE__ */ __name((t2) => s(t2), "u"), c = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${e2}]) {`];
          for (let e3 = 0; e3 < t2; ++e3) 0 === e3 ? n2.push(`	if (textureIndex == ${e3}) { return _X${e3}(indices); }`) : e3 === t2 - 1 ? n2.push(`	else { return _X${e3}(indices); }`) : n2.push(`	else if (textureIndex == ${e3}) { return _X${e3}(indices); }`);
          return n2.push("	}"), n2.join("\n");
        }, "c"), l = /* @__PURE__ */ __name((t2) => {
          const e2 = ["int getSizeInConcatAxisValueFromIndex(int index) {"];
          for (let n2 = 0; n2 < t2.length; ++n2) 0 === n2 ? e2.push(`	if (index == ${n2}) { return ${t2[n2]}; }`) : n2 === t2.length - 1 ? e2.push(`	else { return ${t2[n2]}; }`) : e2.push(`	else if (index == ${n2}) { return ${t2[n2]}; }`);
          return e2.push("	}"), e2.join("\n");
        }, "l");
        e.parseConcatAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ axis: t2.attributes.getInt("axis") });
        const p = /* @__PURE__ */ __name((t2) => {
          if (!t2 || t2.length < 1) throw new Error("too few inputs");
          const e2 = t2[0].type, n2 = t2[0].dims.length;
          if ("string" === e2) throw new Error("string tensor is not supported yet");
          for (const r2 of t2) {
            if (r2.type !== e2) throw new Error("input tensors should be one type");
            if (r2.dims.length !== n2) throw new Error("input tensors should have the same shape");
          }
        }, "p");
      }, 4770: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createUnpackedGroupedConvProgramInfoLoader = void 0;
        const r = n(6231), i = n(5060), o = n(2039), a = n(8138), s = n(2823);
        e.createUnpackedGroupedConvProgramInfoLoader = (t2, e2, n2) => {
          const u = (c = e2.length > 2, l = n2.cacheKey, { name: "GroupedConv", inputNames: c ? ["X", "W", "Bias"] : ["X", "W"], inputTypes: c ? [o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked] : [o.TextureType.unpacked, o.TextureType.unpacked], cacheHint: l });
          var c, l;
          return Object.assign(Object.assign({}, u), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, u2) => {
            const c2 = e3.length > 2 ? "value += getBias(output_channel);" : "", l2 = e3[0].dims.slice(), p = e3[1].dims.slice(), f = p[0] / u2.group;
            r.Logger.verbose("GroupedConv", `autpPad:${u2.autoPad}, dilations:${u2.dilations}, group:${u2.group}, kernelShape:${u2.kernelShape}, pads:${u2.pads}, strides:${u2.strides}`);
            const d = (0, a.calculateOutputShape)(l2, p, u2.dilations, u2.pads, u2.strides), h = (0, i.getGlsl)(t3.session.backend.glContext.version), { activationFunction: g, applyActivation: b } = (0, s.getActivationSnippet)(u2), m = `
  const ivec2 strides = ivec2(${u2.strides[0]}, ${u2.strides[1]});
  const ivec2 pads = ivec2(${u2.pads[0]}, ${u2.pads[1]});
  ${g}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;
    ivec2 xRCCorner = coords.zw * strides - pads;
    int group_id = output_channel / ${f};

    float value = 0.0;
    for (int wInChannel = 0; wInChannel < ${p[1]}; wInChannel++) {
      int input_channel = group_id * ${p[1]} + wInChannel;
      for (int wHeight = 0; wHeight < ${p[2]}; wHeight++) {
        int xHeight = xRCCorner.x + wHeight * ${u2.dilations[0]};

        if (xHeight < 0 || xHeight >= ${l2[2]}) {
          continue;
        }

        for (int wWidth = 0; wWidth < ${p[3]}; wWidth++) {
          int xWidth = xRCCorner.y + wWidth * ${u2.dilations[1]};
          if (xWidth < 0 || xWidth >= ${l2[3]}) {
            continue;
          }

          float xVal = getX(batch, input_channel, xWidth, xHeight);
          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);
          value += xVal*wVal;
        }
      }
    }
    ${c2}
    ${b}
    ${h.output} = vec4(value, .0, .0, .0);
  }
`;
            return Object.assign(Object.assign({}, n3), { output: { dims: d, type: e3[0].type, textureType: o.TextureType.unpacked }, shaderSource: m, hasMain: true });
          })(t2, e2, u, n2), "get") });
        };
      }, 1386: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.conv2DPacked = e.conv2DPackedPointwise = void 0;
        const r = n(8138), i = n(8555), o = n(708);
        e.conv2DPackedPointwise = (t2, e2, n2) => {
          const i2 = e2[0].dims, a = e2[1].dims, s = (0, r.calculateOutputShape)(i2, a, n2.dilations, n2.pads, n2.strides), u = t2.reshapePacked(e2[0], [i2[1], i2[2] * i2[3]]), c = t2.reshapePacked(e2[1], [a[0], a[1]]), l = e2.length > 2 ? [c, u, e2[2]] : [c, u], p = t2.run((0, o.createPackedMatmulProgramInfoLoader)(t2, l, n2), l);
          return t2.reshapePacked(p, s);
        }, e.conv2DPacked = (t2, e2, n2) => {
          const a = e2[0].dims, s = e2[1].dims, u = (0, r.calculateOutputShape)(a, s, n2.dilations, n2.pads, n2.strides), c = t2.run((0, i.createPackedIm2ColProgramInfoLoader)(t2, e2[0], e2[1], u, n2), [e2[0]]), l = t2.reshapePacked(e2[1], [s[0], s[1] * s[2] * s[3]]), p = 3 === e2.length ? [l, c, e2[2]] : [l, c], f = t2.run((0, o.createPackedMatmulProgramInfoLoader)(t2, p, n2), p);
          return t2.reshapePacked(f, u);
        };
      }, 9663: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseConvTransposeAttributes = e.convTranspose = void 0;
        const r = n(246), i = n(5060), o = n(2039), a = n(2823), s = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, o2) => (t2 - 1) * e2 + n2 + (r2 - 1) * i2 + 1 - o2, "s"), u = /* @__PURE__ */ __name((t2, e2, n2, r2, i2) => {
          const o2 = Math.floor(t2 / 2);
          "SAME_UPPER" === e2 ? (n2[r2] = o2, n2[i2] = t2 - o2) : "SAME_LOWER" === e2 && (n2[r2] = t2 - o2, n2[i2] = o2);
        }, "u");
        e.convTranspose = (t2, e2, n2) => (f(e2, n2), c(t2, e2, n2));
        const c = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = p(n2, e2);
          return [l(t2, e2, r2)];
        }, "c"), l = /* @__PURE__ */ __name((t2, e2, n2) => t2.run(((t3, e3, n3) => {
          const r2 = (s2 = e3.length > 2, u2 = n3.cacheKey, { name: "ConvTranspose", inputNames: s2 ? ["X", "W", "B"] : ["X", "W"], inputTypes: s2 ? [o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked] : [o.TextureType.unpacked, o.TextureType.unpacked], cacheHint: u2 });
          var s2, u2;
          return Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => ((t4, e4, n4, r3) => {
            const s3 = e4.length > 2 ? "getB(output_channel)" : "0.0", u3 = e4[0].dims, c2 = e4[1].dims, l2 = c2[1], p2 = c2[0] / r3.group, f2 = [e4[0].dims[0], e4[1].dims[1] * r3.group, ...r3.outputShape], d = (0, i.getGlsl)(t4.session.backend.glContext.version), { activationFunction: h, applyActivation: g } = (0, a.getActivationSnippet)(r3), b = `
  const ivec2 strides = ivec2(${r3.strides[0]}, ${r3.strides[1]});
  const ivec2 pads = ivec2(${r3.pads[0]}, ${r3.pads[1]});
  ${h}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;

    ivec2 loc = coords.zw + pads;

    int group_id = output_channel / ${l2};
    int wOutChannel = output_channel - group_id * ${l2};

    float value = ${s3};
    for (int inChannelOffset = 0; inChannelOffset < ${p2}; inChannelOffset++) {
      int input_channel = group_id * ${p2} + inChannelOffset;
      for (int wWOff = 0; wWOff < ${c2[2]}; wWOff++) {
        for (int wHOff = 0; wHOff < ${c2[3]}; wHOff++) {
          ivec2 wOff = ivec2(wWOff * ${r3.dilations[0]}, wHOff * ${r3.dilations[1]});
          ivec2 wLoc = loc - wOff;
          ivec2 wLocIn = wLoc / strides;
          if (
            wLocIn * strides == wLoc &&
            wLocIn.x >= 0 && wLocIn.x < ${u3[2]} &&
            wLocIn.y >= 0 && wLocIn.y < ${u3[3]}
          ) {
            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);
            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);
            value += xVal * wVal;
          }
        }
      }
    }
    ${g}
    ${d.output} = vec4(value, .0, .0, .0);
  }
`;
            return Object.assign(Object.assign({}, n4), { output: { dims: f2, type: e4[0].type, textureType: o.TextureType.unpacked }, shaderSource: b, hasMain: true });
          })(t3, e3, r2, n3), "get") });
        })(t2, e2, n2), e2), "l"), p = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = t2.kernelShape.slice();
          if (0 === t2.kernelShape.length) for (let t3 = 2; t3 < e2[1].dims.length; ++t3) n2.push(e2[1].dims[t3]);
          const r2 = t2.pads.slice(), i2 = t2.outputShape.slice();
          ((t3, e3, n3, r3, i3, o3, a2, c2) => {
            const l2 = t3.length - 2, p2 = 0 === c2.length;
            for (let f2 = 0; f2 < l2; ++f2) {
              const d = p2 ? t3[f2 + 2] * o3[f2] : c2[f2], h = s(t3[f2 + 2], o3[f2], i3[f2], e3[f2], n3[f2], d);
              u(h, r3, i3, f2, f2 + l2), p2 && c2.push(o3[f2] * (t3[f2 + 2] - 1) + a2[f2] + (e3[f2] - 1) * n3[f2] + 1 - i3[f2] - i3[f2 + l2]);
            }
          })(e2[0].dims, n2, t2.dilations, t2.autoPad, r2, t2.strides, t2.outputPadding, i2);
          const o2 = Object.assign({}, t2);
          return Object.assign(o2, { kernelShape: n2, pads: r2, outputShape: i2, cacheKey: t2.cacheKey }), o2;
        }, "p");
        e.parseConvTransposeAttributes = (t2) => {
          const e2 = t2.attributes, n2 = (0, a.parseInternalActivationAttributes)(e2), i2 = e2.getString("auto_pad", "NOTSET"), o2 = e2.getInts("dilations", [1, 1]), s2 = e2.getInt("group", 1), u2 = e2.getInts("kernel_shape", []), c2 = e2.getInts("output_padding", [0, 0]), l2 = e2.getInts("output_shape", []), p2 = e2.getInts("pads", [0, 0, 0, 0]), f2 = e2.getInts("strides", [1, 1]);
          return (0, r.createAttributeWithCacheKey)(Object.assign({ autoPad: i2, dilations: o2, group: s2, kernelShape: u2, outputPadding: c2, outputShape: l2, pads: p2, strides: f2 }, n2));
        };
        const f = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2 || 2 !== t2.length && 3 !== t2.length) throw new Error("Conv requires 2 or 3 inputs");
          if (4 !== t2[0].dims.length || 4 !== t2[1].dims.length) throw new Error("currently only support 2-dimensional conv");
          if (t2[0].dims[1] !== t2[1].dims[0]) throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          const n2 = t2[1].dims[1] * e2.group;
          if (3 === t2.length && (1 !== t2[2].dims.length || t2[2].dims[0] !== n2)) throw new Error("invalid bias");
          const r2 = t2[0].dims.length - 2;
          if (e2.dilations.length !== r2) throw new Error(`dilations should be ${r2}D`);
          if (e2.strides.length !== r2) throw new Error(`strides should be ${r2}D`);
          if (e2.pads.length !== 2 * r2) throw new Error(`pads should be ${2 * r2}D`);
          if (e2.outputPadding.length !== r2) throw new Error(`output_padding should be ${r2}D`);
          if (0 !== e2.kernelShape.length && e2.kernelShape.length !== t2[1].dims.length - 2) throw new Error("invalid kernel shape");
          if (0 !== e2.outputShape.length && e2.outputShape.length !== t2[0].dims.length - 2) throw new Error("invalid output shape");
          if ("float32" !== t2[0].type || "float32" !== t2[1].type) throw new Error("ConvTranspose input(X,W) should be float tensor");
          if (3 === t2.length && "float32" !== t2[2].type) throw new Error("ConvTranspose input(bias) should be float tensor");
        }, "f");
      }, 8138: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseConvAttributes = e.conv = e.calculateOutputShape = void 0;
        const r = n(246), i = n(2517), o = n(4770), a = n(1386), s = n(9828), u = n(2823), c = n(3248), l = n(5623);
        e.calculateOutputShape = (t2, e2, n2, r2, i2) => {
          const o2 = t2[0], a2 = t2.slice(2), s2 = a2.length, u2 = e2[0], c2 = e2.slice(2).map((t3, e3) => t3 + (t3 - 1) * (n2[e3] - 1)), l2 = a2.map((t3, e3) => t3 + r2[e3] + r2[e3 + s2]).map((t3, e3) => Math.floor((t3 - c2[e3] + i2[e3]) / i2[e3]));
          return [o2, u2].concat(...l2);
        }, e.conv = (t2, e2, n2) => (g(e2, n2), p(t2, e2, n2));
        const p = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = h(n2, e2), i2 = t2.session.pack, s2 = 1 === r2.kernelShape[0] && 1 === r2.kernelShape[1];
          return r2.group > 1 ? [t2.run((0, o.createUnpackedGroupedConvProgramInfoLoader)(t2, e2, r2), e2)] : s2 && i2 ? [f(t2, e2, r2)] : i2 && 4 === e2[0].dims.length && 1 === e2[0].dims[0] && !s2 ? [(0, a.conv2DPacked)(t2, e2, r2)] : [d(t2, e2, r2)];
        }, "p"), f = /* @__PURE__ */ __name((t2, n2, r2) => {
          const i2 = n2[0].dims, o2 = n2[1].dims, a2 = (0, e.calculateOutputShape)(i2, o2, r2.dilations, r2.pads, r2.strides), s2 = t2.reshapeUnpacked(n2[0], [i2[1], i2[2] * i2[3]]), u2 = t2.reshapeUnpacked(n2[1], [o2[0], o2[1]]), c2 = n2.length > 2 ? [u2, s2, n2[2]] : [u2, s2], p2 = t2.run((0, l.createMatmulProgramInfoLoader)(c2, r2), c2);
          return t2.reshapeUnpacked(p2, a2);
        }, "f"), d = /* @__PURE__ */ __name((t2, n2, r2) => {
          const i2 = n2[0].dims, o2 = n2[1].dims, a2 = (0, e.calculateOutputShape)(i2, o2, r2.dilations, r2.pads, r2.strides), u2 = t2.run((0, c.createIm2ColProgramInfoLoader)(t2, n2[0], n2[1], a2, r2), [n2[0]]), l2 = 3 === n2.length ? [u2, n2[1], n2[2]] : [u2, n2[1]];
          return t2.run((0, s.createDotProductProgramInfoLoader)(t2, n2, a2, r2), l2);
        }, "d"), h = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = t2.kernelShape.slice();
          if (0 === t2.kernelShape.length) for (let t3 = 2; t3 < e2[1].dims.length; ++t3) n2.push(e2[1].dims[t3]);
          const r2 = t2.pads.slice();
          i.PoolConvUtil.adjustPadsBasedOnAutoPad(e2[0].dims, t2.strides, t2.dilations, n2, r2, t2.autoPad);
          const o2 = Object.assign({}, t2);
          return Object.assign(o2, { kernelShape: n2, pads: r2, cacheKey: t2.cacheKey }), o2;
        }, "h");
        e.parseConvAttributes = (t2) => {
          const e2 = t2.attributes, n2 = (0, u.parseInternalActivationAttributes)(e2), i2 = e2.getString("auto_pad", "NOTSET"), o2 = e2.getInts("dilations", [1, 1]), a2 = e2.getInt("group", 1), s2 = e2.getInts("kernel_shape", []), c2 = e2.getInts("pads", [0, 0, 0, 0]), l2 = e2.getInts("strides", [1, 1]);
          return (0, r.createAttributeWithCacheKey)(Object.assign({ autoPad: i2, dilations: o2, group: a2, kernelShape: s2, pads: c2, strides: l2 }, n2));
        };
        const g = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2 || 2 !== t2.length && 3 !== t2.length) throw new Error("Conv requires 2 or 3 inputs");
          if (4 !== t2[0].dims.length || 4 !== t2[1].dims.length) throw new Error("currently only support 2-dimensional conv");
          if (t2[0].dims[1] !== t2[1].dims[1] * e2.group) throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          if (3 === t2.length && (1 !== t2[2].dims.length || t2[1].dims[0] !== t2[2].dims[0])) throw new Error("invalid bias");
          const n2 = t2[0].dims.length - 2;
          if (e2.dilations.length !== n2) throw new Error(`dilations should be ${n2}D`);
          if (e2.strides.length !== n2) throw new Error(`strides should be ${n2}D`);
          if (e2.pads.length !== 2 * n2) throw new Error(`pads should be ${2 * n2}D`);
          if (0 !== e2.kernelShape.length && e2.kernelShape.length !== t2[1].dims.length - 2) throw new Error("invalid kernel shape");
          if ("float32" !== t2[0].type || "float32" !== t2[1].type) throw new Error("Conv input(X,W) should be float tensor");
          if (3 === t2.length && "float32" !== t2[2].type) throw new Error("Conv input(bias) should be float tensor");
        }, "g");
      }, 5193: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseDepthToSpaceAttributes = e.depthToSpace = void 0;
        const r = n(3738);
        e.depthToSpace = (t2, e2, n2) => {
          i(e2);
          const o = n2.blocksize, a = o * o, s = "DCR" === n2.mode ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3], u = "DCR" === n2.mode ? [e2[0].dims[0], o, o, e2[0].dims[1] / a, e2[0].dims[2], e2[0].dims[3]] : [e2[0].dims[0], e2[0].dims[1] / a, o, o, e2[0].dims[2], e2[0].dims[3]], c = t2.reshapeUnpacked(e2[0], u), l = { perm: s, cacheKey: `${s}` }, [p] = (0, r.transpose)(t2, [c], l), f = [e2[0].dims[0], e2[0].dims[1] / a, e2[0].dims[2] * o, e2[0].dims[3] * o];
          return [t2.reshapeUnpacked(p, f)];
        }, e.parseDepthToSpaceAttributes = (t2) => {
          const e2 = t2.attributes.getInt("blocksize");
          if (e2 < 1) throw new Error(`blocksize must be >= 1, but got : ${e2} for DepthToSpace`);
          const n2 = t2.attributes.getString("mode", "DCR");
          if ("DCR" !== n2 && "CRD" !== n2) throw new Error(`unrecognized mode: ${n2} for DepthToSpace`);
          return { mode: n2, blocksize: e2 };
        };
        const i = /* @__PURE__ */ __name((t2) => {
          if (1 !== t2.length) throw new Error(`DepthToSpace expect 1 inputs, but got ${t2.length}`);
          if ("string" === t2[0].type || 4 !== t2[0].dims.length) throw new TypeError("DepthToSpace input should be a 4-D numeric tensor");
        }, "i");
      }, 9828: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createDotProductProgramInfoLoader = void 0;
        const r = n(2517), i = n(5060), o = n(2039), a = n(2823), s = n(3248);
        e.createDotProductProgramInfoLoader = (t2, e2, n2, u) => {
          const c = ((t3, e3) => ({ name: "ConvDotProduct", inputNames: t3 ? ["Im2Col", "K", "B"] : ["Im2Col", "K"], inputTypes: t3 ? [o.TextureType.unpacked, o.TextureType.packedLastDimension, o.TextureType.unpacked] : [o.TextureType.unpacked, o.TextureType.packedLastDimension], cacheKey: e3.activationCacheKey }))(e2.length > 2, u);
          return Object.assign(Object.assign({}, c), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, u2, c2) => {
            const l = n3[0].dims, p = n3[1].dims, f = [p[0], Math.ceil(l[1] * p[2] * p[3] / 4)], d = (0, s.calculateIm2ColDims)(l, p, u2), [h, g] = t3.calculateTextureWidthAndHeight(f, o.TextureType.packedLastDimension), b = r.ShapeUtil.computeStrides(d), [m, y] = t3.calculateTextureWidthAndHeight(d, o.TextureType.packedLastDimension), _ = u2.length, v = n3.length < 3 ? "0.0" : "_B(b)", w = Math.ceil(l[1] * p[2] * p[3] / 4), { activationFunction: x, applyActivation: T } = (0, a.getActivationSnippet)(c2), S = (0, i.getGlsl)(t3.session.backend.glContext.version), O = `
${x}
float process(int indices[${_}]) {
  int b[1];
  b[0] = indices[1];
  int im2col[4];
  im2col[0] = indices[0];
  im2col[1] = indices[2];
  im2col[2] = indices[3];
  int im2colOffset = im2col[0] * ${b[0]} + im2col[1] * ${b[1]} + im2col[2] * ${b[2]};
  int kernelOffset = indices[1] * ${f[1]};
  float value = ${v};
  for (int i = 0; i < ${w}; ++i) {
    vec2 im2colCoords = offsetToCoords(im2colOffset, ${m}, ${y});
    vec2 kernelCoords = offsetToCoords(kernelOffset, ${h}, ${g});
    value += dot(${S.texture2D}(Im2Col, im2colCoords), ${S.texture2D}(K, kernelCoords));
    ++im2colOffset;
    ++kernelOffset;
  }
  ${T}
  return value;
}`;
            return Object.assign(Object.assign({}, e3), { output: { dims: u2, type: n3[0].type, textureType: o.TextureType.unpacked }, shaderSource: O });
          })(t2, c, e2, n2, u), "get") });
        };
      }, 7992: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseFlattenAttributes = e.flatten = void 0;
        const r = n(2517);
        e.flatten = (t2, e2, n2) => {
          i(e2, n2);
          const o = r.ShapeUtil.flattenShape(e2[0].dims, n2);
          return [t2.reshapeUnpacked(e2[0], o)];
        }, e.parseFlattenAttributes = (t2) => t2.attributes.getInt("axis", 1);
        const i = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Flatten requires 1 input.");
          const n2 = t2[0].dims.length;
          if (0 === n2) throw new Error("scalar tensor is not supported.");
          if (e2 < -n2 || e2 > n2) throw new Error("Invalid axis");
          if ("string" === t2[0].type) throw new Error("string tensor is not supported.");
        }, "i");
      }, 2823: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseInternalActivationAttributes = e.getActivationSnippet = void 0;
        const r = n(2517), i = n(4909);
        e.getActivationSnippet = function(t2) {
          let e2;
          switch (t2.activation) {
            case "Relu":
              e2 = (0, i.glslRelu)();
              break;
            case "Sigmoid":
              e2 = (0, i.glslSigmoid)();
              break;
            case "Clip":
              e2 = (0, i.glslClip)(t2.clipMin, t2.clipMax);
              break;
            default:
              return { activationFunction: "", applyActivation: "" };
          }
          const n2 = e2.name;
          return { activationFunction: e2.body, applyActivation: `value = ${n2}_(value);` };
        }, e.parseInternalActivationAttributes = (t2) => {
          const e2 = t2.getString("activation", "");
          if ("Clip" === e2) {
            const [n2, i2] = t2.getFloats("activation_params", [r.MIN_CLIP, r.MAX_CLIP]);
            return { activation: e2, clipMax: i2, clipMin: n2, activationCacheKey: `${e2}:${n2},${i2}` };
          }
          return { activation: e2, activationCacheKey: e2 };
        };
      }, 1253: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseGatherAttributes = e.gather = void 0;
        const r = n(246), i = n(782), o = n(2517), a = n(2039);
        e.gather = (t2, e2, n2) => (c(e2, n2.axis), [t2.run(u(t2, e2, n2), e2)]), e.parseGatherAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ axis: t2.attributes.getInt("axis", 0) });
        const s = { name: "Gather", inputNames: ["A", "B"], inputTypes: [a.TextureType.unpacked, a.TextureType.unpacked] }, u = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = Object.assign(Object.assign({}, s), { cacheHint: n2.cacheKey });
          return Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, r3) => {
            const i2 = n3[0].dims.slice(), s2 = n3[1].dims.slice(), u2 = new Array(i2.length + s2.length - 1);
            r3 = o.ShapeUtil.normalizeAxis(r3, i2.length);
            const c2 = [];
            for (let t4 = 0; t4 < u2.length; t4++) t4 < r3 ? (u2[t4] = i2[t4], c2.push(`inputIdx[${t4}] = outputIdx[${t4}];`)) : t4 < r3 + s2.length ? (u2[t4] = s2[t4 - r3], c2.push(`indexDataIdx[${t4 - r3}] = outputIdx[${t4}];`)) : (u2[t4] = i2[t4 - s2.length + 1], c2.push(`inputIdx[${t4 - s2.length + 1}] = outputIdx[${t4}];`));
            const l = `
      float process(int outputIdx[${u2.length || 1}]) {
        int inputIdx[${i2.length}];
        int indexDataIdx[${s2.length || 1}];
        indexDataIdx[0] = 0;
        ${c2.join("\n        ")}
        int idx = int(_B(indexDataIdx));
        inputIdx[${r3}] = idx < 0 ? idx + ${i2[r3]} : idx;
        return _A(inputIdx);
      }`;
            return Object.assign(Object.assign({}, e3), { output: { dims: u2, type: n3[0].type, textureType: a.TextureType.unpacked }, shaderSource: l });
          })(0, r2, e2, n2.axis), "get") });
        }, "u"), c = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2 || 2 !== t2.length) throw new Error("Gather requires 2 inputs.");
          const n2 = t2[0].dims.length;
          if (n2 < 1) throw new Error("Invalid input shape.");
          if (e2 < -n2 || e2 > n2 - 1) throw new Error("Invalid axis.");
          if (-1 === i.NUMBER_TYPES.indexOf(t2[0].type)) throw new Error("Invaid input type.");
          if ("int32" !== t2[1].type && "int16" !== t2[1].type) throw new Error("Invaid input type.");
        }, "c");
      }, 4776: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseGemmAttributesV11 = e.parseGemmAttributesV7 = e.gemm = void 0;
        const r = n(246), i = n(2517), o = n(2039);
        e.gemm = (t2, e2, n2) => (c(e2, n2), [t2.run(s(e2, n2), e2)]);
        const a = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = 0 !== t2.attributes.getInt("transA", 0), i2 = 0 !== t2.attributes.getInt("transB", 0), o2 = t2.attributes.getFloat("alpha", 1), a2 = t2.attributes.getFloat("beta", 1);
          return (0, r.createAttributeWithCacheKey)({ transA: n2, transB: i2, alpha: o2, beta: a2, isOptionalC: e2 });
        }, "a");
        e.parseGemmAttributesV7 = (t2) => a(t2, false), e.parseGemmAttributesV11 = (t2) => a(t2, true);
        const s = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = { name: "Gemm", inputNames: 3 === t2.length ? ["A", "B", "C"] : ["A", "B"], inputTypes: 3 === t2.length ? [o.TextureType.unpacked, o.TextureType.unpacked, o.TextureType.unpacked] : [o.TextureType.unpacked, o.TextureType.unpacked], key: e2.cacheKey };
          return Object.assign(Object.assign({}, n2), { get: /* @__PURE__ */ __name(() => u(n2, t2, e2), "get") });
        }, "s"), u = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = e2[0].dims.slice(), a2 = e2[1].dims.slice(), [s2, u2] = i.GemmUtil.getShapeOfGemmResult(r2, n2.transA, a2, n2.transB, 3 === e2.length ? e2[2].dims : void 0), c2 = [s2, u2];
          if (!c2) throw new Error("Can't use gemm on the given tensors");
          let l = r2[r2.length - 1], p = "";
          n2.transA && (l = r2[0]), n2.transA && n2.transB ? p = "value += _A_T(a) * _B_T(b);" : n2.transA && !n2.transB ? p = "value += _A_T(a) * _B(b);" : !n2.transA && n2.transB ? p = "value += _A(a) * _B_T(b);" : n2.transA || n2.transB || (p = "value += _A(a) * _B(b);");
          const f = c2.length, d = `
      float process(int indices[${f}]) {
          int a[${f}];
          int b[${f}];
          ${3 === e2.length ? `int c[${e2[2].dims.length}];` : ""}

          copyVec(indices, a);
          copyVec(indices, b);
          ${3 === e2.length ? "bcastIndices_C(indices, c);" : ""}

          float value = 0.0;
          for (int k=0; k<${l}; ++k) {
              a[${f - 1}] = k;
              b[${f - 2}] = k;
              ${p}
          }

          value = value * alpha;
          ${3 === e2.length ? "value += beta * _C(c);" : ""}
          return value;
      }`;
          return Object.assign(Object.assign({}, t2), { output: { dims: c2, type: e2[0].type, textureType: o.TextureType.unpacked }, variables: [{ name: "alpha", type: "float", data: n2.alpha }, { name: "beta", type: "float", data: n2.beta }], shaderSource: d });
        }, "u"), c = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2) throw new Error("Input is missing");
          if (e2.isOptionalC && (t2.length < 2 || t2.length > 3)) throw new Error("Invaid input shape.");
          if (!e2.isOptionalC && 3 !== t2.length) throw new Error("Gemm requires 3 inputs");
          if (3 === t2.length && 1 !== t2[2].dims.length && 2 !== t2[2].dims.length) throw new Error("Invalid input shape of C");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type || "float32" !== t2[1].type && "float64" !== t2[1].type || 3 === t2.length && "float32" !== t2[2].type && "float64" !== t2[2].type) throw new Error("Invalid input type.");
          if (t2[0].type !== t2[1].type || 3 === t2.length && t2[0].type !== t2[2].type) throw new Error("Input types are mismatched");
        }, "c");
      }, 8555: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createPackedIm2ColProgramInfoLoader = void 0;
        const r = n(5060), i = n(2039), o = n(2827);
        e.createPackedIm2ColProgramInfoLoader = (t2, e2, n2, a, s) => {
          const u = (c = s.cacheKey, { name: "Im2Col (packed)", inputNames: ["A"], inputTypes: [i.TextureType.packed], cacheHint: c });
          var c;
          return Object.assign(Object.assign({}, u), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, a2, s2, u2) => {
            const c2 = n3.dims, l = a2.dims, p = s2.length, f = [l[1] * l[2] * l[3], s2[2] * s2[3]], d = l[2] * l[3], h = (0, o.unpackFromChannel)(), g = (0, r.getGlsl)(t3.session.backend.glContext.version);
            let b = "";
            for (let t4 = 0; t4 <= 1; t4++) for (let e4 = 0; e4 <= 1; e4++) b += `
            blockIndex = rc.x + ${e4};
            pos = rc.y + ${t4};

            if(blockIndex < ${f[1]} && pos < ${f[0]}) {
              offsetY = int(blockIndex / (${s2[p - 1]})) * ${u2.strides[0]} -
                ${u2.pads[0]};
              d0 = offsetY + ${u2.dilations[0]} * (imod(pos, ${d}) / ${l[2]});

              if(d0 < ${c2[2]} && d0 >= 0) {
                offsetX = imod(blockIndex, ${s2[p - 1]}) * ${u2.strides[1]} -
                  ${u2.pads[1]};
                d1 = offsetX + ${u2.dilations[1]} * imod(imod(pos, ${d}), ${l[2]});

                if(d1 < ${c2[3]} && d1 >= 0) {

                  ch = int(float(pos)/ ${d}.);
                    innerDims = vec2(d0, d1);
                    result[${2 * t4 + e4}] = getChannel(
                      getA(0, ch, int(innerDims.x),
                      int(innerDims.y)), innerDims);
                }
              }
            }

          `;
            const m = `
      ${h}

      void main() {
        ivec2 rc = getOutputCoords();
          vec4 result = vec4(0.0);
          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
          vec2 innerDims;
          ${b}
          ${g.output} = result;
      }
            `;
            return Object.assign(Object.assign({}, e3), { output: { dims: f, type: n3.type, textureType: i.TextureType.packed }, shaderSource: m, hasMain: true });
          })(t2, u, e2, n2, a, s), "get") });
        };
      }, 3248: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.calculateIm2ColDims = e.createIm2ColProgramInfoLoader = void 0;
        const r = n(2039);
        e.createIm2ColProgramInfoLoader = (t2, n2, i, o, a) => {
          const s = (u = a.cacheKey, { name: "Im2Col", inputNames: ["X"], inputTypes: [r.TextureType.unpacked], cacheHint: u });
          var u;
          return Object.assign(Object.assign({}, s), { get: /* @__PURE__ */ __name(() => ((t3, n3, i2, o2, a2, s2) => {
            const u2 = i2.dims, c = o2.dims, l = a2.length, p = (0, e.calculateIm2ColDims)(u2, c, a2, 4), f = `
        const int XC = ${u2[1]};
        const int XH = ${u2[2]};
        const int XW = ${u2[3]};
        const int KH = ${s2.kernelShape[0]};
        const int KW = ${s2.kernelShape[1]};
        const int dilationH = ${s2.dilations[0]};
        const int dilationW = ${s2.dilations[1]};
        const int strideH = ${s2.strides[0]};
        const int strideW = ${s2.strides[1]};
        const int padH = ${s2.pads[0]};
        const int padW = ${s2.pads[1]};
        const int KHKW = KH*KW;
        const int XCKHKW = XC * KHKW;
        const int outputChannels = 4;
        vec4 process(int indices[${l}]) {
          int b  = indices[0]; // batch size
          int oh = indices[1] * strideH - padH; //output height
          int ow = indices[2] * strideW - padW; //output width
          int p = indices[3] * outputChannels; //patch
          vec4 value = vec4(0.0);
          for(int i=0; i < outputChannels; ++i) {
            if(p < XCKHKW) {
              int patchC = p / KHKW;
              int patchH = (p - patchC*KHKW) / KW;
              int patchW = (p - patchC*KHKW) - patchH * KW;
              int xh2 = oh + patchH * dilationH;
              int xw2 = ow + patchW * dilationW;
              int x[${u2.length}];
              x[0] = b;
              x[1] = patchC;
              x[2] = xh2;
              x[3] = xw2;
              if(xh2 >= 0 &&
                  xh2 < XH &&
                  xw2 >= 0 &&
                  xw2 < XW) {
                value[i] = _X(x);
              }
            }
            ++p;
          }
          return value;
        }
        `;
            return Object.assign(Object.assign({}, n3), { output: { dims: p, type: i2.type, textureType: r.TextureType.packedLastDimension }, shaderSource: f });
          })(0, s, n2, i, o, a), "get") });
        }, e.calculateIm2ColDims = (t2, e2, n2, r2 = 4) => [n2[0], n2[2], n2[3], Math.ceil(t2[1] * e2[2] * e2[3] / r2)];
      }, 6572: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseImageScalerAttributes = e.imageScaler = void 0;
        const r = n(246), i = n(2039);
        e.imageScaler = (t2, e2, n2) => (u(e2), [t2.run(a(t2, e2, n2), e2)]), e.parseImageScalerAttributes = (t2) => {
          const e2 = t2.attributes.getFloat("scale"), n2 = t2.attributes.getFloats("bias");
          return (0, r.createAttributeWithCacheKey)({ scale: e2, bias: n2 });
        };
        const o = { name: "ImageScaler", inputNames: ["X"], inputTypes: [i.TextureType.unpacked] }, a = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = Object.assign(Object.assign({}, o), { cacheHint: n2.cacheKey });
          return Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, r3) => {
            const o2 = n3[0].dims.slice(), a2 = o2.length, u2 = `
      ${s(r3.bias.length)}
      float process(int indices[${a2}]) {
        return _X(indices) * scale + getBias(bias, indices[1]);
      }`;
            return Object.assign(Object.assign({}, e3), { output: { dims: o2, type: n3[0].type, textureType: i.TextureType.unpacked }, variables: [{ name: "bias", type: "float", arrayLength: r3.bias.length, data: r3.bias }, { name: "scale", type: "float", data: r3.scale }], shaderSource: u2 });
          })(0, r2, e2, n2), "get") });
        }, "a"), s = /* @__PURE__ */ __name((t2) => {
          const e2 = [`float getBias(float bias[${t2}], int channel) {`];
          for (let n2 = 0; n2 < t2; ++n2) 0 === n2 ? e2.push(`	if (channel == ${n2}) { return bias[${n2}]; }`) : n2 === t2 - 1 ? e2.push(`	else { return bias[${n2}]; }`) : e2.push(`	else if (channel == ${n2}) { return bias[${n2}]; }`);
          return e2.push("	}"), e2.join("\n");
        }, "s"), u = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("ImageScaler requires 1 input.");
          if (4 !== t2[0].dims.length) throw new Error("Invalid input shape.");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("Invalid input type.");
        }, "u");
      }, 3346: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseInstanceNormalizationAttributes = e.instanceNormalization = void 0;
        const r = n(5060), i = n(2039);
        e.instanceNormalization = (t2, e2, n2) => {
          c(e2);
          const r2 = t2.run(a(e2[0]), e2);
          return [t2.run(u(t2, e2[0], n2, r2.dims), [e2[0], r2, e2[1], e2[2]])];
        }, e.parseInstanceNormalizationAttributes = (t2) => t2.attributes.getFloat("epsilon", 1e-5);
        const o = { name: "InstanceNormalization_MeanAndVariance", inputNames: ["X"], inputTypes: [i.TextureType.unpacked] }, a = /* @__PURE__ */ __name((t2) => Object.assign(Object.assign({}, o), { get: /* @__PURE__ */ __name(() => ((t3, e2) => {
          const n2 = e2.dims.slice(), r2 = n2[1], o2 = n2[2] * n2[3], a2 = [n2[0], r2], s2 = `
      vec4 process(int[2] indices) {
        vec4 v = vec4(0.0);
        int a[4];
        a[0] = indices[0];
        a[1] = indices[1];
        float temp = 0.0;
        for(int a2=0; a2<${n2[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${n2[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += x;
          }
        }
        float mean = temp / float(${o2});
        temp = 0.0;
        for(int a2=0; a2<${n2[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${n2[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += (x - mean) * (x - mean);
          }
        }
        v.r = mean;
        v.g = temp / float(${o2});

        return v;
      }`;
          return Object.assign(Object.assign({}, t3), { output: { dims: a2, type: e2.type, textureType: i.TextureType.packedLastDimension }, shaderSource: s2 });
        })(o, t2), "get") }), "a"), s = { name: "InstanceNormalization_ComputeOutput", inputNames: ["X", "MeanAndVariance", "Scale", "B"], inputTypes: [i.TextureType.unpacked, i.TextureType.packedLastDimension, i.TextureType.unpacked, i.TextureType.unpacked] }, u = /* @__PURE__ */ __name((t2, e2, n2, o2) => {
          const a2 = Object.assign(Object.assign({}, s), { cacheHint: `${n2}` });
          return Object.assign(Object.assign({}, a2), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, o3, a3) => {
            const s2 = (0, r.getGlsl)(t3.session.backend.glContext.version), [u2, c2] = t3.calculateTextureWidthAndHeight(a3, i.TextureType.packedLastDimension), [l, p] = [u2 / 4, c2], f = `
      vec4 get_MeanAndVariance(int[2] mv) {
        int offset = indicesToOffset_MeanAndVariance(mv);
        vec2 coords = offsetToCoords(offset, ${l}, ${p});
        return ${s2.texture2D}(MeanAndVariance, coords);
      }

      float process(int[4] indices) {
        int mv[2];
        mv[0] = indices[0];
        mv[1] = indices[1];
        vec4 mean_and_variance = get_MeanAndVariance(mv);
        float mean = mean_and_variance.r;
        float variance = mean_and_variance.g;

        int sb[1];
        sb[0] = indices[1];
        float scale = _Scale(sb);
        float b = _B(sb);

        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;
      }`;
            return Object.assign(Object.assign({}, e3), { output: { dims: n3.dims, type: n3.type, textureType: i.TextureType.unpacked }, variables: [{ name: "epsilon", type: "float", data: o3 }], shaderSource: f });
          })(t2, a2, e2, n2, o2), "get") });
        }, "u"), c = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 3 !== t2.length) throw new Error("InstanceNormalization requires 3 inputs.");
          const e2 = t2[0], n2 = t2[1], r2 = t2[2];
          if (e2.dims.length < 3 || 1 !== n2.dims.length || 1 !== r2.dims.length) throw new Error("Invalid input shape.");
          if (n2.dims[0] !== e2.dims[1] || r2.dims[0] !== e2.dims[1]) throw new Error("Input shapes are mismatched.");
          if ("float32" !== e2.type && "float64" !== e2.type || "float32" !== n2.type && "float64" !== n2.type || "float32" !== r2.type && "float64" !== r2.type) throw new Error("Invalid input type.");
          if (4 !== t2[0].dims.length) throw new Error("Only support 4-D input shape.");
        }, "c");
      }, 708: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createPackedMatmulProgramInfoLoader = void 0;
        const r = n(2517), i = n(5060), o = n(2039), a = n(9390), s = n(2823), u = n(5623);
        e.createPackedMatmulProgramInfoLoader = (t2, e2, n2) => {
          const c = (l = e2.length > 2, p = n2.activationCacheKey, { name: "MatMul (packed)", inputNames: l ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: l ? [o.TextureType.packed, o.TextureType.packed, o.TextureType.packed] : [o.TextureType.packed, o.TextureType.packed], cacheHint: p });
          var l, p;
          return Object.assign(Object.assign({}, c), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, c2) => {
            const l2 = n3.length > 2, p2 = l2 ? "value += getBiasForMatmul();" : "", f = n3[0].dims, d = n3[1].dims, h = r.BroadcastUtil.calcShape(f, d, true), g = !r.ShapeUtil.areEqual(n3[0].dims, n3[1].dims);
            if (!h) throw new Error("Can't use matmul on the given tensors");
            const b = f[f.length - 1], m = Math.ceil(b / 2), y = f.length, _ = d.length, v = (0, i.getGlsl)(t3.session.backend.glContext.version), w = (0, a.getCoordsDataType)(h.length), x = h.length, T = (0, a.getGlChannels)(), { activationFunction: S, applyActivation: O } = (0, s.getActivationSnippet)(c2), A = l2 ? `${(0, u.getBiasForMatmul)(w, T, n3[2].dims, h, true)}` : "", E = g ? `${function(t4, e4, n4, i2) {
              let o2 = [], a2 = [];
              const s2 = n4[0].dims, u2 = n4[1].dims, c3 = s2.length, l3 = u2.length, p3 = i2.length, f2 = p3 - c3, d2 = p3 - l3;
              o2 = s2.map((t5, n5) => `coords.${e4[n5 + f2]}`), o2[c3 - 1] = "i*2", o2.join(", "), a2 = u2.map((t5, n5) => `coords.${e4[n5 + d2]}`), a2[l3 - 2] = "i*2", a2.join(", ");
              const h2 = r.BroadcastUtil.getBroadcastDims(s2, i2), g2 = r.BroadcastUtil.getBroadcastDims(u2, i2), b2 = h2.map((t5) => `coords.${e4[t5 + f2]} = 0;`).join("\n"), m2 = g2.map((t5) => `coords.${e4[t5 + d2]} = 0;`).join("\n"), y2 = `int lastDim = coords.${e4[p3 - 1]};
  coords.${e4[p3 - 1]} = coords.${e4[p3 - 2]};
  coords.${e4[p3 - 2]} = lastDim;`;
              return `
vec4 getAAtOutCoordsMatmul(int i) {
  ${t4} coords = getOutputCoords();
  ${y2}
  ${b2}
  vec4 outputValue = getA(${o2});
  return outputValue;
}

vec4 getBAtOutCoordsMatmul(int i) {
  ${t4} coords = getOutputCoords();
  ${y2}
  ${m2}
  vec4 outputValue = getB(${a2});
  return outputValue;
}`;
            }(w, T, n3, h)}` : "", I = g ? "getAAtOutCoordsMatmul(i)" : `getA(${function(t4, e4) {
              let n4 = "";
              for (let r2 = 0; r2 < e4 - 2; r2++) n4 += `rc.${t4[r2]}, `;
              return n4 += `rc.${t4[e4 - 2]}, i*2`, n4;
            }(T, y)})`, P = g ? "getBAtOutCoordsMatmul(i)" : `getB(${function(t4, e4) {
              let n4 = "";
              for (let r2 = 0; r2 < e4 - 2; r2++) n4 += `rc.${t4[r2]}, `;
              return n4 += `i*2, rc.${t4[e4 - 1]}`, n4;
            }(T, _)})`, D = `
            ${E}
            ${A}
            ${S}
            void main() {
              ${g ? "" : `${w} rc =
          getOutputCoords(); int lastDim = rc.${T[x - 1]}; rc.${T[x - 1]} =
          rc.${T[x - 2]}; rc.${T[x - 2]} = lastDim;
      `}

              vec4 value = vec4(0);
              for (int i = 0; i < ${m}; i++) {
                vec4 a = ${I};
                vec4 b = ${P};

                value += (a.rrbb * b.rgrg);
                value += (a.ggaa * b.baba);
              }
              ${p2}
              ${O}
              ${v.output} = value;
            }`;
            return Object.assign(Object.assign({}, e3), { output: { dims: h, type: n3[0].type, textureType: o.TextureType.packed }, shaderSource: D, hasMain: true });
          })(t2, c, e2, n2), "get") });
        };
      }, 5623: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.getBiasForMatmul = e.createMatmulProgramInfoLoader = e.parseMatMulAttributes = e.matMul = void 0;
        const r = n(2517), i = n(2039), o = n(9390), a = n(2823), s = n(708);
        function u(t2, e2) {
          const n2 = (s2 = t2.length > 2, u2 = e2.activationCacheKey, { name: "MatMul", inputNames: s2 ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: s2 ? [i.TextureType.unpacked, i.TextureType.unpacked, i.TextureType.unpacked] : [i.TextureType.unpacked, i.TextureType.unpacked], cacheHint: u2 });
          var s2, u2;
          return Object.assign(Object.assign({}, n2), { get: /* @__PURE__ */ __name(() => function(t3, e3, n3) {
            const s3 = e3[0].dims, u3 = e3[1].dims, c2 = r.BroadcastUtil.calcShape(s3, u3, true);
            if (!c2) throw new Error("Can't use matmul on the given tensors");
            const p = (0, o.getCoordsDataType)(c2.length), f = (0, o.getGlChannels)(), { activationFunction: d, applyActivation: h } = (0, a.getActivationSnippet)(n3), g = e3.length > 2, b = g ? "value += getBiasForMatmul();" : "", m = g ? `${l(p, f, e3[2].dims, c2, false)}` : "", y = c2.length, _ = s3.length, v = u3.length, w = `
    ${d}
    ${m}
    float process(int indices[${y}]) {
        int a[${_}];
        int b[${v}];
        bcastMatmulIndices_A(indices, a);
        bcastMatmulIndices_B(indices, b);

        float value;
        for (int k=0; k<${s3[s3.length - 1]}; ++k) {
            a[${_ - 1}] = k;
            b[${v - 2}] = k;
            value += _A(a) * _B(b);
        }
        ${b}
        ${h}
        return value;
    }`;
            return Object.assign(Object.assign({}, t3), { output: { dims: c2, type: e3[0].type, textureType: i.TextureType.unpacked }, shaderSource: w });
          }(n2, t2, e2), "get") });
        }
        __name(u, "u");
        e.matMul = (t2, e2, n2) => (c(e2), t2.session.pack ? [t2.run((0, s.createPackedMatmulProgramInfoLoader)(t2, e2, n2), e2)] : [t2.run(u(e2, n2), e2)]), e.parseMatMulAttributes = (t2) => (0, a.parseInternalActivationAttributes)(t2.attributes), e.createMatmulProgramInfoLoader = u;
        const c = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 2 !== t2.length) throw new Error("MatMul requires 2 inputs.");
          if (t2[0].dims[t2[0].dims.length - 1] !== t2[1].dims[t2[1].dims.length - 2]) throw new Error("shared dimension does not match.");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type || "float32" !== t2[1].type && "float64" !== t2[1].type) throw new Error("inputs should be float type");
          if (t2[0].type !== t2[1].type) throw new Error("inputs types should match");
        }, "c");
        function l(t2, e2, n2, i2, o2) {
          let a2 = "";
          const s2 = n2.length, u2 = i2.length, c2 = u2 - s2;
          a2 = u2 < 2 && s2 > 0 ? "coords" : n2.map((t3, n3) => `coords.${e2[n3 + c2]}`).join(", ");
          const l2 = r.BroadcastUtil.getBroadcastDims(n2, i2).map((t3) => `coords.${e2[t3 + c2]} = 0;`).join("\n");
          let p = "vec4(outputValue.xx, outputValue.yy)";
          return 1 === r.ShapeUtil.size(n2) && (p = "vec4(outputValue.x)"), o2 ? `
vec4 getBiasForMatmul() {
  ${t2} coords = getOutputCoords();
  ${l2}
  vec4 outputValue = getBias(${a2});
  return ${p};
}` : `
float getBiasForMatmul() {
  ${t2} coords = getOutputCoords();
  ${l2}
  return getBias(coords.x);
}`;
        }
        __name(l, "l");
        e.getBiasForMatmul = l;
      }, 2403: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createPackProgramInfoLoader = void 0;
        const r = n(5060), i = n(2039), o = n(9390), a = n(2827), s = { name: "pack", inputNames: ["A"], inputTypes: [i.TextureType.unpackedReversed] };
        e.createPackProgramInfoLoader = (t2, e2) => Object.assign(Object.assign({}, s), { get: /* @__PURE__ */ __name(() => ((t3, e3) => {
          const n2 = (0, r.getGlsl)(t3.session.backend.glContext.version), u = e3.dims, c = u.length, l = e3.dims.length, p = (0, o.getCoordsDataType)(l), f = (0, a.getChannels)("rc", l), d = (h = l, g = f, b = u[u.length - 2], m = u[u.length - 1], 0 === h || 1 === h ? "" : `
    int r = ${g[h - 2]};
    int c = ${g[h - 1]};
    int rp1 = ${g[h - 2]} + 1;
    int cp1 = ${g[h - 1]} + 1;
    bool rEdge = rp1 >= ${m};
    bool cEdge = cp1 >= ${b};
    `);
          var h, g, b, m;
          let y;
          y = 0 === c ? [1, 1] : 1 === c ? [u[0], 1] : [u[l - 1], u[l - 2]];
          const _ = function(t4, e4, n3) {
            if (0 === t4) return "false";
            if (1 === t4) return `rc > ${e4[0]}`;
            let r2 = "";
            for (let i2 = t4 - 2; i2 < t4; i2++) r2 += `${n3[i2]} >= ${e4[i2 - t4 + 2]}`, i2 < t4 - 1 && (r2 += "||");
            return r2;
          }(l, y, f), v = function(t4, e4) {
            const n3 = t4.length;
            if (0 === n3) return "getA(), 0, 0, 0";
            if (1 === n3) return `getA(rc),
            rc + 1 >= ${t4[0]} ? 0. : getA(rc + 1),
            0, 0`;
            let r2 = "";
            if (n3 > 2) for (let t5 = 0; t5 < n3 - 2; ++t5) r2 += `${e4[t5]},`;
            return `getA(${r2}r, c),
          rEdge ? 0. : getA(${r2}rp1, c),
          cEdge ? 0. : getA(${r2}r, cp1),
          rEdge || cEdge ? 0. : getA(${r2}rp1, cp1)`;
          }(u, f), w = `
        void main() {
          ${p} rc = getOutputCoords();

          if(${_}) {
            ${n2.output} = vec4(0);
          } else {
            ${d}

            ${n2.output} = vec4(${v});
          }
        }
      `;
          return Object.assign(Object.assign({}, s), { hasMain: true, output: { dims: e3.dims, type: e3.type, textureType: i.TextureType.packed }, shaderSource: w });
        })(t2, e2), "get") });
      }, 2827: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.unpackFromChannel = e.getChannels = e.getVecChannels = void 0;
        const r = n(9390);
        function i(t2, e2) {
          return (0, r.getGlChannels)(e2).map((e3) => `${t2}.${e3}`);
        }
        __name(i, "i");
        e.getVecChannels = i, e.getChannels = function(t2, e2) {
          return 1 === e2 ? [t2] : i(t2, e2);
        }, e.unpackFromChannel = function() {
          return "\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  ";
        };
      }, 2870: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parsePadAttributesV11 = e.padV11 = e.parsePadAttributesV2 = e.padV2 = void 0;
        const r = n(246), i = n(2517), o = n(5060), a = n(2039), s = { name: "Pad", inputNames: ["A"], inputTypes: [a.TextureType.unpacked] };
        e.padV2 = (t2, e2, n2) => (l(e2), [t2.run(Object.assign(Object.assign({}, s), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => c(t2, e2[0], n2), "get") }), e2)]), e.parsePadAttributesV2 = (t2) => {
          const e2 = t2.attributes.getString("mode", "constant"), n2 = t2.attributes.getFloat("value", 0), i2 = t2.attributes.getInts("pads");
          return (0, r.createAttributeWithCacheKey)({ mode: e2, value: n2, pads: i2 });
        }, e.padV11 = (t2, n2, r2) => {
          p(n2);
          const i2 = u(t2, n2, r2);
          return (0, e.padV2)(t2, [n2[0]], i2);
        }, e.parsePadAttributesV11 = (t2) => t2.attributes.getString("mode", "constant");
        const u = /* @__PURE__ */ __name((t2, e2, n2) => {
          if (!t2.session.isInitializer(e2[1].dataId) || e2.length >= 3 && !t2.session.isInitializer(e2[2].dataId)) throw new Error("dynamic pad attributes are not allowed");
          const i2 = Array.from(e2[1].integerData), o2 = e2.length >= 3 ? e2[2].floatData[0] : 0;
          return (0, r.createAttributeWithCacheKey)({ mode: n2, pads: i2, value: o2 });
        }, "u"), c = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = i.ShapeUtil.padShape(e2.dims.slice(), n2.pads), o2 = r2.length, s2 = `
      ${f(t2, e2, n2)}
      float process(int[${o2}] indices) {
          return padA(indices);
      }`;
          return { name: "Pad", inputNames: ["A"], inputTypes: [a.TextureType.unpacked], output: { dims: r2, type: e2.type, textureType: a.TextureType.unpacked }, shaderSource: s2 };
        }, "c"), l = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Pad requires 1 input");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("Invalid input type.");
        }, "l"), p = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 2 !== t2.length && 3 !== t2.length) throw new Error("Pad requires 2 or 3 inputs");
          if ("int32" !== t2[1].type) throw new Error("Invalid input type.");
          if (t2.length >= 3 && "string" === t2[2].type) throw new Error("Invalid input type.");
        }, "p"), f = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = (0, o.getGlsl)(t2.session.backend.glContext.version), [s2, u2] = t2.calculateTextureWidthAndHeight(e2.dims, a.TextureType.unpacked), c2 = i.ShapeUtil.computeStrides(e2.dims);
          switch (n2.mode) {
            case "constant":
              return d(r2, e2.dims, c2, s2, u2, n2.pads, n2.value);
            case "reflect":
              return h(r2, e2.dims, c2, s2, u2, n2.pads);
            case "edge":
              return g(r2, e2.dims, c2, s2, u2, n2.pads);
            default:
              throw new Error("Invalid mode");
          }
        }, "f"), d = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, o2, a2) => {
          const s2 = e2.length;
          let u2 = "";
          for (let t3 = s2 - 1; t3 >= 0; --t3) u2 += `
        k = m[${t3}] - ${o2[t3]};
        if (k < 0)  return constant;
        if (k >= ${e2[t3]}) return constant;
        offset += k * ${n2[t3]};
        `;
          return `
      float padA(int m[${s2}]) {
        const float constant = float(${a2});
        int offset = 0;
        int k = 0;
        ${u2}
        vec2 coords = offsetToCoords(offset, ${r2}, ${i2});
        float value = getColorAsFloat(${t2.texture2D}(A, coords));
        return value;
      }
      `;
        }, "d"), h = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, o2) => {
          const a2 = e2.length;
          let s2 = "";
          for (let t3 = a2 - 1; t3 >= 0; --t3) s2 += `
        k = m[${t3}] - ${o2[t3]};
        if (k < 0) { k = -k; }
        {
          const int _2n_1 = ${2 * (e2[t3] - 1)};
          k = int( mod( float(k), float(_2n_1) ) ) ;
          if(k >= ${e2[t3]}) { k = _2n_1 - k; }
        }
        offset += k * ${n2[t3]};
        `;
          return `
      float padA(int m[${a2}]) {
        int offset = 0;
        int k = 0;
        ${s2}
        vec2 coords = offsetToCoords(offset, ${r2}, ${i2});
        float value = getColorAsFloat(${t2.texture2D}(A, coords));
        return value;
      }
      `;
        }, "h"), g = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, o2) => {
          const a2 = e2.length;
          let s2 = "";
          for (let t3 = a2 - 1; t3 >= 0; --t3) s2 += `
        k = m[${t3}] - ${o2[t3]};
        if (k < 0)  k = 0;
        if (k >= ${e2[t3]}) k = ${e2[t3] - 1};
        offset += k * ${n2[t3]};
      `;
          return `
      float padA(int m[${a2}]) {
        int offset = 0;
        int k = 0;
        ${s2}
        vec2 coords = offsetToCoords(offset, ${r2}, ${i2});
        float value = getColorAsFloat(${t2.texture2D}(A, coords));
        return value;
      }
      `;
        }, "g");
      }, 2143: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.globalMaxPool = e.parseMaxPoolAttributes = e.maxPool = e.parseGlobalAveragePoolAttributes = e.globalAveragePool = e.parseAveragePoolAttributes = e.averagePool = void 0;
        const r = n(246), i = n(2517), o = n(2039);
        e.averagePool = (t2, e2, n2) => {
          p(e2);
          const r2 = { name: "AveragePool", inputNames: ["X"], inputTypes: [o.TextureType.unpacked], cacheHint: n2.cacheKey };
          return [t2.run(Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => a(e2, r2, false, n2), "get") }), e2)];
        }, e.parseAveragePoolAttributes = (t2) => {
          const e2 = t2.attributes.getString("auto_pad", "NOTSET"), n2 = t2.attributes.getInt("ceil_mode", 0), i2 = 0 !== t2.attributes.getInt("count_include_pad", 0), o2 = t2.attributes.getInts("kernel_shape"), a2 = t2.attributes.getInts("strides", []), s2 = t2.attributes.getInts("pads", []);
          if (0 !== n2) throw new Error("using ceil() in shape computation is not yet supported for AveragePool");
          return (0, r.createAttributeWithCacheKey)({ autoPad: e2, ceilMode: n2, countIncludePad: i2, kernelShape: o2, strides: a2, pads: s2 });
        };
        const a = /* @__PURE__ */ __name((t2, e2, n2, r2) => {
          const [a2, s2] = u(t2, r2, n2), c2 = i.ShapeUtil.size(a2.kernelShape);
          let l2 = "";
          a2.countIncludePad ? l2 += `value /= float(${c2});` : l2 += `value /= float(${c2} - pad);`;
          const p2 = `
        ${f(t2[0].dims, a2, "value += _X(x);", l2, "0.0")}
      `;
          return Object.assign(Object.assign({}, e2), { output: { dims: s2, type: t2[0].type, textureType: o.TextureType.unpacked }, shaderSource: p2 });
        }, "a");
        e.globalAveragePool = (t2, e2, n2) => {
          p(e2);
          const r2 = { name: "GlobalAveragePool", inputNames: ["X"], inputTypes: [o.TextureType.unpacked], cacheHint: `${n2.countIncludePad}` };
          return [t2.run(Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => a(e2, r2, true, n2), "get") }), e2)];
        }, e.parseGlobalAveragePoolAttributes = (t2) => {
          const e2 = 0 !== t2.attributes.getInt("count_include_pad", 0);
          return (0, r.createAttributeWithCacheKey)({ autoPad: "", ceilMode: 0, countIncludePad: e2, kernelShape: [], strides: [], pads: [] });
        }, e.maxPool = (t2, e2, n2) => {
          p(e2);
          const r2 = { name: "MaxPool", inputNames: ["X"], inputTypes: [o.TextureType.unpacked], cacheHint: n2.cacheKey };
          return [t2.run(Object.assign(Object.assign({}, r2), { get: /* @__PURE__ */ __name(() => s(e2, r2, false, n2), "get") }), e2)];
        }, e.parseMaxPoolAttributes = (t2) => {
          const e2 = t2.attributes.getString("auto_pad", "NOTSET"), n2 = t2.attributes.getInt("ceil_mode", 0), i2 = t2.attributes.getInts("kernel_shape"), o2 = t2.attributes.getInts("strides", []), a2 = t2.attributes.getInts("pads", []), s2 = t2.attributes.getInt("storage_order", 0), u2 = t2.attributes.getInts("dilations", []);
          if (0 !== s2) throw new Error("column major storage order is not yet supported for MaxPool");
          if (0 !== n2) throw new Error("using ceil() in shape computation is not yet supported for MaxPool");
          return (0, r.createAttributeWithCacheKey)({ autoPad: e2, ceilMode: n2, countIncludePad: false, kernelShape: i2, strides: o2, pads: a2, storageOrder: s2, dilations: u2 });
        };
        const s = /* @__PURE__ */ __name((t2, e2, n2, r2) => {
          const [i2, a2] = u(t2, r2, n2), s2 = `
      ${f(t2[0].dims, i2, "\n      value = max(_X(x), value);\n    ", "", "-1e5")}
    `;
          return Object.assign(Object.assign({}, e2), { output: { dims: a2, type: t2[0].type, textureType: o.TextureType.unpacked }, shaderSource: s2 });
        }, "s"), u = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = t2[0].dims.slice(), o2 = Object.hasOwnProperty.call(e2, "dilations"), a2 = e2.kernelShape.slice(), s2 = e2.strides.slice(), u2 = o2 ? e2.dilations.slice() : [], c2 = e2.pads.slice();
          i.PoolConvUtil.adjustPoolAttributes(n2, r2, a2, s2, u2, c2);
          const l2 = i.PoolConvUtil.computePoolOutputShape(n2, r2, s2, u2, a2, c2, e2.autoPad), p2 = Object.assign({}, e2);
          return o2 ? Object.assign(p2, { kernelShape: a2, strides: s2, pads: c2, dilations: u2, cacheKey: e2.cacheKey }) : Object.assign(p2, { kernelShape: a2, strides: s2, pads: c2, cacheKey: e2.cacheKey }), [p2, l2];
        }, "u"), c = { autoPad: "", ceilMode: 0, countIncludePad: false, kernelShape: [], strides: [], pads: [], storageOrder: 0, dilations: [], cacheKey: "" }, l = { name: "GlobalMaxPool", inputNames: ["X"], inputTypes: [o.TextureType.unpacked] };
        e.globalMaxPool = (t2, e2) => (p(e2), [t2.run(Object.assign(Object.assign({}, l), { get: /* @__PURE__ */ __name(() => s(e2, l, true, c), "get") }), e2)]);
        const p = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Pool ops requires 1 input.");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("Invalid input type.");
        }, "p"), f = /* @__PURE__ */ __name((t2, e2, n2, r2, o2) => {
          const a2 = t2.length;
          if (e2.kernelShape.length <= 2) {
            const i2 = e2.kernelShape[e2.kernelShape.length - 1], s2 = e2.strides[e2.strides.length - 1], u2 = e2.pads[e2.pads.length / 2 - 1], c2 = e2.pads[e2.pads.length - 1], l2 = t2[a2 - 1];
            let p2 = "", f2 = "", d2 = "";
            if (p2 = u2 + c2 !== 0 ? `
          for (int i = 0; i < ${i2}; i++) {
            x[${a2} - 1] = indices[${a2} - 1] * ${s2} - ${u2} + i;
            if (x[${a2} - 1] < 0 || x[${a2} - 1] >= ${l2}) {
              pad++;
              continue;
            }
            ${n2}
          }` : `
          for (int i = 0; i < ${i2}; i++) {
            x[${a2} - 1] = indices[${a2} - 1] * ${s2} - ${u2} + i;
            ${n2}
          }`, 2 === e2.kernelShape.length) {
              const n3 = e2.kernelShape[e2.kernelShape.length - 2], r3 = e2.strides[e2.strides.length - 2], o3 = e2.pads[e2.pads.length / 2 - 2], s3 = e2.pads[e2.pads.length - 2], u3 = t2[a2 - 2];
              f2 = o3 + s3 !== 0 ? `
            for (int j = 0; j < ${n3}; j++) {
              x[${a2} - 2] = indices[${a2} - 2] * ${r3} - ${o3} + j;
              if (x[${a2} - 2] < 0 || x[${a2} - 2] >= ${u3}) {
                pad+= ${i2};
                continue;
              }
          ` : `
            for (int j = 0; j < ${n3}; j++) {
              x[${a2} - 2] = indices[${a2} - 2] * ${r3} - ${o3} + j;
            `, d2 = "\n          }\n        ";
            }
            return `
        float process(int indices[${a2}]) {
          int x[${a2}];
          copyVec(indices, x);

          float value = ${o2};
          int pad = 0;
          ${f2}
          ${p2}
          ${d2}
          ${r2}
          return value;
        }
      `;
          }
          {
            const s2 = i.ShapeUtil.size(e2.kernelShape), u2 = i.ShapeUtil.computeStrides(e2.kernelShape), c2 = u2.length, l2 = e2.pads.length, p2 = h(c2), f2 = d(t2, "inputDims"), g = d(e2.pads, "pads"), b = d(u2, "kernelStrides"), m = d(e2.strides, "strides");
            let y = "";
            return y = e2.pads.reduce((t3, e3) => t3 + e3) ? `
            if (x[j] >= inputDims[j] || x[j] < 0) {
              pad++;
              isPad = true;
              break;
            }
          }
          if (!isPad) {
            ${n2}
          }` : `
          }
          ${n2}
        `, `
        ${p2}
        float process(int indices[${a2}]) {
          int x[${a2}];
          copyVec(indices, x);
          int offset[${c2}];
          int pads[${l2}];
          int inputDims[${a2}];
          int kernelStrides[${c2}];
          int strides[${c2}];
          ${g}
          ${f2}
          ${m}
          ${b}

          float value = ${o2};
          int pad = 0;
          bool isPad = false;
          for (int i = 0; i < ${s2}; i++) {
            offsetToIndices(i, kernelStrides, offset);
            isPad = false;
            for (int j = ${a2} - ${c2}; j < ${a2}; j++) {
              x[j] = indices[j] * strides[j - ${a2} + ${c2}]
                + offset[j - ${a2} + ${c2}] - pads[j - 2];
              ${y}
          }
          ${r2}

          return value;
        }
      `;
          }
        }, "f"), d = /* @__PURE__ */ __name((t2, e2) => {
          let n2 = "";
          for (let r2 = 0; r2 < t2.length; r2++) n2 += `
      ${e2}[${r2}] = ${t2[r2]};
    `;
          return n2;
        }, "d"), h = /* @__PURE__ */ __name((t2) => `
  void offsetToIndices(int offset, int[${t2}] strides, out int[${t2}] indices) {
    if (${t2} == 0) {
      return;
    }
    for (int i = 0; i < ${t2} - 1; ++i) {
      indices[i] = offset / strides[i];
      offset -= indices[i] * strides[i];
    }
    indices[${t2} - 1] = offset;
  }`, "h");
      }, 4939: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.reduceLogSumSquare = e.reduceLogSum = e.reduceProd = e.reduceMin = e.reduceMax = e.reduceMean = e.reduceSum = e.parseReduceAttributes = void 0;
        const r = n(246), i = n(782), o = n(2517), a = n(2039), s = /* @__PURE__ */ __name((t2, e2, n2, r2, i2) => {
          c(e2);
          const o2 = { name: r2, inputNames: ["A"], inputTypes: [a.TextureType.unpacked] };
          return [t2.run(Object.assign(Object.assign({}, o2), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => u(t2, e2, n2, r2, i2, o2), "get") }), e2)];
        }, "s");
        e.parseReduceAttributes = (t2) => {
          const e2 = t2.attributes.getInts("axes", []), n2 = 1 === t2.attributes.getInt("keepdims", 1);
          return (0, r.createAttributeWithCacheKey)({ axes: e2, keepDims: n2 });
        };
        const u = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, s2) => {
          const u2 = [], c2 = e2[0].dims.length || 1, l = [], p = o.ShapeUtil.normalizeAxes(n2.axes, e2[0].dims.length), f = i2(e2, p);
          let d = f[1];
          for (let t3 = 0; t3 < e2[0].dims.length; t3++) p.indexOf(t3) >= 0 || 0 === p.length ? (n2.keepDims && u2.push(1), d = `
          for(int j${t3} = 0; j${t3} < ${e2[0].dims[t3]}; j${t3}++) {
            inputIdx[${t3}] = j${t3};
            ${d}
          }`) : (l.push(`inputIdx[${t3}] = outputIdx[${u2.length}];`), u2.push(e2[0].dims[t3]));
          const h = `
      float process(int outputIdx[${u2.length || 1}]) {
        float value;                 // final result
        int inputIdx[${c2}];      // addressing input data
        ${l.join("\n")}
        ${f[0]}       // init ops for reduce max/min
        ${d}
        ${f[2]}       // final computation for reduce mean
        return value;
      }`;
          return Object.assign(Object.assign({}, s2), { output: { dims: u2, type: e2[0].type, textureType: a.TextureType.unpacked }, shaderSource: h });
        }, "u"), c = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Reduce op requires 1 input.");
          if (-1 === i.NUMBER_TYPES.indexOf(t2[0].type)) throw new Error("Invalid input type.");
        }, "c");
        e.reduceSum = (t2, e2, n2) => s(t2, e2, n2, "ReduceSum", () => ["value = 0.0;", "value += _A(inputIdx);", ""]), e.reduceMean = (t2, e2, n2) => s(t2, e2, n2, "ReduceMean", (t3, e3) => {
          let n3 = 1;
          for (let r2 = 0; r2 < t3[0].dims.length; r2++) (e3.indexOf(r2) >= 0 || 0 === e3.length) && (n3 *= t3[0].dims[r2]);
          return ["value = 0.0;", "value += _A(inputIdx);", `value /= ${n3}.;`];
        }), e.reduceMax = (t2, e2, n2) => s(t2, e2, n2, "ReduceMax", (t3, e3) => {
          const n3 = [];
          for (let r2 = 0; r2 < t3[0].dims.length; r2++) (e3.indexOf(r2) >= 0 || 0 === e3.length) && n3.push(`inputIdx[${r2}] = 0;`);
          return [`${n3.join("\n")}
value = _A(inputIdx);`, "value = max(value, _A(inputIdx));", ""];
        }), e.reduceMin = (t2, e2, n2) => s(t2, e2, n2, "ReduceMin", (t3, e3) => {
          const n3 = [];
          for (let r2 = 0; r2 < t3[0].dims.length; r2++) (e3.indexOf(r2) >= 0 || 0 === e3.length) && n3.push(`inputIdx[${r2}] = 0;`);
          return [`${n3.join("\n")}
value = _A(inputIdx);`, "value = min(value, _A(inputIdx));", ""];
        }), e.reduceProd = (t2, e2, n2) => s(t2, e2, n2, "ReduceProd", () => ["value = 1.0;", "value *= _A(inputIdx);", ""]), e.reduceLogSum = (t2, e2, n2) => s(t2, e2, n2, "ReduceLogSum", () => ["value = 0.0;", "value += _A(inputIdx);", "value = log(value);"]), e.reduceLogSumSquare = (t2, e2, n2) => s(t2, e2, n2, "ReduceLogSumSquare", () => ["float t; value = 0.0;", "t = _A(inputIdx); value += t * t;", ""]);
      }, 7019: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.isReshapeCheap = e.processDims3D = e.createPackedReshape3DProgramInfoLoader = void 0;
        const r = n(2517), i = n(5060), o = n(2039), a = n(2827);
        e.createPackedReshape3DProgramInfoLoader = (t2, e2, n2) => {
          const s = ((t3) => ({ name: "Reshape (packed)", inputTypes: [o.TextureType.packed], inputNames: ["A"], cacheHint: `${t3}` }))(n2);
          return Object.assign(Object.assign({}, s), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, s2) => {
            const u = e3.dims, c = s2;
            let l = "";
            for (let t4 = 0; t4 < 4; t4++) {
              let e4 = "";
              switch (t4) {
                case 0:
                  e4 = "outputCoords = rc;";
                  break;
                case 1:
                  e4 = "outputCoords = ivec3(rc.x, rc.y+1, rc.z);";
                  break;
                case 2:
                  e4 = "outputCoords = ivec3(rc.x, rc.y, rc.z+1);";
                  break;
                case 3:
                  e4 = "outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";
                  break;
                default:
                  throw new Error();
              }
              l += `
        ${e4}
        ${t4 > 0 ? "if(outputCoords.y < rows && outputCoords.z < cols){" : ""}
          int flattenedIndex = getFlattenedIndex(outputCoords);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);
          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${t4}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);

        ${t4 > 0 ? "}" : ""}
      `;
            }
            const p = (0, i.getGlsl)(t3.session.backend.glContext.version), f = `
      ${function(t4) {
              const e4 = r.ShapeUtil.computeStrides(t4), n4 = ["b", "r", "c"], i2 = "index";
              return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e4.map((t5, r2) => `int ${n4[r2]} = ${i2} / ${t5}; ${r2 === e4.length - 1 ? `int ${n4[r2 + 1]} = ${i2} - ${n4[r2]} * ${t5}` : `index -= ${n4[r2]} * ${t5}`};`).join("")}
      return ivec3(b, r, c);
    }
  `;
            }(u)}
      ${function(t4) {
              const e4 = r.ShapeUtil.computeStrides(t4);
              return `
  int getFlattenedIndex(ivec3 coords) {
    // reverse y, z order
    return coords.x * ${e4[0]} + coords.z * ${e4[1]} + coords.y;
  }
`;
            }(c)}
      ${(0, a.unpackFromChannel)()}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.0);

        ivec3 outputCoords;
        int rows = ${c[2]};
        int cols = ${c[1]};

        ${l}
        ${p.output} = result;
      }
    `;
            return Object.assign(Object.assign({}, n3), { output: { dims: c, type: e3.type, textureType: o.TextureType.packed }, shaderSource: f, hasMain: true });
          })(t2, e2, s, n2), "get") });
        }, e.processDims3D = function(t2) {
          if (0 === t2.length) return [1, 1, 1];
          let e2 = 1;
          for (let n2 = 0; n2 < t2.length - 2; ++n2) e2 *= t2[n2];
          return [e2, t2.length > 1 ? t2[t2.length - 2] : 1, t2[t2.length - 1]];
        }, e.isReshapeCheap = function(t2, e2) {
          let n2 = false;
          return n2 = 0 === t2.length || 0 === e2.length || (t2.length < 2 || e2.length < 2 ? t2[t2.length - 1] === e2[e2.length - 1] : t2[t2.length - 1] === e2[e2.length - 1] && t2[t2.length - 2] === e2[e2.length - 2]), n2;
        };
      }, 718: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.reshape = void 0;
        const r = n(2517);
        e.reshape = (t2, e2) => {
          const n2 = r.ShapeUtil.calculateReshapedDims(e2[0].dims, e2[1].integerData);
          return t2.session.pack ? [t2.reshapePacked(e2[0], n2)] : [t2.reshapeUnpacked(e2[0], n2)];
        };
      }, 2268: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseResizeAttributesV11 = e.parseResizeAttributesV10 = e.resize = void 0;
        const r = n(5060), i = n(2039), o = n(9390), a = n(2827), s = n(9793), u = { name: "Resize", inputNames: ["A"], inputTypes: [i.TextureType.packed] };
        e.resize = (t2, e2, n2) => ((0, s.validateInputs)(e2, n2), [t2.run(Object.assign(Object.assign({}, u), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => c(t2, e2, n2), "get") }), e2)]), e.parseResizeAttributesV10 = (t2) => (0, s.parseUpsampleAttributes)(t2, 10), e.parseResizeAttributesV11 = (t2) => (0, s.parseUpsampleAttributes)(t2, 11);
        const c = /* @__PURE__ */ __name((t2, e2, n2) => {
          const s2 = (0, r.getGlsl)(t2.session.backend.glContext.version), [c2, p2] = l(e2, n2);
          if (c2.every((t3) => 1 === t3) && "tf_crop_and_resize" !== n2.coordinateTransformMode) return Object.assign(Object.assign({}, u), { output: { dims: p2, type: e2[0].type, textureType: i.TextureType.packed }, hasMain: true, shaderSource: `void main() {
                    vec4 v = ${s2.texture2D}(X, TexCoords);
                    ${s2.output} = v;
                }` });
          const f2 = p2.length;
          if (f2 < 2) throw new Error(`output dimension should be at least 2, but got ${f2}`);
          const d = p2[f2 - 2], h = p2[f2 - 1], g = e2[0].dims;
          if (f2 !== g.length) throw new Error(`output dimension should match input ${g.length}, but got ${f2}`);
          const b = g[f2 - 2], m = g[f2 - 1], y = c2[f2 - 2], _ = c2[f2 - 1];
          let v = "";
          if ("linear" !== n2.mode) throw new Error(`resize (packed) does not support mode: '${n2.mode}'`);
          switch (n2.coordinateTransformMode) {
            case "asymmetric":
              v = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                ";
              break;
            case "half_pixel":
              v = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                ";
              break;
            case "pytorch_half_pixel":
              v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 fcoords = vec4(coords);
                        return vec4(
                            ${h}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,
                            ${d}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,
                            ${h}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,
                            ${d}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0
                          );
                    }
                `;
              break;
            case "align_corners":
              v = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 resized = vec4(${h}.0 - 1.0, ${d}.0 - 1.0, ${h}.0 - 1.0,
                            ${d}.0 - 1.0);
                        vec4 original = vec4(${m}.0 - 1.0, ${b}.0 - 1.0, ${m}.0 - 1.0,
                            ${b}.0 - 1.0);
                        vec4 new_scale = original / resized;
                        return vec4(coords) * new_scale;
                    }
                `;
              break;
            default:
              throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${n2.coordinateTransformMode}'`);
          }
          const w = (0, o.getCoordsDataType)(f2), x = `
            const vec2 inputWH = vec2(${b}.0, ${m}.0);
            const vec4 scaleWHWH = vec4(float(${y}), float(${_}), float(${y}), float(${_}));
            ${(0, a.unpackFromChannel)()}
            ${v}
            float getAValue(int x10, int r, int c, int d) {
                return getChannel(getA(x10, r, c, d), vec2(c, d));
            }
            void main() {
                ${w} rc = getOutputCoords();

                int batch = rc[0];
                int depth = rc[1];

                // retrieve the 4 coordinates that is used in the 4 packed output values.
                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);

                // calculate the source index in fraction
                vec4 sourceFrac = getSourceFracIndex(coords);

                // get the lower and upper bound of the 4 values that will be packed into one texel.
                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));
                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));
                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));
                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));

                bool hasNextRow = rc.w < ${d - 1};
                bool hasNextCol = rc.z < ${h - 1};

                // pack x00, x01, x10, x11's top-left corner into one vec4 structure
                vec4 topLeft = vec4(
                    getAValue(batch, depth, x00.x, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);

                // pack x00, x01, x10, x11's top-right corner into one vec4 structure
                vec4 topRight = vec4(
                    getAValue(batch, depth, x00.x, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);

                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure
                vec4 bottomLeft = vec4(
                    getAValue(batch, depth, x00.z, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);

                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure
                vec4 bottomRight = vec4(
                    getAValue(batch, depth, x00.z, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);

                // calculate the interpolation fraction on u and v direction
                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);
                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));

                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);
                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);
                vec4 newValue = mix(top, bottom, clampFrac.xxzz);

                ${s2.output} = vec4(newValue);
            }
        `;
          return Object.assign(Object.assign({}, u), { output: { dims: p2, type: e2[0].type, textureType: i.TextureType.packed }, hasMain: true, shaderSource: x });
        }, "c"), l = /* @__PURE__ */ __name((t2, e2) => {
          const n2 = t2[0].dims;
          let r2, i2 = e2.scales;
          if (0 === i2.length) {
            const o3 = t2[e2.scalesInputIdx];
            if (o3 && 0 !== o3.size) {
              if (t2[e2.sizesInputIdx]) throw new Error("Only one of scales or sizes must be provided as input.");
              i2 = p(o3, e2.mode, e2.isResize);
            } else {
              const o4 = t2[e2.sizesInputIdx];
              if (!o4 || 0 === o4.size) throw new Error("Either scales or sizes MUST be provided as input.");
              r2 = Array.from(o4.integerData), i2 = f(r2, n2, e2.mode, e2.isResize);
            }
          } else if (t2[e2.sizesInputIdx]) throw new Error("Only one of scales or sizes must be provided as input.");
          const o2 = r2 || n2.map((t3, e3) => Math.floor(t3 * i2[e3]));
          return [i2, o2];
        }, "l"), p = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = Array.from(t2.floatData);
          return (0, s.scalesValidation)(r2, e2, n2), r2;
        }, "p"), f = /* @__PURE__ */ __name((t2, e2, n2, r2) => {
          const i2 = e2.length, o2 = new Array(i2);
          for (let n3 = 0, r3 = i2; n3 < r3; n3++) if (0 === e2[n3]) {
            if (0 !== t2[n3]) throw new Error("Input dim is zero but required output dim is non-zero.");
            o2[n3] = 1;
          } else o2[n3] = t2[n3] / e2[n3];
          return (0, s.scalesValidation)(o2, n2, r2), o2;
        }, "f");
      }, 8117: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.shape = void 0;
        const r = n(9162);
        e.shape = (t2, e2) => (i(e2), [new r.Tensor([e2[0].dims.length], "int32", void 0, void 0, new Int32Array(e2[0].dims))]);
        const i = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Shape requires 1 input.");
        }, "i");
      }, 2278: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.sliceV10 = e.parseSliceAttributes = e.slice = void 0;
        const r = n(246), i = n(782), o = n(2517), a = n(2039), s = { name: "Slice", inputNames: ["A"], inputTypes: [a.TextureType.unpacked] };
        e.slice = (t2, e2, n2) => (c(e2), [t2.run(Object.assign(Object.assign({}, s), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => u(t2, e2[0], n2), "get") }), e2)]), e.parseSliceAttributes = (t2) => {
          const e2 = t2.attributes.getInts("starts"), n2 = t2.attributes.getInts("ends"), i2 = t2.attributes.getInts("axes", []);
          return (0, r.createAttributeWithCacheKey)({ starts: e2, ends: n2, axes: i2 });
        };
        const u = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = 0 === n2.axes.length ? e2.dims.slice(0).map((t3, e3) => e3) : n2.axes, i2 = o.ShapeUtil.normalizeAxes(r2, e2.dims.length), u2 = n2.starts.map((t3, n3) => t3 > e2.dims[i2[n3]] - 1 ? e2.dims[i2[n3]] : o.ShapeUtil.normalizeAxis(t3, e2.dims[i2[n3]])), c2 = n2.ends.map((t3, n3) => t3 > e2.dims[i2[n3]] - 1 ? e2.dims[i2[n3]] : o.ShapeUtil.normalizeAxis(t3, e2.dims[i2[n3]])), l2 = e2.dims.slice(), p2 = [];
          for (let t3 = 0; t3 < i2.length; t3++) l2[i2[t3]] = c2[t3] - u2[t3], u2[t3] > 0 && p2.push(`outputIdx[${i2[t3]}] += ${u2[t3]};`);
          const f = `
      float process(int outputIdx[${l2.length}]) {
        ${p2.join("\n      ")}
        return _A(outputIdx);
      }`;
          return Object.assign(Object.assign({}, s), { output: { dims: l2, type: e2.type, textureType: a.TextureType.unpacked }, shaderSource: f });
        }, "u"), c = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Slice requires 1 input.");
          if (-1 === i.NUMBER_TYPES.indexOf(t2[0].type)) throw new Error("Invalid input type.");
        }, "c");
        e.sliceV10 = (t2, e2) => {
          p(e2);
          const n2 = l(t2, e2);
          return [t2.run(Object.assign(Object.assign({}, s), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => u(t2, e2[0], n2), "get") }), [e2[0]])];
        };
        const l = /* @__PURE__ */ __name((t2, e2) => {
          if (!t2.session.isInitializer(e2[1].dataId) || !t2.session.isInitializer(e2[2].dataId) || e2.length >= 4 && !t2.session.isInitializer(e2[3].dataId) || e2.length >= 5 && !t2.session.isInitializer(e2[4].dataId)) throw new Error("dynamic slice attributes are not allowed");
          if (e2.length >= 5 && e2[4].integerData.some((t3) => 1 !== t3)) throw new Error("currently non-1 steps is not supported for Slice");
          const n2 = Array.from(e2[1].integerData), r2 = Array.from(e2[2].integerData), i2 = e2.length >= 4 ? Array.from(e2[3].integerData) : [];
          return { starts: n2, ends: r2, axes: i2, cacheKey: `${i2};${n2};${r2}` };
        }, "l"), p = /* @__PURE__ */ __name((t2) => {
          if (!t2 || t2.length < 3 || t2.length > 5) throw new Error("Invalid input number.");
          if ("int32" !== t2[1].type || 1 !== t2[1].dims.length) throw new Error("Invalid input type.");
          if ("int32" !== t2[2].type || 1 !== t2[2].dims.length) throw new Error("Invalid input type.");
          if (t2.length >= 4 && ("int32" !== t2[3].type || 1 !== t2[3].dims.length)) throw new Error("Invalid input type.");
          if (t2.length >= 5 && ("int32" !== t2[4].type || 1 !== t2[4].dims.length)) throw new Error("Invalid input type.");
        }, "p");
      }, 5524: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.softmaxV13 = e.parseSoftmaxAttributesV13 = e.parseSoftmaxAttributes = e.softmax = void 0;
        const r = n(246), i = n(2517), o = n(5060), a = n(2039), s = n(3738), u = { name: "SoftmaxComputeMax", inputNames: ["A"], inputTypes: [a.TextureType.unpacked] }, c = { name: "SoftmaxComputeScale", inputNames: ["A", "Max"], inputTypes: [a.TextureType.unpacked, a.TextureType.unpacked] }, l = { name: "SoftMax", inputNames: ["A", "Max", "Norm"], inputTypes: [a.TextureType.unpacked, a.TextureType.unpacked, a.TextureType.unpacked] };
        e.softmax = (t2, e2, n2) => {
          g(e2);
          const r2 = e2[0].dims.slice(), o2 = i.ShapeUtil.normalizeAxis(n2.axis, r2.length), a2 = i.ShapeUtil.sizeToDimension(r2, o2), s2 = i.ShapeUtil.sizeFromDimension(r2, o2);
          return p(t2, e2, n2, a2, s2);
        }, e.parseSoftmaxAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ axis: t2.attributes.getInt("axis", 1) }), e.parseSoftmaxAttributesV13 = (t2) => (0, r.createAttributeWithCacheKey)({ axis: t2.attributes.getInt("axis", -1) }), e.softmaxV13 = (t2, e2, n2) => {
          g(e2);
          const o2 = e2[0].dims.slice(), a2 = i.ShapeUtil.normalizeAxis(n2.axis, o2.length), u2 = o2.length, c2 = a2 !== u2 - 1, l2 = [];
          let f2, d2 = [], h2 = [];
          c2 && (d2 = Array.from({ length: u2 }).map((t3, e3) => e3), d2[a2] = u2 - 1, d2[u2 - 1] = a2, d2.map((t3) => l2.push(o2[t3])), f2 = (0, r.createAttributeWithCacheKey)({ perm: d2 }), h2 = (0, s.transpose)(t2, e2, f2));
          const b = c2 ? i.ShapeUtil.sizeToDimension(l2, u2 - 1) : i.ShapeUtil.sizeToDimension(o2, u2 - 1), m = c2 ? i.ShapeUtil.sizeFromDimension(l2, u2 - 1) : i.ShapeUtil.sizeFromDimension(o2, u2 - 1), y = p(t2, c2 ? h2 : e2, n2, b, m);
          return c2 ? (0, s.transpose)(t2, y, f2) : y;
        };
        const p = /* @__PURE__ */ __name((t2, e2, n2, r2, i2) => {
          const o2 = f(t2, e2[0], r2, i2, [r2]), a2 = t2.run(Object.assign(Object.assign({}, u), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => o2, "get") }), e2), s2 = d(t2, e2[0], r2, i2, o2.output.dims, [r2]), p2 = t2.run(Object.assign(Object.assign({}, c), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => s2, "get") }), [e2[0], a2]), g2 = h(t2, e2[0], r2, i2, o2.output.dims, s2.output.dims);
          return [t2.run(Object.assign(Object.assign({}, l), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => g2, "get") }), [e2[0], a2, p2])];
        }, "p"), f = /* @__PURE__ */ __name((t2, e2, n2, r2, i2) => {
          const [s2, c2] = t2.calculateTextureWidthAndHeight(e2.dims, a.TextureType.unpacked), l2 = i2.length;
          if (n2 < 1 || r2 < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (1 !== i2.length) throw new Error("Dimensionality of the output should be 1");
          if (i2[0] !== n2) throw new Error("Shape of the output should be equal to logical row count");
          const p2 = (0, o.getGlsl)(t2.session.backend.glContext.version), f2 = `
      float process(int[${l2}] indices) {
        int logical_row_start_offset = indices[0] * ${r2};

        float max = getColorAsFloat(${p2.texture2D}(A, offsetToCoords(logical_row_start_offset, ${s2},
        ${c2} )));
        for(int i=1; i<${r2}; ++i)
        {
          float current = getColorAsFloat(${p2.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${s2}, ${c2})));
          if(current > max)
          max = current;
        }

        return max;
      }`;
          return Object.assign(Object.assign({}, u), { output: { dims: i2, type: e2.type, textureType: a.TextureType.unpacked }, shaderSource: f2 });
        }, "f"), d = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, s2) => {
          const [u2, l2] = t2.calculateTextureWidthAndHeight(e2.dims, a.TextureType.unpacked), p2 = s2.length;
          if (n2 < 1 || r2 < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (1 !== s2.length) throw new Error("Dimensionality of the output should be 1");
          if (s2[0] !== n2) throw new Error("Shape of the output should be equal to logical row count");
          if (1 !== i2.length) throw new Error("Dimensionality of the intermediate results should be 1");
          if (i2[0] !== n2) throw new Error("Shape of the intermediate results should be equal to logical row count");
          const f2 = `
      float process(int[${p2}] indices) {
        int logical_row_start_offset = indices[0] * ${r2};

        float norm_factor = 0.0;
        float max = _Max(indices);
        for(int i=0; i<${r2}; ++i)
        {
          norm_factor += exp(getColorAsFloat(${(0, o.getGlsl)(t2.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${u2}, ${l2}))) - max);
        }

        return norm_factor;
      }`;
          return Object.assign(Object.assign({}, c), { output: { dims: s2, type: e2.type, textureType: a.TextureType.unpacked }, shaderSource: f2 });
        }, "d"), h = /* @__PURE__ */ __name((t2, e2, n2, r2, i2, o2) => {
          const [s2, u2] = t2.calculateTextureWidthAndHeight(e2.dims, a.TextureType.unpacked), c2 = e2.dims.length;
          if (n2 < 1 || r2 < 1) throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (1 !== i2.length || 1 !== o2.length) throw new Error("Dimensionality of the intermediate results should be 1");
          if (i2[0] !== n2 || o2[0] !== n2) throw new Error("Shape of the intermediate results should be equal to logical row count");
          const p2 = `
      float process(int[${c2}] indices) {

      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)
      int offset = coordsToOffset(TexCoords, ${s2}, ${u2});

      //determine the logical row for this index
      int logical_row_index[1];
      logical_row_index[0] = offset / ${r2};

      float norm_factor = _Norm(logical_row_index);

      // avoid possible division by 0
      // if norm_facor is 0, all elements are zero
      // if so, return 0
      if(norm_factor == 0.0)
        return 0.0;

      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;
    }`;
          return Object.assign(Object.assign({}, l), { output: { dims: e2.dims, type: e2.type, textureType: a.TextureType.unpacked }, shaderSource: p2 });
        }, "h"), g = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Softmax requires 1 input.");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("Invalid input type");
        }, "g");
      }, 5975: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseSplitAttributes = e.split = void 0;
        const r = n(246), i = n(2517), o = n(2039), a = { name: "Split", inputNames: ["A"], inputTypes: [o.TextureType.unpacked] };
        e.split = (t2, e2, n2) => {
          c(e2);
          const r2 = i.ShapeUtil.normalizeAxis(n2.axis, e2[0].dims.length), o2 = s(t2, e2, r2, n2), l = [];
          for (let i2 = 0; i2 < o2; ++i2) l.push(t2.run(Object.assign(Object.assign({}, a), { cacheHint: `${n2.cacheKey};${i2}`, get: /* @__PURE__ */ __name(() => u(t2, e2[0], n2, r2, i2), "get") }), e2));
          return l;
        }, e.parseSplitAttributes = (t2) => {
          const e2 = t2.attributes.getInt("axis", 0), n2 = t2.attributes.getInts("split", []), i2 = t2.outputs.length;
          return (0, r.createAttributeWithCacheKey)({ axis: e2, split: n2, numOutputs: i2 });
        };
        const s = /* @__PURE__ */ __name((t2, e2, n2, r2) => {
          const [, o2] = i.SplitUtil.splitShape(e2[0].dims, n2, r2.split, r2.numOutputs);
          return o2.length;
        }, "s"), u = /* @__PURE__ */ __name((t2, e2, n2, r2, s2) => {
          const [u2, c2] = i.SplitUtil.splitShape(e2.dims, r2, n2.split, n2.numOutputs), l = c2[s2], p = u2[s2], f = `
      float process(int indices[${p.length}]) {
        indices[${r2}] += ${l};
        return _A(indices);
      }
    `;
          return Object.assign(Object.assign({}, a), { cacheHint: `${n2.cacheKey}:${s2}`, output: { dims: p, type: e2.type, textureType: o.TextureType.unpacked }, shaderSource: f });
        }, "u"), c = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Split requires one input.");
          if ("int8" !== t2[0].type && "uint8" !== t2[0].type && "int16" !== t2[0].type && "uint16" !== t2[0].type && "int32" !== t2[0].type && "uint32" !== t2[0].type && "float32" !== t2[0].type && "float64" !== t2[0].type && "bool" !== t2[0].type) throw new Error("Invalid input type.");
        }, "c");
      }, 3933: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseSqueezeAttributes = e.squeezeV13 = e.squeeze = void 0;
        const r = n(2517);
        e.squeeze = (t2, e2, n2) => {
          i(e2);
          const o2 = r.ShapeUtil.squeezeShape(e2[0].dims, n2);
          return [t2.reshapeUnpacked(e2[0], o2)];
        }, e.squeezeV13 = (t2, n2) => (o(n2), (0, e.squeeze)(t2, [n2[0]], Array.from(n2[1].integerData))), e.parseSqueezeAttributes = (t2) => t2.attributes.getInts("axes");
        const i = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Squeeze requires 1 input.");
          if ("string" === t2[0].type) throw new Error("invalid input tensor types.");
        }, "i"), o = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 2 !== t2.length) throw new Error("Squeeze requires 2 inputs.");
          if ("int32" !== t2[1].type) throw new Error("Invalid input type.");
        }, "o");
      }, 6558: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.sum = void 0;
        const r = n(5060), i = n(2039);
        e.sum = (t2, e2) => {
          a(e2);
          const n2 = { name: "Sum", inputNames: e2.map((t3, e3) => `X${e3}`), inputTypes: new Array(e2.length).fill(i.TextureType.unpacked) };
          return [t2.run(Object.assign(Object.assign({}, n2), { get: /* @__PURE__ */ __name(() => o(t2, e2, n2), "get") }), e2)];
        };
        const o = /* @__PURE__ */ __name((t2, e2, n2) => {
          const o2 = (0, r.getGlsl)(t2.session.backend.glContext.version), a2 = e2[0].dims.slice(), s = `
      void main() {
        vec4 result = ${e2.map((t3, e3) => `${o2.texture2D}(X${e3},TexCoords)`).join(" + ")};
        ${o2.output} = result;
      }
    `;
          return Object.assign(Object.assign({}, n2), { output: { dims: a2, type: e2[0].type, textureType: i.TextureType.unpacked }, hasMain: true, shaderSource: s });
        }, "o"), a = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 0 === t2.length) throw new Error("Sum requires inputs.");
          const e2 = t2[0].dims.length;
          for (let n2 = 1; n2 < t2.length; n2++) {
            if (e2 !== t2[n2].dims.length) throw new Error("Input shapes are mismatched.");
            for (let r2 = 0; r2 < e2; r2++) if (t2[0].dims[r2] !== t2[n2].dims[r2]) throw new Error("Input shapes are not matched.");
          }
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("Invalid input type.");
          for (let e3 = 1; e3 < t2.length; e3++) if (t2[0].type !== t2[e3].type) throw new Error("Input types are not matched.");
        }, "a");
      }, 5723: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.tile = void 0;
        const r = n(782), i = n(2039);
        e.tile = (t2, e2) => {
          a(e2);
          const n2 = { name: "Tile", inputNames: ["A"], inputTypes: [i.TextureType.unpacked] };
          return [t2.run(Object.assign(Object.assign({}, n2), { get: /* @__PURE__ */ __name(() => o(t2, e2, n2), "get") }), e2)];
        };
        const o = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = e2[0].dims.slice(), o2 = new Array(r2.length), a2 = [];
          for (let t3 = 0; t3 < r2.length; t3++) o2[t3] = r2[t3] * e2[1].numberData[t3], a2.push(`inputIdx[${t3}] = int(mod(float(outputIdx[${t3}]), ${r2[t3]}.));`);
          const s = o2.length, u = `
      float process(int outputIdx[${s}]) {
        int inputIdx[${s}];
        ${a2.join("\n")}
        return _A(inputIdx);
      }
    `;
          return Object.assign(Object.assign({}, n2), { output: { dims: o2, type: e2[0].type, textureType: i.TextureType.unpacked }, shaderSource: u });
        }, "o"), a = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 2 !== t2.length) throw new Error("Tile requires 2 input.");
          if (1 !== t2[1].dims.length) throw new Error("The second input shape must 1 dimension.");
          if (t2[1].dims[0] !== t2[0].dims.length) throw new Error("Invalid input shape.");
          if (-1 === r.NUMBER_TYPES.indexOf(t2[0].type)) throw new Error("Invalid input type.");
          if ("int32" !== t2[1].type && "int16" !== t2[1].type) throw new Error("Invalid repeat type.");
        }, "a");
      }, 3738: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseTransposeAttributes = e.transpose = void 0;
        const r = n(246), i = n(2517), o = n(2039), a = { name: "Transpose", inputNames: ["A"], inputTypes: [o.TextureType.unpacked] };
        e.transpose = (t2, e2, n2) => (p(e2), [t2.run(Object.assign(Object.assign({}, a), { cacheHint: n2.cacheKey, get: /* @__PURE__ */ __name(() => s(t2, e2[0], n2.perm), "get") }), e2)]), e.parseTransposeAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ perm: t2.attributes.getInts("perm", []) });
        const s = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = e2.dims;
          n2 = u(r2, n2);
          const i2 = c(r2, n2), s2 = r2.length, p2 = `
      ${l("perm", n2, s2)}
      float process(int indices[${s2}]) {
        int a[${s2}];
        perm(a, indices);
        return _A(a);
      }`;
          return Object.assign(Object.assign({}, a), { output: { dims: i2, type: e2.type, textureType: o.TextureType.unpacked }, shaderSource: p2 });
        }, "s"), u = /* @__PURE__ */ __name((t2, e2) => (e2 && e2.length !== t2.length && (e2 = [...t2.keys()].reverse()), e2), "u"), c = /* @__PURE__ */ __name((t2, e2) => (e2 = u(t2, e2), i.ShapeUtil.sortBasedOnPerm(t2, e2)), "c"), l = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = [];
          r2.push(`void ${t2}(out int a[${n2}], int src[${n2}]) {`);
          for (let t3 = 0; t3 < n2; ++t3) r2.push(`	a[${e2[t3]}]=src[${t3}];`);
          return r2.push("	}"), r2.join("\n");
        }, "l"), p = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Transpose requires 1 input.");
          if ("float32" !== t2[0].type && "float64" !== t2[0].type) throw new Error("input should be float tensor");
        }, "p");
      }, 8710: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.encodeAsUint8 = void 0;
        const r = n(5060), i = n(2039);
        e.encodeAsUint8 = (t2, e2) => {
          const n2 = e2.shape, o = (0, r.getGlsl)(t2.session.backend.glContext.version), a = `
    const float FLOAT_MAX = 1.70141184e38;
    const float FLOAT_MIN = 1.17549435e-38;

    bool isNaN(float val) {
      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;
    }

    highp vec4 encodeAsUint8(highp float v) {
      if (isNaN(v)) {
        return vec4(255, 255, 255, 255);
      }

      highp float av = abs(v);

      if(av < FLOAT_MIN) {
        return vec4(0.0, 0.0, 0.0, 0.0);
      } else if(v > FLOAT_MAX) {
        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
      } else if(v < -FLOAT_MAX) {
        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
      }

      highp vec4 c = vec4(0,0,0,0);

      highp float e = floor(log2(av));
      highp float m = exp2(fract(log2(av))) - 1.0;

      c[2] = floor(128.0 * m);
      m -= c[2] / 128.0;
      c[1] = floor(32768.0 * m);
      m -= c[1] / 32768.0;
      c[0] = floor(8388608.0 * m);

      highp float ebias = e + 127.0;
      c[3] = floor(ebias / 2.0);
      ebias -= c[3] * 2.0;
      c[2] += floor(ebias) * 128.0;

      c[3] += 128.0 * step(0.0, -v);

      return c / 255.0;
    }

    void main() {
      float value = ${o.texture2D}(X,TexCoords).r;
      ${o.output} = encodeAsUint8(value);
    }`, s = { name: "Uint8Encode", inputTypes: [i.TextureType.unpacked], inputNames: ["X"], output: { dims: n2, type: e2.tensor.type, textureType: i.TextureType.downloadUint8AsFloat }, shaderSource: a, hasMain: true };
          return t2.executeProgram(s, [e2.tensor]);
        };
      }, 4909: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.tanh = e.tan = e.sqrt = e.sin = e.sigmoid = e.relu = e.not = e.neg = e.log = e.parseLeakyReluAttributes = e.leakyRelu = e.identity = e.floor = e.exp = e.parseEluAttributes = e.elu = e.cos = e.ceil = e.clipV11 = e.parseClipAttributes = e.clip = e.atan = e.asin = e.acos = e.abs = e.glslTanh = e.glslTan = e.glslSqrt = e.glslSigmoid = e.glslRelu = e.glslSin = e.glslNot = e.glslNeg = e.glslLog = e.glslLeakyRelu = e.glslIdentity = e.glslClip = e.glslFloor = e.glslExp = e.glslElu = e.glslCos = e.glslCeil = e.glslAtan = e.glslAsin = e.glslAcos = e.glslAbs = void 0;
        const r = n(246), i = n(2517), o = n(8520), a = n(5060), s = n(2039);
        function u() {
          return P("abs");
        }
        __name(u, "u");
        function c() {
          return P("acos");
        }
        __name(c, "c");
        function l() {
          return P("asin");
        }
        __name(l, "l");
        function p() {
          return P("atan");
        }
        __name(p, "p");
        function f() {
          return P("ceil");
        }
        __name(f, "f");
        function d() {
          return P("cos");
        }
        __name(d, "d");
        function h(t2) {
          const e2 = "elu";
          return { body: `
  const float alpha = float(${t2});

  float ${e2}_(float a) {
    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;
  }
  vec4 ${e2}_(vec4 v) {
    return vec4(${e2}_(v.x), ${e2}_(v.y), ${e2}_(v.z), ${e2}_(v.w));
  }
  `, name: e2, type: o.FunctionType.ValueBased };
        }
        __name(h, "h");
        function g() {
          return P("exp");
        }
        __name(g, "g");
        function b() {
          return P("floor");
        }
        __name(b, "b");
        function m(t2, e2) {
          const n2 = "clip";
          return { body: `
  const float min = float(${t2});
  const float max = float(${e2});

  float ${n2}_(float a) {
    return clamp(a, min, max);
  }
  vec4 ${n2}_(vec4 v) {
    return clamp(v, min, max);
  }
  `, name: n2, type: o.FunctionType.ValueBased };
        }
        __name(m, "m");
        function y() {
          const t2 = "indentity";
          return { body: `
  float ${t2}_(float a) {
    return a;
  }
  vec4 ${t2}_(vec4 v) {
    return v;
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(y, "y");
        function _(t2) {
          const e2 = "leakyRelu";
          return { body: `
  const float alpha = float(${t2});

  float ${e2}_(float a) {
    return a < 0.0 ? a * alpha : a;
  }
  vec4 ${e2}_(vec4 v) {
    return vec4(${e2}_(v.x), ${e2}_(v.y), ${e2}_(v.z), ${e2}_(v.w));
  }
  `, name: e2, type: o.FunctionType.ValueBased };
        }
        __name(_, "_");
        function v() {
          return P("log");
        }
        __name(v, "v");
        function w() {
          const t2 = "neg";
          return { body: `
  float ${t2}_(float a) {
    return -a;
  }
  vec4 ${t2}_(vec4 v) {
    return -v;
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(w, "w");
        function x() {
          const t2 = "not";
          return { body: `
  float ${t2}_(float a) {
    return float( ! bool(a) );
  }
  bool ${t2}_(bool a) {
    return !a;
  }
  vec4 ${t2}_(vec4 v) {
    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));
  }
  bvec4 ${t2}_(bvec4 v) {
    return bvec4(!v.x, !v.y, !v.z, !v.w);
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(x, "x");
        function T() {
          return P("sin");
        }
        __name(T, "T");
        function S() {
          const t2 = "relu";
          return { body: `
  float ${t2}_(float a) {
    return max( a, 0.0 );
  }
  vec4 ${t2}_(vec4 v) {
    return max( v, 0.0 );
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(S, "S");
        function O() {
          const t2 = "sigmoid";
          return { body: `
  float ${t2}_(float a) {
    return 1.0 / (1.0 + exp(-a));
  }
  vec4 ${t2}_(vec4 v) {
    return 1.0 / (1.0 + exp(-v));
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(O, "O");
        function A() {
          return P("sqrt");
        }
        __name(A, "A");
        function E() {
          return P("tan");
        }
        __name(E, "E");
        function I() {
          const t2 = "tanh";
          return { body: `
  float ${t2}_(float a) {
    a = clamp(a, -10., 10.);
    a = exp(2.*a);
    return (a - 1.) / (a + 1.);
  }
  vec4 ${t2}_(vec4 v) {
    v = clamp(v, -10., 10.);
    v = exp(2.*v);
    return (v - 1.) / (v + 1.);
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(I, "I");
        function P(t2) {
          return { body: `
  float ${t2}_(float a) {
    return ${t2}(a);
  }
  vec4 ${t2}_(vec4 v) {
    return ${t2}(v);
  }
  `, name: t2, type: o.FunctionType.ValueBased };
        }
        __name(P, "P");
        e.glslAbs = u, e.glslAcos = c, e.glslAsin = l, e.glslAtan = p, e.glslCeil = f, e.glslCos = d, e.glslElu = h, e.glslExp = g, e.glslFloor = b, e.glslClip = m, e.glslIdentity = y, e.glslLeakyRelu = _, e.glslLog = v, e.glslNeg = w, e.glslNot = x, e.glslSin = T, e.glslRelu = S, e.glslSigmoid = O, e.glslSqrt = A, e.glslTan = E, e.glslTanh = I;
        const D = /* @__PURE__ */ __name((t2, e2, n2, r2) => {
          const i2 = t2.session.pack ? s.TextureType.packed : s.TextureType.unpacked, o2 = { name: n2.name, inputTypes: [i2], inputNames: ["A"], cacheHint: r2 };
          return Object.assign(Object.assign({}, o2), { get: /* @__PURE__ */ __name(() => ((t3, e3, n3, r3) => {
            const i3 = t3.session.pack ? s.TextureType.packed : s.TextureType.unpacked, o3 = (0, a.getGlsl)(t3.session.backend.glContext.version);
            return Object.assign(Object.assign({}, e3), { output: { dims: n3.dims, type: n3.type, textureType: i3 }, shaderSource: `
     ${r3.body}
     void main() {
       vec4 v = ${o3.texture2D}(A, TexCoords);
       v = ${r3.name}_(v);
       ${o3.output} = v;
     }
     `, hasMain: true });
          })(t2, o2, e2, n2), "get") });
        }, "D");
        e.abs = (t2, e2) => [t2.run(D(t2, e2[0], u()), e2)], e.acos = (t2, e2) => [t2.run(D(t2, e2[0], c()), e2)], e.asin = (t2, e2) => [t2.run(D(t2, e2[0], l()), e2)], e.atan = (t2, e2) => [t2.run(D(t2, e2[0], p()), e2)], e.clip = (t2, e2, n2) => [t2.run(D(t2, e2[0], m(n2.min, n2.max), n2.cacheKey), e2)], e.parseClipAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ min: t2.attributes.getFloat("min", i.MIN_CLIP), max: t2.attributes.getFloat("max", i.MAX_CLIP) }), e.clipV11 = (t2, n2) => {
          const r2 = $2(t2, n2);
          return (0, e.clip)(t2, [n2[0]], r2);
        };
        const $2 = /* @__PURE__ */ __name((t2, e2) => {
          if (e2.length >= 3 && (!t2.session.isInitializer(e2[1].dataId) || !t2.session.isInitializer(e2[2].dataId))) throw new Error("dynamic clip attributes are not allowed");
          const n2 = e2.length >= 3 ? e2[1].numberData[0] : i.MIN_CLIP, o2 = e2.length >= 3 ? e2[2].numberData[0] : i.MAX_CLIP;
          return (0, r.createAttributeWithCacheKey)({ min: n2, max: o2 });
        }, "$");
        e.ceil = (t2, e2) => [t2.run(D(t2, e2[0], f()), e2)], e.cos = (t2, e2) => [t2.run(D(t2, e2[0], d()), e2)], e.elu = (t2, e2, n2) => [t2.run(D(t2, e2[0], h(n2.alpha), n2.cacheKey), e2)], e.parseEluAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ alpha: t2.attributes.getFloat("alpha", 1) }), e.exp = (t2, e2) => [t2.run(D(t2, e2[0], g()), e2)], e.floor = (t2, e2) => [t2.run(D(t2, e2[0], b()), e2)], e.identity = (t2, e2) => [t2.run(D(t2, e2[0], y()), e2)], e.leakyRelu = (t2, e2, n2) => [t2.run(D(t2, e2[0], _(n2.alpha), n2.cacheKey), e2)], e.parseLeakyReluAttributes = (t2) => (0, r.createAttributeWithCacheKey)({ alpha: t2.attributes.getFloat("alpha", 0.01) }), e.log = (t2, e2) => [t2.run(D(t2, e2[0], v()), e2)], e.neg = (t2, e2) => [t2.run(D(t2, e2[0], w()), e2)], e.not = (t2, e2) => [t2.run(D(t2, e2[0], x()), e2)], e.relu = (t2, e2) => [t2.run(D(t2, e2[0], S()), e2)], e.sigmoid = (t2, e2) => [t2.run(D(t2, e2[0], O()), e2)], e.sin = (t2, e2) => [t2.run(D(t2, e2[0], T()), e2)], e.sqrt = (t2, e2) => [t2.run(D(t2, e2[0], A()), e2)], e.tan = (t2, e2) => [t2.run(D(t2, e2[0], E()), e2)], e.tanh = (t2, e2) => [t2.run(D(t2, e2[0], I()), e2)];
      }, 5611: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createUnpackProgramInfoLoader = e.createUnpackProgramInfo = void 0;
        const r = n(5060), i = n(2039), o = n(9390), a = n(2827), s = { name: "unpack", inputNames: ["A"], inputTypes: [i.TextureType.packed] };
        e.createUnpackProgramInfo = (t2, e2) => {
          const n2 = e2.dims.length, u = (0, a.getChannels)("rc", n2), c = u.slice(-2), l = (0, o.getCoordsDataType)(n2), p = (0, a.unpackFromChannel)(), f = 0 === e2.dims.length ? "" : function(t3, e3) {
            if (1 === t3) return "rc";
            let n3 = "";
            for (let r2 = 0; r2 < t3; r2++) n3 += e3[r2], r2 < t3 - 1 && (n3 += ",");
            return n3;
          }(n2, u), d = n2 <= 1 ? "rc" : `vec2(${c.join(",")})`, h = `
    ${p}
    void main() {
      ${l} rc = getOutputCoords();

       // Sample the texture with the coords to get the rgba channel value.
       vec4 packedInput = getA(${f});

       ${(0, r.getGlsl)(t2.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${d}), 0, 0, 0);
     }
   `;
          return Object.assign(Object.assign({}, s), { hasMain: true, output: { dims: e2.dims, type: e2.type, textureType: i.TextureType.unpacked }, shaderSource: h });
        }, e.createUnpackProgramInfoLoader = (t2, n2) => Object.assign(Object.assign({}, s), { get: /* @__PURE__ */ __name(() => (0, e.createUnpackProgramInfo)(t2, n2), "get") });
      }, 8428: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.parseUnsqueezeAttributes = e.unsqueezeV13 = e.unsqueeze = void 0;
        const r = n(2517);
        e.unsqueeze = (t2, e2, n2) => {
          i(e2);
          const o2 = r.ShapeUtil.unsqueezeShape(e2[0].dims, n2);
          return [t2.reshapeUnpacked(e2[0], o2)];
        }, e.unsqueezeV13 = (t2, n2) => (o(n2), (0, e.unsqueeze)(t2, [n2[0]], Array.from(n2[1].integerData))), e.parseUnsqueezeAttributes = (t2) => t2.attributes.getInts("axes");
        const i = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 1 !== t2.length) throw new Error("Unsqueeze requires 1 input.");
          if ("string" === t2[0].type) throw new Error("invalid input tensor types.");
        }, "i"), o = /* @__PURE__ */ __name((t2) => {
          if (!t2 || 2 !== t2.length) throw new Error("Unsqueeze requires 2 inputs.");
          if ("int32" !== t2[1].type) throw new Error("Invalid input type.");
        }, "o");
      }, 9793: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.scalesValidation = e.validateInputs = e.parseUpsampleAttributes = e.parseUpsampleAttributesV9 = e.parseUpsampleAttributesV7 = e.upsample = void 0;
        const r = n(246), i = n(5060), o = n(2039), a = { name: "Upsample", inputNames: ["X"], inputTypes: [o.TextureType.unpacked] };
        e.upsample = (t2, n2, r2) => ((0, e.validateInputs)(n2, r2), [t2.run(Object.assign(Object.assign({}, a), { cacheHint: r2.cacheKey, get: /* @__PURE__ */ __name(() => s(t2, n2, r2), "get") }), n2)]), e.parseUpsampleAttributesV7 = (t2) => (0, e.parseUpsampleAttributes)(t2, 7), e.parseUpsampleAttributesV9 = (t2) => (0, e.parseUpsampleAttributes)(t2, 9), e.parseUpsampleAttributes = (t2, n2) => {
          const i2 = n2 >= 10, o2 = t2.attributes.getString("mode", "nearest");
          if ("nearest" !== o2 && "linear" !== o2 && (n2 < 11 || "cubic" !== o2)) throw new Error(`unrecognized mode: ${o2}`);
          let a2 = [];
          n2 < 9 && (a2 = t2.attributes.getFloats("scales"), (0, e.scalesValidation)(a2, o2, i2));
          const s2 = t2.attributes.getFloat("extrapolation_value", 0), u = n2 > 10 ? t2.attributes.getString("coordinate_transformation_mode", "half_pixel") : "asymmetric";
          if (-1 === ["asymmetric", "pytorch_half_pixel", "tf_half_pixel_for_nn", "align_corners", "tf_crop_and_resize", "half_pixel"].indexOf(u)) throw new Error(`coordinate_transform_mode '${u}' is not supported`);
          const c = "tf_crop_and_resize" === u, l = c, p = "nearest" === o2 && n2 >= 11 ? t2.attributes.getString("nearest_mode", "round_prefer_floor") : "";
          if (-1 === ["round_prefer_floor", "round_prefer_ceil", "floor", "ceil", ""].indexOf(p)) throw new Error(`nearest_mode '${p}' is not supported`);
          const f = t2.attributes.getFloat("cubic_coeff_a", -0.75), d = 0 !== t2.attributes.getInt("exclude_outside", 0);
          if (d && "cubic" !== o2) throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");
          const h = n2 < 11 || "nearest" === o2 && "asymmetric" === u && "floor" === p;
          let g = 0, b = 0, m = 0;
          return n2 > 10 ? t2.inputs.length > 2 ? (g = 1, b = 2, m = 3) : (b = 1, m = 2) : 9 === n2 && (b = 1), (0, r.createAttributeWithCacheKey)({ opset: n2, isResize: i2, mode: o2, scales: a2, extrapolationValue: s2, coordinateTransformMode: u, useExtrapolation: l, needRoiInput: c, nearestMode: p, cubicCoefficientA: f, excludeOutside: d, useNearest2xOptimization: h, roiInputIdx: g, scalesInputIdx: b, sizesInputIdx: m });
        };
        const s = /* @__PURE__ */ __name((t2, e2, n2) => {
          const r2 = (0, i.getGlsl)(t2.session.backend.glContext.version), [s2, u] = t2.calculateTextureWidthAndHeight(e2[0].dims, o.TextureType.unpacked), c = e2[0].dims.map((t3, e3) => Math.floor(t3 * n2.scales[e3])), [l, p] = t2.calculateTextureWidthAndHeight(c, o.TextureType.unpacked), f = c.length, d = new Array(f), h = new Array(f);
          let g = `
      int output_pitches[${f}];
      int input_pitches[${f}];
      `;
          for (let t3 = f - 1; t3 >= 0; t3--) d[t3] = t3 === f - 1 ? 1 : d[t3 + 1] * c[t3 + 1], h[t3] = t3 === f - 1 ? 1 : h[t3 + 1] * e2[0].dims[t3 + 1], g += `
        output_pitches[${t3}] = ${d[t3]};
        input_pitches[${t3}] = ${h[t3]};
        `;
          const b = `
      float getInputFloat(int index) {
        vec2 coords = offsetToCoords(index, ${s2}, ${u});
        float value = getColorAsFloat(${r2.texture2D}(X, coords));
        return value;
      }
      `, m = "nearest" === n2.mode ? `
    ${b}
    float process(int indices[${f}]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l}, ${p});

      ${g}

      int d, m;
      for (int dim = 0; dim < ${f}; ++dim) {
        d = output_index / output_pitches[dim];
        m = output_index - d * output_pitches[dim];
        output_index = m;

        if (scales[dim] != 1 && d > 0) {
          int d2 = d / scales[dim];
          m = d - d2 * scales[dim];
          d = d2;
        }
        input_index += input_pitches[dim] * d;
      }

      return getInputFloat(input_index);
    }` : 4 === f ? `
    ${b}
    float process(int indices[4]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l}, ${p});

      ${g}

      int m;
      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m / output_pitches[1];
      m = m - index_of_dim1 * output_pitches[1];
      index_of_dim2 = m / output_pitches[2];
      m = m - index_of_dim2 * output_pitches[2];
      index_of_dim3 = m;

      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;
      index_of_input_dim2 = index_of_dim2 / scales[2];
      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];
      index_of_input_dim3 = index_of_dim3 / scales[3];
      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];

      input_index = index_of_dim0 * input_pitches[0] +
            index_of_dim1 * input_pitches[1] +
            index_of_input_dim2 * input_pitches[2] +
            index_of_input_dim3;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim2 = false;
      if (index_of_input_dim2 == (${e2[0].dims[2]} - 1)) {
        // It's the end in dimension 2
        x01 = x00;
        end_of_dim2 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[2]);
      }

      if (index_of_input_dim3 == (input_pitches[2] - 1)) {
        // It's the end in dimension 3
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);
    }` : `
    ${b}
    float process(int indices[2]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l}, ${p});

      ${g}

      int m;
      int index_of_dim0, index_of_dim1;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m;

      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;
      index_of_input_dim0 = index_of_dim0 / scales[0];
      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];
      index_of_input_dim1 = index_of_dim1 / scales[1];
      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];

      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim0 = false;
      if (index_of_input_dim0 == (${e2[0].dims[0]} - 1)) {
        // It's the end in dimension 0
        x01 = x00;
        end_of_dim0 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[0]);
      }

      if (index_of_input_dim1 == (input_pitches[0] - 1)) {
        // It's the end in dimension 1
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);
    }`;
          return Object.assign(Object.assign({}, a), { output: { dims: c, type: e2[0].type, textureType: o.TextureType.unpacked }, shaderSource: m, variables: [{ name: "scales", type: "int", arrayLength: n2.scales.length, data: n2.scales.map((t3) => Math.ceil(t3)) }] });
        }, "s");
        e.validateInputs = (t2, e2) => {
          if (!t2 || e2.opset < 9 && 1 !== t2.length || e2.opset >= 9 && e2.opset < 11 && 2 !== t2.length || e2.opset >= 11 && t2.length < 2) throw new Error("invalid inputs.");
          if (e2.scales.length > 0 && t2[0].dims.length !== e2.scales.length) throw new Error("Invalid input shape.");
          if ("string" === t2[0].type) throw new Error("Invalid input tensor types.");
        }, e.scalesValidation = (t2, e2, n2) => {
          if (n2) {
            for (const e3 of t2) if (e3 <= 0) throw new Error("Scale value should be greater than 0.");
          } else for (const e3 of t2) if (e3 < 1) throw new Error("Scale value should be greater than or equal to 1.");
          if (!("linear" !== e2 && "cubic" !== e2 || 2 === t2.length || 4 === t2.length && 1 === t2[0] && 1 === t2[1])) throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${n2 ? "Resize" : "Upsample"} opeartor.`);
        };
      }, 1958: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.ProgramManager = void 0;
        const r = n(1670), i = n(6231), o = n(8879), a = n(5060);
        e.ProgramManager = class {
          constructor(t2, e2, n2) {
            this.profiler = t2, this.glContext = e2, this.textureLayoutStrategy = n2, this.repo = /* @__PURE__ */ new Map(), this.attributesBound = false;
          }
          getArtifact(t2) {
            return this.repo.get(t2);
          }
          setArtifact(t2, e2) {
            this.repo.set(t2, e2);
          }
          run(t2, e2, n2) {
            var r2;
            this.profiler.event("op", `ProgramManager.run ${null !== (r2 = t2.programInfo.name) && void 0 !== r2 ? r2 : "unknown kernel"}`, () => {
              var r3;
              const o2 = this.glContext.gl, a2 = t2.program;
              o2.useProgram(a2);
              try {
                this.bindOutput(n2), this.attributesBound || this.bindAttributes(t2.attribLocations), this.bindUniforms(t2.uniformLocations, null !== (r3 = t2.programInfo.variables) && void 0 !== r3 ? r3 : [], e2);
              } catch (e3) {
                throw i.Logger.error("ProgramManager", t2.programInfo.shaderSource), e3;
              }
              this.profiler.event("backend", "GlContext.draw()", () => {
                this.glContext.draw();
              });
            }, this.glContext);
          }
          dispose() {
            this.vertexShader && this.glContext.deleteShader(this.vertexShader), this.repo.forEach((t2) => this.glContext.deleteProgram(t2.program));
          }
          build(t2, e2, n2) {
            return this.profiler.event("backend", "ProgramManager.build", () => {
              const r2 = new o.GlslPreprocessor(this.glContext, t2, e2, n2), i2 = r2.preprocess(), a2 = this.compile(i2);
              return { programInfo: t2, program: a2, uniformLocations: this.getUniformLocations(a2, r2.context.programInfo.inputNames, r2.context.programInfo.variables), attribLocations: this.getAttribLocations(a2) };
            });
          }
          compile(t2) {
            if (!this.vertexShader) {
              i.Logger.verbose("ProrgramManager", "Compiling and caching Vertex shader for the first time");
              const t3 = (0, a.getVertexShaderSource)(this.glContext.version);
              this.vertexShader = this.glContext.compileShader(t3, this.glContext.gl.VERTEX_SHADER);
            }
            r.env.debug && i.Logger.verbose("ProrgramManager", `FragShader:
${t2}
`);
            const e2 = this.glContext.compileShader(t2, this.glContext.gl.FRAGMENT_SHADER), n2 = this.glContext.createProgram(this.vertexShader, e2);
            return this.glContext.deleteShader(e2), n2;
          }
          bindOutput(t2) {
            const e2 = t2.width, n2 = t2.height;
            i.Logger.verbose("ProrgramManager", `Binding output texture to Framebuffer: w/h=${e2}/${n2}, shape=${t2.shape}, type=${t2.tensor.type}`), this.glContext.attachFramebuffer(t2.texture, e2, n2);
          }
          bindAttributes(t2) {
            const e2 = t2.position, n2 = t2.textureCoord;
            this.glContext.setVertexAttributes(e2, n2), this.attributesBound = true;
          }
          bindUniforms(t2, e2, n2) {
            var r2;
            const i2 = this.glContext.gl;
            let o2 = 0;
            for (const { name: a2, type: s, location: u, arrayLength: c } of t2) {
              const t3 = null === (r2 = e2.find((t4) => t4.name === a2)) || void 0 === r2 ? void 0 : r2.data;
              if ("sampler2D" !== s && !t3) throw new Error(`variable '${a2}' does not have data defined in program info`);
              switch (s) {
                case "sampler2D":
                  this.bindTexture(n2[o2], u, o2), o2++;
                  break;
                case "float":
                  c ? i2.uniform1fv(u, t3) : i2.uniform1f(u, t3);
                  break;
                case "int":
                  c ? i2.uniform1iv(u, t3) : i2.uniform1i(u, t3);
                  break;
                default:
                  throw new Error(`Uniform not implemented: ${s}`);
              }
            }
          }
          bindTexture(t2, e2, n2) {
            this.glContext.bindTextureToUniform(t2.texture, n2, e2);
          }
          getAttribLocations(t2) {
            return { position: this.getAttribLocation(t2, "position"), textureCoord: this.getAttribLocation(t2, "textureCoord") };
          }
          getUniformLocations(t2, e2, n2) {
            const r2 = [];
            if (e2) for (const n3 of e2) r2.push({ name: n3, type: "sampler2D", location: this.getUniformLocation(t2, n3) });
            if (n2) for (const e3 of n2) r2.push(Object.assign(Object.assign({}, e3), { location: this.getUniformLocation(t2, e3.name) }));
            return r2;
          }
          getUniformLocation(t2, e2) {
            const n2 = this.glContext.gl.getUniformLocation(t2, e2);
            if (null === n2) throw new Error(`Uniform ${e2} not found.`);
            return n2;
          }
          getAttribLocation(t2, e2) {
            return this.glContext.gl.getAttribLocation(t2, e2);
          }
        };
      }, 6416: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.WebGLSessionHandler = void 0;
        const r = n(6231), i = n(1047), o = n(8316), a = n(1640), s = n(1958), u = n(7859), c = n(5702);
        e.WebGLSessionHandler = class {
          constructor(t2, e2) {
            this.backend = t2, this.context = e2, this.layoutStrategy = new u.PreferLogicalStrategy(t2.glContext.maxTextureSize), this.programManager = new s.ProgramManager(this.context.profiler, t2.glContext, this.layoutStrategy), this.textureManager = new c.TextureManager(t2.glContext, this.layoutStrategy, this.context.profiler, { reuseTextures: "full" === t2.textureCacheMode }), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map(), this.pack = t2.pack, this.pack2unpackMap = /* @__PURE__ */ new Map(), this.unpack2packMap = /* @__PURE__ */ new Map();
          }
          createInferenceHandler() {
            return new o.WebGLInferenceHandler(this);
          }
          onGraphInitialized(t2) {
            const e2 = t2.getValues().filter((t3) => -1 === t3.from && t3.tensor).map((t3) => t3.tensor.dataId);
            this.initializers = new Set(e2);
          }
          isInitializer(t2) {
            return !!this.initializers && this.initializers.has(t2);
          }
          addInitializer(t2) {
            this.initializers.add(t2);
          }
          getTextureData(t2, e2) {
            return e2 ? this.packedTextureDataCache.get(t2) : this.unpackedTextureDataCache.get(t2);
          }
          setTextureData(t2, e2, n2 = false) {
            r.Logger.verbose("WebGLSessionHandler", "Storing Texture data in cache"), n2 ? this.packedTextureDataCache.set(t2, e2) : this.unpackedTextureDataCache.set(t2, e2);
          }
          dispose() {
            this.programManager.dispose(), this.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((t2) => this.textureManager.releaseTexture(t2, true)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((t2) => this.textureManager.releaseTexture(t2, true)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
          }
          resolve(t2, e2, n2) {
            const r2 = (0, i.resolveOperator)(t2, e2, a.WEBGL_OP_RESOLVE_RULES);
            return { impl: r2.opImpl, context: r2.opInit ? r2.opInit(t2, n2) : t2 };
          }
        };
      }, 7769: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Uint8DataEncoder = e.RGBAFloatDataEncoder = e.RedFloat32DataEncoder = void 0;
        const r = n(6231);
        e.RedFloat32DataEncoder = class {
          constructor(t2, e2 = 1) {
            if (1 === e2) this.internalFormat = t2.R32F, this.format = t2.RED, this.textureType = t2.FLOAT, this.channelSize = e2;
            else {
              if (4 !== e2) throw new Error(`Invalid number of channels: ${e2}`);
              this.internalFormat = t2.RGBA32F, this.format = t2.RGBA, this.textureType = t2.FLOAT, this.channelSize = e2;
            }
          }
          encode(t2, e2) {
            let n2, i;
            return t2.constructor !== Float32Array && (r.Logger.warning("Encoder", "data was not of type Float32; creating new Float32Array"), i = new Float32Array(t2)), e2 * this.channelSize > t2.length ? (r.Logger.warning("Encoder", "Source data too small. Allocating larger array"), i = t2, n2 = this.allocate(e2 * this.channelSize), i.forEach((t3, e3) => n2[e3] = t3)) : (i = t2, n2 = i), n2;
          }
          allocate(t2) {
            return new Float32Array(4 * t2);
          }
          decode(t2, e2) {
            return 1 === this.channelSize ? t2.filter((t3, e3) => e3 % 4 == 0).subarray(0, e2) : t2.subarray(0, e2);
          }
        }, e.RGBAFloatDataEncoder = class {
          constructor(t2, e2 = 1, n2) {
            if (1 !== e2 && 4 !== e2) throw new Error(`Invalid number of channels: ${e2}`);
            this.internalFormat = t2.RGBA, this.format = t2.RGBA, this.channelSize = e2, this.textureType = n2 || t2.FLOAT;
          }
          encode(t2, e2) {
            let n2 = t2;
            return 1 === this.channelSize && (r.Logger.verbose("Encoder", "Exploding into a larger array"), n2 = this.allocate(e2), t2.forEach((t3, e3) => n2[4 * e3] = t3)), n2;
          }
          allocate(t2) {
            return new Float32Array(4 * t2);
          }
          decode(t2, e2) {
            return 1 === this.channelSize ? t2.filter((t3, e3) => e3 % 4 == 0).subarray(0, e2) : t2.subarray(0, e2);
          }
        }, e.Uint8DataEncoder = class {
          constructor(t2, e2 = 1) {
            if (this.channelSize = 4, 1 === e2) this.internalFormat = t2.ALPHA, this.format = t2.ALPHA, this.textureType = t2.UNSIGNED_BYTE, this.channelSize = e2;
            else {
              if (4 !== e2) throw new Error(`Invalid number of channels: ${e2}`);
              this.internalFormat = t2.RGBA, this.format = t2.RGBA, this.textureType = t2.UNSIGNED_BYTE, this.channelSize = e2;
            }
          }
          encode(t2, e2) {
            return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
          }
          allocate(t2) {
            return new Uint8Array(t2 * this.channelSize);
          }
          decode(t2, e2) {
            if (t2 instanceof Uint8Array) return t2.subarray(0, e2);
            throw new Error(`Invalid array type: ${t2.constructor}`);
          }
        };
      }, 7859: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.getBatchDim = e.sizeToSquarishShape = e.getRowsCols = e.sizeFromShape = e.isInt = e.parseAxisParam = e.squeezeShape = e.PreferLogicalStrategy = e.AlwaysKeepOriginalSizeStrategy = void 0;
        const r = n(6231), i = n(2517);
        function o(t2, e2) {
          const n2 = [], r2 = [], i2 = null != e2 && Array.isArray(e2) && 0 === e2.length, o2 = null == e2 || i2 ? null : a(e2, t2).sort();
          let s2 = 0;
          for (let e3 = 0; e3 < t2.length; ++e3) {
            if (null != o2) {
              if (o2[s2] === e3 && 1 !== t2[e3]) throw new Error(`Can't squeeze axis ${e3} since its dim '${t2[e3]}' is not 1`);
              (null == o2[s2] || o2[s2] > e3) && 1 === t2[e3] && (n2.push(t2[e3]), r2.push(e3)), o2[s2] <= e3 && s2++;
            }
            1 !== t2[e3] && (n2.push(t2[e3]), r2.push(e3));
          }
          return { newShape: n2, keptDims: r2 };
        }
        __name(o, "o");
        function a(t2, e2) {
          const n2 = e2.length;
          return t2 = null == t2 ? e2.map((t3, e3) => e3) : [].concat(t2), (0, i.assert)(t2.every((t3) => t3 >= -n2 && t3 < n2), () => `All values in axis param must be in range [-${n2}, ${n2}) but got axis ${t2}`), (0, i.assert)(t2.every(s), () => `All values in axis param must be integers but got axis ${t2}`), t2.map((t3) => t3 < 0 ? n2 + t3 : t3);
        }
        __name(a, "a");
        function s(t2) {
          return t2 % 1 == 0;
        }
        __name(s, "s");
        function u(t2) {
          if (0 === t2.length) return 1;
          let e2 = t2[0];
          for (let n2 = 1; n2 < t2.length; n2++) e2 *= t2[n2];
          return e2;
        }
        __name(u, "u");
        function c(t2) {
          const e2 = Math.ceil(Math.sqrt(t2));
          return [e2, Math.ceil(t2 / e2)];
        }
        __name(c, "c");
        e.AlwaysKeepOriginalSizeStrategy = class {
          constructor(t2) {
            this.maxTextureSize = t2;
          }
          computeTextureWH(t2, e2) {
            if (0 === t2.length) return [1, 1];
            const n2 = this.maxTextureSize;
            if (e2 && void 0 !== e2.breakAxis) {
              const i3 = e2.breakAxis >= t2.length ? 1 : t2.slice(e2.breakAxis).reduce((t3, e3) => t3 * e3), o3 = e2.breakAxis <= 0 ? 1 : t2.slice(0, e2.breakAxis).reduce((t3, e3) => t3 * e3);
              if (!(i3 > n2 || o3 > n2)) return [i3, o3];
              r.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${t2}, breakAxis:${e2.breakAxis}`);
            }
            const i2 = t2.reduce((t3, e3) => t3 * e3);
            let o2 = Math.floor(Math.sqrt(i2));
            for (; o2 < n2 && o2 < i2 && i2 % o2 != 0; o2++) ;
            if (o2 >= n2 || i2 % o2 != 0) throw new Error(`The given dimensions are outside this GPU's boundaries: ${t2}`);
            return [o2, i2 / o2];
          }
        }, e.PreferLogicalStrategy = class {
          constructor(t2) {
            this.maxTextureSize = t2;
          }
          computeTextureWH(t2, e2) {
            const n2 = this.computeTexture(t2, e2);
            return e2 && e2.isPacked && (n2[0] /= 2, n2[1] /= 2), e2 && e2.reverseWH ? [n2[1], n2[0]] : n2;
          }
          computeTexture(t2, e2) {
            const n2 = e2 && e2.isPacked;
            if (0 === t2.length) return n2 ? [2, 2] : [1, 1];
            let i2 = this.maxTextureSize;
            if (e2 && void 0 !== e2.breakAxis) {
              const n3 = e2.breakAxis >= t2.length ? 1 : t2.slice(e2.breakAxis).reduce((t3, e3) => t3 * e3), o2 = e2.breakAxis <= 0 ? 1 : t2.slice(0, e2.breakAxis).reduce((t3, e3) => t3 * e3);
              if (!(n3 > i2 || o2 > i2)) return [n3, o2];
              r.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${t2}, breakAxis:${e2.breakAxis}`);
            }
            let a2 = t2.slice(0);
            if (n2 && (i2 *= 2, a2 = a2.map((t3, e3) => e3 >= a2.length - 2 ? a2[e3] % 2 == 0 ? a2[e3] : a2[e3] + 1 : a2[e3]), 1 === a2.length && (a2 = [2, a2[0]])), 2 !== a2.length) {
              const t3 = o(a2);
              a2 = t3.newShape;
            }
            const s2 = u(a2);
            return a2.length <= 1 && s2 <= i2 ? [1, s2] : 2 === a2.length && a2[0] <= i2 && a2[1] <= i2 ? a2 : 3 === a2.length && a2[0] * a2[1] <= i2 && a2[2] <= i2 ? [a2[0] * a2[1], a2[2]] : 3 === a2.length && a2[0] <= i2 && a2[1] * a2[2] <= i2 ? [a2[0], a2[1] * a2[2]] : 4 === a2.length && a2[0] * a2[1] * a2[2] <= i2 && a2[3] <= i2 ? [a2[0] * a2[1] * a2[2], a2[3]] : 4 === a2.length && a2[0] <= i2 && a2[1] * a2[2] * a2[3] <= i2 ? [a2[0], a2[1] * a2[2] * a2[3]] : n2 ? c(s2 / 4).map((t3) => 2 * t3) : c(s2);
          }
        }, e.squeezeShape = o, e.parseAxisParam = a, e.isInt = s, e.sizeFromShape = u, e.getRowsCols = function(t2) {
          if (0 === t2.length) throw Error("Cannot get rows and columns of an empty shape array.");
          return [t2.length > 1 ? t2[t2.length - 2] : 1, t2[t2.length - 1]];
        }, e.sizeToSquarishShape = c, e.getBatchDim = function(t2, e2 = 2) {
          return u(t2.slice(0, t2.length - e2));
        };
      }, 4057: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createTextureLayoutFromShape = e.calculateTextureWidthAndHeight = e.createTextureLayoutFromTextureType = void 0;
        const r = n(2517), i = n(2039);
        e.createTextureLayoutFromTextureType = (t2, n2, r2) => {
          const o = r2 === i.TextureType.unpacked || r2 === i.TextureType.unpackedReversed ? 1 : 4, a = r2 === i.TextureType.packed, s = r2 === i.TextureType.unpackedReversed || r2 === i.TextureType.packed, u = r2 === i.TextureType.packedLastDimension ? n2.length - 1 : void 0, c = r2 === i.TextureType.packedLastDimension ? n2.map((t3, e2) => e2 === n2.length - 1 ? 4 * t3 : t3) : void 0;
          return (0, e.createTextureLayoutFromShape)(t2, n2, o, c, { isPacked: a, reverseWH: s, breakAxis: u });
        }, e.calculateTextureWidthAndHeight = (t2, n2, r2) => {
          const i2 = (0, e.createTextureLayoutFromTextureType)(t2, n2, r2);
          return [i2.width, i2.height];
        }, e.createTextureLayoutFromShape = (t2, e2, n2 = 1, i2, o) => {
          const a = !(!o || !o.isPacked), [s, u] = t2.computeTextureWH(a && i2 || e2, o), c = e2.length;
          let l = e2.slice(0);
          if (0 === c && (l = [1]), 1 === n2) i2 = e2;
          else if (a) {
            if (4 !== n2) throw new Error("a packed texture must be 4-channel");
            i2 = e2, c > 0 && (l[c - 1] = Math.ceil(l[c - 1] / 2)), c > 1 && (l[c - 2] = Math.ceil(l[c - 2] / 2));
          } else if (!i2) throw new Error("Unpacked shape is needed when using channels > 1");
          return { width: s, height: u, channels: n2, isPacked: a, shape: l, strides: r.ShapeUtil.computeStrides(l), unpackedShape: i2, reversedWH: o && o.reverseWH };
        };
      }, 5702: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.TextureManager = void 0;
        const r = n(6231);
        e.TextureManager = class {
          constructor(t2, e2, n2, r2) {
            this.glContext = t2, this.layoutStrategy = e2, this.profiler = n2, this.config = r2, this.pendingRead = /* @__PURE__ */ new Map(), r2.reuseTextures && (this.inUseTextures = /* @__PURE__ */ new Map(), this.idleTextures = /* @__PURE__ */ new Map(), this.textureLookup = /* @__PURE__ */ new Map());
          }
          createTextureFromLayout(t2, e2, n2, i) {
            const o = this.toEncoderType(t2), a = this.glContext.getEncoder(o, e2.channels || 1, i);
            if (e2.isPacked && 1 === i) throw new Error("not implemented");
            const s = e2.width, u = e2.height;
            let c, l;
            if (this.config.reuseTextures) {
              c = `${s}x${u}_${a.format}_${a.internalFormat}_${a.textureType}`, l = this.inUseTextures.get(c), l || (l = [], this.inUseTextures.set(c, l));
              const e3 = this.idleTextures.get(c);
              if (e3 && e3.length > 0) {
                const r2 = e3.pop();
                return l.push(r2), 1 === i && this.glContext.updateTexture(r2, s, u, a, this.toTextureData(t2, n2)), r2;
              }
            }
            r.Logger.verbose("TextureManager", `Creating new texture of size ${e2.width}x${e2.height}`);
            const p = this.glContext.allocateTexture(s, u, a, this.toTextureData(t2, n2));
            return this.config.reuseTextures && (l.push(p), this.textureLookup.set(p, c)), p;
          }
          readTexture(t2, e2, n2) {
            return n2 || (n2 = 1), this.profiler.event("backend", "TextureManager.readTexture", () => {
              const r2 = t2.shape.reduce((t3, e3) => t3 * e3) * n2, i = this.glContext.readTexture(t2.texture, t2.width, t2.height, r2, this.toEncoderType(e2), n2);
              return this.toTensorData(e2, i);
            });
          }
          async readTextureAsync(t2, e2, n2) {
            const r2 = t2.tensor.dataId;
            if (n2 || (n2 = 1), this.pendingRead.has(r2)) {
              const t3 = this.pendingRead.get(r2);
              return new Promise((e3) => null == t3 ? void 0 : t3.push(e3));
            }
            return this.profiler.event("backend", "TextureManager.readTextureAsync", async () => {
              this.pendingRead.set(r2, []);
              const i = t2.shape.reduce((t3, e3) => t3 * e3) * n2;
              await this.glContext.createAndWaitForFence();
              const o = this.glContext.readTexture(t2.texture, t2.width, t2.height, i, this.toEncoderType(e2), n2), a = this.toTensorData(e2, o), s = this.pendingRead.get(r2);
              return this.pendingRead.delete(r2), null == s || s.forEach((t3) => t3(a)), a;
            });
          }
          readUint8TextureAsFloat(t2) {
            return this.profiler.event("backend", "TextureManager.readUint8TextureAsFloat", () => {
              const e2 = t2.shape.reduce((t3, e3) => t3 * e3), n2 = this.glContext.readTexture(t2.texture, t2.width, t2.height, 4 * e2, "byte", 4);
              return new Float32Array(n2.buffer, n2.byteOffset, e2);
            });
          }
          releaseTexture(t2, e2) {
            let n2;
            if (this.config.reuseTextures && (n2 = this.textureLookup.get(t2.texture), n2)) {
              e2 && this.textureLookup.delete(n2);
              const r2 = this.inUseTextures.get(n2);
              if (r2) {
                const e3 = r2.indexOf(t2.texture);
                if (-1 !== e3) {
                  r2.splice(e3, 1);
                  let i = this.idleTextures.get(n2);
                  i || (i = [], this.idleTextures.set(n2, i)), i.push(t2.texture);
                }
              }
            }
            n2 && !e2 || (r.Logger.verbose("TextureManager", `Deleting texture of size ${t2.width}x${t2.height}`), this.glContext.deleteTexture(t2.texture));
          }
          toTensorData(t2, e2) {
            switch (t2) {
              case "int16":
                return e2 instanceof Int16Array ? e2 : Int16Array.from(e2);
              case "int32":
                return e2 instanceof Int32Array ? e2 : Int32Array.from(e2);
              case "int8":
                return e2 instanceof Int8Array ? e2 : Int8Array.from(e2);
              case "uint16":
                return e2 instanceof Uint16Array ? e2 : Uint16Array.from(e2);
              case "uint32":
                return e2 instanceof Uint32Array ? e2 : Uint32Array.from(e2);
              case "uint8":
              case "bool":
                return e2 instanceof Uint8Array ? e2 : Uint8Array.from(e2);
              case "float32":
                return e2 instanceof Float32Array ? e2 : Float32Array.from(e2);
              case "float64":
                return e2 instanceof Float64Array ? e2 : Float64Array.from(e2);
              default:
                throw new Error(`TensorData type ${t2} is not supported`);
            }
          }
          toTextureData(t2, e2) {
            if (e2) return e2 instanceof Float32Array ? e2 : new Float32Array(e2);
          }
          toEncoderType(t2) {
            return "float";
          }
          clearActiveTextures() {
            this.glContext.clearActiveTextures();
          }
        };
      }, 2039: (t, e) => {
        "use strict";
        var n;
        Object.defineProperty(e, "__esModule", { value: true }), e.TextureType = void 0, (n = e.TextureType || (e.TextureType = {}))[n.unpacked = 0] = "unpacked", n[n.unpackedReversed = 1] = "unpackedReversed", n[n.packed = 2] = "packed", n[n.downloadUint8AsFloat = 3] = "downloadUint8AsFloat", n[n.packedLastDimension = 4] = "packedLastDimension";
      }, 9390: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.getGlChannels = e.getCoordsDataType = e.getSqueezedParams = e.squeezeInputShape = e.generateShaderFuncNameFromInputSamplerNameAtOutCoords = e.generateShaderFuncNameFromInputSamplerName = e.repeatedTry = e.getPackedShape = void 0;
        const r = n(2517);
        e.getPackedShape = function(t2) {
          const e2 = t2.length;
          return t2.slice(0, e2 - 1).concat(t2[e2 - 1] / 4);
        }, e.repeatedTry = async function(t2, e2 = (t3) => 0, n2) {
          return new Promise((r2, i) => {
            let o = 0;
            const a = /* @__PURE__ */ __name(() => {
              if (t2()) return void r2();
              o++;
              const s = e2(o);
              null != n2 && o >= n2 ? i() : setTimeout(a, s);
            }, "a");
            a();
          });
        }, e.generateShaderFuncNameFromInputSamplerName = function(t2) {
          return (0, r.assert)(void 0 !== t2 && 0 !== t2.length, () => "empty string found for sampler name"), "get" + t2.charAt(0).toUpperCase() + t2.slice(1);
        }, e.generateShaderFuncNameFromInputSamplerNameAtOutCoords = function(t2) {
          return (0, r.assert)(void 0 !== t2 && 0 !== t2.length, () => "empty string found for sampler name"), "get" + t2.charAt(0).toUpperCase() + t2.slice(1) + "AtOutCoords";
        }, e.squeezeInputShape = function(t2, e2) {
          let n2 = JSON.parse(JSON.stringify(t2));
          return n2 = e2, n2;
        }, e.getSqueezedParams = function(t2, e2) {
          return e2.map((e3) => t2[e3]).join(", ");
        }, e.getCoordsDataType = function(t2) {
          if (t2 <= 1) return "int";
          if (2 === t2) return "ivec2";
          if (3 === t2) return "ivec3";
          if (4 === t2) return "ivec4";
          if (5 === t2) return "ivec5";
          if (6 === t2) return "ivec6";
          throw Error(`GPU for rank ${t2} is not yet supported`);
        }, e.getGlChannels = function(t2 = 6) {
          return ["x", "y", "z", "w", "u", "v"].slice(0, t2);
        };
      }, 7305: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.createNewWebGLContext = e.createWebGLContext = void 0;
        const r = n(6231), i = n(1713), o = {};
        function a(t2) {
          const e2 = function() {
            if ("undefined" == typeof document) {
              if ("undefined" == typeof OffscreenCanvas) throw new TypeError("failed to create canvas: OffscreenCanvas is not supported");
              return new OffscreenCanvas(1, 1);
            }
            const t3 = document.createElement("canvas");
            return t3.width = 1, t3.height = 1, t3;
          }();
          let n2;
          const o2 = { alpha: false, depth: false, antialias: false, stencil: false, preserveDrawingBuffer: false, premultipliedAlpha: false, failIfMajorPerformanceCaveat: false };
          if ((!t2 || "webgl2" === t2) && (n2 = e2.getContext("webgl2", o2), n2)) try {
            return new i.WebGLContext(n2, 2);
          } catch (t3) {
            r.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl2'. Error: ${t3}`);
          }
          if ((!t2 || "webgl" === t2) && (n2 = e2.getContext("webgl", o2) || e2.getContext("experimental-webgl", o2), n2)) try {
            return new i.WebGLContext(n2, 1);
          } catch (t3) {
            r.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${t3}`);
          }
          throw new Error("WebGL is not supported");
        }
        __name(a, "a");
        e.createWebGLContext = /* @__PURE__ */ __name(function t2(e2) {
          let n2;
          e2 && "webgl2" !== e2 || !("webgl2" in o) ? e2 && "webgl" !== e2 || !("webgl" in o) || (n2 = o.webgl) : n2 = o.webgl2, n2 = n2 || a(e2), e2 = e2 || 1 === n2.version ? "webgl" : "webgl2";
          const r2 = n2.gl;
          return o[e2] = n2, r2.isContextLost() ? (delete o[e2], t2(e2)) : (r2.disable(r2.DEPTH_TEST), r2.disable(r2.STENCIL_TEST), r2.disable(r2.BLEND), r2.disable(r2.DITHER), r2.disable(r2.POLYGON_OFFSET_FILL), r2.disable(r2.SAMPLE_COVERAGE), r2.enable(r2.SCISSOR_TEST), r2.enable(r2.CULL_FACE), r2.cullFace(r2.BACK), n2);
        }, "t"), e.createNewWebGLContext = a;
      }, 1713: function(t, e, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2);
          var i2 = Object.getOwnPropertyDescriptor(e2, n2);
          i2 && !("get" in i2 ? !e2.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return e2[n2];
          }, "get") }), Object.defineProperty(t2, r2, i2);
        } : function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2), t2[r2] = e2[n2];
        }), i = this && this.__setModuleDefault || (Object.create ? function(t2, e2) {
          Object.defineProperty(t2, "default", { enumerable: true, value: e2 });
        } : function(t2, e2) {
          t2.default = e2;
        }), o = this && this.__importStar || function(t2) {
          if (t2 && t2.__esModule) return t2;
          var e2 = {};
          if (null != t2) for (var n2 in t2) "default" !== n2 && Object.prototype.hasOwnProperty.call(t2, n2) && r(e2, t2, n2);
          return i(e2, t2), e2;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.WebGLContext = e.linearSearchLastTrue = void 0;
        const a = n(1670), s = o(n(7769)), u = n(9390);
        function c(t2) {
          let e2 = 0;
          for (; e2 < t2.length && t2[e2](); ++e2) ;
          return e2 - 1;
        }
        __name(c, "c");
        e.linearSearchLastTrue = c, e.WebGLContext = class {
          constructor(t2, e2) {
            this.frameBufferBound = false, this.itemsToPoll = [], this.gl = t2, this.version = e2, this.getExtensions(), this.vertexbuffer = this.createVertexbuffer(), this.framebuffer = this.createFramebuffer(), this.queryVitalParameters();
          }
          allocateTexture(t2, e2, n2, r2) {
            const i2 = this.gl, o2 = i2.createTexture();
            i2.bindTexture(i2.TEXTURE_2D, o2), i2.texParameteri(i2.TEXTURE_2D, i2.TEXTURE_MIN_FILTER, i2.NEAREST), i2.texParameteri(i2.TEXTURE_2D, i2.TEXTURE_MAG_FILTER, i2.NEAREST), i2.texParameteri(i2.TEXTURE_2D, i2.TEXTURE_WRAP_S, i2.CLAMP_TO_EDGE), i2.texParameteri(i2.TEXTURE_2D, i2.TEXTURE_WRAP_T, i2.CLAMP_TO_EDGE);
            const a2 = r2 ? n2.encode(r2, t2 * e2) : null;
            return i2.texImage2D(i2.TEXTURE_2D, 0, n2.internalFormat, t2, e2, 0, n2.format, n2.textureType, a2), this.checkError(), o2;
          }
          updateTexture(t2, e2, n2, r2, i2) {
            const o2 = this.gl;
            o2.bindTexture(o2.TEXTURE_2D, t2);
            const a2 = r2.encode(i2, e2 * n2);
            o2.texSubImage2D(o2.TEXTURE_2D, 0, 0, 0, e2, n2, r2.format, r2.textureType, a2), this.checkError();
          }
          attachFramebuffer(t2, e2, n2) {
            const r2 = this.gl;
            r2.bindTexture(r2.TEXTURE_2D, t2), r2.bindFramebuffer(r2.FRAMEBUFFER, this.framebuffer), r2.framebufferTexture2D(r2.FRAMEBUFFER, r2.COLOR_ATTACHMENT0, r2.TEXTURE_2D, t2, 0), this.checkError(), r2.viewport(0, 0, e2, n2), r2.scissor(0, 0, e2, n2);
          }
          readTexture(t2, e2, n2, r2, i2, o2) {
            const a2 = this.gl;
            o2 || (o2 = 1), this.frameBufferBound || this.attachFramebuffer(t2, e2, n2);
            const s2 = this.getEncoder(i2, o2), u2 = s2.allocate(e2 * n2);
            return a2.bindTexture(a2.TEXTURE_2D, t2), a2.framebufferTexture2D(a2.FRAMEBUFFER, a2.COLOR_ATTACHMENT0, a2.TEXTURE_2D, t2, 0), a2.readPixels(0, 0, e2, n2, a2.RGBA, s2.textureType, u2), this.checkError(), s2.decode(u2, r2);
          }
          isFramebufferReady() {
            return true;
          }
          getActiveTexture() {
            const t2 = this.gl;
            return "TEXTURE" + (t2.getParameter(this.gl.ACTIVE_TEXTURE) - t2.TEXTURE0);
          }
          getTextureBinding() {
            return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
          }
          getFramebufferBinding() {
            return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
          }
          setVertexAttributes(t2, e2) {
            const n2 = this.gl;
            n2.vertexAttribPointer(t2, 3, n2.FLOAT, false, 20, 0), n2.enableVertexAttribArray(t2), -1 !== e2 && (n2.vertexAttribPointer(e2, 2, n2.FLOAT, false, 20, 12), n2.enableVertexAttribArray(e2)), this.checkError();
          }
          createProgram(t2, e2) {
            const n2 = this.gl, r2 = n2.createProgram();
            return n2.attachShader(r2, t2), n2.attachShader(r2, e2), n2.linkProgram(r2), r2;
          }
          compileShader(t2, e2) {
            const n2 = this.gl, r2 = n2.createShader(e2);
            if (!r2) throw new Error(`createShader() returned null with type ${e2}`);
            if (n2.shaderSource(r2, t2), n2.compileShader(r2), false === n2.getShaderParameter(r2, n2.COMPILE_STATUS)) throw new Error(`Failed to compile shader: ${n2.getShaderInfoLog(r2)}
Shader source:
${t2}`);
            return r2;
          }
          deleteShader(t2) {
            this.gl.deleteShader(t2);
          }
          bindTextureToUniform(t2, e2, n2) {
            const r2 = this.gl;
            r2.activeTexture(r2.TEXTURE0 + e2), this.checkError(), r2.bindTexture(r2.TEXTURE_2D, t2), this.checkError(), r2.uniform1i(n2, e2), this.checkError();
          }
          draw() {
            this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4), this.checkError();
          }
          checkError() {
            if (a.env.debug) {
              const t2 = this.gl, e2 = t2.getError();
              let n2 = "";
              switch (e2) {
                case t2.NO_ERROR:
                  return;
                case t2.INVALID_ENUM:
                  n2 = "INVALID_ENUM";
                  break;
                case t2.INVALID_VALUE:
                  n2 = "INVALID_VALUE";
                  break;
                case t2.INVALID_OPERATION:
                  n2 = "INVALID_OPERATION";
                  break;
                case t2.INVALID_FRAMEBUFFER_OPERATION:
                  n2 = "INVALID_FRAMEBUFFER_OPERATION";
                  break;
                case t2.OUT_OF_MEMORY:
                  n2 = "OUT_OF_MEMORY";
                  break;
                case t2.CONTEXT_LOST_WEBGL:
                  n2 = "CONTEXT_LOST_WEBGL";
                  break;
                default:
                  n2 = `Unknown WebGL Error: ${e2.toString(16)}`;
              }
              throw new Error(n2);
            }
          }
          deleteTexture(t2) {
            this.gl.deleteTexture(t2);
          }
          deleteProgram(t2) {
            this.gl.deleteProgram(t2);
          }
          getEncoder(t2, e2, n2 = 0) {
            if (2 === this.version) return new s.RedFloat32DataEncoder(this.gl, e2);
            switch (t2) {
              case "float":
                return 1 === n2 || this.isRenderFloat32Supported ? new s.RGBAFloatDataEncoder(this.gl, e2) : new s.RGBAFloatDataEncoder(this.gl, e2, this.textureHalfFloatExtension.HALF_FLOAT_OES);
              case "int":
                throw new Error("not implemented");
              case "byte":
                return new s.Uint8DataEncoder(this.gl, e2);
              default:
                throw new Error(`Invalid dataType: ${t2}`);
            }
          }
          clearActiveTextures() {
            const t2 = this.gl;
            for (let e2 = 0; e2 < this.maxTextureImageUnits; ++e2) t2.activeTexture(t2.TEXTURE0 + e2), t2.bindTexture(t2.TEXTURE_2D, null);
          }
          dispose() {
            if (this.disposed) return;
            const t2 = this.gl;
            t2.bindFramebuffer(t2.FRAMEBUFFER, null), t2.deleteFramebuffer(this.framebuffer), t2.bindBuffer(t2.ARRAY_BUFFER, null), t2.deleteBuffer(this.vertexbuffer), t2.bindBuffer(t2.ELEMENT_ARRAY_BUFFER, null), t2.finish(), this.disposed = true;
          }
          createDefaultGeometry() {
            return new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
          }
          createVertexbuffer() {
            const t2 = this.gl, e2 = t2.createBuffer();
            if (!e2) throw new Error("createBuffer() returned null");
            const n2 = this.createDefaultGeometry();
            return t2.bindBuffer(t2.ARRAY_BUFFER, e2), t2.bufferData(t2.ARRAY_BUFFER, n2, t2.STATIC_DRAW), this.checkError(), e2;
          }
          createFramebuffer() {
            const t2 = this.gl.createFramebuffer();
            if (!t2) throw new Error("createFramebuffer returned null");
            return t2;
          }
          queryVitalParameters() {
            const t2 = this.gl;
            if (this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer(), this.isRenderFloat32Supported = this.checkRenderFloat32(), this.isFloat32DownloadSupported = this.checkFloat32Download(), 1 === this.version && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) throw new Error("both float32 and float16 TextureType are not supported");
            this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend(), this.maxTextureSize = t2.getParameter(t2.MAX_TEXTURE_SIZE), this.maxTextureImageUnits = t2.getParameter(t2.MAX_TEXTURE_IMAGE_UNITS), this.version;
          }
          getExtensions() {
            2 === this.version ? (this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float"), this.disjointTimerQueryWebgl2Extension = this.gl.getExtension("EXT_disjoint_timer_query_webgl2")) : (this.textureFloatExtension = this.gl.getExtension("OES_texture_float"), this.textureHalfFloatExtension = this.gl.getExtension("OES_texture_half_float"));
          }
          checkFloatTextureAttachableToFrameBuffer() {
            const t2 = this.gl, e2 = t2.createTexture();
            t2.bindTexture(t2.TEXTURE_2D, e2);
            const n2 = 2 === this.version ? t2.RGBA32F : t2.RGBA;
            t2.texImage2D(t2.TEXTURE_2D, 0, n2, 1, 1, 0, t2.RGBA, t2.FLOAT, null);
            const r2 = t2.createFramebuffer();
            t2.bindFramebuffer(t2.FRAMEBUFFER, r2), t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, e2, 0);
            const i2 = t2.checkFramebufferStatus(t2.FRAMEBUFFER) === t2.FRAMEBUFFER_COMPLETE;
            return t2.bindTexture(t2.TEXTURE_2D, null), t2.bindFramebuffer(t2.FRAMEBUFFER, null), t2.deleteTexture(e2), t2.deleteFramebuffer(r2), i2;
          }
          checkRenderFloat32() {
            if (2 === this.version) {
              if (!this.colorBufferFloatExtension) return false;
            } else if (!this.textureFloatExtension) return false;
            return this.isFloatTextureAttachableToFrameBuffer;
          }
          checkFloat32Download() {
            if (2 === this.version) {
              if (!this.colorBufferFloatExtension) return false;
            } else {
              if (!this.textureFloatExtension) return false;
              if (!this.gl.getExtension("WEBGL_color_buffer_float")) return false;
            }
            return this.isFloatTextureAttachableToFrameBuffer;
          }
          checkFloat32Blend() {
            const t2 = this.gl;
            let e2, n2, r2, i2, o2;
            try {
              e2 = t2.createTexture(), n2 = t2.createFramebuffer(), t2.bindTexture(t2.TEXTURE_2D, e2);
              const a2 = 2 === this.version ? t2.RGBA32F : t2.RGBA;
              return t2.texImage2D(t2.TEXTURE_2D, 0, a2, 1, 1, 0, t2.RGBA, t2.FLOAT, null), t2.bindFramebuffer(t2.FRAMEBUFFER, n2), t2.framebufferTexture2D(t2.FRAMEBUFFER, t2.COLOR_ATTACHMENT0, t2.TEXTURE_2D, e2, 0), t2.enable(t2.BLEND), r2 = t2.createShader(t2.VERTEX_SHADER), !!r2 && (t2.shaderSource(r2, "void main(){}"), t2.compileShader(r2), i2 = t2.createShader(t2.FRAGMENT_SHADER), !!i2 && (t2.shaderSource(i2, "precision highp float;void main(){gl_FragColor=vec4(0.5);}"), t2.compileShader(i2), o2 = t2.createProgram(), !!o2 && (t2.attachShader(o2, r2), t2.attachShader(o2, i2), t2.linkProgram(o2), t2.useProgram(o2), t2.drawArrays(t2.POINTS, 0, 1), t2.getError() === t2.NO_ERROR)));
            } finally {
              t2.disable(t2.BLEND), o2 && t2.deleteProgram(o2), r2 && t2.deleteShader(r2), i2 && t2.deleteShader(i2), n2 && (t2.bindFramebuffer(t2.FRAMEBUFFER, null), t2.deleteFramebuffer(n2)), e2 && (t2.bindTexture(t2.TEXTURE_2D, null), t2.deleteTexture(e2));
            }
          }
          beginTimer() {
            if (2 === this.version && this.disjointTimerQueryWebgl2Extension) {
              const t2 = this.gl, e2 = this.disjointTimerQueryWebgl2Extension, n2 = t2.createQuery();
              return t2.beginQuery(e2.TIME_ELAPSED_EXT, n2), n2;
            }
            throw new Error("WebGL1 profiling currently not supported.");
          }
          endTimer() {
            if (2 !== this.version || !this.disjointTimerQueryWebgl2Extension) throw new Error("WebGL1 profiling currently not supported");
            {
              const t2 = this.gl, e2 = this.disjointTimerQueryWebgl2Extension;
              t2.endQuery(e2.TIME_ELAPSED_EXT);
            }
          }
          isTimerResultAvailable(t2) {
            let e2 = false, n2 = false;
            if (2 !== this.version || !this.disjointTimerQueryWebgl2Extension) throw new Error("WebGL1 profiling currently not supported");
            {
              const r2 = this.gl, i2 = this.disjointTimerQueryWebgl2Extension;
              e2 = r2.getQueryParameter(t2, r2.QUERY_RESULT_AVAILABLE), n2 = r2.getParameter(i2.GPU_DISJOINT_EXT);
            }
            return e2 && !n2;
          }
          getTimerResult(t2) {
            let e2 = 0;
            if (2 !== this.version) throw new Error("WebGL1 profiling currently not supported");
            {
              const n2 = this.gl;
              e2 = n2.getQueryParameter(t2, n2.QUERY_RESULT), n2.deleteQuery(t2);
            }
            return e2 / 1e6;
          }
          async waitForQueryAndGetTime(t2) {
            return await (0, u.repeatedTry)(() => this.isTimerResultAvailable(t2)), this.getTimerResult(t2);
          }
          async createAndWaitForFence() {
            const t2 = this.createFence(this.gl);
            return this.pollFence(t2);
          }
          createFence(t2) {
            let e2;
            const n2 = t2, r2 = n2.fenceSync(n2.SYNC_GPU_COMMANDS_COMPLETE, 0);
            return t2.flush(), e2 = null === r2 ? () => true : () => {
              const t3 = n2.clientWaitSync(r2, 0, 0);
              return t3 === n2.ALREADY_SIGNALED || t3 === n2.CONDITION_SATISFIED;
            }, { query: r2, isFencePassed: e2 };
          }
          async pollFence(t2) {
            return new Promise((e2) => {
              this.addItemToPoll(() => t2.isFencePassed(), () => e2());
            });
          }
          pollItems() {
            const t2 = c(this.itemsToPoll.map((t3) => t3.isDoneFn));
            for (let e2 = 0; e2 <= t2; ++e2) {
              const { resolveFn: t3 } = this.itemsToPoll[e2];
              t3();
            }
            this.itemsToPoll = this.itemsToPoll.slice(t2 + 1);
          }
          async addItemToPoll(t2, e2) {
            this.itemsToPoll.push({ isDoneFn: t2, resolveFn: e2 }), this.itemsToPoll.length > 1 || await (0, u.repeatedTry)(() => (this.pollItems(), 0 === this.itemsToPoll.length));
          }
        };
      }, 1036: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.ExecutionPlan = void 0;
        const r = n(6231);
        class i {
          static {
            __name(this, "i");
          }
          constructor(t2, e2) {
            this.op = t2, this.node = e2;
          }
        }
        e.ExecutionPlan = class {
          constructor(t2, e2, n2) {
            this.graph = t2, this.profiler = n2, this.initialize(e2);
          }
          initialize(t2) {
            this.profiler.event("session", "ExecutionPlan.initialize", () => {
              const e2 = this.graph.getNodes();
              if (e2.length !== t2.length) throw new Error("The size of nodes and OPs do not match.");
              this._ops = t2.map((t3, n2) => new i(t3, e2[n2])), this.reset(), this._starter = [], this._ops.forEach((t3, e3) => {
                let n2 = true;
                for (const e4 of t3.node.inputs) if (!this._values[e4] && -1 === this.graph.getInputIndices().indexOf(e4)) {
                  n2 = false;
                  break;
                }
                n2 && this._starter.push(e3);
              });
            });
          }
          reset() {
            this._values = this.graph.getValues().map((t2) => t2.tensor);
          }
          async execute(t2, e2) {
            return this.profiler.event("session", "ExecutionPlan.execute", async () => {
              this.reset();
              const n2 = t2.createInferenceHandler(), i2 = this.graph.getInputIndices();
              if (e2.length !== i2.length) throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${e2.length} expected: ${i2.length}`);
              e2.forEach((t3, e3) => {
                const n3 = i2[e3];
                this._values[n3] = t3;
              });
              const o = this._starter.slice(0), a = this.graph.getValues(), s = this.graph.getNodes();
              let u = 0;
              for (; u < o.length; ) {
                const t3 = o[u++], e3 = this._ops[t3], i3 = e3.node.inputs.map((t4) => this._values[t4]);
                if (-1 !== i3.indexOf(void 0)) throw new Error(`unresolved input detected: op: ${e3.node}`);
                const c2 = i3;
                r.Logger.verbose("ExecPlan", `Runing op:${e3.node.name} (${c2.map((t4, n3) => `'${e3.node.inputs[n3]}': ${t4.type}[${t4.dims.join(",")}]`).join(", ")})`);
                const l = await this.profiler.event("node", e3.node.name, async () => e3.op.impl(n2, c2, e3.op.context));
                if (l.length !== e3.node.outputs.length) throw new Error("the size of output does not match model definition.");
                l.forEach((t4, n3) => {
                  const r2 = e3.node.outputs[n3];
                  if (this._values[r2]) throw new Error(`output [${r2}] already has value: op:${e3.node.name}`);
                  this._values[r2] = t4;
                });
                const p = /* @__PURE__ */ new Set();
                l.forEach((t4, n3) => {
                  const r2 = e3.node.outputs[n3];
                  for (const t5 of a[r2].to) {
                    const e4 = s[t5];
                    let n4 = true;
                    for (const t6 of e4.inputs) if (!this._values[t6]) {
                      n4 = false;
                      break;
                    }
                    n4 && p.add(t5);
                  }
                }), o.push(...p);
              }
              const c = [];
              for (let t3 = 0; t3 < this.graph.getOutputIndices().length; t3++) {
                const e3 = this.graph.getOutputIndices()[t3], n3 = this._values[e3];
                if (void 0 === n3) throw new Error(`required output [${e3}] does not have value`);
                0 === e3 ? await n3.getData() : n3.data, c.push(n3);
              }
              return r.Logger.verbose("ExecPlan", "disposing of inferenceHandler"), n2.dispose(), c;
            });
          }
        };
      }, 7070: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Graph = void 0;
        const r = n(1446), i = n(7778), o = n(9395), a = n(9162), s = n(2517);
        var u = o.onnxruntime.experimental.fbs;
        e.Graph = { from: /* @__PURE__ */ __name((t2, e2) => new p(t2, e2), "from") };
        class c {
          static {
            __name(this, "c");
          }
          constructor(t2) {
            this._from = void 0, this._to = [], this.tensor = void 0, this.type = void 0, t2 && (this.type = s.ProtoUtil.tensorValueTypeFromProto(t2.type.tensorType));
          }
          get from() {
            return this._from;
          }
          get to() {
            return this._to;
          }
        }
        class l {
          static {
            __name(this, "l");
          }
          constructor(t2, e2) {
            t2 instanceof r.onnx.NodeProto ? (this.name = t2.name, this.opType = t2.opType, this.attributes = new i.Attribute(t2.attribute)) : t2 instanceof u.Node && (this.name = null != e2 ? e2 : t2.name(), this.opType = t2.opType(), this.attributes = new i.Attribute(s.ProtoUtil.tensorAttributesFromORTFormat(t2))), this.inputs = [], this.outputs = [], this.executeNode = true;
          }
        }
        class p {
          static {
            __name(this, "p");
          }
          constructor(t2, e2) {
            if (!t2) throw new TypeError("graph is empty");
            this.buildGraph(t2), this.transformGraph(e2), this.checkIsAcyclic();
          }
          getInputIndices() {
            return this._allInputIndices;
          }
          getInputNames() {
            return this._allInputNames;
          }
          getOutputIndices() {
            return this._allOutputIndices;
          }
          getOutputNames() {
            return this._allOutputNames;
          }
          getValues() {
            return this._allData;
          }
          getNodes() {
            return this._nodes;
          }
          buildGraph(t2) {
            if (t2 instanceof r.onnx.GraphProto) this.buildGraphFromOnnxFormat(t2);
            else {
              if (!(t2 instanceof u.Graph)) throw new TypeError("Graph type is not supported.");
              this.buildGraphFromOrtFormat(t2);
            }
          }
          buildGraphFromOnnxFormat(t2) {
            const e2 = /* @__PURE__ */ new Map();
            this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
            const n2 = /* @__PURE__ */ new Map();
            if (!t2.input) throw new Error("missing information in graph: input");
            const r2 = [];
            for (const n3 of t2.input) {
              if (e2.has(n3.name)) throw new Error(`duplicated input name: ${n3.name}`);
              const t3 = this._allData.push(new c(n3)) - 1;
              e2.set(n3.name, t3), r2.push(n3.name);
            }
            if (!t2.initializer) throw new Error("missing information in graph: initializer");
            for (const n3 of t2.initializer) {
              let t3 = e2.get(n3.name);
              if (void 0 === t3) {
                const r3 = new c();
                r3.type = { shape: { dims: s.ProtoUtil.tensorDimsFromProto(n3.dims) }, tensorType: s.ProtoUtil.tensorDataTypeFromProto(n3.dataType) }, t3 = this._allData.push(r3) - 1, e2.set(n3.name, t3);
              }
              this._allData[t3]._from = -1, this._allData[t3].tensor = a.Tensor.fromProto(n3);
            }
            for (let t3 = 0; t3 < this._allData.length; t3++) this._allData[t3].tensor || (this._allInputIndices.push(t3), this._allInputNames.push(r2[t3]));
            if (!t2.output) throw new Error("missing information in graph: output");
            for (const n3 of t2.output) {
              if (e2.has(n3.name)) throw new Error(`duplicated output name: ${n3.name}`);
              const t3 = this._allData.push(new c(n3)) - 1;
              e2.set(n3.name, t3), this._allOutputIndices.push(t3), this._allOutputNames.push(n3.name);
            }
            if (!t2.node) throw new Error("missing information in graph: node");
            for (const e3 of t2.node) {
              if (!e3.name) for (let t4 = 0; ; t4++) {
                const r3 = `unnamed_${e3.opType}_${t4}`;
                if (!n2.has(r3)) {
                  e3.name = r3;
                  break;
                }
              }
              if (n2.has(e3.name)) throw new Error(`duplicated node name: ${e3.name}`);
              const t3 = this._nodes.push(new l(e3)) - 1;
              n2.set(e3.name, t3);
            }
            for (let n3 = 0; n3 < this._nodes.length; n3++) {
              const r3 = this._nodes[n3], i2 = t2.node[n3];
              if (!i2.output) throw new Error(`missing output for node: ${i2.name}`);
              for (const t3 of i2.output) {
                let o2 = e2.get(t3);
                if (void 0 === o2 && (o2 = this._allData.push(new c()) - 1, e2.set(t3, o2)), r3.outputs.push(o2), void 0 !== this._allData[o2]._from) throw new Error(`multiple nodes output to one data value: ${o2}`);
                if (this._allData[o2]._from = n3, "Constant" === i2.opType) {
                  if (!i2.attribute || 1 !== i2.attribute.length || !i2.attribute[0].t) throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                  if (!i2.output || 1 !== i2.output.length) throw new Error("missing output or incorrect number of outputs for this Constant operator");
                  r3.outputs.pop(), r3.executeNode = false, this._allData[o2]._from = -1, this._allData[o2].tensor = a.Tensor.fromProto(i2.attribute[0].t);
                }
              }
            }
            for (let n3 = 0; n3 < this._nodes.length; n3++) {
              const r3 = this._nodes[n3], i2 = t2.node[n3];
              if (!i2.input) throw new Error(`missing input for node: ${i2.name}`);
              for (const t3 of i2.input) {
                const o2 = e2.get(t3);
                if (void 0 === o2) {
                  if ("" === t3 && 3 === i2.input.length && "Resize" === i2.opType) continue;
                  throw new Error(`unrecognized input '${t3}' for node: ${i2.name}`);
                }
                r3.inputs.push(o2), this._allData[o2]._to.push(n3);
              }
            }
            return true;
          }
          buildGraphFromOrtFormat(t2) {
            var e2, n2, r2;
            const i2 = /* @__PURE__ */ new Map();
            this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
            const o2 = /* @__PURE__ */ new Map(), p2 = [];
            for (let o3 = 0; o3 < t2.inputsLength(); o3++) {
              const a2 = t2.inputs(o3);
              if (i2.has(a2)) throw new Error(`duplicated input name: ${a2}`);
              for (let o4 = 0; o4 < t2.nodeArgsLength(); o4++) if ((null === (e2 = t2.nodeArgs(o4)) || void 0 === e2 ? void 0 : e2.name()) === a2) {
                const e3 = new c();
                if ((null === (r2 = null === (n2 = t2.nodeArgs(o4)) || void 0 === n2 ? void 0 : n2.type()) || void 0 === r2 ? void 0 : r2.valueType()) !== u.TypeInfoValue.tensor_type) throw new Error("Unexpected value type for the nodeArg.");
                const l2 = t2.nodeArgs(o4).type().value(new u.TensorTypeAndShape()), f = s.ProtoUtil.tensorDataTypeFromProto(l2.elemType()), d = l2.shape(), h = [];
                for (let t3 = 0; t3 < d.dimLength(); t3++) h.push(s.LongUtil.longToNumber(d.dim(t3).value().dimValue()));
                e3.type = { shape: { dims: h }, tensorType: f };
                const g = this._allData.push(e3) - 1;
                i2.set(a2, g), p2.push(a2);
              }
            }
            for (let e3 = 0; e3 < t2.initializersLength(); e3++) {
              const n3 = t2.initializers(e3);
              let r3 = i2.get(n3.name());
              if (void 0 === r3) {
                const t3 = new c(), e4 = s.ProtoUtil.tensorDimsFromORTFormat(n3), o3 = s.ProtoUtil.tensorDataTypeFromProto(n3.dataType());
                t3.type = { shape: { dims: e4 }, tensorType: o3 }, r3 = this._allData.push(t3) - 1, i2.set(n3.name(), r3);
              }
              this._allData[r3]._from = -1, this._allData[r3].tensor = a.Tensor.fromOrtTensor(n3);
            }
            for (let t3 = 0; t3 < this._allData.length; t3++) this._allData[t3].tensor || (this._allInputIndices.push(t3), this._allInputNames.push(p2[t3]));
            for (let e3 = 0; e3 < t2.outputsLength(); e3++) {
              const n3 = t2.outputs(e3);
              if (i2.has(n3)) throw new Error(`duplicated output name: ${n3}`);
              const r3 = this._allData.push(new c()) - 1;
              i2.set(n3, r3), this._allOutputIndices.push(r3), this._allOutputNames.push(n3);
            }
            if (!t2.nodes) throw new Error("missing information in graph: node");
            for (let e3 = 0; e3 < t2.nodesLength(); e3++) {
              const n3 = t2.nodes(e3);
              let r3 = n3.name();
              if (!r3) for (let t3 = 0; r3 = `unnamed_${n3.opType()}_${t3}`, o2.has(r3); t3++) ;
              if (o2.has(r3)) throw new Error(`duplicated node name: ${r3}`);
              const i3 = this._nodes.push(new l(n3, r3)) - 1;
              o2.set(r3, i3);
            }
            for (let e3 = 0; e3 < this._nodes.length; e3++) {
              const n3 = this._nodes[e3], r3 = t2.nodes(e3);
              if (null == r3) throw new Error(`No node exists at index ${e3}`);
              if (0 === (null == r3 ? void 0 : r3.outputsLength())) throw new Error(`missing output for node: ${r3.name}`);
              for (let t3 = 0; t3 < (null == r3 ? void 0 : r3.outputsLength()); t3++) {
                const o3 = null == r3 ? void 0 : r3.outputs(t3);
                let s2 = i2.get(o3);
                if (void 0 === s2 && (s2 = this._allData.push(new c()) - 1, i2.set(o3, s2)), n3.outputs.push(s2), void 0 !== this._allData[s2]._from) throw new Error(`multiple nodes output to one data value: ${s2}`);
                if (this._allData[s2]._from = e3, "Constant" === r3.opType()) {
                  if (1 !== r3.attributesLength() || !r3.attributes(0).t()) throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                  if (1 !== r3.outputsLength()) throw new Error("missing output or incorrect number of outputs for this Constant operator");
                  n3.outputs.pop(), n3.executeNode = false, this._allData[s2]._from = -1, this._allData[s2].tensor = a.Tensor.fromOrtTensor(r3.attributes(0).t());
                }
              }
            }
            for (let e3 = 0; e3 < this._nodes.length; e3++) {
              const n3 = this._nodes[e3], r3 = t2.nodes(e3);
              if (0 === r3.inputsLength()) throw new Error(`missing input for node: ${r3.name}`);
              for (let t3 = 0; t3 < r3.inputsLength(); t3++) {
                const o3 = r3.inputs(t3), a2 = i2.get(o3);
                if (void 0 === a2) throw new Error(`unrecognized input '${o3}' for node: ${r3.name()}`);
                n3.inputs.push(a2), this._allData[a2]._to.push(e3);
              }
            }
          }
          checkIsAcyclic() {
            const t2 = /* @__PURE__ */ new Set();
            this._allInputIndices.forEach((e3) => {
              this._allData[e3]._to.forEach((e4) => {
                t2.add(e4);
              });
            });
            const e2 = Array.from(t2), n2 = new Array(this._nodes.length).fill("white");
            for (; e2.length > 0; ) {
              const t3 = e2.pop();
              "gray" === n2[t3] ? n2[t3] = "black" : (e2.push(t3), n2[t3] = "gray", this._nodes[t3].outputs.forEach((r2) => {
                const i2 = this._allData[r2];
                if (void 0 !== i2.tensor) throw new Error("node outputs should not be initialized");
                if (i2._from !== t3) throw new Error("from property of the Value object doesn't match index of Node being processed");
                i2._to.forEach((t4) => {
                  if ("gray" === n2[t4]) throw new Error("model graph is cyclic");
                  "white" === n2[t4] && e2.push(t4);
                });
              }));
            }
          }
          transformGraph(t2) {
            this.removeAllIdentityNodes(), this.removeAllDropoutNodes(), this.fuseConvActivationNodes(), t2 && t2.transformGraph(this), this.finalizeGraph();
          }
          finalizeGraph() {
            let t2 = 0;
            for (let e2 = 0; e2 < this._nodes.length; e2++) this._nodes[e2].executeNode ? t2 > 0 && (this._nodes[e2].inputs.forEach((n2) => {
              const r2 = this._allData[n2]._to.indexOf(e2 + t2);
              -1 !== r2 && (this._allData[n2]._to[r2] = e2);
            }), this._nodes[e2].outputs.forEach((n2) => {
              this._allData[n2]._from && this._allData[n2]._from === e2 + t2 && (this._allData[n2]._from = e2);
            })) : (t2++, this._nodes[e2].outputs.forEach((t3) => {
              this._allData[t3]._from = -2;
            }), this._nodes.splice(e2, 1), e2--);
            t2 = 0;
            for (let e2 = 0; e2 < this._allData.length; e2++) if (-2 !== this._allData[e2].from || -1 !== this._allOutputIndices.indexOf(e2 + t2)) {
              if (t2 > 0) {
                let n2 = -1;
                void 0 !== this._allData[e2].from && -1 !== this._allData[e2].from ? (n2 = this._nodes[this._allData[e2].from].outputs.indexOf(e2 + t2), -1 !== n2 && (this._nodes[this._allData[e2].from].outputs[n2] = e2)) : (n2 = this._allInputIndices.indexOf(e2 + t2), -1 !== n2 && (this._allInputIndices[n2] = e2)), this._allData[e2].to.forEach((r2) => {
                  n2 = this._nodes[r2].inputs.indexOf(e2 + t2), -1 !== n2 && (this._nodes[r2].inputs[n2] = e2);
                }), 0 === this._allData[e2].to.length && (n2 = this._allOutputIndices.indexOf(e2 + t2), -1 !== n2 && (this._allOutputIndices[n2] = e2));
              }
            } else t2++, this._allData.splice(e2, 1), e2--;
          }
          deleteNode(t2) {
            const e2 = this._nodes[t2];
            if (e2.outputs.length > 1) {
              for (let t3 = 1; t3 < e2.outputs.length; t3++) if (this._allData[e2.outputs[t3]].to.length > 0) throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");
            }
            e2.executeNode = false;
            const n2 = e2.inputs[0], r2 = e2.outputs[0], i2 = this._allData[r2].to, o2 = this._allData[n2].to.indexOf(t2);
            if (-1 === o2) throw new Error("The Value object doesn't have the current Node in it's 'to' property ");
            this._allData[n2].to.splice(o2, 1), this._allData[r2]._to = [];
            const a2 = this._allOutputIndices.indexOf(r2);
            if (-1 !== a2 && (this._allOutputIndices[a2] = n2), i2 && i2.length > 0) for (const t3 of i2) {
              const e3 = this._nodes[t3].inputs.indexOf(r2);
              if (-1 === e3) throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");
              this._nodes[t3].inputs[e3] = n2, this._allData[n2].to.push(t3);
            }
          }
          removeAllDropoutNodes() {
            let t2 = 0;
            for (const e2 of this._nodes) {
              if ("Dropout" === e2.opType) {
                if (1 !== e2.inputs.length) throw new Error("Dropout nodes should only contain one input. ");
                if (1 !== e2.outputs.length && 2 !== e2.outputs.length) throw new Error("Dropout nodes should contain either 1 or 2 output(s)");
                if (2 === e2.outputs.length && 0 !== this._allData[e2.outputs[1]]._to.length) throw new Error("Dropout nodes's second output should not be referenced by other nodes");
                this.deleteNode(t2);
              }
              t2++;
            }
          }
          removeAllIdentityNodes() {
            let t2 = 0;
            for (const e2 of this._nodes) "Identity" === e2.opType && this.deleteNode(t2), t2++;
          }
          isActivation(t2) {
            switch (t2.opType) {
              case "Relu":
              case "Sigmoid":
              case "Clip":
                return true;
              default:
                return false;
            }
          }
          fuseConvActivationNodes() {
            for (const t2 of this._nodes) if ("Conv" === t2.opType) {
              const e2 = this._allData[t2.outputs[0]]._to;
              if (1 === e2.length && this.isActivation(this._nodes[e2[0]])) {
                const n2 = this._nodes[e2[0]];
                if ("Clip" === n2.opType) if (1 === n2.inputs.length) try {
                  t2.attributes.set("activation_params", "floats", [n2.attributes.getFloat("min"), n2.attributes.getFloat("max")]);
                } catch (e3) {
                  t2.attributes.set("activation_params", "floats", [s.MIN_CLIP, s.MAX_CLIP]);
                }
                else {
                  if (!(n2.inputs.length >= 3 && void 0 !== this._allData[n2.inputs[1]].tensor && void 0 !== this._allData[n2.inputs[2]].tensor)) continue;
                  t2.attributes.set("activation_params", "floats", [this._allData[n2.inputs[1]].tensor.floatData[0], this._allData[n2.inputs[2]].tensor.floatData[0]]);
                }
                t2.attributes.set("activation", "string", n2.opType), this.deleteNode(e2[0]);
              }
            }
          }
        }
      }, 6231: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.now = e.Profiler = e.Logger = void 0;
        const n = { verbose: 1e3, info: 2e3, warning: 4e3, error: 5e3, fatal: 6e3 }, r = { none: new class {
          log(t2, e2, n2) {
          }
        }(), console: new class {
          log(t2, e2, n2) {
            console.log(`${this.color(t2)} ${n2 ? "\x1B[35m" + n2 + "\x1B[0m " : ""}${e2}`);
          }
          color(t2) {
            switch (t2) {
              case "verbose":
                return "\x1B[34;40mv\x1B[0m";
              case "info":
                return "\x1B[32mi\x1B[0m";
              case "warning":
                return "\x1B[30;43mw\x1B[0m";
              case "error":
                return "\x1B[31;40me\x1B[0m";
              case "fatal":
                return "\x1B[101mf\x1B[0m";
              default:
                throw new Error(`unsupported severity: ${t2}`);
            }
          }
        }() }, i = { provider: "console", minimalSeverity: "warning", logDateTime: true, logSourceLocation: false };
        let o = { "": i };
        function a(t2, e2, n2, r2) {
          if (void 0 === e2) return i2 = t2, { verbose: a.verbose.bind(null, i2), info: a.info.bind(null, i2), warning: a.warning.bind(null, i2), error: a.error.bind(null, i2), fatal: a.fatal.bind(null, i2) };
          if (void 0 === n2) s(t2, e2);
          else if ("number" == typeof n2 && void 0 === r2) s(t2, e2);
          else if ("string" == typeof n2 && void 0 === r2) s(t2, n2, 0, e2);
          else {
            if ("string" != typeof n2 || "number" != typeof r2) throw new TypeError("input is valid");
            s(t2, n2, 0, e2);
          }
          var i2;
        }
        __name(a, "a");
        function s(t2, e2, i2, a2) {
          const s2 = o[a2 || ""] || o[""];
          n[t2] < n[s2.minimalSeverity] || (s2.logDateTime && (e2 = `${(/* @__PURE__ */ new Date()).toISOString()}|${e2}`), s2.logSourceLocation, r[s2.provider].log(t2, e2, a2));
        }
        __name(s, "s");
        !function(t2) {
          function e2(t3) {
            o = {}, n2("", t3 || {});
          }
          __name(e2, "e");
          function n2(t3, n3) {
            if ("*" === t3) e2(n3);
            else {
              const e3 = o[t3] || i;
              o[t3] = { provider: n3.provider || e3.provider, minimalSeverity: n3.minimalSeverity || e3.minimalSeverity, logDateTime: void 0 === n3.logDateTime ? e3.logDateTime : n3.logDateTime, logSourceLocation: void 0 === n3.logSourceLocation ? e3.logSourceLocation : n3.logSourceLocation };
            }
          }
          __name(n2, "n");
          t2.verbose = function(e3, n3) {
            t2("verbose", e3, n3);
          }, t2.info = function(e3, n3) {
            t2("info", e3, n3);
          }, t2.warning = function(e3, n3) {
            t2("warning", e3, n3);
          }, t2.error = function(e3, n3) {
            t2("error", e3, n3);
          }, t2.fatal = function(e3, n3) {
            t2("fatal", e3, n3);
          }, t2.reset = e2, t2.set = n2, t2.setWithEnv = function(t3) {
            const e3 = {};
            t3.logLevel && (e3.minimalSeverity = t3.logLevel), n2("", e3);
          };
        }(a || (a = {})), e.Logger = a;
        class u {
          static {
            __name(this, "u");
          }
          constructor(t2, e2, n2, r2, i2, o2) {
            this.category = t2, this.name = e2, this.startTime = n2, this.endCallback = r2, this.timer = i2, this.ctx = o2;
          }
          end() {
            return this.endCallback(this);
          }
          async checkTimer() {
            if (void 0 === this.ctx || void 0 === this.timer) throw new Error("No webgl timer found");
            return this.ctx.endTimer(), this.ctx.waitForQueryAndGetTime(this.timer);
          }
        }
        class c {
          static {
            __name(this, "c");
          }
          constructor(t2, e2, n2, r2) {
            this.category = t2, this.name = e2, this.startTime = n2, this.endTime = r2;
          }
        }
        e.Profiler = class {
          static create(t2) {
            return void 0 === t2 ? new this() : new this(t2.maxNumberEvents, t2.flushBatchSize, t2.flushIntervalInMilliseconds);
          }
          constructor(t2, e2, n2) {
            this._started = false, this._flushPointer = 0, this._started = false, this._maxNumberEvents = void 0 === t2 ? 1e4 : t2, this._flushBatchSize = void 0 === e2 ? 10 : e2, this._flushIntervalInMilliseconds = void 0 === n2 ? 5e3 : n2;
          }
          start() {
            this._started = true, this._timingEvents = [], this._flushTime = (0, e.now)(), this._flushPointer = 0;
          }
          stop() {
            for (this._started = false; this._flushPointer < this._timingEvents.length; this._flushPointer++) this.logOneEvent(this._timingEvents[this._flushPointer]);
          }
          event(t2, e2, n2, r2) {
            const i2 = this._started ? this.begin(t2, e2, r2) : void 0;
            let o2 = false;
            const a2 = n2();
            if (a2 && "function" == typeof a2.then) return o2 = true, new Promise((t3, e3) => {
              a2.then(async (e4) => {
                i2 && await i2.end(), t3(e4);
              }, async (t4) => {
                i2 && await i2.end(), e3(t4);
              });
            });
            if (!o2 && i2) {
              const t3 = i2.end();
              if (t3 && "function" == typeof t3.then) return new Promise((e3, n3) => {
                t3.then(() => {
                  e3(a2);
                }, (t4) => {
                  n3(t4);
                });
              });
            }
            return a2;
          }
          begin(t2, n2, r2) {
            if (!this._started) throw new Error("profiler is not started yet");
            if (void 0 === r2) {
              const r3 = (0, e.now)();
              return this.flush(r3), new u(t2, n2, r3, (t3) => this.endSync(t3));
            }
            {
              const e2 = r2.beginTimer();
              return new u(t2, n2, 0, async (t3) => this.end(t3), e2, r2);
            }
          }
          async end(t2) {
            const e2 = await t2.checkTimer();
            this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new c(t2.category, t2.name, t2.startTime, e2)), this.flush(e2));
          }
          endSync(t2) {
            const n2 = (0, e.now)();
            this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new c(t2.category, t2.name, t2.startTime, n2)), this.flush(n2));
          }
          logOneEvent(t2) {
            e.Logger.verbose(`Profiler.${t2.category}`, `${(t2.endTime - t2.startTime).toFixed(2)}ms on event '${t2.name}' at ${t2.endTime.toFixed(2)}`);
          }
          flush(t2) {
            if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize || t2 - this._flushTime >= this._flushIntervalInMilliseconds) {
              for (const t3 = this._flushPointer; this._flushPointer < t3 + this._flushBatchSize && this._flushPointer < this._timingEvents.length; this._flushPointer++) this.logOneEvent(this._timingEvents[this._flushPointer]);
              this._flushTime = (0, e.now)();
            }
          }
          get started() {
            return this._started;
          }
        }, e.now = "undefined" != typeof performance && performance.now ? () => performance.now() : Date.now;
      }, 2644: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Model = void 0;
        const r = n(5686), i = n(1446), o = n(7070), a = n(9395), s = n(2517);
        var u = a.onnxruntime.experimental.fbs;
        e.Model = class {
          constructor() {
          }
          load(t2, e2, n2) {
            if (!n2) try {
              return void this.loadFromOnnxFormat(t2, e2);
            } catch (t3) {
              if (void 0 !== n2) throw t3;
            }
            this.loadFromOrtFormat(t2, e2);
          }
          loadFromOnnxFormat(t2, e2) {
            const n2 = i.onnx.ModelProto.decode(t2);
            if (s.LongUtil.longToNumber(n2.irVersion) < 3) throw new Error("only support ONNX model with IR_VERSION>=3");
            this._opsets = n2.opsetImport.map((t3) => ({ domain: t3.domain, version: s.LongUtil.longToNumber(t3.version) })), this._graph = o.Graph.from(n2.graph, e2);
          }
          loadFromOrtFormat(t2, e2) {
            const n2 = new r.flatbuffers.ByteBuffer(t2), i2 = u.InferenceSession.getRootAsInferenceSession(n2).model();
            if (s.LongUtil.longToNumber(i2.irVersion()) < 3) throw new Error("only support ONNX model with IR_VERSION>=3");
            this._opsets = [];
            for (let t3 = 0; t3 < i2.opsetImportLength(); t3++) {
              const e3 = i2.opsetImport(t3);
              this._opsets.push({ domain: null == e3 ? void 0 : e3.domain(), version: s.LongUtil.longToNumber(e3.version()) });
            }
            this._graph = o.Graph.from(i2.graph(), e2);
          }
          get graph() {
            return this._graph;
          }
          get opsets() {
            return this._opsets;
          }
        };
      }, 782: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.FLOAT_TYPES = e.INT_TYPES = e.NUMBER_TYPES = void 0, e.NUMBER_TYPES = ["float32", "float64", "int32", "int16", "int8", "uint16", "uint32", "uint8"], e.INT_TYPES = ["int32", "int16", "int8", "uint16", "uint32", "uint8"], e.FLOAT_TYPES = ["float32", "float64"];
      }, 1047: (t, e) => {
        "use strict";
        function n(t2, e2) {
          if (e2.endsWith("+")) {
            const n2 = Number.parseInt(e2.substring(0, e2.length - 1), 10);
            return !isNaN(n2) && n2 <= t2;
          }
          if (2 === e2.split("-").length) {
            const n2 = e2.split("-"), r = Number.parseInt(n2[0], 10), i = Number.parseInt(n2[1], 10);
            return !isNaN(r) && !isNaN(i) && r <= t2 && t2 <= i;
          }
          return Number.parseInt(e2, 10) === t2;
        }
        __name(n, "n");
        Object.defineProperty(e, "__esModule", { value: true }), e.resolveOperator = void 0, e.resolveOperator = function(t2, e2, r) {
          for (const i of r) {
            const r2 = i[0], o = i[1], a = i[2], s = i[3], u = i[4];
            if (t2.opType === r2) {
              for (const t3 of e2) if ((t3.domain === o || "ai.onnx" === t3.domain && "" === o) && n(t3.version, a)) return { opImpl: s, opInit: u };
            }
          }
          throw new TypeError(`cannot resolve operator '${t2.opType}' with opsets: ${e2.map((t3) => `${t3.domain || "ai.onnx"} v${t3.version}`).join(", ")}`);
        };
      }, 9395: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.onnxruntime = void 0;
        const r = n(5686);
        var i, o;
        i = e.onnxruntime || (e.onnxruntime = {}), function(t2) {
          let e2;
          !function(t3) {
            t3[t3.UNDEFINED = 0] = "UNDEFINED", t3[t3.FLOAT = 1] = "FLOAT", t3[t3.INT = 2] = "INT", t3[t3.STRING = 3] = "STRING", t3[t3.TENSOR = 4] = "TENSOR", t3[t3.GRAPH = 5] = "GRAPH", t3[t3.FLOATS = 6] = "FLOATS", t3[t3.INTS = 7] = "INTS", t3[t3.STRINGS = 8] = "STRINGS", t3[t3.TENSORS = 9] = "TENSORS", t3[t3.GRAPHS = 10] = "GRAPHS", t3[t3.SPARSE_TENSOR = 11] = "SPARSE_TENSOR", t3[t3.SPARSE_TENSORS = 12] = "SPARSE_TENSORS";
          }(e2 = t2.AttributeType || (t2.AttributeType = {}));
        }((o = i.experimental || (i.experimental = {})).fbs || (o.fbs = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              let e2;
              !function(t5) {
                t5[t5.UNKNOWN = 0] = "UNKNOWN", t5[t5.VALUE = 1] = "VALUE", t5[t5.PARAM = 2] = "PARAM";
              }(e2 = t4.DimensionValueType || (t4.DimensionValueType = {}));
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              let e2;
              !function(t5) {
                t5[t5.UNDEFINED = 0] = "UNDEFINED", t5[t5.FLOAT = 1] = "FLOAT", t5[t5.UINT8 = 2] = "UINT8", t5[t5.INT8 = 3] = "INT8", t5[t5.UINT16 = 4] = "UINT16", t5[t5.INT16 = 5] = "INT16", t5[t5.INT32 = 6] = "INT32", t5[t5.INT64 = 7] = "INT64", t5[t5.STRING = 8] = "STRING", t5[t5.BOOL = 9] = "BOOL", t5[t5.FLOAT16 = 10] = "FLOAT16", t5[t5.DOUBLE = 11] = "DOUBLE", t5[t5.UINT32 = 12] = "UINT32", t5[t5.UINT64 = 13] = "UINT64", t5[t5.COMPLEX64 = 14] = "COMPLEX64", t5[t5.COMPLEX128 = 15] = "COMPLEX128", t5[t5.BFLOAT16 = 16] = "BFLOAT16";
              }(e2 = t4.TensorDataType || (t4.TensorDataType = {}));
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              let e2;
              !function(t5) {
                t5[t5.Primitive = 0] = "Primitive", t5[t5.Fused = 1] = "Fused";
              }(e2 = t4.NodeType || (t4.NodeType = {}));
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              let e2;
              !function(t5) {
                t5[t5.NONE = 0] = "NONE", t5[t5.tensor_type = 1] = "tensor_type", t5[t5.sequence_type = 2] = "sequence_type", t5[t5.map_type = 3] = "map_type";
              }(e2 = t4.TypeInfoValue || (t4.TypeInfoValue = {}));
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsShape(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsShape(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                dim(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 4);
                  return r2 ? (n3 || new t2.experimental.fbs.Dimension()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                dimLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 4);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startShape(t3) {
                  t3.startObject(1);
                }
                static addDim(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static createDimVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startDimVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endShape(t3) {
                  return t3.endObject();
                }
                static createShape(t3, e4) {
                  return n2.startShape(t3), n2.addDim(t3, e4), n2.endShape(t3);
                }
              }
              e3.Shape = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsDimension(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsDimension(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                value(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 4);
                  return n3 ? (e4 || new t2.experimental.fbs.DimensionValue()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                denotation(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                static startDimension(t3) {
                  t3.startObject(2);
                }
                static addValue(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addDenotation(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static endDimension(t3) {
                  return t3.endObject();
                }
                static createDimension(t3, e4, r2) {
                  return n2.startDimension(t3), n2.addValue(t3, e4), n2.addDenotation(t3, r2), n2.endDimension(t3);
                }
              }
              e3.Dimension = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsDimensionValue(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsDimensionValue(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                dimType() {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.readInt8(this.bb_pos + e4) : t2.experimental.fbs.DimensionValueType.UNKNOWN;
                }
                dimValue() {
                  let t3 = this.bb.__offset(this.bb_pos, 6);
                  return t3 ? this.bb.readInt64(this.bb_pos + t3) : this.bb.createLong(0, 0);
                }
                dimParam(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                static startDimensionValue(t3) {
                  t3.startObject(3);
                }
                static addDimType(e4, n3) {
                  e4.addFieldInt8(0, n3, t2.experimental.fbs.DimensionValueType.UNKNOWN);
                }
                static addDimValue(t3, e4) {
                  t3.addFieldInt64(1, e4, t3.createLong(0, 0));
                }
                static addDimParam(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static endDimensionValue(t3) {
                  return t3.endObject();
                }
                static createDimensionValue(t3, e4, r2, i2) {
                  return n2.startDimensionValue(t3), n2.addDimType(t3, e4), n2.addDimValue(t3, r2), n2.addDimParam(t3, i2), n2.endDimensionValue(t3);
                }
              }
              e3.DimensionValue = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsTensorTypeAndShape(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsTensorTypeAndShape(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                elemType() {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.readInt32(this.bb_pos + e4) : t2.experimental.fbs.TensorDataType.UNDEFINED;
                }
                shape(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 6);
                  return n3 ? (e4 || new t2.experimental.fbs.Shape()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startTensorTypeAndShape(t3) {
                  t3.startObject(2);
                }
                static addElemType(e4, n3) {
                  e4.addFieldInt32(0, n3, t2.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addShape(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static endTensorTypeAndShape(t3) {
                  return t3.endObject();
                }
                static createTensorTypeAndShape(t3, e4, r2) {
                  return n2.startTensorTypeAndShape(t3), n2.addElemType(t3, e4), n2.addShape(t3, r2), n2.endTensorTypeAndShape(t3);
                }
              }
              e3.TensorTypeAndShape = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsMapType(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsMapType(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                keyType() {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.readInt32(this.bb_pos + e4) : t2.experimental.fbs.TensorDataType.UNDEFINED;
                }
                valueType(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 6);
                  return n3 ? (e4 || new t2.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startMapType(t3) {
                  t3.startObject(2);
                }
                static addKeyType(e4, n3) {
                  e4.addFieldInt32(0, n3, t2.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addValueType(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static endMapType(t3) {
                  return t3.endObject();
                }
                static createMapType(t3, e4, r2) {
                  return n2.startMapType(t3), n2.addKeyType(t3, e4), n2.addValueType(t3, r2), n2.endMapType(t3);
                }
              }
              e3.MapType = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsSequenceType(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsSequenceType(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                elemType(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 4);
                  return n3 ? (e4 || new t2.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startSequenceType(t3) {
                  t3.startObject(1);
                }
                static addElemType(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static endSequenceType(t3) {
                  return t3.endObject();
                }
                static createSequenceType(t3, e4) {
                  return n2.startSequenceType(t3), n2.addElemType(t3, e4), n2.endSequenceType(t3);
                }
              }
              e3.SequenceType = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            (t3.fbs || (t3.fbs = {})).EdgeEnd = class {
              constructor() {
                this.bb = null, this.bb_pos = 0;
              }
              __init(t4, e2) {
                return this.bb_pos = t4, this.bb = e2, this;
              }
              nodeIndex() {
                return this.bb.readUint32(this.bb_pos);
              }
              srcArgIndex() {
                return this.bb.readInt32(this.bb_pos + 4);
              }
              dstArgIndex() {
                return this.bb.readInt32(this.bb_pos + 8);
              }
              static createEdgeEnd(t4, e2, n2, r2) {
                return t4.prep(4, 12), t4.writeInt32(r2), t4.writeInt32(n2), t4.writeInt32(e2), t4.offset();
              }
            };
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsNodeEdge(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsNodeEdge(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                nodeIndex() {
                  let t3 = this.bb.__offset(this.bb_pos, 4);
                  return t3 ? this.bb.readUint32(this.bb_pos + t3) : 0;
                }
                inputEdges(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 6);
                  return r2 ? (n3 || new t2.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + r2) + 12 * e4, this.bb) : null;
                }
                inputEdgesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 6);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                outputEdges(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 8);
                  return r2 ? (n3 || new t2.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + r2) + 12 * e4, this.bb) : null;
                }
                outputEdgesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 8);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startNodeEdge(t3) {
                  t3.startObject(3);
                }
                static addNodeIndex(t3, e4) {
                  t3.addFieldInt32(0, e4, 0);
                }
                static addInputEdges(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static startInputEdgesVector(t3, e4) {
                  t3.startVector(12, e4, 4);
                }
                static addOutputEdges(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static startOutputEdgesVector(t3, e4) {
                  t3.startVector(12, e4, 4);
                }
                static endNodeEdge(t3) {
                  return t3.endObject();
                }
                static createNodeEdge(t3, e4, r2, i2) {
                  return n2.startNodeEdge(t3), n2.addNodeIndex(t3, e4), n2.addInputEdges(t3, r2), n2.addOutputEdges(t3, i2), n2.endNodeEdge(t3);
                }
              }
              e3.NodeEdge = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsNode(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsNode(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                name(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                docString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                domain(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                sinceVersion() {
                  let t3 = this.bb.__offset(this.bb_pos, 10);
                  return t3 ? this.bb.readInt32(this.bb_pos + t3) : 0;
                }
                index() {
                  let t3 = this.bb.__offset(this.bb_pos, 12);
                  return t3 ? this.bb.readUint32(this.bb_pos + t3) : 0;
                }
                opType(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 14);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                type() {
                  let e4 = this.bb.__offset(this.bb_pos, 16);
                  return e4 ? this.bb.readInt32(this.bb_pos + e4) : t2.experimental.fbs.NodeType.Primitive;
                }
                executionProviderType(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 18);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                inputs(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 20);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                inputsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 20);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                outputs(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 22);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                outputsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 22);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                attributes(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 24);
                  return r2 ? (n3 || new t2.experimental.fbs.Attribute()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                attributesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 24);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                inputArgCounts(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 26);
                  return e4 ? this.bb.readInt32(this.bb.__vector(this.bb_pos + e4) + 4 * t3) : 0;
                }
                inputArgCountsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 26);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                inputArgCountsArray() {
                  let t3 = this.bb.__offset(this.bb_pos, 26);
                  return t3 ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t3), this.bb.__vector_len(this.bb_pos + t3)) : null;
                }
                implicitInputs(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 28);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                implicitInputsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 28);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startNode(t3) {
                  t3.startObject(13);
                }
                static addName(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addDocString(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addDomain(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static addSinceVersion(t3, e4) {
                  t3.addFieldInt32(3, e4, 0);
                }
                static addIndex(t3, e4) {
                  t3.addFieldInt32(4, e4, 0);
                }
                static addOpType(t3, e4) {
                  t3.addFieldOffset(5, e4, 0);
                }
                static addType(e4, n3) {
                  e4.addFieldInt32(6, n3, t2.experimental.fbs.NodeType.Primitive);
                }
                static addExecutionProviderType(t3, e4) {
                  t3.addFieldOffset(7, e4, 0);
                }
                static addInputs(t3, e4) {
                  t3.addFieldOffset(8, e4, 0);
                }
                static createInputsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startInputsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addOutputs(t3, e4) {
                  t3.addFieldOffset(9, e4, 0);
                }
                static createOutputsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startOutputsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addAttributes(t3, e4) {
                  t3.addFieldOffset(10, e4, 0);
                }
                static createAttributesVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startAttributesVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addInputArgCounts(t3, e4) {
                  t3.addFieldOffset(11, e4, 0);
                }
                static createInputArgCountsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addInt32(e4[n3]);
                  return t3.endVector();
                }
                static startInputArgCountsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addImplicitInputs(t3, e4) {
                  t3.addFieldOffset(12, e4, 0);
                }
                static createImplicitInputsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startImplicitInputsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endNode(t3) {
                  return t3.endObject();
                }
                static createNode(t3, e4, r2, i2, o2, a, s, u, c, l, p, f, d, h) {
                  return n2.startNode(t3), n2.addName(t3, e4), n2.addDocString(t3, r2), n2.addDomain(t3, i2), n2.addSinceVersion(t3, o2), n2.addIndex(t3, a), n2.addOpType(t3, s), n2.addType(t3, u), n2.addExecutionProviderType(t3, c), n2.addInputs(t3, l), n2.addOutputs(t3, p), n2.addAttributes(t3, f), n2.addInputArgCounts(t3, d), n2.addImplicitInputs(t3, h), n2.endNode(t3);
                }
              }
              e3.Node = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsValueInfo(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsValueInfo(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                name(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                docString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                type(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 8);
                  return n3 ? (e4 || new t2.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startValueInfo(t3) {
                  t3.startObject(3);
                }
                static addName(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addDocString(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addType(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static endValueInfo(t3) {
                  return t3.endObject();
                }
                static createValueInfo(t3, e4, r2, i2) {
                  return n2.startValueInfo(t3), n2.addName(t3, e4), n2.addDocString(t3, r2), n2.addType(t3, i2), n2.endValueInfo(t3);
                }
              }
              e3.ValueInfo = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsTypeInfo(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsTypeInfo(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                denotation(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                valueType() {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.readUint8(this.bb_pos + e4) : t2.experimental.fbs.TypeInfoValue.NONE;
                }
                value(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.__union(t3, this.bb_pos + e4) : null;
                }
                static startTypeInfo(t3) {
                  t3.startObject(3);
                }
                static addDenotation(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addValueType(e4, n3) {
                  e4.addFieldInt8(1, n3, t2.experimental.fbs.TypeInfoValue.NONE);
                }
                static addValue(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static endTypeInfo(t3) {
                  return t3.endObject();
                }
                static createTypeInfo(t3, e4, r2, i2) {
                  return n2.startTypeInfo(t3), n2.addDenotation(t3, e4), n2.addValueType(t3, r2), n2.addValue(t3, i2), n2.endTypeInfo(t3);
                }
              }
              e3.TypeInfo = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              class e2 {
                static {
                  __name(this, "e");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t5, e3) {
                  return this.bb_pos = t5, this.bb = e3, this;
                }
                static getRootAsOperatorSetId(t5, n2) {
                  return (n2 || new e2()).__init(t5.readInt32(t5.position()) + t5.position(), t5);
                }
                static getSizePrefixedRootAsOperatorSetId(t5, n2) {
                  return t5.setPosition(t5.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (n2 || new e2()).__init(t5.readInt32(t5.position()) + t5.position(), t5);
                }
                domain(t5) {
                  let e3 = this.bb.__offset(this.bb_pos, 4);
                  return e3 ? this.bb.__string(this.bb_pos + e3, t5) : null;
                }
                version() {
                  let t5 = this.bb.__offset(this.bb_pos, 6);
                  return t5 ? this.bb.readInt64(this.bb_pos + t5) : this.bb.createLong(0, 0);
                }
                static startOperatorSetId(t5) {
                  t5.startObject(2);
                }
                static addDomain(t5, e3) {
                  t5.addFieldOffset(0, e3, 0);
                }
                static addVersion(t5, e3) {
                  t5.addFieldInt64(1, e3, t5.createLong(0, 0));
                }
                static endOperatorSetId(t5) {
                  return t5.endObject();
                }
                static createOperatorSetId(t5, n2, r2) {
                  return e2.startOperatorSetId(t5), e2.addDomain(t5, n2), e2.addVersion(t5, r2), e2.endOperatorSetId(t5);
                }
              }
              t4.OperatorSetId = e2;
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsTensor(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsTensor(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                name(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                docString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                dims(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e4) + 8 * t3) : this.bb.createLong(0, 0);
                }
                dimsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 8);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                dataType() {
                  let e4 = this.bb.__offset(this.bb_pos, 10);
                  return e4 ? this.bb.readInt32(this.bb_pos + e4) : t2.experimental.fbs.TensorDataType.UNDEFINED;
                }
                rawData(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 12);
                  return e4 ? this.bb.readUint8(this.bb.__vector(this.bb_pos + e4) + t3) : 0;
                }
                rawDataLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 12);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                rawDataArray() {
                  let t3 = this.bb.__offset(this.bb_pos, 12);
                  return t3 ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t3), this.bb.__vector_len(this.bb_pos + t3)) : null;
                }
                stringData(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 14);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                stringDataLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 14);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startTensor(t3) {
                  t3.startObject(6);
                }
                static addName(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addDocString(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addDims(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static createDimsVector(t3, e4) {
                  t3.startVector(8, e4.length, 8);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addInt64(e4[n3]);
                  return t3.endVector();
                }
                static startDimsVector(t3, e4) {
                  t3.startVector(8, e4, 8);
                }
                static addDataType(e4, n3) {
                  e4.addFieldInt32(3, n3, t2.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addRawData(t3, e4) {
                  t3.addFieldOffset(4, e4, 0);
                }
                static createRawDataVector(t3, e4) {
                  t3.startVector(1, e4.length, 1);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addInt8(e4[n3]);
                  return t3.endVector();
                }
                static startRawDataVector(t3, e4) {
                  t3.startVector(1, e4, 1);
                }
                static addStringData(t3, e4) {
                  t3.addFieldOffset(5, e4, 0);
                }
                static createStringDataVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startStringDataVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endTensor(t3) {
                  return t3.endObject();
                }
                static createTensor(t3, e4, r2, i2, o2, a, s) {
                  return n2.startTensor(t3), n2.addName(t3, e4), n2.addDocString(t3, r2), n2.addDims(t3, i2), n2.addDataType(t3, o2), n2.addRawData(t3, a), n2.addStringData(t3, s), n2.endTensor(t3);
                }
              }
              e3.Tensor = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsSparseTensor(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsSparseTensor(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                values(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 4);
                  return n3 ? (e4 || new t2.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                indices(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 6);
                  return n3 ? (e4 || new t2.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                dims(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e4) + 8 * t3) : this.bb.createLong(0, 0);
                }
                dimsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 8);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startSparseTensor(t3) {
                  t3.startObject(3);
                }
                static addValues(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addIndices(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addDims(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static createDimsVector(t3, e4) {
                  t3.startVector(8, e4.length, 8);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addInt64(e4[n3]);
                  return t3.endVector();
                }
                static startDimsVector(t3, e4) {
                  t3.startVector(8, e4, 8);
                }
                static endSparseTensor(t3) {
                  return t3.endObject();
                }
                static createSparseTensor(t3, e4, r2, i2) {
                  return n2.startSparseTensor(t3), n2.addValues(t3, e4), n2.addIndices(t3, r2), n2.addDims(t3, i2), n2.endSparseTensor(t3);
                }
              }
              e3.SparseTensor = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsAttribute(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsAttribute(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                name(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                docString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                type() {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.readInt32(this.bb_pos + e4) : t2.experimental.fbs.AttributeType.UNDEFINED;
                }
                f() {
                  let t3 = this.bb.__offset(this.bb_pos, 10);
                  return t3 ? this.bb.readFloat32(this.bb_pos + t3) : 0;
                }
                i() {
                  let t3 = this.bb.__offset(this.bb_pos, 12);
                  return t3 ? this.bb.readInt64(this.bb_pos + t3) : this.bb.createLong(0, 0);
                }
                s(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 14);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                t(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 16);
                  return n3 ? (e4 || new t2.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                g(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 18);
                  return n3 ? (e4 || new t2.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                floats(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 20);
                  return e4 ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + e4) + 4 * t3) : 0;
                }
                floatsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 20);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                floatsArray() {
                  let t3 = this.bb.__offset(this.bb_pos, 20);
                  return t3 ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t3), this.bb.__vector_len(this.bb_pos + t3)) : null;
                }
                ints(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 22);
                  return e4 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e4) + 8 * t3) : this.bb.createLong(0, 0);
                }
                intsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 22);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                strings(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 24);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                stringsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 24);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                tensors(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 26);
                  return r2 ? (n3 || new t2.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                tensorsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 26);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                graphs(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 28);
                  return r2 ? (n3 || new t2.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                graphsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 28);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startAttribute(t3) {
                  t3.startObject(13);
                }
                static addName(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addDocString(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addType(e4, n3) {
                  e4.addFieldInt32(2, n3, t2.experimental.fbs.AttributeType.UNDEFINED);
                }
                static addF(t3, e4) {
                  t3.addFieldFloat32(3, e4, 0);
                }
                static addI(t3, e4) {
                  t3.addFieldInt64(4, e4, t3.createLong(0, 0));
                }
                static addS(t3, e4) {
                  t3.addFieldOffset(5, e4, 0);
                }
                static addT(t3, e4) {
                  t3.addFieldOffset(6, e4, 0);
                }
                static addG(t3, e4) {
                  t3.addFieldOffset(7, e4, 0);
                }
                static addFloats(t3, e4) {
                  t3.addFieldOffset(8, e4, 0);
                }
                static createFloatsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addFloat32(e4[n3]);
                  return t3.endVector();
                }
                static startFloatsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addInts(t3, e4) {
                  t3.addFieldOffset(9, e4, 0);
                }
                static createIntsVector(t3, e4) {
                  t3.startVector(8, e4.length, 8);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addInt64(e4[n3]);
                  return t3.endVector();
                }
                static startIntsVector(t3, e4) {
                  t3.startVector(8, e4, 8);
                }
                static addStrings(t3, e4) {
                  t3.addFieldOffset(10, e4, 0);
                }
                static createStringsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startStringsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addTensors(t3, e4) {
                  t3.addFieldOffset(11, e4, 0);
                }
                static createTensorsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startTensorsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addGraphs(t3, e4) {
                  t3.addFieldOffset(12, e4, 0);
                }
                static createGraphsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startGraphsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endAttribute(t3) {
                  return t3.endObject();
                }
                static createAttribute(t3, e4, r2, i2, o2, a, s, u, c, l, p, f, d, h) {
                  return n2.startAttribute(t3), n2.addName(t3, e4), n2.addDocString(t3, r2), n2.addType(t3, i2), n2.addF(t3, o2), n2.addI(t3, a), n2.addS(t3, s), n2.addT(t3, u), n2.addG(t3, c), n2.addFloats(t3, l), n2.addInts(t3, p), n2.addStrings(t3, f), n2.addTensors(t3, d), n2.addGraphs(t3, h), n2.endAttribute(t3);
                }
              }
              e3.Attribute = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsGraph(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsGraph(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                initializers(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 4);
                  return r2 ? (n3 || new t2.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                initializersLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 4);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                nodeArgs(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 6);
                  return r2 ? (n3 || new t2.experimental.fbs.ValueInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                nodeArgsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 6);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                nodes(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 8);
                  return r2 ? (n3 || new t2.experimental.fbs.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                nodesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 8);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                maxNodeIndex() {
                  let t3 = this.bb.__offset(this.bb_pos, 10);
                  return t3 ? this.bb.readUint32(this.bb_pos + t3) : 0;
                }
                nodeEdges(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 12);
                  return r2 ? (n3 || new t2.experimental.fbs.NodeEdge()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                nodeEdgesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 12);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                inputs(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 14);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                inputsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 14);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                outputs(t3, e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 16);
                  return n3 ? this.bb.__string(this.bb.__vector(this.bb_pos + n3) + 4 * t3, e4) : null;
                }
                outputsLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 16);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                sparseInitializers(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 18);
                  return r2 ? (n3 || new t2.experimental.fbs.SparseTensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                sparseInitializersLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 18);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startGraph(t3) {
                  t3.startObject(8);
                }
                static addInitializers(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static createInitializersVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startInitializersVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addNodeArgs(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static createNodeArgsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startNodeArgsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addNodes(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static createNodesVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startNodesVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addMaxNodeIndex(t3, e4) {
                  t3.addFieldInt32(3, e4, 0);
                }
                static addNodeEdges(t3, e4) {
                  t3.addFieldOffset(4, e4, 0);
                }
                static createNodeEdgesVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startNodeEdgesVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addInputs(t3, e4) {
                  t3.addFieldOffset(5, e4, 0);
                }
                static createInputsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startInputsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addOutputs(t3, e4) {
                  t3.addFieldOffset(6, e4, 0);
                }
                static createOutputsVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startOutputsVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addSparseInitializers(t3, e4) {
                  t3.addFieldOffset(7, e4, 0);
                }
                static createSparseInitializersVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startSparseInitializersVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endGraph(t3) {
                  return t3.endObject();
                }
                static createGraph(t3, e4, r2, i2, o2, a, s, u, c) {
                  return n2.startGraph(t3), n2.addInitializers(t3, e4), n2.addNodeArgs(t3, r2), n2.addNodes(t3, i2), n2.addMaxNodeIndex(t3, o2), n2.addNodeEdges(t3, a), n2.addInputs(t3, s), n2.addOutputs(t3, u), n2.addSparseInitializers(t3, c), n2.endGraph(t3);
                }
              }
              e3.Graph = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsModel(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsModel(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                irVersion() {
                  let t3 = this.bb.__offset(this.bb_pos, 4);
                  return t3 ? this.bb.readInt64(this.bb_pos + t3) : this.bb.createLong(0, 0);
                }
                opsetImport(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 6);
                  return r2 ? (n3 || new t2.experimental.fbs.OperatorSetId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                opsetImportLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 6);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                producerName(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 8);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                producerVersion(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 10);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                domain(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 12);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                modelVersion() {
                  let t3 = this.bb.__offset(this.bb_pos, 14);
                  return t3 ? this.bb.readInt64(this.bb_pos + t3) : this.bb.createLong(0, 0);
                }
                docString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 16);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                graph(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 18);
                  return n3 ? (e4 || new t2.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                graphDocString(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 20);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                static startModel(t3) {
                  t3.startObject(9);
                }
                static addIrVersion(t3, e4) {
                  t3.addFieldInt64(0, e4, t3.createLong(0, 0));
                }
                static addOpsetImport(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static createOpsetImportVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startOpsetImportVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static addProducerName(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static addProducerVersion(t3, e4) {
                  t3.addFieldOffset(3, e4, 0);
                }
                static addDomain(t3, e4) {
                  t3.addFieldOffset(4, e4, 0);
                }
                static addModelVersion(t3, e4) {
                  t3.addFieldInt64(5, e4, t3.createLong(0, 0));
                }
                static addDocString(t3, e4) {
                  t3.addFieldOffset(6, e4, 0);
                }
                static addGraph(t3, e4) {
                  t3.addFieldOffset(7, e4, 0);
                }
                static addGraphDocString(t3, e4) {
                  t3.addFieldOffset(8, e4, 0);
                }
                static endModel(t3) {
                  return t3.endObject();
                }
                static createModel(t3, e4, r2, i2, o2, a, s, u, c, l) {
                  return n2.startModel(t3), n2.addIrVersion(t3, e4), n2.addOpsetImport(t3, r2), n2.addProducerName(t3, i2), n2.addProducerVersion(t3, o2), n2.addDomain(t3, a), n2.addModelVersion(t3, s), n2.addDocString(t3, u), n2.addGraph(t3, c), n2.addGraphDocString(t3, l), n2.endModel(t3);
                }
              }
              e3.Model = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(t3) {
            !function(t4) {
              class e2 {
                static {
                  __name(this, "e");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t5, e3) {
                  return this.bb_pos = t5, this.bb = e3, this;
                }
                static getRootAsKernelCreateInfos(t5, n2) {
                  return (n2 || new e2()).__init(t5.readInt32(t5.position()) + t5.position(), t5);
                }
                static getSizePrefixedRootAsKernelCreateInfos(t5, n2) {
                  return t5.setPosition(t5.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (n2 || new e2()).__init(t5.readInt32(t5.position()) + t5.position(), t5);
                }
                nodeIndices(t5) {
                  let e3 = this.bb.__offset(this.bb_pos, 4);
                  return e3 ? this.bb.readUint32(this.bb.__vector(this.bb_pos + e3) + 4 * t5) : 0;
                }
                nodeIndicesLength() {
                  let t5 = this.bb.__offset(this.bb_pos, 4);
                  return t5 ? this.bb.__vector_len(this.bb_pos + t5) : 0;
                }
                nodeIndicesArray() {
                  let t5 = this.bb.__offset(this.bb_pos, 4);
                  return t5 ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t5), this.bb.__vector_len(this.bb_pos + t5)) : null;
                }
                kernelDefHashes(t5) {
                  let e3 = this.bb.__offset(this.bb_pos, 6);
                  return e3 ? this.bb.readUint64(this.bb.__vector(this.bb_pos + e3) + 8 * t5) : this.bb.createLong(0, 0);
                }
                kernelDefHashesLength() {
                  let t5 = this.bb.__offset(this.bb_pos, 6);
                  return t5 ? this.bb.__vector_len(this.bb_pos + t5) : 0;
                }
                static startKernelCreateInfos(t5) {
                  t5.startObject(2);
                }
                static addNodeIndices(t5, e3) {
                  t5.addFieldOffset(0, e3, 0);
                }
                static createNodeIndicesVector(t5, e3) {
                  t5.startVector(4, e3.length, 4);
                  for (let n2 = e3.length - 1; n2 >= 0; n2--) t5.addInt32(e3[n2]);
                  return t5.endVector();
                }
                static startNodeIndicesVector(t5, e3) {
                  t5.startVector(4, e3, 4);
                }
                static addKernelDefHashes(t5, e3) {
                  t5.addFieldOffset(1, e3, 0);
                }
                static createKernelDefHashesVector(t5, e3) {
                  t5.startVector(8, e3.length, 8);
                  for (let n2 = e3.length - 1; n2 >= 0; n2--) t5.addInt64(e3[n2]);
                  return t5.endVector();
                }
                static startKernelDefHashesVector(t5, e3) {
                  t5.startVector(8, e3, 8);
                }
                static endKernelCreateInfos(t5) {
                  return t5.endObject();
                }
                static createKernelCreateInfos(t5, n2, r2) {
                  return e2.startKernelCreateInfos(t5), e2.addNodeIndices(t5, n2), e2.addKernelDefHashes(t5, r2), e2.endKernelCreateInfos(t5);
                }
              }
              t4.KernelCreateInfos = e2;
            }(t3.fbs || (t3.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsSubGraphSessionState(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsSubGraphSessionState(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                graphId(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                sessionState(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 6);
                  return n3 ? (e4 || new t2.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startSubGraphSessionState(t3) {
                  t3.startObject(2);
                }
                static addGraphId(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addSessionState(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static endSubGraphSessionState(t3) {
                  let e4 = t3.endObject();
                  return t3.requiredField(e4, 4), e4;
                }
                static createSubGraphSessionState(t3, e4, r2) {
                  return n2.startSubGraphSessionState(t3), n2.addGraphId(t3, e4), n2.addSessionState(t3, r2), n2.endSubGraphSessionState(t3);
                }
              }
              e3.SubGraphSessionState = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsSessionState(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsSessionState(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                kernels(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 4);
                  return n3 ? (e4 || new t2.experimental.fbs.KernelCreateInfos()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                subGraphSessionStates(e4, n3) {
                  let r2 = this.bb.__offset(this.bb_pos, 6);
                  return r2 ? (n3 || new t2.experimental.fbs.SubGraphSessionState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r2) + 4 * e4), this.bb) : null;
                }
                subGraphSessionStatesLength() {
                  let t3 = this.bb.__offset(this.bb_pos, 6);
                  return t3 ? this.bb.__vector_len(this.bb_pos + t3) : 0;
                }
                static startSessionState(t3) {
                  t3.startObject(2);
                }
                static addKernels(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addSubGraphSessionStates(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static createSubGraphSessionStatesVector(t3, e4) {
                  t3.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--) t3.addOffset(e4[n3]);
                  return t3.endVector();
                }
                static startSubGraphSessionStatesVector(t3, e4) {
                  t3.startVector(4, e4, 4);
                }
                static endSessionState(t3) {
                  return t3.endObject();
                }
                static createSessionState(t3, e4, r2) {
                  return n2.startSessionState(t3), n2.addKernels(t3, e4), n2.addSubGraphSessionStates(t3, r2), n2.endSessionState(t3);
                }
              }
              e3.SessionState = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {})), function(t2) {
          !function(e2) {
            !function(e3) {
              class n2 {
                static {
                  __name(this, "n");
                }
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t3, e4) {
                  return this.bb_pos = t3, this.bb = e4, this;
                }
                static getRootAsInferenceSession(t3, e4) {
                  return (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static getSizePrefixedRootAsInferenceSession(t3, e4) {
                  return t3.setPosition(t3.position() + r.flatbuffers.SIZE_PREFIX_LENGTH), (e4 || new n2()).__init(t3.readInt32(t3.position()) + t3.position(), t3);
                }
                static bufferHasIdentifier(t3) {
                  return t3.__has_identifier("ORTM");
                }
                ortVersion(t3) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t3) : null;
                }
                model(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 6);
                  return n3 ? (e4 || new t2.experimental.fbs.Model()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                sessionState(e4) {
                  let n3 = this.bb.__offset(this.bb_pos, 8);
                  return n3 ? (e4 || new t2.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n3), this.bb) : null;
                }
                static startInferenceSession(t3) {
                  t3.startObject(3);
                }
                static addOrtVersion(t3, e4) {
                  t3.addFieldOffset(0, e4, 0);
                }
                static addModel(t3, e4) {
                  t3.addFieldOffset(1, e4, 0);
                }
                static addSessionState(t3, e4) {
                  t3.addFieldOffset(2, e4, 0);
                }
                static endInferenceSession(t3) {
                  return t3.endObject();
                }
                static finishInferenceSessionBuffer(t3, e4) {
                  t3.finish(e4, "ORTM");
                }
                static finishSizePrefixedInferenceSessionBuffer(t3, e4) {
                  t3.finish(e4, "ORTM", true);
                }
                static createInferenceSession(t3, e4, r2, i2) {
                  return n2.startInferenceSession(t3), n2.addOrtVersion(t3, e4), n2.addModel(t3, r2), n2.addSessionState(t3, i2), n2.endInferenceSession(t3);
                }
              }
              e3.InferenceSession = n2;
            }(e2.fbs || (e2.fbs = {}));
          }(t2.experimental || (t2.experimental = {}));
        }(e.onnxruntime || (e.onnxruntime = {}));
      }, 7448: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.OnnxjsSessionHandler = void 0;
        const r = n(1670), i = n(9162);
        e.OnnxjsSessionHandler = class {
          constructor(t2) {
            this.session = t2, this.inputNames = this.session.inputNames, this.outputNames = this.session.outputNames;
          }
          async dispose() {
          }
          async run(t2, e2, n2) {
            const o = /* @__PURE__ */ new Map();
            for (const e3 in t2) if (Object.hasOwnProperty.call(t2, e3)) {
              const n3 = t2[e3];
              o.set(e3, new i.Tensor(n3.dims, n3.type, void 0, void 0, n3.data));
            }
            const a = await this.session.run(o), s = {};
            return a.forEach((t3, e3) => {
              s[e3] = new r.Tensor(t3.type, t3.data, t3.dims);
            }), s;
          }
          startProfiling() {
            this.session.startProfiling();
          }
          endProfiling() {
            this.session.endProfiling();
          }
        };
      }, 6919: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.Session = void 0;
        const r = n(7067), i = n(1296), o = n(7091), a = n(1036), s = n(6231), u = n(2644);
        e.Session = class {
          constructor(t2 = {}) {
            this._initialized = false, this.backendHint = t2.backendHint, this.profiler = s.Profiler.create(t2.profiler), this.context = { profiler: this.profiler, graphInputTypes: [], graphInputDims: [] };
          }
          get inputNames() {
            return this._model.graph.getInputNames();
          }
          get outputNames() {
            return this._model.graph.getOutputNames();
          }
          startProfiling() {
            this.profiler.start();
          }
          endProfiling() {
            this.profiler.stop();
          }
          async loadModel(t2, e2, n2) {
            await this.profiler.event("session", "Session.loadModel", async () => {
              const a2 = await (0, o.resolveBackend)(this.backendHint);
              if (this.sessionHandler = a2.createSessionHandler(this.context), this._model = new u.Model(), "string" == typeof t2) {
                const e3 = t2.endsWith(".ort");
                if ("undefined" == typeof fetch) {
                  const n3 = await (0, i.promisify)(r.readFile)(t2);
                  this.initialize(n3, e3);
                } else {
                  const n3 = await fetch(t2), r2 = await n3.arrayBuffer();
                  this.initialize(new Uint8Array(r2), e3);
                }
              } else if (ArrayBuffer.isView(t2)) this.initialize(t2);
              else {
                const r2 = new Uint8Array(t2, e2 || 0, n2 || t2.byteLength);
                this.initialize(r2);
              }
            });
          }
          initialize(t2, e2) {
            if (this._initialized) throw new Error("already initialized");
            this.profiler.event("session", "Session.initialize", () => {
              const n2 = this.sessionHandler.transformGraph ? this.sessionHandler : void 0;
              this._model.load(t2, n2, e2), this.sessionHandler.onGraphInitialized && this.sessionHandler.onGraphInitialized(this._model.graph), this.initializeOps(this._model.graph), this._executionPlan = new a.ExecutionPlan(this._model.graph, this._ops, this.profiler);
            }), this._initialized = true;
          }
          async run(t2) {
            if (!this._initialized) throw new Error("session not initialized yet");
            return this.profiler.event("session", "Session.run", async () => {
              const e2 = this.normalizeAndValidateInputs(t2), n2 = await this._executionPlan.execute(this.sessionHandler, e2);
              return this.createOutput(n2);
            });
          }
          normalizeAndValidateInputs(t2) {
            const e2 = this._model.graph.getInputNames();
            if (Array.isArray(t2)) {
              if (t2.length !== e2.length) throw new Error(`incorrect input array length: expected ${e2.length} but got ${t2.length}`);
            } else {
              if (t2.size !== e2.length) throw new Error(`incorrect input map size: expected ${e2.length} but got ${t2.size}`);
              const n2 = new Array(t2.size);
              let r2 = 0;
              for (let i2 = 0; i2 < e2.length; ++i2) {
                const o2 = t2.get(e2[i2]);
                if (!o2) throw new Error(`missing input tensor for: '${name}'`);
                n2[r2++] = o2;
              }
              t2 = n2;
            }
            if (this.context.graphInputTypes && 0 !== this.context.graphInputTypes.length && this.context.graphInputDims && 0 !== this.context.graphInputDims.length) this.validateInputTensorDims(this.context.graphInputDims, t2, false);
            else {
              const e3 = this._model.graph.getInputIndices(), n2 = this._model.graph.getValues(), r2 = new Array(e3.length);
              for (let i2 = 0; i2 < e3.length; ++i2) {
                const o2 = n2[e3[i2]];
                r2[i2] = o2.type.shape.dims, this.context.graphInputTypes.push(o2.type.tensorType), this.context.graphInputDims.push(t2[i2].dims);
              }
              this.validateInputTensorDims(r2, t2, true);
            }
            return this.validateInputTensorTypes(this.context.graphInputTypes, t2), t2;
          }
          validateInputTensorTypes(t2, e2) {
            for (let n2 = 0; n2 < e2.length; n2++) {
              const r2 = t2[n2], i2 = e2[n2].type;
              if (r2 !== i2) throw new Error(`input tensor[${n2}] check failed: expected type '${r2}' but got ${i2}`);
            }
          }
          validateInputTensorDims(t2, e2, n2) {
            for (let r2 = 0; r2 < e2.length; r2++) {
              const i2 = t2[r2], o2 = e2[r2].dims;
              if (!this.compareTensorDims(i2, o2, n2)) throw new Error(`input tensor[${r2}] check failed: expected shape '[${i2.join(",")}]' but got [${o2.join(",")}]`);
            }
          }
          compareTensorDims(t2, e2, n2) {
            if (t2.length !== e2.length) return false;
            for (let r2 = 0; r2 < t2.length; ++r2) if (t2[r2] !== e2[r2] && (!n2 || 0 !== t2[r2])) return false;
            return true;
          }
          createOutput(t2) {
            const e2 = this._model.graph.getOutputNames();
            if (t2.length !== e2.length) throw new Error("expected number of outputs do not match number of generated outputs");
            const n2 = /* @__PURE__ */ new Map();
            for (let r2 = 0; r2 < e2.length; ++r2) n2.set(e2[r2], t2[r2]);
            return n2;
          }
          initializeOps(t2) {
            const e2 = t2.getNodes();
            this._ops = new Array(e2.length);
            for (let n2 = 0; n2 < e2.length; n2++) this._ops[n2] = this.sessionHandler.resolve(e2[n2], this._model.opsets, t2);
          }
        };
      }, 9162: function(t, e, n) {
        "use strict";
        var r = this && this.__importDefault || function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.Tensor = void 0;
        const i = n(3442), o = r(n(3720)), a = n(1446), s = n(9395), u = n(2517);
        var c = s.onnxruntime.experimental.fbs;
        class l {
          static {
            __name(this, "l");
          }
          get data() {
            if (void 0 === this.cache) {
              const t2 = this.dataProvider(this.dataId);
              if (t2.length !== this.size) throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");
              this.cache = t2;
            }
            return this.cache;
          }
          get stringData() {
            if ("string" !== this.type) throw new TypeError("data type is not string");
            return this.data;
          }
          get integerData() {
            switch (this.type) {
              case "uint8":
              case "int8":
              case "uint16":
              case "int16":
              case "int32":
              case "uint32":
              case "bool":
                return this.data;
              default:
                throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)");
            }
          }
          get floatData() {
            switch (this.type) {
              case "float32":
              case "float64":
                return this.data;
              default:
                throw new TypeError("data type is not float (float32, float64)");
            }
          }
          get numberData() {
            if ("string" !== this.type) return this.data;
            throw new TypeError("type cannot be non-number (string)");
          }
          get(t2) {
            return this.data[u.ShapeUtil.indicesToOffset(t2, this.strides)];
          }
          set(t2, e2) {
            this.data[u.ShapeUtil.indicesToOffset(t2, this.strides)] = e2;
          }
          async getData() {
            return void 0 === this.cache && (this.cache = await this.asyncDataProvider(this.dataId)), this.cache;
          }
          get strides() {
            return this._strides || (this._strides = u.ShapeUtil.computeStrides(this.dims)), this._strides;
          }
          constructor(t2, e2, n2, r2, o2, a2 = i.Guid.create()) {
            this.dims = t2, this.type = e2, this.dataProvider = n2, this.asyncDataProvider = r2, this.cache = o2, this.dataId = a2, this.size = u.ShapeUtil.validateDimsAndCalcSize(t2);
            const s2 = this.size, c2 = void 0 === n2 && void 0 === r2 && void 0 === o2;
            if (void 0 !== o2 && o2.length !== s2) throw new RangeError("Input dims doesn't match data length.");
            if ("string" === e2) {
              if (!(void 0 === o2 || Array.isArray(o2) && o2.every((t3) => "string" == typeof t3))) throw new TypeError("cache should be a string array");
              c2 && (this.cache = new Array(s2));
            } else {
              if (void 0 !== o2) {
                const t3 = f(e2);
                if (!(o2 instanceof t3)) throw new TypeError(`cache should be type ${t3.name}`);
              }
              if (c2) {
                const t3 = new ArrayBuffer(s2 * function(t4) {
                  switch (t4) {
                    case "bool":
                    case "int8":
                    case "uint8":
                      return 1;
                    case "int16":
                    case "uint16":
                      return 2;
                    case "int32":
                    case "uint32":
                    case "float32":
                      return 4;
                    case "float64":
                      return 8;
                    default:
                      throw new Error(`cannot calculate sizeof() on type ${t4}`);
                  }
                }(e2));
                this.cache = function(t4, e3) {
                  return new (f(e3))(t4);
                }(t3, e2);
              }
            }
          }
          static fromProto(t2) {
            if (!t2) throw new Error("cannot construct Value from an empty tensor");
            const e2 = u.ProtoUtil.tensorDataTypeFromProto(t2.dataType), n2 = u.ProtoUtil.tensorDimsFromProto(t2.dims), r2 = new l(n2, e2);
            if ("string" === e2) t2.stringData.forEach((t3, e3) => {
              r2.data[e3] = (0, u.decodeUtf8String)(t3);
            });
            else if (t2.rawData && "number" == typeof t2.rawData.byteLength && t2.rawData.byteLength > 0) {
              const e3 = r2.data, n3 = new DataView(t2.rawData.buffer, t2.rawData.byteOffset, t2.rawData.byteLength), i2 = p(t2.dataType), o2 = t2.rawData.byteLength / i2;
              if (t2.rawData.byteLength % i2 != 0) throw new Error("invalid buffer length");
              if (e3.length !== o2) throw new Error("buffer length mismatch");
              for (let r3 = 0; r3 < o2; r3++) {
                const o3 = h(n3, t2.dataType, r3 * i2);
                e3[r3] = o3;
              }
            } else {
              let e3;
              switch (t2.dataType) {
                case a.onnx.TensorProto.DataType.FLOAT:
                  e3 = t2.floatData;
                  break;
                case a.onnx.TensorProto.DataType.INT32:
                case a.onnx.TensorProto.DataType.INT16:
                case a.onnx.TensorProto.DataType.UINT16:
                case a.onnx.TensorProto.DataType.INT8:
                case a.onnx.TensorProto.DataType.UINT8:
                case a.onnx.TensorProto.DataType.BOOL:
                  e3 = t2.int32Data;
                  break;
                case a.onnx.TensorProto.DataType.INT64:
                  e3 = t2.int64Data;
                  break;
                case a.onnx.TensorProto.DataType.DOUBLE:
                  e3 = t2.doubleData;
                  break;
                case a.onnx.TensorProto.DataType.UINT32:
                case a.onnx.TensorProto.DataType.UINT64:
                  e3 = t2.uint64Data;
                  break;
                default:
                  throw new Error("unspecific error");
              }
              if (null == e3) throw new Error("failed to populate data from a tensorproto value");
              const n3 = r2.data;
              if (n3.length !== e3.length) throw new Error("array length mismatch");
              for (let r3 = 0; r3 < e3.length; r3++) {
                const i2 = e3[r3];
                o.default.isLong(i2) ? n3[r3] = d(i2, t2.dataType) : n3[r3] = i2;
              }
            }
            return r2;
          }
          static fromData(t2, e2, n2) {
            return new l(e2, n2, void 0, void 0, t2);
          }
          static fromOrtTensor(t2) {
            if (!t2) throw new Error("cannot construct Value from an empty tensor");
            const e2 = u.ProtoUtil.tensorDimsFromORTFormat(t2), n2 = u.ProtoUtil.tensorDataTypeFromProto(t2.dataType()), r2 = new l(e2, n2);
            if ("string" === n2) for (let e3 = 0; e3 < t2.stringDataLength(); e3++) r2.data[e3] = t2.stringData(e3);
            else if (t2.rawDataArray() && "number" == typeof t2.rawDataLength() && t2.rawDataLength() > 0) {
              const e3 = r2.data, n3 = new DataView(t2.rawDataArray().buffer, t2.rawDataArray().byteOffset, t2.rawDataLength()), i2 = p(t2.dataType()), o2 = t2.rawDataLength() / i2;
              if (t2.rawDataLength() % i2 != 0) throw new Error("invalid buffer length");
              if (e3.length !== o2) throw new Error("buffer length mismatch");
              for (let r3 = 0; r3 < o2; r3++) {
                const o3 = h(n3, t2.dataType(), r3 * i2);
                e3[r3] = o3;
              }
            }
            return r2;
          }
        }
        function p(t2) {
          switch (t2) {
            case a.onnx.TensorProto.DataType.UINT8:
            case a.onnx.TensorProto.DataType.INT8:
            case a.onnx.TensorProto.DataType.BOOL:
              return 1;
            case a.onnx.TensorProto.DataType.UINT16:
            case a.onnx.TensorProto.DataType.INT16:
              return 2;
            case a.onnx.TensorProto.DataType.FLOAT:
            case a.onnx.TensorProto.DataType.INT32:
            case a.onnx.TensorProto.DataType.UINT32:
              return 4;
            case a.onnx.TensorProto.DataType.INT64:
            case a.onnx.TensorProto.DataType.DOUBLE:
            case a.onnx.TensorProto.DataType.UINT64:
              return 8;
            default:
              throw new Error(`cannot calculate sizeof() on type ${a.onnx.TensorProto.DataType[t2]}`);
          }
        }
        __name(p, "p");
        function f(t2) {
          switch (t2) {
            case "bool":
            case "uint8":
              return Uint8Array;
            case "int8":
              return Int8Array;
            case "int16":
              return Int16Array;
            case "uint16":
              return Uint16Array;
            case "int32":
              return Int32Array;
            case "uint32":
              return Uint32Array;
            case "float32":
              return Float32Array;
            case "float64":
              return Float64Array;
            default:
              throw new Error("unspecified error");
          }
        }
        __name(f, "f");
        function d(t2, e2) {
          if (e2 === a.onnx.TensorProto.DataType.INT64 || e2 === c.TensorDataType.INT64) {
            if (t2.greaterThanOrEqual(2147483648) || t2.lessThan(-2147483648)) throw new TypeError("int64 is not supported");
          } else {
            if (e2 !== a.onnx.TensorProto.DataType.UINT32 && e2 !== c.TensorDataType.UINT32 && e2 !== a.onnx.TensorProto.DataType.UINT64 && e2 !== c.TensorDataType.UINT64) throw new TypeError(`not a LONG type: ${a.onnx.TensorProto.DataType[e2]}`);
            if (t2.greaterThanOrEqual(4294967296) || t2.lessThan(0)) throw new TypeError("uint64 is not supported");
          }
          return t2.toNumber();
        }
        __name(d, "d");
        function h(t2, e2, n2) {
          switch (e2) {
            case a.onnx.TensorProto.DataType.BOOL:
            case a.onnx.TensorProto.DataType.UINT8:
              return t2.getUint8(n2);
            case a.onnx.TensorProto.DataType.INT8:
              return t2.getInt8(n2);
            case a.onnx.TensorProto.DataType.UINT16:
              return t2.getUint16(n2, true);
            case a.onnx.TensorProto.DataType.INT16:
              return t2.getInt16(n2, true);
            case a.onnx.TensorProto.DataType.FLOAT:
              return t2.getFloat32(n2, true);
            case a.onnx.TensorProto.DataType.INT32:
              return t2.getInt32(n2, true);
            case a.onnx.TensorProto.DataType.UINT32:
              return t2.getUint32(n2, true);
            case a.onnx.TensorProto.DataType.INT64:
              return d(o.default.fromBits(t2.getUint32(n2, true), t2.getUint32(n2 + 4, true), false), e2);
            case a.onnx.TensorProto.DataType.DOUBLE:
              return t2.getFloat64(n2, true);
            case a.onnx.TensorProto.DataType.UINT64:
              return d(o.default.fromBits(t2.getUint32(n2, true), t2.getUint32(n2 + 4, true), true), e2);
            default:
              throw new Error(`cannot read from DataView for type ${a.onnx.TensorProto.DataType[e2]}`);
          }
        }
        __name(h, "h");
        e.Tensor = l;
      }, 2517: function(t, e, n) {
        "use strict";
        var r = this && this.__importDefault || function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.decodeUtf8String = e.MAX_CLIP = e.MIN_CLIP = e.PoolConvUtil = e.ReduceUtil = e.SplitUtil = e.MathUtil = e.ShapeUtil = e.LongUtil = e.ProtoUtil = e.GemmUtil = e.arrayCopyHelper = e.BroadcastUtil = e.MatMulUtil = e.ArrayUtil = e.assert = e.checkInputsShape = void 0;
        const i = n(5686), o = r(n(3720)), a = n(1446), s = n(9162);
        e.checkInputsShape = function(t2, ...e2) {
          if (!t2 || t2.length !== e2.length) return false;
          for (let n2 = 0; n2 < t2.length; n2++) if (!t2[n2].dims || t2[n2].dims.length !== e2[n2]) return false;
          return true;
        }, e.assert = function(t2, e2) {
          if (!t2) throw new Error("string" == typeof e2 ? e2 : e2());
        }, e.ArrayUtil = class {
          static arraysEqual(t2, e2) {
            if (t2.length !== e2.length) return false;
            for (let n2 = 0; n2 < t2.length; n2++) if (t2[n2] !== e2[n2]) return false;
            return true;
          }
        };
        class u {
          static {
            __name(this, "u");
          }
          static preprocessInputShapes(t2, e2) {
            return [1 === t2.length ? [1, t2[0]] : t2, 1 === e2.length ? [e2[0], 1] : e2];
          }
          static postprocessOutputShape(t2, e2, n2) {
            1 === e2 && t2.splice(t2.length - 2, 1), 1 === n2 && t2.pop();
          }
          static calcMatMulShape(t2, e2) {
            return t2[1] !== e2[0] ? void 0 : [t2[0], e2[1]];
          }
        }
        e.MatMulUtil = u;
        class c {
          static {
            __name(this, "c");
          }
          static calcShape(t2, e2, n2 = false) {
            const r2 = t2.length, i2 = e2.length;
            if (0 === r2) return e2;
            if (0 === i2) return t2;
            const o2 = Math.max(t2.length, e2.length), a2 = new Array(o2);
            if (n2) {
              if (r2 < 2 || i2 < 2) return;
              const n3 = u.calcMatMulShape([t2[r2 - 2], t2[r2 - 1]], [e2[i2 - 2], e2[i2 - 1]]);
              if (void 0 === n3) return;
              [a2[o2 - 2], a2[o2 - 1]] = n3;
            }
            for (let s2 = n2 ? 3 : 1; s2 <= o2; s2++) {
              const n3 = r2 - s2 < 0 ? 1 : t2[r2 - s2], u2 = i2 - s2 < 0 ? 1 : e2[i2 - s2];
              if (n3 !== u2 && n3 > 1 && u2 > 1) return;
              a2[o2 - s2] = Math.max(n3, u2);
            }
            return a2;
          }
          static index(t2, e2) {
            const n2 = new Array(e2.length);
            return c.fillIndex(t2, e2, n2), n2;
          }
          static fillIndex(t2, e2, n2) {
            const r2 = t2.length - e2.length;
            for (let i2 = 0; i2 < e2.length; i2++) n2[i2] = t2[r2 + i2] % e2[i2];
          }
          static calc(t2, e2, n2, r2, i2) {
            const o2 = c.calcShape(t2.dims, e2.dims);
            if (o2) {
              if (r2 && !f.areEqual(o2, t2.dims)) return;
              const a2 = f.size(o2), u2 = r2 ? t2 : new s.Tensor(o2, i2 || t2.type);
              if (0 === o2.length) u2.set([], n2(t2.get([]), e2.get([])));
              else {
                const r3 = new Array(o2.length), i3 = new Array(t2.dims.length), s2 = new Array(e2.dims.length);
                let l2, p2 = 0, f2 = 0, d2 = false, h2 = false;
                0 === t2.dims.length && (p2 = t2.get([]), d2 = true), 0 === e2.dims.length && (f2 = e2.get([]), h2 = true);
                for (let g2 = 0; g2 < a2; g2++) {
                  l2 = g2;
                  for (let t3 = o2.length - 1; t3 >= 0; t3--) r3[t3] = l2 % o2[t3], l2 = Math.floor(l2 / o2[t3]);
                  d2 || (c.fillIndex(r3, t2.dims, i3), p2 = t2.get(i3)), h2 || (c.fillIndex(r3, e2.dims, s2), f2 = e2.get(s2)), u2.set(r3, n2(p2, f2));
                }
              }
              return u2;
            }
          }
          static isValidBroadcast(t2, e2) {
            const n2 = t2.length, r2 = e2.length;
            if (n2 > r2) return false;
            for (let i2 = 1; i2 <= n2; i2++) if (1 !== t2[n2 - i2] && t2[n2 - i2] !== e2[r2 - i2]) return false;
            return true;
          }
          static getBroadcastDims(t2, e2) {
            const n2 = t2.length, r2 = [];
            for (let i2 = 0; i2 < n2; i2++) {
              const o2 = n2 - 1 - i2, a2 = t2[o2] || 1;
              (e2[e2.length - 1 - i2] || 1) > 1 && 1 === a2 && r2.unshift(o2);
            }
            return r2;
          }
        }
        e.BroadcastUtil = c, e.arrayCopyHelper = function(t2, e2, n2, r2, i2) {
          if (r2 < 0 || r2 >= e2.length) throw new Error("sourceIndex out of bounds");
          if (n2 < 0 || n2 >= t2.length) throw new Error("targetIndex out of bounds");
          if (r2 + i2 > e2.length) throw new Error("source indices to be copied are outside bounds");
          if (n2 + i2 > t2.length) throw new Error("target array is too small to hold result");
          for (let o2 = 0; o2 < i2; o2++) t2[n2 + o2] = e2[r2 + o2];
        }, e.GemmUtil = class {
          static getShapeOfGemmResult(t2, e2, n2, r2, i2) {
            if (2 !== t2.length || 2 !== n2.length) throw new Error("shape need to be of size 2");
            let o2, a2, s2;
            e2 ? (o2 = t2[1], a2 = t2[0]) : (o2 = t2[0], a2 = t2[1]);
            let u2 = -1;
            if (r2 ? (s2 = n2[0], u2 = 1) : (s2 = n2[1], u2 = 0), n2[u2] !== a2) throw new Error("dimension mismatch");
            if (o2 <= 0 || s2 <= 0 || a2 <= 0) throw new Error("invalid shape specified");
            if (i2 && !c.isValidBroadcast(i2, [o2, s2])) throw new Error("gemm: invalid bias shape for broadcast");
            return [o2, s2, a2];
          }
        };
        class l {
          static {
            __name(this, "l");
          }
          static tensorDataTypeFromProto(t2) {
            switch (t2) {
              case a.onnx.TensorProto.DataType.INT8:
                return "int8";
              case a.onnx.TensorProto.DataType.UINT8:
                return "uint8";
              case a.onnx.TensorProto.DataType.BOOL:
                return "bool";
              case a.onnx.TensorProto.DataType.INT16:
                return "int16";
              case a.onnx.TensorProto.DataType.UINT16:
                return "uint16";
              case a.onnx.TensorProto.DataType.INT32:
                return "int32";
              case a.onnx.TensorProto.DataType.UINT32:
                return "uint32";
              case a.onnx.TensorProto.DataType.FLOAT:
                return "float32";
              case a.onnx.TensorProto.DataType.DOUBLE:
                return "float64";
              case a.onnx.TensorProto.DataType.STRING:
                return "string";
              case a.onnx.TensorProto.DataType.INT64:
                return "int32";
              case a.onnx.TensorProto.DataType.UINT64:
                return "uint32";
              default:
                throw new Error(`unsupported data type: ${a.onnx.TensorProto.DataType[t2]}`);
            }
          }
          static tensorDataTypeStringToEnum(t2) {
            switch (t2) {
              case "int8":
                return a.onnx.TensorProto.DataType.INT8;
              case "uint8":
                return a.onnx.TensorProto.DataType.UINT8;
              case "bool":
                return a.onnx.TensorProto.DataType.BOOL;
              case "int16":
                return a.onnx.TensorProto.DataType.INT16;
              case "uint16":
                return a.onnx.TensorProto.DataType.UINT16;
              case "int32":
                return a.onnx.TensorProto.DataType.INT32;
              case "uint32":
                return a.onnx.TensorProto.DataType.UINT32;
              case "float32":
                return a.onnx.TensorProto.DataType.FLOAT;
              case "float64":
                return a.onnx.TensorProto.DataType.DOUBLE;
              case "string":
                return a.onnx.TensorProto.DataType.STRING;
              case "int64":
                return a.onnx.TensorProto.DataType.INT64;
              case "uint64":
                return a.onnx.TensorProto.DataType.UINT64;
              default:
                throw new Error(`unsupported data type: ${t2}`);
            }
          }
          static tensorDimsFromProto(t2) {
            return t2.map((t3) => o.default.isLong(t3) ? t3.toNumber() : t3);
          }
          static tensorValueTypeFromProto(t2) {
            return { tensorType: l.tensorDataTypeFromProto(t2.elemType), shape: { dims: l.tensorDimsFromProto(t2.shape.dim.map((t3) => t3.dimValue)) } };
          }
          static tensorDimsFromORTFormat(t2) {
            const e2 = [];
            for (let n2 = 0; n2 < t2.dimsLength(); n2++) e2.push(p.longToNumber(t2.dims(n2)));
            return e2;
          }
          static tensorAttributesFromORTFormat(t2) {
            const e2 = [];
            for (let n2 = 0; n2 < t2.attributesLength(); n2++) e2.push(t2.attributes(n2));
            return e2;
          }
        }
        e.ProtoUtil = l;
        class p {
          static {
            __name(this, "p");
          }
          static longToNumber(t2, e2) {
            return o.default.isLong(t2) ? t2.toNumber() : t2 instanceof i.flatbuffers.Long ? o.default.fromValue({ low: t2.low, high: t2.high, unsigned: null != e2 && e2 }).toNumber() : t2;
          }
          static isLong(t2) {
            return o.default.isLong(t2) || t2 instanceof i.flatbuffers.Long;
          }
        }
        e.LongUtil = p;
        class f {
          static {
            __name(this, "f");
          }
          static size(t2) {
            return f.getSizeFromDimensionRange(t2, 0, t2.length);
          }
          static sizeFromDimension(t2, e2) {
            if (e2 < 0 || e2 > t2.length) throw new Error(`invalid dimension of ${e2} for sizeFromDimension as Tensor has ${t2.length} dimensions.`);
            return f.getSizeFromDimensionRange(t2, e2, t2.length);
          }
          static sizeToDimension(t2, e2) {
            if (e2 < 0 || e2 > t2.length) throw new Error(`invalid dimension of ${e2} for sizeToDimension as Tensor has ${t2.length} dimensions.`);
            return f.getSizeFromDimensionRange(t2, 0, e2);
          }
          static getSizeFromDimensionRange(t2, e2, n2) {
            let r2 = 1;
            for (let i2 = e2; i2 < n2; i2++) {
              if (t2[i2] <= 0) throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");
              r2 *= t2[i2];
            }
            return r2;
          }
          static computeStrides(t2) {
            const e2 = t2.length;
            if (0 === e2) return [];
            if (1 === e2) return [1];
            const n2 = new Array(e2);
            n2[e2 - 1] = 1, n2[e2 - 2] = t2[e2 - 1];
            for (let r2 = e2 - 3; r2 >= 0; --r2) n2[r2] = n2[r2 + 1] * t2[r2 + 1];
            return n2;
          }
          static transpose(t2) {
            return t2.slice().reverse();
          }
          static indicesToOffset(t2, e2, n2) {
            void 0 === n2 && (n2 = t2.length);
            let r2 = 0;
            for (let i2 = 0; i2 < n2; ++i2) r2 += e2[i2] * t2[i2];
            return r2;
          }
          static offsetToIndices(t2, e2) {
            const n2 = e2.length;
            if (0 === n2) return [];
            if (1 === n2) return [t2 * e2[0]];
            const r2 = new Array(e2.length);
            for (let n3 = 0; n3 < r2.length - 1; ++n3) r2[n3] = Math.floor(t2 / e2[n3]), t2 -= r2[n3] * e2[n3];
            return r2[r2.length - 1] = t2, r2;
          }
          static normalizeAxis(t2, e2) {
            if (t2 < -e2 && t2 >= e2) throw new Error("unsupported axis for this operation.");
            return t2 < 0 ? t2 + e2 : t2;
          }
          static normalizeAxes(t2, e2) {
            return t2.map((t3) => this.normalizeAxis(t3, e2));
          }
          static incrementIndex(t2, e2, n2) {
            if (0 === e2.length || 0 === t2.length) throw new Error("Index incrementing unsupported for scalar Tensor");
            if (void 0 === n2) n2 = e2.length;
            else if (n2 <= 0 || n2 > e2.length) throw new Error("Incorrect axis to increment on");
            for (let r2 = n2 - 1; r2 >= 0 && (t2[r2]++, !(t2[r2] < e2[r2])); --r2) t2[r2] = 0;
          }
          static calculateReshapedDims(t2, e2) {
            if (0 === e2.length) {
              if (0 === t2.length || 1 === f.size(t2)) return [];
              throw new Error("cannot reshape to a scalar Tensor");
            }
            const n2 = e2.length, r2 = new Array(n2);
            let i2 = -1, o2 = 1;
            for (let a3 = 0; a3 < n2; a3++) {
              if (e2[a3] < -1) throw new Error("a dimension in shape hints cannot be less than -1");
              if (-1 === e2[a3]) {
                if (-1 !== i2) throw new Error("at most one dimension in shape hints can be -1");
                i2 = a3;
              } else {
                if (0 === e2[a3]) {
                  if (a3 >= t2.length) throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");
                  r2[a3] = t2[a3];
                } else r2[a3] = e2[a3];
                o2 *= r2[a3];
              }
            }
            const a2 = f.size(t2);
            if (-1 !== i2) {
              if (a2 % o2 != 0) throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${t2}] Output shape: [${e2}]`);
              r2[i2] = a2 / o2;
            } else if (o2 !== a2) throw new Error("reshapedDims and originalDims don't have matching sizes");
            return r2;
          }
          static sortBasedOnPerm(t2, e2) {
            return e2 ? e2.map((e3) => t2[e3]) : t2.slice().reverse();
          }
          static padShape(t2, e2) {
            const n2 = t2.length;
            return t2.map((t3, r2) => t3 + e2[r2] + e2[r2 + n2]);
          }
          static areEqual(t2, e2) {
            return t2.length === e2.length && t2.every((t3, n2) => t3 === e2[n2]);
          }
          static validateDimsAndCalcSize(t2) {
            if (t2.length > 6) throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");
            let e2 = 1;
            for (const n2 of t2) {
              if (!Number.isInteger(n2)) throw new TypeError(`Invalid shape: ${n2} is not an integer`);
              if (n2 < 0 || n2 > 2147483647) throw new TypeError(`Invalid shape: length ${n2} is not allowed`);
              e2 *= n2;
            }
            return e2;
          }
          static flattenShape(t2, e2) {
            e2 < 0 && (e2 += t2.length);
            const n2 = t2.reduce((t3, e3) => t3 * e3, 1), r2 = t2.slice(e2).reduce((t3, e3) => t3 * e3, 1);
            return [n2 / r2, r2];
          }
          static squeezeShape(t2, e2) {
            const n2 = new Array();
            e2 = f.normalizeAxes(e2, t2.length);
            for (let r2 = 0; r2 < t2.length; r2++) {
              const i2 = e2.indexOf(r2) >= 0;
              if (i2 && 1 !== t2[r2]) throw new Error("squeeze an axis of size different than 1");
              (0 === e2.length && t2[r2] > 1 || e2.length > 0 && !i2) && n2.push(t2[r2]);
            }
            return n2;
          }
          static unsqueezeShape(t2, e2) {
            const n2 = new Array(t2.length + e2.length);
            n2.fill(0);
            for (let t3 = 0; t3 < e2.length; t3++) {
              const r3 = f.normalizeAxis(e2[t3], n2.length);
              if (r3 >= n2.length) throw new Error("'axes' has an out of range axis");
              if (0 !== n2[r3]) throw new Error("'axes' has a duplicate axis");
              n2[r3] = 1;
            }
            let r2 = 0;
            for (let e3 = 0; e3 < n2.length; e3++) 0 === n2[e3] && (n2[e3] = t2[r2++]);
            if (r2 !== t2.length) throw new Error("the unsqueezed dimension could not be established");
            return n2;
          }
        }
        e.ShapeUtil = f, e.MathUtil = class {
          static sqr(t2, e2, n2, r2, i2) {
            if (r2 < 0 || r2 >= e2.length) throw new Error("sourceIndex out of bounds");
            if (n2 < 0 || n2 >= t2.length) throw new Error("targetIndex out of bounds");
            if (r2 + i2 > e2.length) throw new Error("source indices to be copied are outside bounds");
            if (n2 + i2 > t2.length) throw new Error("target array is too small to hold result");
            for (let o2 = 0; o2 < i2; o2++) t2[n2 + o2] += Math.pow(e2[r2 + o2], 2);
          }
          static axpy(t2, e2, n2, r2, i2, o2) {
            if (r2 < 0 || r2 >= e2.length) throw new Error("sourceIndex out of bounds");
            if (n2 < 0 || n2 >= t2.length) throw new Error("targetIndex out of bounds");
            if (r2 + i2 > e2.length) throw new Error("source indices to be copied are outside bounds");
            if (n2 + i2 > t2.length) throw new Error("target array is too small to hold result");
            for (let a2 = 0; a2 < i2; a2++) t2[n2 + a2] += o2 * e2[r2 + a2];
          }
          static powx(t2, e2, n2, r2, i2, o2) {
            if (r2 < 0 || r2 >= e2.length) throw new Error("sourceIndex out of bounds");
            if (n2 < 0 || n2 >= t2.length) throw new Error("targetIndex out of bounds");
            if (r2 + i2 > e2.length) throw new Error("source indices to be copied are outside bounds");
            if (n2 + i2 > t2.length) throw new Error("target array is too small to hold result");
            for (let a2 = 0; a2 < i2; a2++) t2[n2 + a2] = Math.pow(e2[r2 + a2], o2);
          }
          static mul(t2, e2, n2, r2, i2) {
            if (r2 < 0 || r2 >= e2.length) throw new Error("sourceIndex out of bounds");
            if (n2 < 0 || n2 >= t2.length) throw new Error("targetIndex out of bounds");
            if (r2 + i2 > e2.length) throw new Error("source indices to be copied are outside bounds");
            if (n2 + i2 > t2.length) throw new Error("target array is too small to hold result");
            for (let o2 = 0; o2 < i2; o2++) t2[n2 + o2] = e2[r2 + o2] * t2[n2 + o2];
          }
        };
        class d {
          static {
            __name(this, "d");
          }
          static splitShape(t2, e2, n2, r2) {
            if (0 === n2.length) {
              if (!r2) throw new Error("need to know number of outputs when the 'split' attribute is not specified");
              d.determineSplit(t2[e2], r2, n2);
            }
            const i2 = [], o2 = [0];
            for (let r3 = 0; r3 < n2.length; ++r3) {
              0 !== r3 && o2.push(o2[r3 - 1] + n2[r3 - 1]);
              const a2 = t2.slice();
              a2[e2] = n2[r3], i2.push(a2);
            }
            return [i2, o2];
          }
          static determineSplit(t2, e2, n2) {
            if (t2 % e2 != 0) throw new Error("cannot split tensor to equal sized parts");
            for (let r2 = 0; r2 < e2; ++r2) n2.push(t2 / e2);
          }
        }
        e.SplitUtil = d;
        class h {
          static {
            __name(this, "h");
          }
          static calcReduce(t2, e2, n2, r2, i2) {
            const o2 = t2.dims.slice(0);
            0 === e2.length && o2.forEach((t3, n3) => e2.push(n3));
            const a2 = h.calcReduceShape(o2, e2, true), u2 = f.size(a2), l2 = new s.Tensor(a2, t2.type), p2 = f.computeStrides(a2), d2 = f.computeStrides(o2), g2 = new Array(o2.length);
            for (let n3 = 0; n3 < u2; n3++) {
              const a3 = f.offsetToIndices(n3, p2);
              c.fillIndex(a3, o2, g2), l2.set(a3, h.calcReduceByAxis(t2.numberData, e2, o2, 0, f.indicesToOffset(g2, d2), r2, i2));
            }
            return n2 ? l2 : new s.Tensor(h.calcReduceShape(o2, e2, n2), l2.type, void 0, void 0, l2.data, l2.dataId);
          }
          static calcReduceByAxis(t2, e2, n2, r2, i2, o2, a2) {
            let s2 = 0;
            if (r2 >= e2.length) return o2(t2[i2]);
            const u2 = e2[r2], c2 = u2 >= n2.length ? 1 : f.size(n2.slice(u2 + 1));
            for (let l2 = 0; l2 < n2[u2]; l2++) s2 = 0 === l2 ? h.calcReduceByAxis(t2, e2, n2, r2 + 1, i2, o2, a2) : a2(s2, h.calcReduceByAxis(t2, e2, n2, r2 + 1, i2, o2, a2)), i2 += c2;
            return s2;
          }
          static calcReduceShape(t2, e2, n2) {
            const r2 = t2.slice();
            for (let t3 = 0; t3 < e2.length; t3++) r2[e2[t3]] = n2 ? 1 : 0;
            return r2.filter((t3) => 0 !== t3);
          }
        }
        e.ReduceUtil = h;
        class g {
          static {
            __name(this, "g");
          }
          static adjustPoolAttributes(t2, e2, n2, r2, i2, o2) {
            if (!t2 && n2.length !== e2.length - 2) throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");
            if (t2) for (let t3 = 0; t3 < e2.length - 2; t3++) t3 >= n2.length ? n2.push(e2[t3 + 2]) : n2[t3] = e2[t3 + 2];
            for (let t3 = 0; t3 < n2.length; t3++) if (t3 < r2.length) {
              if (r2[t3] < 0) throw new Error("strides should be greater than or equal to 1");
            } else r2.push(1);
            for (let t3 = 0; t3 < n2.length; t3++) if (t3 < i2.length) {
              if (i2[t3] < 0) throw new Error("dilations should be greater than or equal to 1");
            } else i2.push(1);
            for (let t3 = 0; t3 < 2 * n2.length; t3++) if (t3 < o2.length) {
              if (o2[t3] < 0) throw new Error("pad should be greater than or equal to 1");
            } else o2.push(0);
            for (let t3 = 0; t3 < n2.length; t3++) {
              if (n2[t3] <= 0) throw new Error("kernel shapes need to be greater than 0");
              if (o2[t3] >= n2[t3] || o2[t3 + n2.length] >= n2[t3]) throw new Error("pads should be smaller than kernel");
            }
          }
          static adjustPadsBasedOnAutoPad(t2, e2, n2, r2, i2, o2) {
            if (o2) {
              if (i2.length !== 2 * (t2.length - 2)) throw new Error("length of pads should be twice the length of data dimensions");
              if (e2.length !== t2.length - 2) throw new Error("length of strides should be the length of data dimensions");
              if (r2.length !== t2.length - 2) throw new Error("length of kernel shapes should be the length of data dimensions");
              for (let a2 = 0; a2 < t2.length - 2; a2++) g.adjustPadAndReturnShape(t2[a2 + 2], e2[a2], n2[a2], r2[a2], i2, a2, a2 + t2.length - 2, o2);
            }
          }
          static computePoolOutputShape(t2, e2, n2, r2, i2, o2, a2) {
            if (e2.length <= 0) throw new Error("input shape must be of size greater than 0");
            const s2 = [e2[0], e2[1]];
            return g.computeShapeHelper(t2, e2, s2, n2, r2, i2, o2, a2), s2;
          }
          static computeConvOutputShape(t2, e2, n2, r2, i2, o2, a2) {
            if (t2.length <= 0 || e2.length <= 0) throw new Error("invalid input tensor dims or invalid filter tensor dims");
            const s2 = [t2[0], e2[0]];
            return g.computeShapeHelper(false, t2, s2, n2, r2, i2, o2, a2), s2;
          }
          static computeShapeHelper(t2, e2, n2, r2, i2, o2, a2, s2) {
            if (t2) for (let t3 = 0; t3 < e2.length - 2; t3++) n2.push(1);
            else for (let t3 = 0; t3 < e2.length - 2; t3++) n2.push(g.adjustPadAndReturnShape(e2[t3 + 2], r2[t3], i2[t3], o2[t3], a2, t3, t3 + e2.length - 2, s2));
          }
          static adjustPadAndReturnShape(t2, e2, n2, r2, i2, o2, a2, s2) {
            const u2 = n2 * (r2 - 1) + 1;
            if (!s2 || "NOTSET" === s2) return Math.floor((t2 + i2[o2] + i2[a2] - u2) / e2 + 1);
            switch (s2) {
              case "VALID":
                return i2[o2] = 0, i2[a2] = 0, Math.floor((t2 - u2) / e2 + 1);
              case "SAME_LOWER":
              case "SAME_UPPER":
                if (1 !== n2) throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");
                {
                  const n3 = ((t2 + e2 - 1) / e2 - 1) * e2 + r2 - t2;
                  return i2[o2] = "SAME_LOWER" === s2 ? Math.floor((n3 + 1) / 2) : Math.floor(n3 / 2), i2[a2] = n3 - i2[o2], Math.floor((t2 + n3 - r2) / e2 + 1);
                }
              default:
                throw new Error("Unsupported AutoPad type");
            }
          }
        }
        e.PoolConvUtil = g, e.MIN_CLIP = -34028234663852886e22, e.MAX_CLIP = 34028234663852886e22, e.decodeUtf8String = function(t2) {
          return new TextDecoder().decode(t2);
        };
      }, 7967: (t, e) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.iterateExtraOptions = void 0, e.iterateExtraOptions = (t2, n, r, i) => {
          if ("object" == typeof t2 && null !== t2) {
            if (r.has(t2)) throw new Error("Circular reference in options");
            r.add(t2);
          }
          Object.entries(t2).forEach(([t3, o]) => {
            const a = n ? n + t3 : t3;
            if ("object" == typeof o) (0, e.iterateExtraOptions)(o, a + ".", r, i);
            else if ("string" == typeof o || "number" == typeof o) i(a, o.toString());
            else {
              if ("boolean" != typeof o) throw new Error("Can't handle extra config type: " + typeof o);
              i(a, o ? "1" : "0");
            }
          });
        };
      }, 2157: function(t, e, n) {
        "use strict";
        var r, i = this && this.__createBinding || (Object.create ? function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2);
          var i2 = Object.getOwnPropertyDescriptor(e2, n2);
          i2 && !("get" in i2 ? !e2.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return e2[n2];
          }, "get") }), Object.defineProperty(t2, r2, i2);
        } : function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2), t2[r2] = e2[n2];
        }), o = this && this.__setModuleDefault || (Object.create ? function(t2, e2) {
          Object.defineProperty(t2, "default", { enumerable: true, value: e2 });
        } : function(t2, e2) {
          t2.default = e2;
        }), a = this && this.__importStar || function(t2) {
          if (t2 && t2.__esModule) return t2;
          var e2 = {};
          if (null != t2) for (var n2 in t2) "default" !== n2 && Object.prototype.hasOwnProperty.call(t2, n2) && i(e2, t2, n2);
          return o(e2, t2), e2;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.endProfiling = e.run = e.releaseSession = e.createSession = e.createSessionFinalize = e.createSessionAllocate = e.initOrt = e.initWasm = void 0;
        const s = n(1670), u = a(n(349)), c = n(6361), l = /* @__PURE__ */ __name(() => !!s.env.wasm.proxy && "undefined" != typeof document, "l");
        let p, f, d, h = false, g = false, b = false;
        const m = [], y = [], _ = [], v = [], w = [], x = [], T = /* @__PURE__ */ __name(() => {
          if (h || !g || b || !p) throw new Error("worker not ready");
        }, "T"), S = /* @__PURE__ */ __name((t2) => {
          switch (t2.data.type) {
            case "init-wasm":
              h = false, t2.data.err ? (b = true, f[1](t2.data.err)) : (g = true, f[0]());
              break;
            case "init-ort":
              t2.data.err ? d[1](t2.data.err) : d[0]();
              break;
            case "create_allocate":
              t2.data.err ? m.shift()[1](t2.data.err) : m.shift()[0](t2.data.out);
              break;
            case "create_finalize":
              t2.data.err ? y.shift()[1](t2.data.err) : y.shift()[0](t2.data.out);
              break;
            case "create":
              t2.data.err ? _.shift()[1](t2.data.err) : _.shift()[0](t2.data.out);
              break;
            case "release":
              t2.data.err ? v.shift()[1](t2.data.err) : v.shift()[0]();
              break;
            case "run":
              t2.data.err ? w.shift()[1](t2.data.err) : w.shift()[0](t2.data.out);
              break;
            case "end-profiling":
              t2.data.err ? x.shift()[1](t2.data.err) : x.shift()[0]();
          }
        }, "S"), O = "undefined" != typeof document ? null === (r = null === document || void 0 === document ? void 0 : document.currentScript) || void 0 === r ? void 0 : r.src : void 0;
        e.initWasm = async () => {
          if (l()) {
            if (g) return;
            if (h) throw new Error("multiple calls to 'initWasm()' detected.");
            if (b) throw new Error("previous call to 'initWasm()' failed.");
            return h = true, void 0 === s.env.wasm.wasmPaths && O && 0 !== O.indexOf("blob:") && (s.env.wasm.wasmPaths = O.substr(0, +O.lastIndexOf("/") + 1)), new Promise((t2, e2) => {
              null == p || p.terminate(), p = n(9710).Z(), p.onmessage = S, f = [t2, e2];
              const r2 = { type: "init-wasm", in: s.env.wasm };
              p.postMessage(r2);
            });
          }
          return (0, c.initializeWebAssembly)(s.env.wasm);
        }, e.initOrt = async (t2, e2) => {
          if (l()) return T(), new Promise((n2, r2) => {
            d = [n2, r2];
            const i2 = { type: "init-ort", in: { numThreads: t2, loggingLevel: e2 } };
            p.postMessage(i2);
          });
          u.initOrt(t2, e2);
        }, e.createSessionAllocate = async (t2) => l() ? (T(), new Promise((e2, n2) => {
          m.push([e2, n2]);
          const r2 = { type: "create_allocate", in: { model: t2 } };
          p.postMessage(r2, [t2.buffer]);
        })) : u.createSessionAllocate(t2), e.createSessionFinalize = async (t2, e2) => l() ? (T(), new Promise((n2, r2) => {
          y.push([n2, r2]);
          const i2 = { type: "create_finalize", in: { modeldata: t2, options: e2 } };
          p.postMessage(i2);
        })) : u.createSessionFinalize(t2, e2), e.createSession = async (t2, e2) => l() ? (T(), new Promise((n2, r2) => {
          _.push([n2, r2]);
          const i2 = { type: "create", in: { model: t2, options: e2 } };
          p.postMessage(i2, [t2.buffer]);
        })) : u.createSession(t2, e2), e.releaseSession = async (t2) => {
          if (l()) return T(), new Promise((e2, n2) => {
            v.push([e2, n2]);
            const r2 = { type: "release", in: t2 };
            p.postMessage(r2);
          });
          u.releaseSession(t2);
        }, e.run = async (t2, e2, n2, r2, i2) => l() ? (T(), new Promise((o2, a2) => {
          w.push([o2, a2]);
          const s2 = { type: "run", in: { sessionId: t2, inputIndices: e2, inputs: n2, outputIndices: r2, options: i2 } };
          p.postMessage(s2, u.extractTransferableBuffers(n2));
        })) : u.run(t2, e2, n2, r2, i2), e.endProfiling = async (t2) => {
          if (l()) return T(), new Promise((e2, n2) => {
            x.push([e2, n2]);
            const r2 = { type: "end-profiling", in: t2 };
            p.postMessage(r2);
          });
          u.endProfiling(t2);
        };
      }, 586: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.setRunOptions = void 0;
        const r = n(7967), i = n(4983), o = n(6361);
        e.setRunOptions = (t2) => {
          const e2 = (0, o.getInstance)();
          let n2 = 0;
          const a = [], s = t2 || {};
          try {
            if (void 0 === (null == t2 ? void 0 : t2.logSeverityLevel)) s.logSeverityLevel = 2;
            else if ("number" != typeof t2.logSeverityLevel || !Number.isInteger(t2.logSeverityLevel) || t2.logSeverityLevel < 0 || t2.logSeverityLevel > 4) throw new Error(`log serverity level is not valid: ${t2.logSeverityLevel}`);
            if (void 0 === (null == t2 ? void 0 : t2.logVerbosityLevel)) s.logVerbosityLevel = 0;
            else if ("number" != typeof t2.logVerbosityLevel || !Number.isInteger(t2.logVerbosityLevel)) throw new Error(`log verbosity level is not valid: ${t2.logVerbosityLevel}`);
            void 0 === (null == t2 ? void 0 : t2.terminate) && (s.terminate = false);
            let o2 = 0;
            if (void 0 !== (null == t2 ? void 0 : t2.tag) && (o2 = (0, i.allocWasmString)(t2.tag, a)), n2 = e2._OrtCreateRunOptions(s.logSeverityLevel, s.logVerbosityLevel, !!s.terminate, o2), 0 === n2) throw new Error("Can't create run options");
            return void 0 !== (null == t2 ? void 0 : t2.extra) && (0, r.iterateExtraOptions)(t2.extra, "", /* @__PURE__ */ new WeakSet(), (t3, r2) => {
              const o3 = (0, i.allocWasmString)(t3, a), s2 = (0, i.allocWasmString)(r2, a);
              if (0 !== e2._OrtAddRunConfigEntry(n2, o3, s2)) throw new Error(`Can't set a run config entry: ${t3} - ${r2}`);
            }), [n2, a];
          } catch (t3) {
            throw 0 !== n2 && e2._OrtReleaseRunOptions(n2), a.forEach(e2._free), t3;
          }
        };
      }, 2306: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.OnnxruntimeWebAssemblySessionHandler = void 0;
        const r = n(2806), i = n(1670), o = n(2850), a = n(2157);
        let s;
        e.OnnxruntimeWebAssemblySessionHandler = class {
          async createSessionAllocate(t2) {
            const e2 = await fetch(t2), n2 = await e2.arrayBuffer();
            return (0, a.createSessionAllocate)(new Uint8Array(n2));
          }
          async loadModel(t2, e2) {
            if (s || (await (0, a.initOrt)(i.env.wasm.numThreads, ((t3) => {
              switch (t3) {
                case "verbose":
                  return 0;
                case "info":
                  return 1;
                case "warning":
                  return 2;
                case "error":
                  return 3;
                case "fatal":
                  return 4;
                default:
                  throw new Error(`unsupported logging level: ${t3}`);
              }
            })(i.env.logLevel)), s = true), "string" == typeof t2) if ("undefined" == typeof fetch) {
              const n2 = await (0, o.promisify)(r.readFile)(t2);
              [this.sessionId, this.inputNames, this.outputNames] = await (0, a.createSession)(n2, e2);
            } else {
              const n2 = await this.createSessionAllocate(t2);
              [this.sessionId, this.inputNames, this.outputNames] = await (0, a.createSessionFinalize)(n2, e2);
            }
            else [this.sessionId, this.inputNames, this.outputNames] = await (0, a.createSession)(t2, e2);
          }
          async dispose() {
            return (0, a.releaseSession)(this.sessionId);
          }
          async run(t2, e2, n2) {
            const r2 = [], o2 = [];
            Object.entries(t2).forEach((t3) => {
              const e3 = t3[0], n3 = t3[1], i2 = this.inputNames.indexOf(e3);
              if (-1 === i2) throw new Error(`invalid input '${e3}'`);
              r2.push(n3), o2.push(i2);
            });
            const s2 = [];
            Object.entries(e2).forEach((t3) => {
              const e3 = t3[0], n3 = this.outputNames.indexOf(e3);
              if (-1 === n3) throw new Error(`invalid output '${e3}'`);
              s2.push(n3);
            });
            const u = await (0, a.run)(this.sessionId, o2, r2.map((t3) => [t3.type, t3.dims, t3.data]), s2, n2), c = {};
            for (let t3 = 0; t3 < u.length; t3++) c[this.outputNames[s2[t3]]] = new i.Tensor(u[t3][0], u[t3][2], u[t3][1]);
            return c;
          }
          startProfiling() {
          }
          endProfiling() {
            (0, a.endProfiling)(this.sessionId);
          }
        };
      }, 4919: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.setSessionOptions = void 0;
        const r = n(7967), i = n(4983), o = n(6361);
        e.setSessionOptions = (t2) => {
          const e2 = (0, o.getInstance)();
          let n2 = 0;
          const a = [], s = t2 || {};
          ((t3) => {
            t3.extra || (t3.extra = {}), t3.extra.session || (t3.extra.session = {});
            const e3 = t3.extra.session;
            e3.use_ort_model_bytes_directly || (e3.use_ort_model_bytes_directly = "1");
          })(s);
          try {
            void 0 === (null == t2 ? void 0 : t2.graphOptimizationLevel) && (s.graphOptimizationLevel = "all");
            const u = ((t3) => {
              switch (t3) {
                case "disabled":
                  return 0;
                case "basic":
                  return 1;
                case "extended":
                  return 2;
                case "all":
                  return 99;
                default:
                  throw new Error(`unsupported graph optimization level: ${t3}`);
              }
            })(s.graphOptimizationLevel);
            void 0 === (null == t2 ? void 0 : t2.enableCpuMemArena) && (s.enableCpuMemArena = true), void 0 === (null == t2 ? void 0 : t2.enableMemPattern) && (s.enableMemPattern = true), void 0 === (null == t2 ? void 0 : t2.executionMode) && (s.executionMode = "sequential");
            const c = ((t3) => {
              switch (t3) {
                case "sequential":
                  return 0;
                case "parallel":
                  return 1;
                default:
                  throw new Error(`unsupported execution mode: ${t3}`);
              }
            })(s.executionMode);
            let l = 0;
            if (void 0 !== (null == t2 ? void 0 : t2.logId) && (l = (0, i.allocWasmString)(t2.logId, a)), void 0 === (null == t2 ? void 0 : t2.logSeverityLevel)) s.logSeverityLevel = 2;
            else if ("number" != typeof t2.logSeverityLevel || !Number.isInteger(t2.logSeverityLevel) || t2.logSeverityLevel < 0 || t2.logSeverityLevel > 4) throw new Error(`log serverity level is not valid: ${t2.logSeverityLevel}`);
            if (void 0 === (null == t2 ? void 0 : t2.logVerbosityLevel)) s.logVerbosityLevel = 0;
            else if ("number" != typeof t2.logVerbosityLevel || !Number.isInteger(t2.logVerbosityLevel)) throw new Error(`log verbosity level is not valid: ${t2.logVerbosityLevel}`);
            if (void 0 === (null == t2 ? void 0 : t2.enableProfiling) && (s.enableProfiling = false), n2 = e2._OrtCreateSessionOptions(u, !!s.enableCpuMemArena, !!s.enableMemPattern, c, !!s.enableProfiling, 0, l, s.logSeverityLevel, s.logVerbosityLevel), 0 === n2) throw new Error("Can't create session options");
            return (null == t2 ? void 0 : t2.executionProviders) && ((t3, e3, n3) => {
              for (const r2 of e3) {
                let e4 = "string" == typeof r2 ? r2 : r2.name;
                switch (e4) {
                  case "xnnpack":
                    e4 = "XNNPACK";
                    break;
                  case "wasm":
                  case "cpu":
                    continue;
                  default:
                    throw new Error(`not supported EP: ${e4}`);
                }
                const a2 = (0, i.allocWasmString)(e4, n3);
                if (0 !== (0, o.getInstance)()._OrtAppendExecutionProvider(t3, a2)) throw new Error(`Can't append execution provider: ${e4}`);
              }
            })(n2, t2.executionProviders, a), void 0 !== (null == t2 ? void 0 : t2.extra) && (0, r.iterateExtraOptions)(t2.extra, "", /* @__PURE__ */ new WeakSet(), (t3, r2) => {
              const o2 = (0, i.allocWasmString)(t3, a), s2 = (0, i.allocWasmString)(r2, a);
              if (0 !== e2._OrtAddSessionConfigEntry(n2, o2, s2)) throw new Error(`Can't set a session config entry: ${t3} - ${r2}`);
            }), [n2, a];
          } catch (t3) {
            throw 0 !== n2 && e2._OrtReleaseSessionOptions(n2), a.forEach(e2._free), t3;
          }
        };
      }, 4983: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.allocWasmString = void 0;
        const r = n(6361);
        e.allocWasmString = (t2, e2) => {
          const n2 = (0, r.getInstance)(), i = n2.lengthBytesUTF8(t2) + 1, o = n2._malloc(i);
          return n2.stringToUTF8(t2, o, i), e2.push(o), o;
        };
      }, 349: (t, e, n) => {
        "use strict";
        Object.defineProperty(e, "__esModule", { value: true }), e.extractTransferableBuffers = e.endProfiling = e.run = e.releaseSession = e.createSession = e.createSessionFinalize = e.createSessionAllocate = e.initOrt = void 0;
        const r = n(586), i = n(4919), o = n(4983), a = n(6361);
        e.initOrt = (t2, e2) => {
          const n2 = (0, a.getInstance)()._OrtInit(t2, e2);
          if (0 !== n2) throw new Error(`Can't initialize onnxruntime. error code = ${n2}`);
        };
        const s = /* @__PURE__ */ new Map();
        e.createSessionAllocate = (t2) => {
          const e2 = (0, a.getInstance)(), n2 = e2._malloc(t2.byteLength);
          return e2.HEAPU8.set(t2, n2), [n2, t2.byteLength];
        }, e.createSessionFinalize = (t2, e2) => {
          const n2 = (0, a.getInstance)();
          let r2 = 0, o2 = 0, u2 = [];
          try {
            if ([o2, u2] = (0, i.setSessionOptions)(e2), r2 = n2._OrtCreateSession(t2[0], t2[1], o2), 0 === r2) throw new Error("Can't create a session");
          } finally {
            n2._free(t2[0]), n2._OrtReleaseSessionOptions(o2), u2.forEach(n2._free);
          }
          const c2 = n2._OrtGetInputCount(r2), l2 = n2._OrtGetOutputCount(r2), p = [], f = [], d = [], h = [];
          for (let t3 = 0; t3 < c2; t3++) {
            const e3 = n2._OrtGetInputName(r2, t3);
            if (0 === e3) throw new Error("Can't get an input name");
            f.push(e3), p.push(n2.UTF8ToString(e3));
          }
          for (let t3 = 0; t3 < l2; t3++) {
            const e3 = n2._OrtGetOutputName(r2, t3);
            if (0 === e3) throw new Error("Can't get an output name");
            h.push(e3), d.push(n2.UTF8ToString(e3));
          }
          return s.set(r2, [r2, f, h]), [r2, p, d];
        }, e.createSession = (t2, n2) => {
          const r2 = (0, e.createSessionAllocate)(t2);
          return (0, e.createSessionFinalize)(r2, n2);
        }, e.releaseSession = (t2) => {
          const e2 = (0, a.getInstance)(), n2 = s.get(t2);
          if (!n2) throw new Error("invalid session id");
          const r2 = n2[0], i2 = n2[1], o2 = n2[2];
          i2.forEach(e2._OrtFree), o2.forEach(e2._OrtFree), e2._OrtReleaseSession(r2), s.delete(t2);
        };
        const u = /* @__PURE__ */ __name((t2) => {
          switch (t2) {
            case "int8":
              return 3;
            case "uint8":
              return 2;
            case "bool":
              return 9;
            case "int16":
              return 5;
            case "uint16":
              return 4;
            case "int32":
              return 6;
            case "uint32":
              return 12;
            case "float32":
              return 1;
            case "float64":
              return 11;
            case "string":
              return 8;
            case "int64":
              return 7;
            case "uint64":
              return 13;
            default:
              throw new Error(`unsupported data type: ${t2}`);
          }
        }, "u"), c = /* @__PURE__ */ __name((t2) => {
          switch (t2) {
            case 3:
              return "int8";
            case 2:
              return "uint8";
            case 9:
              return "bool";
            case 5:
              return "int16";
            case 4:
              return "uint16";
            case 6:
              return "int32";
            case 12:
              return "uint32";
            case 1:
              return "float32";
            case 11:
              return "float64";
            case 8:
              return "string";
            case 7:
              return "int64";
            case 13:
              return "uint64";
            default:
              throw new Error(`unsupported data type: ${t2}`);
          }
        }, "c"), l = /* @__PURE__ */ __name((t2) => {
          switch (t2) {
            case "float32":
              return Float32Array;
            case "uint8":
            case "bool":
              return Uint8Array;
            case "int8":
              return Int8Array;
            case "uint16":
              return Uint16Array;
            case "int16":
              return Int16Array;
            case "int32":
              return Int32Array;
            case "float64":
              return Float64Array;
            case "uint32":
              return Uint32Array;
            case "int64":
              return BigInt64Array;
            case "uint64":
              return BigUint64Array;
            default:
              throw new Error(`unsupported type: ${t2}`);
          }
        }, "l");
        e.run = (t2, e2, n2, i2, p) => {
          const f = (0, a.getInstance)(), d = s.get(t2);
          if (!d) throw new Error("invalid session id");
          const h = d[0], g = d[1], b = d[2], m = e2.length, y = i2.length;
          let _ = 0, v = [];
          const w = [], x = [];
          try {
            [_, v] = (0, r.setRunOptions)(p);
            for (let t4 = 0; t4 < m; t4++) {
              const e3 = n2[t4][0], r2 = n2[t4][1], i3 = n2[t4][2];
              let a3, s3;
              if (Array.isArray(i3)) {
                s3 = 4 * i3.length, a3 = f._malloc(s3), x.push(a3);
                let t5 = a3 / 4;
                for (let e4 = 0; e4 < i3.length; e4++) {
                  if ("string" != typeof i3[e4]) throw new TypeError(`tensor data at index ${e4} is not a string`);
                  f.HEAPU32[t5++] = (0, o.allocWasmString)(i3[e4], x);
                }
              } else s3 = i3.byteLength, a3 = f._malloc(s3), x.push(a3), f.HEAPU8.set(new Uint8Array(i3.buffer, i3.byteOffset, s3), a3);
              const c2 = f.stackSave(), l2 = f.stackAlloc(4 * r2.length);
              try {
                let t5 = l2 / 4;
                r2.forEach((e4) => f.HEAP32[t5++] = e4);
                const n3 = f._OrtCreateTensor(u(e3), a3, s3, l2, r2.length);
                if (0 === n3) throw new Error("Can't create a tensor");
                w.push(n3);
              } finally {
                f.stackRestore(c2);
              }
            }
            const t3 = f.stackSave(), a2 = f.stackAlloc(4 * m), s2 = f.stackAlloc(4 * m), d2 = f.stackAlloc(4 * y), T = f.stackAlloc(4 * y);
            try {
              let n3 = a2 / 4, r2 = s2 / 4, o2 = d2 / 4, u2 = T / 4;
              for (let t4 = 0; t4 < m; t4++) f.HEAPU32[n3++] = w[t4], f.HEAPU32[r2++] = g[e2[t4]];
              for (let t4 = 0; t4 < y; t4++) f.HEAPU32[o2++] = 0, f.HEAPU32[u2++] = b[i2[t4]];
              let p2 = f._OrtRun(h, s2, a2, m, T, y, d2, _);
              const v2 = [];
              if (0 === p2) for (let t4 = 0; t4 < y; t4++) {
                const e3 = f.HEAPU32[d2 / 4 + t4], n4 = f.stackSave(), r3 = f.stackAlloc(16);
                let i3, o3 = 0;
                try {
                  if (p2 = f._OrtGetTensorData(e3, r3, r3 + 4, r3 + 8, r3 + 12), 0 !== p2) throw new Error(`Can't access output tensor data. error code = ${p2}`);
                  let t5 = r3 / 4;
                  const a3 = f.HEAPU32[t5++];
                  o3 = f.HEAPU32[t5++];
                  const s3 = f.HEAPU32[t5++], u3 = f.HEAPU32[t5++], d3 = [];
                  for (let t6 = 0; t6 < u3; t6++) d3.push(f.HEAPU32[s3 / 4 + t6]);
                  f._OrtFree(s3);
                  const h2 = 0 === d3.length ? 1 : d3.reduce((t6, e4) => t6 * e4);
                  if (i3 = c(a3), "string" === i3) {
                    const t6 = [];
                    let e4 = o3 / 4;
                    for (let n5 = 0; n5 < h2; n5++) {
                      const r4 = f.HEAPU32[e4++], i4 = n5 === h2 - 1 ? void 0 : f.HEAPU32[e4] - r4;
                      t6.push(f.UTF8ToString(r4, i4));
                    }
                    v2.push([i3, d3, t6]);
                  } else {
                    const t6 = new (l(i3))(h2);
                    new Uint8Array(t6.buffer, t6.byteOffset, t6.byteLength).set(f.HEAPU8.subarray(o3, o3 + t6.byteLength)), v2.push([i3, d3, t6]);
                  }
                } finally {
                  f.stackRestore(n4), "string" === i3 && o3 && f._free(o3), f._OrtReleaseTensor(e3);
                }
              }
              if (0 === p2) return v2;
              throw new Error(`failed to call OrtRun(). error code = ${p2}.`);
            } finally {
              f.stackRestore(t3);
            }
          } finally {
            w.forEach(f._OrtReleaseTensor), x.forEach(f._free), f._OrtReleaseRunOptions(_), v.forEach(f._free);
          }
        }, e.endProfiling = (t2) => {
          const e2 = (0, a.getInstance)(), n2 = s.get(t2);
          if (!n2) throw new Error("invalid session id");
          const r2 = n2[0], i2 = e2._OrtEndProfiling(r2);
          if (0 === i2) throw new Error("Can't get an profile file name");
          e2._OrtFree(i2);
        }, e.extractTransferableBuffers = (t2) => {
          const e2 = [];
          for (const n2 of t2) {
            const t3 = n2[2];
            !Array.isArray(t3) && t3.buffer && e2.push(t3.buffer);
          }
          return e2;
        };
      }, 6361: function(t, e, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2);
          var i2 = Object.getOwnPropertyDescriptor(e2, n2);
          i2 && !("get" in i2 ? !e2.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return e2[n2];
          }, "get") }), Object.defineProperty(t2, r2, i2);
        } : function(t2, e2, n2, r2) {
          void 0 === r2 && (r2 = n2), t2[r2] = e2[n2];
        }), i = this && this.__setModuleDefault || (Object.create ? function(t2, e2) {
          Object.defineProperty(t2, "default", { enumerable: true, value: e2 });
        } : function(t2, e2) {
          t2.default = e2;
        }), o = this && this.__importStar || function(t2) {
          if (t2 && t2.__esModule) return t2;
          var e2 = {};
          if (null != t2) for (var n2 in t2) "default" !== n2 && Object.prototype.hasOwnProperty.call(t2, n2) && r(e2, t2, n2);
          return i(e2, t2), e2;
        }, a = this && this.__importDefault || function(t2) {
          return t2 && t2.__esModule ? t2 : { default: t2 };
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.dispose = e.getInstance = e.initializeWebAssembly = void 0;
        const s = o(n(6449)), u = a(n(932)), c = n(3474);
        let l, p = false, f = false, d = false;
        const h = /* @__PURE__ */ __name((t2, e2) => e2 ? t2 ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-threaded.wasm" : t2 ? "ort-wasm-simd.wasm" : "ort-wasm.wasm", "h");
        e.initializeWebAssembly = async (t2) => {
          if (p) return Promise.resolve();
          if (f) throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
          if (d) throw new Error("previous call to 'initializeWebAssembly()' failed.");
          f = true;
          const e2 = t2.initTimeout, r2 = t2.numThreads, i2 = t2.simd, o2 = r2 > 1 && (() => {
            try {
              return "undefined" != typeof SharedArrayBuffer && ("undefined" != typeof MessageChannel && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11])));
            } catch (t3) {
              return false;
            }
          })(), a2 = i2 && (() => {
            try {
              return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11]));
            } catch (t3) {
              return false;
            }
          })(), g = "string" == typeof t2.wasmPaths ? t2.wasmPaths : void 0, b = h(false, o2), m = h(a2, o2), y = "object" == typeof t2.wasmPaths ? t2.wasmPaths[m] : void 0;
          let _ = false;
          const v = [];
          if (e2 > 0 && v.push(new Promise((t3) => {
            setTimeout(() => {
              _ = true, t3();
            }, e2);
          })), v.push(new Promise((t3, e3) => {
            const r3 = o2 ? c : u.default, i3 = { locateFile: /* @__PURE__ */ __name((t4, e4) => o2 && t4.endsWith(".worker.js") && "undefined" != typeof Blob ? URL.createObjectURL(new Blob([n(4154)], { type: "text/javascript" })) : t4 === b ? null != y ? y : (null != g ? g : e4) + m : e4 + t4, "locateFile") };
            if (o2) if ("undefined" == typeof Blob) i3.mainScriptUrlOrBlob = s.join("/", "ort-wasm-threaded.js");
            else {
              const t4 = `var ortWasmThreaded=(function(){var _scriptDir;return ${r3.toString()}})();`;
              i3.mainScriptUrlOrBlob = new Blob([t4], { type: "text/javascript" });
            }
            r3(i3).then((e4) => {
              f = false, p = true, l = e4, t3();
            }, (t4) => {
              f = false, d = true, e3(t4);
            });
          })), await Promise.race(v), _) throw new Error(`WebAssembly backend initializing failed due to timeout: ${e2}ms`);
        }, e.getInstance = () => {
          if (p && l) return l;
          throw new Error("WebAssembly is not initialized yet.");
        }, e.dispose = () => {
          var t2;
          !p || f || d || (f = true, null === (t2 = l.PThread) || void 0 === t2 || t2.terminateAllThreads(), l = void 0, f = false, p = false, d = true);
        };
      }, 9710: (t, e, n) => {
        "use strict";
        n.d(e, { Z: /* @__PURE__ */ __name(() => o, "Z") });
        var r = n(477), i = n.n(r);
        function o() {
          return i()('/*!\n* ONNX Runtime Web v1.14.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m="./this.program",g=(t,e)=>{throw e},v="object"==typeof window,w="function"==typeof importScripts,_="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A="";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+"/":"//",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:"utf8")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof ct))throw t})),process.on("unhandledRejection",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x("exiting due to exception: "+e),process.exit(t)},u.inspect=function(){return"[Emscripten Module object]"};try{e=n(925)}catch(t){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:"undefined"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf("blob:")?A.substr(0,A.replace(/[?#].*/,"").lastIndexOf("/")+1):"",_||(l=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&"undefined"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+"\\n"),E=t=>h.writeSync(2,t+"\\n"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;"object"!=typeof WebAssembly&&at("no native wasm support detected");var j,k,D,P,U,F,I,W,H=!1,L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):""}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:"onAbort",arg:t}):u.onAbort&&u.onAbort(t),x(t="Aborted("+t+")"),H=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),s(t),t}function it(){return tt.startsWith("data:application/octet-stream;base64,")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw"both async and sync fetching of the wasm failed"}catch(t){at(t)}}tt="ort-wasm-threaded.wasm",it()||(tt=S(tt));var ut={};function ct(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:"run",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),"unwind";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x(\'Internal error! Worker sent a message "\'+r+\'" to target pthread \'+n.targetThread+", but that thread no longer exists!")}else"processProxyingQueue"===r?zt(n.queue):"spawnThread"===r?lt(n):"cleanupThread"===r?st(n.thread):"killThread"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):"cancelThread"===r?ht.Vb[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):"print"===r?C("Thread "+n.threadId+": "+n.text):"printErr"===r?x("Thread "+n.threadId+": "+n.text):"alert"===r?alert("Thread "+n.threadId+": "+n.text):"setimmediate"===n.target?t.postMessage(n):"onAbort"===r?u.onAbort&&u.onAbort(n.arg):r&&x("worker sent an unknown command "+r);ht.Bc=void 0},t.onerror=t=>{throw x("worker sent an error! "+t.filename+":"+t.lineno+": "+t.message),t},_&&(t.on("message",(function(e){t.onmessage({data:e})})),t.on("error",(function(e){t.onerror(e)})),t.on("detachedExit",(function(){}))),t.postMessage({cmd:"load",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S("ort-wasm-threaded.worker.js");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||"unwind"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if("undefined"==typeof SharedArrayBuffer)return x("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc="spawnThread",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+"="+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,"0")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):""},r=Y(r),f={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})r=r.replace(new RegExp(p,"g"),f[p]);var h="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),d="January February March April May June July August September October November December".split(" ");for(p in f={"%a":function(t){return h[t.Tb].substring(0,3)},"%A":function(t){return h[t.Tb]},"%b":function(t){return d[t.ec].substring(0,3)},"%B":function(t){return d[t.ec]},"%C":function(t){return u((t.Xb+1900)/100|0,2)},"%d":function(t){return u(t.jc,2)},"%e":function(t){return o(t.jc,2," ")},"%g":function(t){return l(t).toString().substring(2)},"%G":function(t){return l(t)},"%H":function(t){return u(t.dc,2)},"%I":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},"%m":function(t){return u(t.ec+1,2)},"%M":function(t){return u(t.Kc,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.dc&&12>t.dc?"AM":"PM"},"%S":function(t){return u(t.Lc,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Tb||7},"%U":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},"%V":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},"%w":function(t){return t.Tb},"%W":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},"%y":function(t){return(t.Xb+1900).toString().substring(2)},"%Y":function(t){return t.Xb+1900},"%z":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.Mc},"%%":function(){return"%"}},r=r.replace(/%%/g,"\\0\\0"),f)r.includes(p)&&(r=r.replace(new RegExp(p,"g"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\0\\0/g,"%")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x("Unexpected exception thrown, this is not properly supported - aborting"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at("no exception to throw");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:"cleanupThread",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ua:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:"processProxyingQueue",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:"processProxyingQueue",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at("")},U:function(){if(!_&&!w){var t="Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t="warning: "+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw"unwind"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at("randomDevice")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if("function"==typeof fetch&&!tt.startsWith("file://"))return fetch(tt,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+tt+"\'";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x("failed to asynchronously prepare wasm: "+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x("Module.instantiateWasm callback failed with error: "+t),!1}(M||"function"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith("file://")||_||"function"!=typeof fetch?n(e):fetch(tt,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x("wasm streaming compile failed: "+t),x("falling back to ArrayBuffer instantiation"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for("function"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:"loaded"});else{if(u.preRun)for("function"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus("Running..."),setTimeout((function(){setTimeout((function(){u.setStatus("")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for("function"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p="./this.program",h=(t,e)=>{throw e},d="object"==typeof window,y="function"==typeof importScripts,b="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,m="";b?(m=y?n(908).dirname(m)+"/":"//",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:"utf8")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof J))throw t})),process.on("unhandledRejection",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w("exiting due to exception: "+e),process.exit(t)},e.inspect=function(){return"[Emscripten Module object]"}):(d||y)&&(y?m=self.location.href:"undefined"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf("blob:")?m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):"",i=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;"object"!=typeof WebAssembly&&V("no native wasm support detected");var O,A,S,T,E,M,C=!1,x="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):""}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t="Aborted("+t+")"),C=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),a(t),t}function $(){return Y.startsWith("data:application/octet-stream;base64,")}if(Y="ort-wasm.wasm",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){V(t)}}function J(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+"="+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,"0")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):""},n=j(n),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(l,"g"),s[l]);var f="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),p="January February March April May June July August September October November December".split(" ");for(l in s={"%a":function(t){return f[t.Ab].substring(0,3)},"%A":function(t){return f[t.Ab]},"%b":function(t){return p[t.Hb].substring(0,3)},"%B":function(t){return p[t.Hb]},"%C":function(t){return i((t.Cb+1900)/100|0,2)},"%d":function(t){return i(t.Kb,2)},"%e":function(t){return a(t.Kb,2," ")},"%g":function(t){return c(t).toString().substring(2)},"%G":function(t){return c(t)},"%H":function(t){return i(t.Gb,2)},"%I":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},"%m":function(t){return i(t.Hb+1,2)},"%M":function(t){return i(t.Zb,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.Gb&&12>t.Gb?"AM":"PM"},"%S":function(t){return i(t.$b,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Ab||7},"%U":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},"%V":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},"%w":function(t){return t.Ab},"%W":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},"%y":function(t){return(t.Cb+1900).toString().substring(2)},"%Y":function(t){return t.Cb+1900},"%z":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.ac},"%%":function(){return"%"}},n=n.replace(/%%/g,"\\0\\0"),s)n.includes(l)&&(n=n.replace(new RegExp(l,"g"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\0\\0/g,"%")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w("Unexpected exception thrown, this is not properly supported - aborting"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V("no exception to throw");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ia:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V("")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V("randomDevice")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if("function"==typeof fetch&&!Y.startsWith("file://"))return fetch(Y,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+Y+"\'";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w("failed to asynchronously prepare wasm: "+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w("Module.instantiateWasm callback failed with error: "+t),!1}(g||"function"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith("file://")||b||"function"!=typeof fetch?r(n):fetch(Y,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w("wasm streaming compile failed: "+t),w("falling back to ArrayBuffer instantiation"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if("object"==typeof t&&null!==t){if(r.has(t))throw new Error("Circular reference in options");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if("object"==typeof i)(0,e.iterateExtraOptions)(i,o+".",r,a);else if("string"==typeof i||"number"==typeof i)a(o,i.toString());else{if("boolean"!=typeof i)throw new Error("Can\'t handle extra config type: "+typeof i);a(o,i?"1":"0")}}))}},586:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error("Can\'t create run options");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can\'t set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly="1")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel="all");const c=(t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode="sequential");const s=(t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error("Can\'t create session options");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e="string"==typeof r?r:r.name;switch(e){case"xnnpack":e="XNNPACK";break;case"wasm":case"cpu":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can\'t append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can\'t set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can\'t initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error("Can\'t create a session")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error("Can\'t get an input name");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error("Can\'t get an output name");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error("invalid session id");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if("string"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error("Can\'t create a tensor");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can\'t access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),"string"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),"string"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error("Can\'t get an profile file name");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-threaded.wasm":t?"ort-wasm-simd.wasm":"ort-wasm.wasm";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(h)throw new Error("previous call to \'initializeWebAssembly()\' failed.");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return"undefined"!=typeof SharedArrayBuffer&&("undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y="string"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g="object"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(".worker.js")&&"undefined"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:"text/javascript"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if("undefined"==typeof Blob)a.mainScriptUrlOrBlob=u.join("/","ort-wasm-threaded.js");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:"text/javascript"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error("WebAssembly is not initialized yet.")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{"use strict";t.exports=\'"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\n\'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case"init-wasm":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:"init-wasm"})),(t=>postMessage({type:"init-wasm",err:t})));break;case"init-ort":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:"init-ort"})}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:"create_finalize",out:a})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:"create",out:a})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:"run",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}}}})()})();\n', "Worker", void 0, void 0);
        }
        __name(o, "o");
      }, 477: (t) => {
        "use strict";
        t.exports = function(t2, e, n, r) {
          var i = self || window;
          try {
            try {
              var o;
              try {
                o = new i.Blob([t2]);
              } catch (e2) {
                (o = new (i.BlobBuilder || i.WebKitBlobBuilder || i.MozBlobBuilder || i.MSBlobBuilder)()).append(t2), o = o.getBlob();
              }
              var a = i.URL || i.webkitURL, s = a.createObjectURL(o), u = new i[e](s, n);
              return a.revokeObjectURL(s), u;
            } catch (r2) {
              return new i[e]("data:application/javascript,".concat(encodeURIComponent(t2)), n);
            }
          } catch (t3) {
            if (!r) throw Error("Inline worker is not supported");
            return new i[e](r, n);
          }
        };
      }, 4154: (t) => {
        "use strict";
        t.exports = '"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\n';
      }, 1670: (t) => {
        "use strict";
        t.exports = __WEBPACK_EXTERNAL_MODULE__1670__;
      }, 7067: () => {
      }, 1296: () => {
      }, 1384: () => {
      }, 3993: () => {
      }, 908: () => {
      }, 6953: () => {
      }, 9925: () => {
      }, 2806: () => {
      }, 6449: () => {
      }, 2850: () => {
      }, 5381: () => {
      }, 5686: (t, e, n) => {
        "use strict";
        n.r(e), n.d(e, { flatbuffers: /* @__PURE__ */ __name(() => r, "flatbuffers") });
        var r = {};
        r.Offset, r.Table, r.SIZEOF_SHORT = 2, r.SIZEOF_INT = 4, r.FILE_IDENTIFIER_LENGTH = 4, r.SIZE_PREFIX_LENGTH = 4, r.Encoding = { UTF8_BYTES: 1, UTF16_STRING: 2 }, r.int32 = new Int32Array(2), r.float32 = new Float32Array(r.int32.buffer), r.float64 = new Float64Array(r.int32.buffer), r.isLittleEndian = 1 === new Uint16Array(new Uint8Array([1, 0]).buffer)[0], r.Long = function(t2, e2) {
          this.low = 0 | t2, this.high = 0 | e2;
        }, r.Long.create = function(t2, e2) {
          return 0 == t2 && 0 == e2 ? r.Long.ZERO : new r.Long(t2, e2);
        }, r.Long.prototype.toFloat64 = function() {
          return (this.low >>> 0) + 4294967296 * this.high;
        }, r.Long.prototype.equals = function(t2) {
          return this.low == t2.low && this.high == t2.high;
        }, r.Long.ZERO = new r.Long(0, 0), r.Builder = function(t2) {
          if (t2) e2 = t2;
          else var e2 = 1024;
          this.bb = r.ByteBuffer.allocate(e2), this.space = e2, this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
        }, r.Builder.prototype.clear = function() {
          this.bb.clear(), this.space = this.bb.capacity(), this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
        }, r.Builder.prototype.forceDefaults = function(t2) {
          this.force_defaults = t2;
        }, r.Builder.prototype.dataBuffer = function() {
          return this.bb;
        }, r.Builder.prototype.asUint8Array = function() {
          return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
        }, r.Builder.prototype.prep = function(t2, e2) {
          t2 > this.minalign && (this.minalign = t2);
          for (var n2 = 1 + ~(this.bb.capacity() - this.space + e2) & t2 - 1; this.space < n2 + t2 + e2; ) {
            var i = this.bb.capacity();
            this.bb = r.Builder.growByteBuffer(this.bb), this.space += this.bb.capacity() - i;
          }
          this.pad(n2);
        }, r.Builder.prototype.pad = function(t2) {
          for (var e2 = 0; e2 < t2; e2++) this.bb.writeInt8(--this.space, 0);
        }, r.Builder.prototype.writeInt8 = function(t2) {
          this.bb.writeInt8(this.space -= 1, t2);
        }, r.Builder.prototype.writeInt16 = function(t2) {
          this.bb.writeInt16(this.space -= 2, t2);
        }, r.Builder.prototype.writeInt32 = function(t2) {
          this.bb.writeInt32(this.space -= 4, t2);
        }, r.Builder.prototype.writeInt64 = function(t2) {
          this.bb.writeInt64(this.space -= 8, t2);
        }, r.Builder.prototype.writeFloat32 = function(t2) {
          this.bb.writeFloat32(this.space -= 4, t2);
        }, r.Builder.prototype.writeFloat64 = function(t2) {
          this.bb.writeFloat64(this.space -= 8, t2);
        }, r.Builder.prototype.addInt8 = function(t2) {
          this.prep(1, 0), this.writeInt8(t2);
        }, r.Builder.prototype.addInt16 = function(t2) {
          this.prep(2, 0), this.writeInt16(t2);
        }, r.Builder.prototype.addInt32 = function(t2) {
          this.prep(4, 0), this.writeInt32(t2);
        }, r.Builder.prototype.addInt64 = function(t2) {
          this.prep(8, 0), this.writeInt64(t2);
        }, r.Builder.prototype.addFloat32 = function(t2) {
          this.prep(4, 0), this.writeFloat32(t2);
        }, r.Builder.prototype.addFloat64 = function(t2) {
          this.prep(8, 0), this.writeFloat64(t2);
        }, r.Builder.prototype.addFieldInt8 = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addInt8(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldInt16 = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addInt16(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldInt32 = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addInt32(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldInt64 = function(t2, e2, n2) {
          !this.force_defaults && e2.equals(n2) || (this.addInt64(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldFloat32 = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addFloat32(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldFloat64 = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addFloat64(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldOffset = function(t2, e2, n2) {
          (this.force_defaults || e2 != n2) && (this.addOffset(e2), this.slot(t2));
        }, r.Builder.prototype.addFieldStruct = function(t2, e2, n2) {
          e2 != n2 && (this.nested(e2), this.slot(t2));
        }, r.Builder.prototype.nested = function(t2) {
          if (t2 != this.offset()) throw new Error("FlatBuffers: struct must be serialized inline.");
        }, r.Builder.prototype.notNested = function() {
          if (this.isNested) throw new Error("FlatBuffers: object serialization must not be nested.");
        }, r.Builder.prototype.slot = function(t2) {
          this.vtable[t2] = this.offset();
        }, r.Builder.prototype.offset = function() {
          return this.bb.capacity() - this.space;
        }, r.Builder.growByteBuffer = function(t2) {
          var e2 = t2.capacity();
          if (3221225472 & e2) throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
          var n2 = e2 << 1, i = r.ByteBuffer.allocate(n2);
          return i.setPosition(n2 - e2), i.bytes().set(t2.bytes(), n2 - e2), i;
        }, r.Builder.prototype.addOffset = function(t2) {
          this.prep(r.SIZEOF_INT, 0), this.writeInt32(this.offset() - t2 + r.SIZEOF_INT);
        }, r.Builder.prototype.startObject = function(t2) {
          this.notNested(), null == this.vtable && (this.vtable = []), this.vtable_in_use = t2;
          for (var e2 = 0; e2 < t2; e2++) this.vtable[e2] = 0;
          this.isNested = true, this.object_start = this.offset();
        }, r.Builder.prototype.endObject = function() {
          if (null == this.vtable || !this.isNested) throw new Error("FlatBuffers: endObject called without startObject");
          this.addInt32(0);
          for (var t2 = this.offset(), e2 = this.vtable_in_use - 1; e2 >= 0 && 0 == this.vtable[e2]; e2--) ;
          for (var n2 = e2 + 1; e2 >= 0; e2--) this.addInt16(0 != this.vtable[e2] ? t2 - this.vtable[e2] : 0);
          this.addInt16(t2 - this.object_start);
          var i = (n2 + 2) * r.SIZEOF_SHORT;
          this.addInt16(i);
          var o = 0, a = this.space;
          t: for (e2 = 0; e2 < this.vtables.length; e2++) {
            var s = this.bb.capacity() - this.vtables[e2];
            if (i == this.bb.readInt16(s)) {
              for (var u = r.SIZEOF_SHORT; u < i; u += r.SIZEOF_SHORT) if (this.bb.readInt16(a + u) != this.bb.readInt16(s + u)) continue t;
              o = this.vtables[e2];
              break;
            }
          }
          return o ? (this.space = this.bb.capacity() - t2, this.bb.writeInt32(this.space, o - t2)) : (this.vtables.push(this.offset()), this.bb.writeInt32(this.bb.capacity() - t2, this.offset() - t2)), this.isNested = false, t2;
        }, r.Builder.prototype.finish = function(t2, e2, n2) {
          var i = n2 ? r.SIZE_PREFIX_LENGTH : 0;
          if (e2) {
            var o = e2;
            if (this.prep(this.minalign, r.SIZEOF_INT + r.FILE_IDENTIFIER_LENGTH + i), o.length != r.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: file identifier must be length " + r.FILE_IDENTIFIER_LENGTH);
            for (var a = r.FILE_IDENTIFIER_LENGTH - 1; a >= 0; a--) this.writeInt8(o.charCodeAt(a));
          }
          this.prep(this.minalign, r.SIZEOF_INT + i), this.addOffset(t2), i && this.addInt32(this.bb.capacity() - this.space), this.bb.setPosition(this.space);
        }, r.Builder.prototype.finishSizePrefixed = function(t2, e2) {
          this.finish(t2, e2, true);
        }, r.Builder.prototype.requiredField = function(t2, e2) {
          var n2 = this.bb.capacity() - t2, r2 = n2 - this.bb.readInt32(n2);
          if (0 == this.bb.readInt16(r2 + e2)) throw new Error("FlatBuffers: field " + e2 + " must be set");
        }, r.Builder.prototype.startVector = function(t2, e2, n2) {
          this.notNested(), this.vector_num_elems = e2, this.prep(r.SIZEOF_INT, t2 * e2), this.prep(n2, t2 * e2);
        }, r.Builder.prototype.endVector = function() {
          return this.writeInt32(this.vector_num_elems), this.offset();
        }, r.Builder.prototype.createString = function(t2) {
          if (t2 instanceof Uint8Array) var e2 = t2;
          else {
            e2 = [];
            for (var n2 = 0; n2 < t2.length; ) {
              var r2, i = t2.charCodeAt(n2++);
              (r2 = i < 55296 || i >= 56320 ? i : (i << 10) + t2.charCodeAt(n2++) + -56613888) < 128 ? e2.push(r2) : (r2 < 2048 ? e2.push(r2 >> 6 & 31 | 192) : (r2 < 65536 ? e2.push(r2 >> 12 & 15 | 224) : e2.push(r2 >> 18 & 7 | 240, r2 >> 12 & 63 | 128), e2.push(r2 >> 6 & 63 | 128)), e2.push(63 & r2 | 128));
            }
          }
          this.addInt8(0), this.startVector(1, e2.length, 1), this.bb.setPosition(this.space -= e2.length), n2 = 0;
          for (var o = this.space, a = this.bb.bytes(); n2 < e2.length; n2++) a[o++] = e2[n2];
          return this.endVector();
        }, r.Builder.prototype.createLong = function(t2, e2) {
          return r.Long.create(t2, e2);
        }, r.ByteBuffer = function(t2) {
          this.bytes_ = t2, this.position_ = 0;
        }, r.ByteBuffer.allocate = function(t2) {
          return new r.ByteBuffer(new Uint8Array(t2));
        }, r.ByteBuffer.prototype.clear = function() {
          this.position_ = 0;
        }, r.ByteBuffer.prototype.bytes = function() {
          return this.bytes_;
        }, r.ByteBuffer.prototype.position = function() {
          return this.position_;
        }, r.ByteBuffer.prototype.setPosition = function(t2) {
          this.position_ = t2;
        }, r.ByteBuffer.prototype.capacity = function() {
          return this.bytes_.length;
        }, r.ByteBuffer.prototype.readInt8 = function(t2) {
          return this.readUint8(t2) << 24 >> 24;
        }, r.ByteBuffer.prototype.readUint8 = function(t2) {
          return this.bytes_[t2];
        }, r.ByteBuffer.prototype.readInt16 = function(t2) {
          return this.readUint16(t2) << 16 >> 16;
        }, r.ByteBuffer.prototype.readUint16 = function(t2) {
          return this.bytes_[t2] | this.bytes_[t2 + 1] << 8;
        }, r.ByteBuffer.prototype.readInt32 = function(t2) {
          return this.bytes_[t2] | this.bytes_[t2 + 1] << 8 | this.bytes_[t2 + 2] << 16 | this.bytes_[t2 + 3] << 24;
        }, r.ByteBuffer.prototype.readUint32 = function(t2) {
          return this.readInt32(t2) >>> 0;
        }, r.ByteBuffer.prototype.readInt64 = function(t2) {
          return new r.Long(this.readInt32(t2), this.readInt32(t2 + 4));
        }, r.ByteBuffer.prototype.readUint64 = function(t2) {
          return new r.Long(this.readUint32(t2), this.readUint32(t2 + 4));
        }, r.ByteBuffer.prototype.readFloat32 = function(t2) {
          return r.int32[0] = this.readInt32(t2), r.float32[0];
        }, r.ByteBuffer.prototype.readFloat64 = function(t2) {
          return r.int32[r.isLittleEndian ? 0 : 1] = this.readInt32(t2), r.int32[r.isLittleEndian ? 1 : 0] = this.readInt32(t2 + 4), r.float64[0];
        }, r.ByteBuffer.prototype.writeInt8 = function(t2, e2) {
          this.bytes_[t2] = e2;
        }, r.ByteBuffer.prototype.writeUint8 = function(t2, e2) {
          this.bytes_[t2] = e2;
        }, r.ByteBuffer.prototype.writeInt16 = function(t2, e2) {
          this.bytes_[t2] = e2, this.bytes_[t2 + 1] = e2 >> 8;
        }, r.ByteBuffer.prototype.writeUint16 = function(t2, e2) {
          this.bytes_[t2] = e2, this.bytes_[t2 + 1] = e2 >> 8;
        }, r.ByteBuffer.prototype.writeInt32 = function(t2, e2) {
          this.bytes_[t2] = e2, this.bytes_[t2 + 1] = e2 >> 8, this.bytes_[t2 + 2] = e2 >> 16, this.bytes_[t2 + 3] = e2 >> 24;
        }, r.ByteBuffer.prototype.writeUint32 = function(t2, e2) {
          this.bytes_[t2] = e2, this.bytes_[t2 + 1] = e2 >> 8, this.bytes_[t2 + 2] = e2 >> 16, this.bytes_[t2 + 3] = e2 >> 24;
        }, r.ByteBuffer.prototype.writeInt64 = function(t2, e2) {
          this.writeInt32(t2, e2.low), this.writeInt32(t2 + 4, e2.high);
        }, r.ByteBuffer.prototype.writeUint64 = function(t2, e2) {
          this.writeUint32(t2, e2.low), this.writeUint32(t2 + 4, e2.high);
        }, r.ByteBuffer.prototype.writeFloat32 = function(t2, e2) {
          r.float32[0] = e2, this.writeInt32(t2, r.int32[0]);
        }, r.ByteBuffer.prototype.writeFloat64 = function(t2, e2) {
          r.float64[0] = e2, this.writeInt32(t2, r.int32[r.isLittleEndian ? 0 : 1]), this.writeInt32(t2 + 4, r.int32[r.isLittleEndian ? 1 : 0]);
        }, r.ByteBuffer.prototype.getBufferIdentifier = function() {
          if (this.bytes_.length < this.position_ + r.SIZEOF_INT + r.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
          for (var t2 = "", e2 = 0; e2 < r.FILE_IDENTIFIER_LENGTH; e2++) t2 += String.fromCharCode(this.readInt8(this.position_ + r.SIZEOF_INT + e2));
          return t2;
        }, r.ByteBuffer.prototype.__offset = function(t2, e2) {
          var n2 = t2 - this.readInt32(t2);
          return e2 < this.readInt16(n2) ? this.readInt16(n2 + e2) : 0;
        }, r.ByteBuffer.prototype.__union = function(t2, e2) {
          return t2.bb_pos = e2 + this.readInt32(e2), t2.bb = this, t2;
        }, r.ByteBuffer.prototype.__string = function(t2, e2) {
          t2 += this.readInt32(t2);
          var n2 = this.readInt32(t2), i = "", o = 0;
          if (t2 += r.SIZEOF_INT, e2 === r.Encoding.UTF8_BYTES) return this.bytes_.subarray(t2, t2 + n2);
          for (; o < n2; ) {
            var a, s = this.readUint8(t2 + o++);
            if (s < 192) a = s;
            else {
              var u = this.readUint8(t2 + o++);
              if (s < 224) a = (31 & s) << 6 | 63 & u;
              else {
                var c = this.readUint8(t2 + o++);
                a = s < 240 ? (15 & s) << 12 | (63 & u) << 6 | 63 & c : (7 & s) << 18 | (63 & u) << 12 | (63 & c) << 6 | 63 & this.readUint8(t2 + o++);
              }
            }
            a < 65536 ? i += String.fromCharCode(a) : (a -= 65536, i += String.fromCharCode(55296 + (a >> 10), 56320 + (1023 & a)));
          }
          return i;
        }, r.ByteBuffer.prototype.__indirect = function(t2) {
          return t2 + this.readInt32(t2);
        }, r.ByteBuffer.prototype.__vector = function(t2) {
          return t2 + this.readInt32(t2) + r.SIZEOF_INT;
        }, r.ByteBuffer.prototype.__vector_len = function(t2) {
          return this.readInt32(t2 + this.readInt32(t2));
        }, r.ByteBuffer.prototype.__has_identifier = function(t2) {
          if (t2.length != r.FILE_IDENTIFIER_LENGTH) throw new Error("FlatBuffers: file identifier must be length " + r.FILE_IDENTIFIER_LENGTH);
          for (var e2 = 0; e2 < r.FILE_IDENTIFIER_LENGTH; e2++) if (t2.charCodeAt(e2) != this.readInt8(this.position_ + r.SIZEOF_INT + e2)) return false;
          return true;
        }, r.ByteBuffer.prototype.createLong = function(t2, e2) {
          return r.Long.create(t2, e2);
        };
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(t) {
        var e = __webpack_module_cache__[t];
        if (void 0 !== e) return e.exports;
        var n = __webpack_module_cache__[t] = { exports: {} };
        return __webpack_modules__[t].call(n.exports, n, n.exports, __webpack_require__), n.exports;
      }
      __name(__webpack_require__, "__webpack_require__");
      __webpack_require__.n = (t) => {
        var e = t && t.__esModule ? () => t.default : () => t;
        return __webpack_require__.d(e, { a: e }), e;
      }, __webpack_require__.d = (t, e) => {
        for (var n in e) __webpack_require__.o(e, n) && !__webpack_require__.o(t, n) && Object.defineProperty(t, n, { enumerable: true, get: e[n] });
      }, __webpack_require__.g = function() {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (t) {
          if ("object" == typeof window) return window;
        }
      }(), __webpack_require__.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), __webpack_require__.r = (t) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: true });
      };
      var __webpack_exports__ = __webpack_require__(6018);
      return __webpack_exports__;
    })());
  }
});

// node_modules/@xenova/transformers/src/backends/onnx.js
var ONNX_NODE, ONNX_WEB, ONNX, executionProviders;
var init_onnx = __esm({
  "node_modules/@xenova/transformers/src/backends/onnx.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    ONNX_NODE = __toESM(require_dist(), 1);
    ONNX_WEB = __toESM(require_ort_web_min(), 1);
    executionProviders = [
      // 'webgpu',
      "wasm"
    ];
    if (typeof process !== "undefined" && process?.release?.name === "node") {
      ONNX = ONNX_NODE.default ?? ONNX_NODE;
      executionProviders.unshift("cpu");
    } else {
      ONNX = ONNX_WEB.default ?? ONNX_WEB;
      const isIOS = typeof navigator !== "undefined" && /iP(hone|od|ad).+16_4.+AppleWebKit/.test("Cloudflare-Workers");
      if (isIOS) {
        ONNX.env.wasm.simd = false;
      }
    }
  }
});

// node_modules/@xenova/transformers/src/env.js
function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}
var import_fs, import_path, import_url6, onnx_env, VERSION, WEB_CACHE_AVAILABLE, FS_AVAILABLE, PATH_AVAILABLE, RUNNING_LOCALLY, __dirname, DEFAULT_CACHE_DIR, DEFAULT_LOCAL_MODEL_PATH, localModelPath, env;
var init_env = __esm({
  "node_modules/@xenova/transformers/src/env.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    import_fs = __toESM(require_fs(), 1);
    import_path = __toESM(require_path(), 1);
    import_url6 = __toESM(require_url(), 1);
    init_onnx();
    ({ env: onnx_env } = ONNX);
    VERSION = "2.17.2";
    WEB_CACHE_AVAILABLE = typeof self !== "undefined" && "caches" in self;
    FS_AVAILABLE = !isEmpty(import_fs.default);
    PATH_AVAILABLE = !isEmpty(import_path.default);
    RUNNING_LOCALLY = FS_AVAILABLE && PATH_AVAILABLE;
    __dirname = RUNNING_LOCALLY ? import_path.default.dirname(import_path.default.dirname(import_url6.default.fileURLToPath(import.meta.url))) : "./";
    DEFAULT_CACHE_DIR = RUNNING_LOCALLY ? import_path.default.join(__dirname, "/.cache/") : null;
    DEFAULT_LOCAL_MODEL_PATH = "/models/";
    localModelPath = RUNNING_LOCALLY ? import_path.default.join(__dirname, DEFAULT_LOCAL_MODEL_PATH) : DEFAULT_LOCAL_MODEL_PATH;
    if (onnx_env?.wasm) {
      onnx_env.wasm.wasmPaths = RUNNING_LOCALLY ? import_path.default.join(__dirname, "/dist/") : `https://cdn.jsdelivr.net/npm/@xenova/transformers@${VERSION}/dist/`;
    }
    env = {
      /////////////////// Backends settings ///////////////////
      backends: {
        // onnxruntime-web/onnxruntime-node
        onnx: onnx_env,
        // TensorFlow.js
        tfjs: {}
      },
      __dirname,
      version: VERSION,
      /////////////////// Model settings ///////////////////
      allowRemoteModels: true,
      remoteHost: "https://huggingface.co/",
      remotePathTemplate: "{model}/resolve/{revision}/",
      allowLocalModels: true,
      localModelPath,
      useFS: FS_AVAILABLE,
      /////////////////// Cache settings ///////////////////
      useBrowserCache: WEB_CACHE_AVAILABLE,
      useFSCache: FS_AVAILABLE,
      cacheDir: DEFAULT_CACHE_DIR,
      useCustomCache: false,
      customCache: null
      //////////////////////////////////////////////////////
    };
    __name(isEmpty, "isEmpty");
  }
});

// node_modules/@xenova/transformers/src/utils/hub.js
function isValidUrl(string, protocols = null, validHosts = null) {
  let url2;
  try {
    url2 = new URL(string);
  } catch (_) {
    return false;
  }
  if (protocols && !protocols.includes(url2.protocol)) {
    return false;
  }
  if (validHosts && !validHosts.includes(url2.hostname)) {
    return false;
  }
  return true;
}
async function getFile(urlOrPath) {
  if (env.useFS && !isValidUrl(urlOrPath, ["http:", "https:", "blob:"])) {
    return new FileResponse(urlOrPath);
  } else if (typeof process !== "undefined" && process?.release?.name === "node") {
    const IS_CI = !!process.env?.TESTING_REMOTELY;
    const version3 = env.version;
    const headers = new Headers();
    headers.set("User-Agent", `transformers.js/${version3}; is_ci/${IS_CI};`);
    const isHFURL = isValidUrl(urlOrPath, ["http:", "https:"], ["huggingface.co", "hf.co"]);
    if (isHFURL) {
      const token = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
    }
    return fetch(urlOrPath, { headers });
  } else {
    return fetch(urlOrPath);
  }
}
function handleError(status, remoteURL, fatal) {
  if (!fatal) {
    return null;
  }
  const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;
  throw Error(`${message}: "${remoteURL}".`);
}
async function tryCache(cache, ...names) {
  for (let name2 of names) {
    try {
      let result = await cache.match(name2);
      if (result) return result;
    } catch (e) {
      continue;
    }
  }
  return void 0;
}
async function getModelFile(path_or_repo_id, filename, fatal = true, options = {}) {
  if (!env.allowLocalModels) {
    if (options.local_files_only) {
      throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");
    } else if (!env.allowRemoteModels) {
      throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.");
    }
  }
  dispatchCallback(options.progress_callback, {
    status: "initiate",
    name: path_or_repo_id,
    file: filename
  });
  let cache;
  if (!cache && env.useBrowserCache) {
    if (typeof caches === "undefined") {
      throw Error("Browser cache is not available in this environment.");
    }
    try {
      cache = await caches.open("transformers-cache");
    } catch (e) {
      console.warn("An error occurred while opening the browser cache:", e);
    }
  }
  if (!cache && env.useFSCache) {
    cache = new FileCache(options.cache_dir ?? env.cacheDir);
  }
  if (!cache && env.useCustomCache) {
    if (!env.customCache) {
      throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");
    }
    if (!env.customCache.match || !env.customCache.put) {
      throw new Error(
        "`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache"
      );
    }
    cache = env.customCache;
  }
  const revision = options.revision ?? "main";
  let requestURL = pathJoin(path_or_repo_id, filename);
  let localPath = pathJoin(env.localModelPath, requestURL);
  let remoteURL = pathJoin(
    env.remoteHost,
    env.remotePathTemplate.replaceAll("{model}", path_or_repo_id).replaceAll("{revision}", encodeURIComponent(revision)),
    filename
  );
  let fsCacheKey = revision === "main" ? requestURL : pathJoin(path_or_repo_id, revision, filename);
  let cacheKey;
  let proposedCacheKey = cache instanceof FileCache ? fsCacheKey : remoteURL;
  let toCacheResponse = false;
  let response;
  if (cache) {
    response = await tryCache(cache, localPath, proposedCacheKey);
  }
  const cacheHit = response !== void 0;
  if (response === void 0) {
    if (env.allowLocalModels) {
      const isURL = isValidUrl(requestURL, ["http:", "https:"]);
      if (!isURL) {
        try {
          response = await getFile(localPath);
          cacheKey = localPath;
        } catch (e) {
          console.warn(`Unable to load from local path "${localPath}": "${e}"`);
        }
      } else if (options.local_files_only) {
        throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${requestURL}.`);
      } else if (!env.allowRemoteModels) {
        throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${requestURL}.`);
      }
    }
    if (response === void 0 || response.status === 404) {
      if (options.local_files_only || !env.allowRemoteModels) {
        if (fatal) {
          throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${localPath}".`);
        } else {
          return null;
        }
      }
      response = await getFile(remoteURL);
      if (response.status !== 200) {
        return handleError(response.status, remoteURL, fatal);
      }
      cacheKey = proposedCacheKey;
    }
    toCacheResponse = cache && typeof Response !== "undefined" && response instanceof Response && response.status === 200;
  }
  dispatchCallback(options.progress_callback, {
    status: "download",
    name: path_or_repo_id,
    file: filename
  });
  const progressInfo = {
    status: "progress",
    name: path_or_repo_id,
    file: filename
  };
  let buffer;
  if (!options.progress_callback) {
    buffer = new Uint8Array(await response.arrayBuffer());
  } else if (cacheHit && typeof navigator !== "undefined" && /firefox/i.test("Cloudflare-Workers")) {
    buffer = new Uint8Array(await response.arrayBuffer());
    dispatchCallback(options.progress_callback, {
      ...progressInfo,
      progress: 100,
      loaded: buffer.length,
      total: buffer.length
    });
  } else {
    buffer = await readResponse(response, (data) => {
      dispatchCallback(options.progress_callback, {
        ...progressInfo,
        ...data
      });
    });
  }
  if (
    // Only cache web responses
    // i.e., do not cache FileResponses (prevents duplication)
    toCacheResponse && cacheKey && // Check again whether request is in cache. If not, we add the response to the cache
    await cache.match(cacheKey) === void 0
  ) {
    await cache.put(cacheKey, new Response(buffer, {
      headers: response.headers
    })).catch((err) => {
      console.warn(`Unable to add response to browser cache: ${err}.`);
    });
  }
  dispatchCallback(options.progress_callback, {
    status: "done",
    name: path_or_repo_id,
    file: filename
  });
  return buffer;
}
async function getModelJSON(modelPath, fileName, fatal = true, options = {}) {
  let buffer = await getModelFile(modelPath, fileName, fatal, options);
  if (buffer === null) {
    return {};
  }
  let decoder = new TextDecoder("utf-8");
  let jsonData = decoder.decode(buffer);
  return JSON.parse(jsonData);
}
async function readResponse(response, progress_callback) {
  const contentLength = response.headers.get("Content-Length");
  if (contentLength === null) {
    console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");
  }
  let total = parseInt(contentLength ?? "0");
  let buffer = new Uint8Array(total);
  let loaded = 0;
  const reader = response.body.getReader();
  async function read() {
    const { done, value } = await reader.read();
    if (done) return;
    let newLoaded = loaded + value.length;
    if (newLoaded > total) {
      total = newLoaded;
      let newBuffer = new Uint8Array(total);
      newBuffer.set(buffer);
      buffer = newBuffer;
    }
    buffer.set(value, loaded);
    loaded = newLoaded;
    const progress = loaded / total * 100;
    progress_callback({
      progress,
      loaded,
      total
    });
    return read();
  }
  __name(read, "read");
  await read();
  return buffer;
}
function pathJoin(...parts) {
  parts = parts.map((part, index) => {
    if (index) {
      part = part.replace(new RegExp("^/"), "");
    }
    if (index !== parts.length - 1) {
      part = part.replace(new RegExp("/$"), "");
    }
    return part;
  });
  return parts.join("/");
}
var import_fs2, import_path2, FileResponse, ERROR_MAPPING, FileCache;
var init_hub = __esm({
  "node_modules/@xenova/transformers/src/utils/hub.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    import_fs2 = __toESM(require_fs(), 1);
    import_path2 = __toESM(require_path(), 1);
    init_env();
    init_core();
    FileResponse = class _FileResponse {
      static {
        __name(this, "FileResponse");
      }
      /**
       * Mapping from file extensions to MIME types.
       */
      _CONTENT_TYPE_MAP = {
        "txt": "text/plain",
        "html": "text/html",
        "css": "text/css",
        "js": "text/javascript",
        "json": "application/json",
        "png": "image/png",
        "jpg": "image/jpeg",
        "jpeg": "image/jpeg",
        "gif": "image/gif"
      };
      /**
       * Creates a new `FileResponse` object.
       * @param {string|URL} filePath
       */
      constructor(filePath) {
        this.filePath = filePath;
        this.headers = new Headers();
        this.exists = import_fs2.default.existsSync(filePath);
        if (this.exists) {
          this.status = 200;
          this.statusText = "OK";
          let stats = import_fs2.default.statSync(filePath);
          this.headers.set("content-length", stats.size.toString());
          this.updateContentType();
          let self2 = this;
          this.body = new ReadableStream({
            start(controller) {
              self2.arrayBuffer().then((buffer) => {
                controller.enqueue(new Uint8Array(buffer));
                controller.close();
              });
            }
          });
        } else {
          this.status = 404;
          this.statusText = "Not Found";
          this.body = null;
        }
      }
      /**
       * Updates the 'content-type' header property of the response based on the extension of
       * the file specified by the filePath property of the current object.
       * @returns {void}
       */
      updateContentType() {
        const extension = this.filePath.toString().split(".").pop().toLowerCase();
        this.headers.set("content-type", this._CONTENT_TYPE_MAP[extension] ?? "application/octet-stream");
      }
      /**
       * Clone the current FileResponse object.
       * @returns {FileResponse} A new FileResponse object with the same properties as the current object.
       */
      clone() {
        let response = new _FileResponse(this.filePath);
        response.exists = this.exists;
        response.status = this.status;
        response.statusText = this.statusText;
        response.headers = new Headers(this.headers);
        return response;
      }
      /**
       * Reads the contents of the file specified by the filePath property and returns a Promise that
       * resolves with an ArrayBuffer containing the file's contents.
       * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.
       * @throws {Error} If the file cannot be read.
       */
      async arrayBuffer() {
        const data = await import_fs2.default.promises.readFile(this.filePath);
        return data.buffer;
      }
      /**
       * Reads the contents of the file specified by the filePath property and returns a Promise that
       * resolves with a Blob containing the file's contents.
       * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.
       * @throws {Error} If the file cannot be read.
       */
      async blob() {
        const data = await import_fs2.default.promises.readFile(this.filePath);
        return new Blob([data], { type: this.headers.get("content-type") });
      }
      /**
       * Reads the contents of the file specified by the filePath property and returns a Promise that
       * resolves with a string containing the file's contents.
       * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.
       * @throws {Error} If the file cannot be read.
       */
      async text() {
        const data = await import_fs2.default.promises.readFile(this.filePath, "utf8");
        return data;
      }
      /**
       * Reads the contents of the file specified by the filePath property and returns a Promise that
       * resolves with a parsed JavaScript object containing the file's contents.
       * 
       * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.
       * @throws {Error} If the file cannot be read.
       */
      async json() {
        return JSON.parse(await this.text());
      }
    };
    __name(isValidUrl, "isValidUrl");
    __name(getFile, "getFile");
    ERROR_MAPPING = {
      // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)
      400: "Bad request error occurred while trying to load file",
      401: "Unauthorized access to file",
      403: "Forbidden access to file",
      404: "Could not locate file",
      408: "Request timeout error occurred while trying to load file",
      // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)
      500: "Internal server error error occurred while trying to load file",
      502: "Bad gateway error occurred while trying to load file",
      503: "Service unavailable error occurred while trying to load file",
      504: "Gateway timeout error occurred while trying to load file"
    };
    __name(handleError, "handleError");
    FileCache = class {
      static {
        __name(this, "FileCache");
      }
      /**
       * Instantiate a `FileCache` object.
       * @param {string} path 
       */
      constructor(path3) {
        this.path = path3;
      }
      /**
       * Checks whether the given request is in the cache.
       * @param {string} request 
       * @returns {Promise<FileResponse | undefined>}
       */
      async match(request) {
        let filePath = import_path2.default.join(this.path, request);
        let file = new FileResponse(filePath);
        if (file.exists) {
          return file;
        } else {
          return void 0;
        }
      }
      /**
       * Adds the given response to the cache.
       * @param {string} request 
       * @param {Response|FileResponse} response 
       * @returns {Promise<void>}
       */
      async put(request, response) {
        const buffer = Buffer.from(await response.arrayBuffer());
        let outputPath = import_path2.default.join(this.path, request);
        try {
          await import_fs2.default.promises.mkdir(import_path2.default.dirname(outputPath), { recursive: true });
          await import_fs2.default.promises.writeFile(outputPath, buffer);
        } catch (err) {
          console.warn("An error occurred while writing the file to cache:", err);
        }
      }
      // TODO add the rest?
      // addAll(requests: RequestInfo[]): Promise<void>;
      // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;
      // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;
      // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;
      // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;
    };
    __name(tryCache, "tryCache");
    __name(getModelFile, "getModelFile");
    __name(getModelJSON, "getModelJSON");
    __name(readResponse, "readResponse");
    __name(pathJoin, "pathJoin");
  }
});

// node_modules/@xenova/transformers/src/utils/maths.js
function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = "bilinear", align_corners = false) {
  const x_scale = out_width / in_width;
  const y_scale = out_height / in_height;
  const out_img = new input.constructor(out_height * out_width * in_channels);
  const inStride = in_height * in_width;
  const outStride = out_height * out_width;
  for (let i = 0; i < out_height; ++i) {
    for (let j = 0; j < out_width; ++j) {
      const outOffset = i * out_width + j;
      const x = (j + 0.5) / x_scale - 0.5;
      const y = (i + 0.5) / y_scale - 0.5;
      let x1 = Math.floor(x);
      let y1 = Math.floor(y);
      const x2 = Math.min(x1 + 1, in_width - 1);
      const y2 = Math.min(y1 + 1, in_height - 1);
      x1 = Math.max(x1, 0);
      y1 = Math.max(y1, 0);
      const s = x - x1;
      const t = y - y1;
      const w1 = (1 - s) * (1 - t);
      const w2 = s * (1 - t);
      const w3 = (1 - s) * t;
      const w4 = s * t;
      const yStride = y1 * in_width;
      const xStride = y2 * in_width;
      const idx1 = yStride + x1;
      const idx2 = yStride + x2;
      const idx3 = xStride + x1;
      const idx4 = xStride + x2;
      for (let k = 0; k < in_channels; ++k) {
        const cOffset = k * inStride;
        out_img[k * outStride + outOffset] = w1 * input[cOffset + idx1] + w2 * input[cOffset + idx2] + w3 * input[cOffset + idx3] + w4 * input[cOffset + idx4];
      }
    }
  }
  return out_img;
}
function permute_data(array, dims, axes) {
  const shape = new Array(axes.length);
  const stride = new Array(axes.length);
  for (let i = axes.length - 1, s = 1; i >= 0; --i) {
    stride[i] = s;
    shape[i] = dims[axes[i]];
    s *= shape[i];
  }
  const invStride = axes.map((_, i) => stride[axes.indexOf(i)]);
  const permutedData = new array.constructor(array.length);
  for (let i = 0; i < array.length; ++i) {
    let newIndex = 0;
    for (let j = dims.length - 1, k = i; j >= 0; --j) {
      newIndex += k % dims[j] * invStride[j];
      k = Math.floor(k / dims[j]);
    }
    permutedData[newIndex] = array[i];
  }
  return [permutedData, shape];
}
function softmax(arr) {
  const maxVal = max(arr)[0];
  const exps = arr.map((x) => Math.exp(x - maxVal));
  const sumExps = exps.reduce((acc, val) => acc + val, 0);
  const softmaxArr = exps.map((x) => x / sumExps);
  return (
    /** @type {T} */
    softmaxArr
  );
}
function log_softmax(arr) {
  const softmaxArr = softmax(arr);
  const logSoftmaxArr = softmaxArr.map((x) => Math.log(x));
  return (
    /** @type {T} */
    logSoftmaxArr
  );
}
function dot(arr1, arr2) {
  let result = 0;
  for (let i = 0; i < arr1.length; ++i) {
    result += arr1[i] * arr2[i];
  }
  return result;
}
function getTopItems(items, top_k = 0) {
  items = Array.from(items).map((x, i) => [i, x]).sort((a, b) => b[1] - a[1]);
  if (top_k !== null && top_k > 0) {
    items = items.slice(0, top_k);
  }
  return items;
}
function cos_sim(arr1, arr2) {
  const dotProduct = dot(arr1, arr2);
  const magnitudeA = magnitude(arr1);
  const magnitudeB = magnitude(arr2);
  const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);
  return cosineSimilarity;
}
function magnitude(arr) {
  return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));
}
function min(arr) {
  if (arr.length === 0) throw Error("Array must not be empty");
  let min2 = arr[0];
  let indexOfMin = 0;
  for (let i = 1; i < arr.length; ++i) {
    if (arr[i] < min2) {
      min2 = arr[i];
      indexOfMin = i;
    }
  }
  return [min2, indexOfMin];
}
function max(arr) {
  if (arr.length === 0) throw Error("Array must not be empty");
  let max2 = arr[0];
  let indexOfMax = 0;
  for (let i = 1; i < arr.length; ++i) {
    if (arr[i] > max2) {
      max2 = arr[i];
      indexOfMax = i;
    }
  }
  return [Number(max2), indexOfMax];
}
function isPowerOfTwo(number) {
  return number > 0 && (number & number - 1) === 0;
}
function medianFilter(data, windowSize) {
  if (windowSize % 2 === 0 || windowSize <= 0) {
    throw new Error("Window size must be a positive odd number");
  }
  const outputArray = new data.constructor(data.length);
  const buffer = new data.constructor(windowSize);
  const halfWindowSize = Math.floor(windowSize / 2);
  for (let i = 0; i < data.length; ++i) {
    let valuesIndex = 0;
    for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {
      let index = i + j;
      if (index < 0) {
        index = Math.abs(index);
      } else if (index >= data.length) {
        index = 2 * (data.length - 1) - index;
      }
      buffer[valuesIndex++] = data[index];
    }
    buffer.sort();
    outputArray[i] = buffer[halfWindowSize];
  }
  return outputArray;
}
function round(num, decimals) {
  const pow = Math.pow(10, decimals);
  return Math.round(num * pow) / pow;
}
function bankers_round(x) {
  const r = Math.round(x);
  const br = Math.abs(x) % 1 === 0.5 ? r % 2 === 0 ? r : r - 1 : r;
  return br;
}
var P2FFT, NP2FFT, FFT;
var init_maths = __esm({
  "node_modules/@xenova/transformers/src/utils/maths.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    __name(interpolate_data, "interpolate_data");
    __name(permute_data, "permute_data");
    __name(softmax, "softmax");
    __name(log_softmax, "log_softmax");
    __name(dot, "dot");
    __name(getTopItems, "getTopItems");
    __name(cos_sim, "cos_sim");
    __name(magnitude, "magnitude");
    __name(min, "min");
    __name(max, "max");
    __name(isPowerOfTwo, "isPowerOfTwo");
    P2FFT = class {
      static {
        __name(this, "P2FFT");
      }
      /**
       * @param {number} size The size of the input array. Must be a power of two larger than 1.
       * @throws {Error} FFT size must be a power of two larger than 1.
       */
      constructor(size) {
        this.size = size | 0;
        if (this.size <= 1 || !isPowerOfTwo(this.size))
          throw new Error("FFT size must be a power of two larger than 1");
        this._csize = size << 1;
        this.table = new Float64Array(this.size * 2);
        for (let i = 0; i < this.table.length; i += 2) {
          const angle = Math.PI * i / this.size;
          this.table[i] = Math.cos(angle);
          this.table[i + 1] = -Math.sin(angle);
        }
        let power = 0;
        for (let t = 1; this.size > t; t <<= 1)
          ++power;
        this._width = power % 2 === 0 ? power - 1 : power;
        this._bitrev = new Int32Array(1 << this._width);
        for (let j = 0; j < this._bitrev.length; ++j) {
          this._bitrev[j] = 0;
          for (let shift = 0; shift < this._width; shift += 2) {
            const revShift = this._width - shift - 2;
            this._bitrev[j] |= (j >>> shift & 3) << revShift;
          }
        }
      }
      /**
       * Create a complex number array with size `2 * size`
       *
       * @returns {Float64Array} A complex number array with size `2 * size`
       */
      createComplexArray() {
        return new Float64Array(this._csize);
      }
      /**
       * Converts a complex number representation stored in a Float64Array to an array of real numbers.
       * 
       * @param {Float64Array} complex The complex number representation to be converted.
       * @param {number[]} [storage] An optional array to store the result in.
       * @returns {number[]} An array of real numbers representing the input complex number representation.
       */
      fromComplexArray(complex, storage) {
        const res = storage || new Array(complex.length >>> 1);
        for (let i = 0; i < complex.length; i += 2)
          res[i >>> 1] = complex[i];
        return res;
      }
      /**
       * Convert a real-valued input array to a complex-valued output array.
       * @param {Float64Array} input The real-valued input array.
       * @param {Float64Array} [storage] Optional buffer to store the output array.
       * @returns {Float64Array} The complex-valued output array.
       */
      toComplexArray(input, storage) {
        const res = storage || this.createComplexArray();
        for (let i = 0; i < res.length; i += 2) {
          res[i] = input[i >>> 1];
          res[i + 1] = 0;
        }
        return res;
      }
      /**
       * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.
       * 
       * @param {Float64Array} out The output buffer to store the result.
       * @param {Float64Array} data The input data to transform.
       * 
       * @throws {Error} Input and output buffers must be different.
       * 
       * @returns {void}
       */
      transform(out, data) {
        if (out === data)
          throw new Error("Input and output buffers must be different");
        this._transform4(
          out,
          data,
          1
          /* DONE */
        );
      }
      /**
       * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.
       * The input buffer must contain real values only, while the output buffer will contain complex values. The input and
       * output buffers must be different.
       *
       * @param {Float64Array} out The output buffer.
       * @param {Float64Array} data The input buffer containing real values.
       *
       * @throws {Error} If the input and output buffers are the same.
       */
      realTransform(out, data) {
        if (out === data)
          throw new Error("Input and output buffers must be different");
        this._realTransform4(
          out,
          data,
          1
          /* DONE */
        );
      }
      /**
       * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.
       * The `out` array must be a different buffer than the `data` array. The `out` array will contain the
       * result of the transformation. The `data` array will not be modified.
       * 
       * @param {Float64Array} out The output buffer for the transformed data.
       * @param {Float64Array} data The input data to transform.
       * @throws {Error} If `out` and `data` refer to the same buffer.
       * @returns {void}
       */
      inverseTransform(out, data) {
        if (out === data)
          throw new Error("Input and output buffers must be different");
        this._transform4(
          out,
          data,
          -1
          /* DONE */
        );
        for (let i = 0; i < out.length; ++i)
          out[i] /= this.size;
      }
      /**
       * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.
       *
       * @param {Float64Array} out The output buffer for the transformed data.
       * @param {Float64Array} data The input buffer of data to be transformed.
       * @param {number} inv A scaling factor to apply to the transform.
       * @returns {void}
       */
      _transform4(out, data, inv) {
        const size = this._csize;
        const width = this._width;
        let step = 1 << width;
        let len = size / step << 1;
        let outOff;
        let t;
        const bitrev = this._bitrev;
        if (len === 4) {
          for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
            const off = bitrev[t];
            this._singleTransform2(data, out, outOff, off, step);
          }
        } else {
          for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
            const off = bitrev[t];
            this._singleTransform4(data, out, outOff, off, step, inv);
          }
        }
        const table = this.table;
        for (step >>= 2; step >= 2; step >>= 2) {
          len = size / step << 1;
          const quarterLen = len >>> 2;
          for (outOff = 0; outOff < size; outOff += len) {
            const limit = outOff + quarterLen - 1;
            for (let i = outOff, k = 0; i < limit; i += 2, k += step) {
              const A = i;
              const B = A + quarterLen;
              const C = B + quarterLen;
              const D = C + quarterLen;
              const Ar = out[A];
              const Ai = out[A + 1];
              const Br = out[B];
              const Bi = out[B + 1];
              const Cr = out[C];
              const Ci = out[C + 1];
              const Dr = out[D];
              const Di = out[D + 1];
              const tableBr = table[k];
              const tableBi = inv * table[k + 1];
              const MBr = Br * tableBr - Bi * tableBi;
              const MBi = Br * tableBi + Bi * tableBr;
              const tableCr = table[2 * k];
              const tableCi = inv * table[2 * k + 1];
              const MCr = Cr * tableCr - Ci * tableCi;
              const MCi = Cr * tableCi + Ci * tableCr;
              const tableDr = table[3 * k];
              const tableDi = inv * table[3 * k + 1];
              const MDr = Dr * tableDr - Di * tableDi;
              const MDi = Dr * tableDi + Di * tableDr;
              const T0r = Ar + MCr;
              const T0i = Ai + MCi;
              const T1r = Ar - MCr;
              const T1i = Ai - MCi;
              const T2r = MBr + MDr;
              const T2i = MBi + MDi;
              const T3r = inv * (MBr - MDr);
              const T3i = inv * (MBi - MDi);
              out[A] = T0r + T2r;
              out[A + 1] = T0i + T2i;
              out[B] = T1r + T3i;
              out[B + 1] = T1i - T3r;
              out[C] = T0r - T2r;
              out[C + 1] = T0i - T2i;
              out[D] = T1r - T3i;
              out[D + 1] = T1i + T3r;
            }
          }
        }
      }
      /**
       * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.
       *
       * @param {Float64Array} data The input buffer of data to be transformed.
       * @param {Float64Array} out The output buffer for the transformed data.
       * @param {number} outOff The offset at which to write the output data.
       * @param {number} off The offset at which to begin reading the input data.
       * @param {number} step The step size for indexing the input data.
       * @returns {void}
       */
      _singleTransform2(data, out, outOff, off, step) {
        const evenR = data[off];
        const evenI = data[off + 1];
        const oddR = data[off + step];
        const oddI = data[off + step + 1];
        out[outOff] = evenR + oddR;
        out[outOff + 1] = evenI + oddI;
        out[outOff + 2] = evenR - oddR;
        out[outOff + 3] = evenI - oddI;
      }
      /**
       * Performs radix-4 transformation on input data of length 8
       *
       * @param {Float64Array} data Input data array of length 8
       * @param {Float64Array} out Output data array of length 8
       * @param {number} outOff Index of output array to start writing from
       * @param {number} off Index of input array to start reading from
       * @param {number} step Step size between elements in input array
       * @param {number} inv Scaling factor for inverse transform
       * 
       * @returns {void}
       */
      _singleTransform4(data, out, outOff, off, step, inv) {
        const step2 = step * 2;
        const step3 = step * 3;
        const Ar = data[off];
        const Ai = data[off + 1];
        const Br = data[off + step];
        const Bi = data[off + step + 1];
        const Cr = data[off + step2];
        const Ci = data[off + step2 + 1];
        const Dr = data[off + step3];
        const Di = data[off + step3 + 1];
        const T0r = Ar + Cr;
        const T0i = Ai + Ci;
        const T1r = Ar - Cr;
        const T1i = Ai - Ci;
        const T2r = Br + Dr;
        const T2i = Bi + Di;
        const T3r = inv * (Br - Dr);
        const T3i = inv * (Bi - Di);
        out[outOff] = T0r + T2r;
        out[outOff + 1] = T0i + T2i;
        out[outOff + 2] = T1r + T3i;
        out[outOff + 3] = T1i - T3r;
        out[outOff + 4] = T0r - T2r;
        out[outOff + 5] = T0i - T2i;
        out[outOff + 6] = T1r - T3i;
        out[outOff + 7] = T1i + T3r;
      }
      /**
       * Real input radix-4 implementation
       * @param {Float64Array} out Output array for the transformed data
       * @param {Float64Array} data Input array of real data to be transformed
       * @param {number} inv The scale factor used to normalize the inverse transform
       */
      _realTransform4(out, data, inv) {
        const size = this._csize;
        const width = this._width;
        let step = 1 << width;
        let len = size / step << 1;
        let outOff;
        let t;
        const bitrev = this._bitrev;
        if (len === 4) {
          for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
            const off = bitrev[t];
            this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);
          }
        } else {
          for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {
            const off = bitrev[t];
            this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);
          }
        }
        const table = this.table;
        for (step >>= 2; step >= 2; step >>= 2) {
          len = size / step << 1;
          const halfLen = len >>> 1;
          const quarterLen = halfLen >>> 1;
          const hquarterLen = quarterLen >>> 1;
          for (outOff = 0; outOff < size; outOff += len) {
            for (let i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {
              const A = outOff + i;
              const B = A + quarterLen;
              const C = B + quarterLen;
              const D = C + quarterLen;
              const Ar = out[A];
              const Ai = out[A + 1];
              const Br = out[B];
              const Bi = out[B + 1];
              const Cr = out[C];
              const Ci = out[C + 1];
              const Dr = out[D];
              const Di = out[D + 1];
              const MAr = Ar;
              const MAi = Ai;
              const tableBr = table[k];
              const tableBi = inv * table[k + 1];
              const MBr = Br * tableBr - Bi * tableBi;
              const MBi = Br * tableBi + Bi * tableBr;
              const tableCr = table[2 * k];
              const tableCi = inv * table[2 * k + 1];
              const MCr = Cr * tableCr - Ci * tableCi;
              const MCi = Cr * tableCi + Ci * tableCr;
              const tableDr = table[3 * k];
              const tableDi = inv * table[3 * k + 1];
              const MDr = Dr * tableDr - Di * tableDi;
              const MDi = Dr * tableDi + Di * tableDr;
              const T0r = MAr + MCr;
              const T0i = MAi + MCi;
              const T1r = MAr - MCr;
              const T1i = MAi - MCi;
              const T2r = MBr + MDr;
              const T2i = MBi + MDi;
              const T3r = inv * (MBr - MDr);
              const T3i = inv * (MBi - MDi);
              out[A] = T0r + T2r;
              out[A + 1] = T0i + T2i;
              out[B] = T1r + T3i;
              out[B + 1] = T1i - T3r;
              if (i === 0) {
                out[C] = T0r - T2r;
                out[C + 1] = T0i - T2i;
                continue;
              }
              if (i === hquarterLen)
                continue;
              const SA = outOff + quarterLen - i;
              const SB = outOff + halfLen - i;
              out[SA] = T1r - inv * T3i;
              out[SA + 1] = -T1i - inv * T3r;
              out[SB] = T0r - inv * T2r;
              out[SB + 1] = -T0i + inv * T2i;
            }
          }
        }
        const half = size >>> 1;
        for (let i = 2; i < half; i += 2) {
          out[size - i] = out[i];
          out[size - i + 1] = -out[i + 1];
        }
      }
      /**
       * Performs a single real input radix-2 transformation on the provided data
       * 
       * @param {Float64Array} data The input data array
       * @param {Float64Array} out The output data array
       * @param {number} outOff The output offset
       * @param {number} off The input offset
       * @param {number} step The step
       * 
       * @returns {void}
       */
      _singleRealTransform2(data, out, outOff, off, step) {
        const evenR = data[off];
        const oddR = data[off + step];
        out[outOff] = evenR + oddR;
        out[outOff + 1] = 0;
        out[outOff + 2] = evenR - oddR;
        out[outOff + 3] = 0;
      }
      /**
       * Computes a single real-valued transform using radix-4 algorithm.
       * This method is only called for len=8.
       *
       * @param {Float64Array} data The input data array.
       * @param {Float64Array} out The output data array.
       * @param {number} outOff The offset into the output array.
       * @param {number} off The offset into the input array.
       * @param {number} step The step size for the input array.
       * @param {number} inv The value of inverse.
       */
      _singleRealTransform4(data, out, outOff, off, step, inv) {
        const step2 = step * 2;
        const step3 = step * 3;
        const Ar = data[off];
        const Br = data[off + step];
        const Cr = data[off + step2];
        const Dr = data[off + step3];
        const T0r = Ar + Cr;
        const T1r = Ar - Cr;
        const T2r = Br + Dr;
        const T3r = inv * (Br - Dr);
        out[outOff] = T0r + T2r;
        out[outOff + 1] = 0;
        out[outOff + 2] = T1r;
        out[outOff + 3] = -T3r;
        out[outOff + 4] = T0r - T2r;
        out[outOff + 5] = 0;
        out[outOff + 6] = T1r;
        out[outOff + 7] = T3r;
      }
    };
    NP2FFT = class {
      static {
        __name(this, "NP2FFT");
      }
      /**
       * Constructs a new NP2FFT object.
       * @param {number} fft_length The length of the FFT
       */
      constructor(fft_length) {
        const a = 2 * (fft_length - 1);
        const b = 2 * (2 * fft_length - 1);
        const nextP2 = 2 ** Math.ceil(Math.log2(b));
        this.bufferSize = nextP2;
        this._a = a;
        const chirp = new Float64Array(b);
        const ichirp = new Float64Array(nextP2);
        this._chirpBuffer = new Float64Array(nextP2);
        this._buffer1 = new Float64Array(nextP2);
        this._buffer2 = new Float64Array(nextP2);
        this._outBuffer1 = new Float64Array(nextP2);
        this._outBuffer2 = new Float64Array(nextP2);
        const theta = -2 * Math.PI / fft_length;
        const baseR = Math.cos(theta);
        const baseI = Math.sin(theta);
        for (let i = 0; i < b >> 1; ++i) {
          const e = (i + 1 - fft_length) ** 2 / 2;
          const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;
          const result_arg = e * Math.atan2(baseI, baseR);
          const i2 = 2 * i;
          chirp[i2] = result_mod * Math.cos(result_arg);
          chirp[i2 + 1] = result_mod * Math.sin(result_arg);
          ichirp[i2] = chirp[i2];
          ichirp[i2 + 1] = -chirp[i2 + 1];
        }
        this._slicedChirpBuffer = chirp.subarray(a, b);
        this._f = new P2FFT(nextP2 >> 1);
        this._f.transform(this._chirpBuffer, ichirp);
      }
      _transform(output, input, real2) {
        const ib1 = this._buffer1;
        const ib2 = this._buffer2;
        const ob2 = this._outBuffer1;
        const ob3 = this._outBuffer2;
        const cb = this._chirpBuffer;
        const sb = this._slicedChirpBuffer;
        const a = this._a;
        if (real2) {
          for (let j = 0; j < sb.length; j += 2) {
            const j2 = j + 1;
            const j3 = j >> 1;
            const a_real = input[j3];
            ib1[j] = a_real * sb[j];
            ib1[j2] = a_real * sb[j2];
          }
        } else {
          for (let j = 0; j < sb.length; j += 2) {
            const j2 = j + 1;
            ib1[j] = input[j] * sb[j] - input[j2] * sb[j2];
            ib1[j2] = input[j] * sb[j2] + input[j2] * sb[j];
          }
        }
        this._f.transform(ob2, ib1);
        for (let j = 0; j < cb.length; j += 2) {
          const j2 = j + 1;
          ib2[j] = ob2[j] * cb[j] - ob2[j2] * cb[j2];
          ib2[j2] = ob2[j] * cb[j2] + ob2[j2] * cb[j];
        }
        this._f.inverseTransform(ob3, ib2);
        for (let j = 0; j < ob3.length; j += 2) {
          const a_real = ob3[j + a];
          const a_imag = ob3[j + a + 1];
          const b_real = sb[j];
          const b_imag = sb[j + 1];
          output[j] = a_real * b_real - a_imag * b_imag;
          output[j + 1] = a_real * b_imag + a_imag * b_real;
        }
      }
      transform(output, input) {
        this._transform(output, input, false);
      }
      realTransform(output, input) {
        this._transform(output, input, true);
      }
    };
    FFT = class {
      static {
        __name(this, "FFT");
      }
      constructor(fft_length) {
        this.fft_length = fft_length;
        this.isPowerOfTwo = isPowerOfTwo(fft_length);
        if (this.isPowerOfTwo) {
          this.fft = new P2FFT(fft_length);
          this.outputBufferSize = 2 * fft_length;
        } else {
          this.fft = new NP2FFT(fft_length);
          this.outputBufferSize = this.fft.bufferSize;
        }
      }
      realTransform(out, input) {
        this.fft.realTransform(out, input);
      }
      transform(out, input) {
        this.fft.transform(out, input);
      }
    };
    __name(medianFilter, "medianFilter");
    __name(round, "round");
    __name(bankers_round, "bankers_round");
  }
});

// node_modules/@xenova/transformers/src/utils/tensor.js
function reshape(data, dimensions) {
  const totalElements = data.length;
  const dimensionSize = dimensions.reduce((a, b) => a * b);
  if (totalElements !== dimensionSize) {
    throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);
  }
  let reshapedArray = data;
  for (let i = dimensions.length - 1; i >= 0; i--) {
    reshapedArray = reshapedArray.reduce((acc, val) => {
      let lastArray = acc[acc.length - 1];
      if (lastArray.length < dimensions[i]) {
        lastArray.push(val);
      } else {
        acc.push([val]);
      }
      return acc;
    }, [[]]);
  }
  return reshapedArray[0];
}
function permute(tensor, axes) {
  const [permutedData, shape] = permute_data(tensor.data, tensor.dims, axes);
  return new Tensor(tensor.type, permutedData, shape);
}
function interpolate(input, [out_height, out_width], mode = "bilinear", align_corners = false) {
  const in_channels = input.dims.at(-3) ?? 1;
  const in_height = input.dims.at(-2);
  const in_width = input.dims.at(-1);
  let output = interpolate_data(
    /** @type {import('./maths.js').TypedArray}*/
    input.data,
    [in_channels, in_height, in_width],
    [out_height, out_width],
    mode,
    align_corners
  );
  return new Tensor(input.type, output, [in_channels, out_height, out_width]);
}
function mean_pooling(last_hidden_state, attention_mask) {
  let shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];
  let returnedData = new last_hidden_state.data.constructor(shape[0] * shape[1]);
  let [batchSize, seqLength, embedDim] = last_hidden_state.dims;
  let outIndex = 0;
  for (let i = 0; i < batchSize; ++i) {
    let offset = i * embedDim * seqLength;
    for (let k = 0; k < embedDim; ++k) {
      let sum = 0;
      let count = 0;
      let attnMaskOffset = i * seqLength;
      let offset2 = offset + k;
      for (let j = 0; j < seqLength; ++j) {
        let attn = Number(attention_mask.data[attnMaskOffset + j]);
        count += attn;
        sum += last_hidden_state.data[offset2 + j * embedDim] * attn;
      }
      let avg = sum / count;
      returnedData[outIndex++] = avg;
    }
  }
  return new Tensor(
    last_hidden_state.type,
    returnedData,
    shape
  );
}
function layer_norm(input, normalized_shape, {
  eps = 1e-5
} = {}) {
  if (input.dims.length !== 2) {
    throw new Error("`layer_norm` currently only supports 2D input.");
  }
  const [batchSize, featureDim] = input.dims;
  if (normalized_shape.length !== 1 && normalized_shape[0] !== featureDim) {
    throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");
  }
  const [std, mean2] = std_mean(input, 1, 0, true);
  const returnedData = new input.data.constructor(input.data.length);
  for (let i = 0; i < batchSize; ++i) {
    const offset = i * featureDim;
    for (let j = 0; j < featureDim; ++j) {
      const offset2 = offset + j;
      returnedData[offset2] = (input.data[offset2] - mean2.data[i]) / (std.data[i] + eps);
    }
  }
  return new Tensor(input.type, returnedData, input.dims);
}
function calc_squeeze_dims(dims, dim) {
  dims = dims.slice();
  if (dim === null) {
    dims = dims.filter((d) => d !== 1);
  } else if (typeof dim === "number") {
    if (dims[dim] === 1) {
      dims.splice(dim, 1);
    }
  } else if (Array.isArray(dim)) {
    dims = dims.filter((x, i) => {
      return x !== 1 || !dim.includes(i);
    });
  }
  return dims;
}
function calc_unsqueeze_dims(dims, dim) {
  dim = safeIndex(dim, dims.length + 1);
  dims = dims.slice();
  dims.splice(dim, 0, 1);
  return dims;
}
function safeIndex(index, size, dimension = null) {
  if (index < -size || index >= size) {
    throw new Error(`IndexError: index ${index} is out of bounds for dimension${dimension === null ? "" : " " + dimension} with size ${size}`);
  }
  if (index < 0) {
    index = (index % size + size) % size;
  }
  return index;
}
function cat(tensors, dim = 0) {
  dim = safeIndex(dim, tensors[0].dims.length);
  const resultDims = tensors[0].dims.slice();
  resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);
  const resultSize = resultDims.reduce((a, b) => a * b, 1);
  const result = new tensors[0].data.constructor(resultSize);
  const resultType = tensors[0].type;
  if (dim === 0) {
    let offset = 0;
    for (let t of tensors) {
      result.set(t.data, offset);
      offset += t.data.length;
    }
  } else {
    let currentDim = 0;
    for (let t = 0; t < tensors.length; ++t) {
      let tensor = tensors[t];
      for (let i = 0; i < tensor.data.length; ++i) {
        let resultIndex = 0;
        for (let j = tensor.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
          const size = tensor.dims[j];
          let index = num % size;
          if (j === dim) {
            index += currentDim;
          }
          resultIndex += index * resultMultiplier;
          resultMultiplier *= resultDims[j];
          num = Math.floor(num / size);
        }
        result[resultIndex] = tensor.data[i];
      }
      currentDim += tensor.dims[dim];
    }
  }
  return new Tensor(resultType, result, resultDims);
}
function stack(tensors, dim = 0) {
  return cat(tensors.map((t) => t.unsqueeze(dim)), dim);
}
function std_mean(input, dim = null, correction = 1, keepdim = false) {
  if (dim === null) {
    const sum = input.data.reduce((a, b) => a + b, 0);
    const mean2 = sum / input.data.length;
    const std = Math.sqrt(input.data.reduce((a, b) => a + (b - mean2) ** 2, 0) / (input.data.length - correction));
    const meanTensor2 = new Tensor(input.type, [mean2], [
      /* scalar */
    ]);
    const stdTensor2 = new Tensor(input.type, [std], [
      /* scalar */
    ]);
    return [stdTensor2, meanTensor2];
  }
  dim = safeIndex(dim, input.dims.length);
  const meanTensor = mean(input, dim, keepdim);
  const resultDims = input.dims.slice();
  resultDims[dim] = 1;
  const result = new input.data.constructor(input.data.length / input.dims[dim]);
  for (let i = 0; i < input.data.length; ++i) {
    let resultIndex = 0;
    for (let j = input.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
      const size = input.dims[j];
      if (j !== dim) {
        const index = num % size;
        resultIndex += index * resultMultiplier;
        resultMultiplier *= resultDims[j];
      }
      num = Math.floor(num / size);
    }
    result[resultIndex] += (input.data[i] - meanTensor.data[resultIndex]) ** 2;
  }
  for (let i = 0; i < result.length; ++i) {
    result[i] = Math.sqrt(result[i] / (input.dims[dim] - correction));
  }
  if (!keepdim) {
    resultDims.splice(dim, 1);
  }
  const stdTensor = new Tensor(input.type, result, resultDims);
  return [stdTensor, meanTensor];
}
function mean(input, dim = null, keepdim = false) {
  if (dim === null) {
    let val = input.data.reduce((a, b) => a + b, 0);
    return new Tensor(input.type, [val / input.data.length], [
      /* scalar */
    ]);
  }
  dim = safeIndex(dim, input.dims.length);
  const resultDims = input.dims.slice();
  resultDims[dim] = 1;
  const result = new input.data.constructor(input.data.length / input.dims[dim]);
  for (let i = 0; i < input.data.length; ++i) {
    let resultIndex = 0;
    for (let j = input.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
      const size = input.dims[j];
      if (j !== dim) {
        const index = num % size;
        resultIndex += index * resultMultiplier;
        resultMultiplier *= resultDims[j];
      }
      num = Math.floor(num / size);
    }
    result[resultIndex] += input.data[i];
  }
  if (input.dims[dim] !== 1) {
    for (let i = 0; i < result.length; ++i) {
      result[i] = result[i] / input.dims[dim];
    }
  }
  if (!keepdim) {
    resultDims.splice(dim, 1);
  }
  return new Tensor(input.type, result, resultDims);
}
function dynamicTimeWarping(matrix) {
  const [output_length, input_length] = matrix.dims;
  const outputShape = [output_length + 1, input_length + 1];
  const cost = new Tensor(
    "float32",
    new Float32Array(outputShape[0] * outputShape[1]).fill(Infinity),
    outputShape
  );
  const trace = new Tensor(
    "float32",
    new Float32Array(outputShape[0] * outputShape[1]).fill(-1),
    outputShape
  );
  cost[0].data[0] = 0;
  for (let j2 = 1; j2 < input_length + 1; ++j2) {
    for (let i2 = 1; i2 < output_length + 1; ++i2) {
      const c0 = cost[i2 - 1][j2 - 1].item();
      const c1 = cost[i2 - 1][j2].item();
      const c2 = cost[i2][j2 - 1].item();
      let c, t;
      if (c0 < c1 && c0 < c2) {
        c = c0;
        t = 0;
      } else if (c1 < c0 && c1 < c2) {
        c = c1;
        t = 1;
      } else {
        c = c2;
        t = 2;
      }
      cost[i2].data[j2] = matrix[i2 - 1][j2 - 1].item() + c;
      trace[i2].data[j2] = t;
    }
  }
  let i = output_length;
  let j = input_length;
  trace.data.fill(2, 0, outputShape[1]);
  for (let i2 = 0; i2 < outputShape[0]; ++i2) {
    trace[i2].data[0] = 1;
  }
  let text_indices = [];
  let time_indices = [];
  while (i > 0 || j > 0) {
    text_indices.push(i - 1);
    time_indices.push(j - 1);
    const t = trace[i][j].item();
    switch (t) {
      case 0:
        --i;
        --j;
        break;
      case 1:
        --i;
        break;
      case 2:
        --j;
        break;
      default:
        throw new Error(
          `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`
        );
    }
  }
  text_indices.reverse();
  time_indices.reverse();
  return [text_indices, time_indices];
}
function dimsToStride(dims) {
  const stride = new Array(dims.length);
  for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {
    stride[i] = s2;
    s2 *= dims[i];
  }
  return stride;
}
function ones(size) {
  const numElements = size.reduce((a, b) => a * b, 1);
  return new Tensor(
    "int64",
    new BigInt64Array(numElements).fill(1n),
    size
  );
}
function ones_like(tensor) {
  return ones(tensor.dims);
}
function quantize_embeddings(tensor, precision) {
  if (tensor.dims.length !== 2) {
    throw new Error("The tensor must have 2 dimensions");
  }
  if (tensor.dims.at(-1) % 8 !== 0) {
    throw new Error("The last dimension of the tensor must be a multiple of 8");
  }
  if (!["binary", "ubinary"].includes(precision)) {
    throw new Error("The precision must be either 'binary' or 'ubinary'");
  }
  const signed = precision === "binary";
  const dtype = signed ? "int8" : "uint8";
  const cls = signed ? Int8Array : Uint8Array;
  const inputData = tensor.data;
  const outputData = new cls(inputData.length / 8);
  for (let i = 0; i < inputData.length; ++i) {
    const bit = inputData[i] > 0 ? 1 : 0;
    const arrayIndex = Math.floor(i / 8);
    const bitPosition = i % 8;
    outputData[arrayIndex] |= bit << 7 - bitPosition;
    if (signed && bitPosition === 0) {
      outputData[arrayIndex] -= 128;
    }
  }
  ;
  return new Tensor(dtype, outputData, [tensor.dims[0], tensor.dims[1] / 8]);
}
var DataTypeMap, ONNXTensor, Tensor;
var init_tensor = __esm({
  "node_modules/@xenova/transformers/src/utils/tensor.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_onnx();
    init_maths();
    DataTypeMap = Object.freeze({
      float32: Float32Array,
      float64: Float64Array,
      string: Array,
      // string[]
      int8: Int8Array,
      uint8: Uint8Array,
      int16: Int16Array,
      uint16: Uint16Array,
      int32: Int32Array,
      uint32: Uint32Array,
      int64: BigInt64Array,
      uint64: BigUint64Array,
      bool: Uint8Array
    });
    ONNXTensor = ONNX.Tensor;
    Tensor = class _Tensor {
      static {
        __name(this, "Tensor");
      }
      /** @type {number[]} Dimensions of the tensor. */
      dims;
      /** @type {DataType} Type of the tensor. */
      type;
      /** @type {DataArray} The data stored in the tensor. */
      data;
      /** @type {number} The number of elements in the tensor. */
      size;
      /**
       * Create a new Tensor or copy an existing Tensor.
       * @param {[DataType, DataArray, number[]]|[import('onnxruntime-common').Tensor]} args
       */
      constructor(...args) {
        if (args[0] instanceof ONNXTensor) {
          Object.assign(this, args[0]);
        } else {
          Object.assign(this, new ONNXTensor(
            /** @type {DataType} */
            args[0],
            /** @type {Exclude<import('./maths.js').AnyTypedArray, Uint8ClampedArray>} */
            args[1],
            args[2]
          ));
        }
        return new Proxy(this, {
          get: /* @__PURE__ */ __name((obj, key) => {
            if (typeof key === "string") {
              let index = Number(key);
              if (Number.isInteger(index)) {
                return obj._getitem(index);
              }
            }
            return obj[key];
          }, "get"),
          set: /* @__PURE__ */ __name((obj, key, value) => {
            return obj[key] = value;
          }, "set")
        });
      }
      /**
       * Returns an iterator object for iterating over the tensor data in row-major order.
       * If the tensor has more than one dimension, the iterator will yield subarrays.
       * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.
       */
      *[Symbol.iterator]() {
        const [iterLength, ...iterDims] = this.dims;
        if (iterDims.length > 0) {
          const iterSize = iterDims.reduce((a, b) => a * b);
          for (let i = 0; i < iterLength; ++i) {
            yield this._subarray(i, iterSize, iterDims);
          }
        } else {
          yield* this.data;
        }
      }
      /**
       * Index into a Tensor object.
       * @param {number} index The index to access.
       * @returns {Tensor} The data at the specified index.
       */
      _getitem(index) {
        const [iterLength, ...iterDims] = this.dims;
        index = safeIndex(index, iterLength);
        if (iterDims.length > 0) {
          const iterSize = iterDims.reduce((a, b) => a * b);
          return this._subarray(index, iterSize, iterDims);
        } else {
          return new _Tensor(this.type, [this.data[index]], iterDims);
        }
      }
      /**
       * @param {number|bigint} item The item to search for in the tensor
       * @returns {number} The index of the first occurrence of item in the tensor data.
       */
      indexOf(item) {
        for (let index = 0; index < this.data.length; ++index) {
          if (this.data[index] == item) {
            return index;
          }
        }
        return -1;
      }
      /**
       * @param {number} index 
       * @param {number} iterSize 
       * @param {any} iterDims 
       * @returns {Tensor}
       */
      _subarray(index, iterSize, iterDims) {
        const o1 = index * iterSize;
        const o2 = (index + 1) * iterSize;
        const data = "subarray" in this.data ? this.data.subarray(o1, o2) : this.data.slice(o1, o2);
        return new _Tensor(this.type, data, iterDims);
      }
      /**
       * Returns the value of this tensor as a standard JavaScript Number. This only works
       * for tensors with one element. For other cases, see `Tensor.tolist()`.
       * @returns {number|bigint} The value of this tensor as a standard JavaScript Number.
       * @throws {Error} If the tensor has more than one element.
       */
      item() {
        if (this.data.length !== 1) {
          throw new Error(`a Tensor with ${this.data.length} elements cannot be converted to Scalar`);
        }
        return this.data[0];
      }
      /**
       * Convert tensor data to a n-dimensional JS list
       * @returns {Array}
       */
      tolist() {
        return reshape(this.data, this.dims);
      }
      /**
       * Return a new Tensor with the sigmoid function applied to each element.
       * @returns {Tensor} The tensor with the sigmoid function applied.
       */
      sigmoid() {
        return this.clone().sigmoid_();
      }
      /**
       * Applies the sigmoid function to the tensor in place.
       * @returns {Tensor} Returns `this`.
       */
      sigmoid_() {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] = 1 / (1 + Math.exp(-this.data[i]));
        }
        return this;
      }
      /**
       * Return a new Tensor with every element multiplied by a constant.
       * @param {number} val The value to multiply by.
       * @returns {Tensor} The new tensor.
       */
      mul(val) {
        return this.clone().mul_(val);
      }
      /**
       * Multiply the tensor by a constant in place.
       * @param {number} val The value to multiply by.
       * @returns {Tensor} Returns `this`.
       */
      mul_(val) {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] *= val;
        }
        return this;
      }
      /**
       * Return a new Tensor with every element added by a constant.
       * @param {number} val The value to add by.
       * @returns {Tensor} The new tensor.
       */
      add(val) {
        return this.clone().add_(val);
      }
      /**
       * Add the tensor by a constant in place.
       * @param {number} val The value to add by.
       * @returns {Tensor} Returns `this`.
       */
      add_(val) {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] += val;
        }
        return this;
      }
      clone() {
        return new _Tensor(this.type, this.data.slice(), this.dims.slice());
      }
      slice(...slices) {
        let newTensorDims = [];
        let newOffsets = [];
        for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {
          let slice2 = slices[sliceIndex];
          if (slice2 === null || slice2 === void 0) {
            newOffsets.push([0, this.dims[sliceIndex]]);
            newTensorDims.push(this.dims[sliceIndex]);
          } else if (typeof slice2 === "number") {
            slice2 = safeIndex(slice2, this.dims[sliceIndex], sliceIndex);
            newOffsets.push([slice2, slice2 + 1]);
          } else if (Array.isArray(slice2) && slice2.length === 2) {
            if (slice2[0] > slice2[1]) {
              throw new Error(`Invalid slice: ${slice2}`);
            }
            let offsets = [
              Math.max(slice2[0], 0),
              Math.min(slice2[1], this.dims[sliceIndex])
            ];
            newOffsets.push(offsets);
            newTensorDims.push(offsets[1] - offsets[0]);
          } else {
            throw new Error(`Invalid slice: ${slice2}`);
          }
        }
        let newDims = newOffsets.map(([start, end]) => end - start);
        let newBufferSize = newDims.reduce((a, b) => a * b);
        let data = new this.data.constructor(newBufferSize);
        const stride = this.stride();
        for (let i = 0; i < newBufferSize; ++i) {
          let originalIndex = 0;
          for (let j = newDims.length - 1, num = i; j >= 0; --j) {
            const size = newDims[j];
            originalIndex += (num % size + newOffsets[j][0]) * stride[j];
            num = Math.floor(num / size);
          }
          data[i] = this.data[originalIndex];
        }
        return new _Tensor(this.type, data, newTensorDims);
      }
      /**
       * Return a permuted version of this Tensor, according to the provided dimensions.
       * @param  {...number} dims Dimensions to permute.
       * @returns {Tensor} The permuted tensor.
       */
      permute(...dims) {
        return permute(this, dims);
      }
      // TODO: implement transpose. For now (backwards compatibility), it's just an alias for permute()
      transpose(...dims) {
        return this.permute(...dims);
      }
      // TODO add .max() and .min() methods
      /**
       * Returns the sum of each row of the input tensor in the given dimension dim.
       * 
       * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.
       * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.
       * @returns The summed tensor
       */
      sum(dim = null, keepdim = false) {
        return this.norm(1, dim, keepdim);
      }
      /**
       * Returns the matrix norm or vector norm of a given tensor.
       * @param {number|string} [p='fro'] The order of norm
       * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.
       * If dim is None, the norm will be calculated across all dimensions of input.
       * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.
       * @returns {Tensor} The norm of the tensor.
       */
      norm(p = "fro", dim = null, keepdim = false) {
        if (p === "fro") {
          p = 2;
        } else if (typeof p === "string") {
          throw Error(`Unsupported norm: ${p}`);
        }
        if (dim === null) {
          let val = this.data.reduce((a, b) => a + b ** p, 0) ** (1 / p);
          return new _Tensor(this.type, [val], []);
        }
        dim = safeIndex(dim, this.dims.length);
        const resultDims = this.dims.slice();
        resultDims[dim] = 1;
        const result = new this.data.constructor(this.data.length / this.dims[dim]);
        for (let i = 0; i < this.data.length; ++i) {
          let resultIndex = 0;
          for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
            const size = this.dims[j];
            if (j !== dim) {
              const index = num % size;
              resultIndex += index * resultMultiplier;
              resultMultiplier *= resultDims[j];
            }
            num = Math.floor(num / size);
          }
          result[resultIndex] += this.data[i] ** p;
        }
        if (p !== 1) {
          for (let i = 0; i < result.length; ++i) {
            result[i] = result[i] ** (1 / p);
          }
        }
        if (!keepdim) {
          resultDims.splice(dim, 1);
        }
        return new _Tensor(this.type, result, resultDims);
      }
      /**
       * Performs `L_p` normalization of inputs over specified dimension. Operates in place.
       * @param {number} [p=2] The exponent value in the norm formulation
       * @param {number} [dim=1] The dimension to reduce
       * @returns {Tensor} `this` for operation chaining.
       */
      normalize_(p = 2, dim = 1) {
        dim = safeIndex(dim, this.dims.length);
        const norm = this.norm(p, dim, true);
        for (let i = 0; i < this.data.length; ++i) {
          let resultIndex = 0;
          for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
            const size = this.dims[j];
            if (j !== dim) {
              const index = num % size;
              resultIndex += index * resultMultiplier;
              resultMultiplier *= this.dims[j];
            }
            num = Math.floor(num / size);
          }
          this.data[i] /= norm.data[resultIndex];
        }
        return this;
      }
      /**
       * Performs `L_p` normalization of inputs over specified dimension.
       * @param {number} [p=2] The exponent value in the norm formulation
       * @param {number} [dim=1] The dimension to reduce
       * @returns {Tensor} The normalized tensor.
       */
      normalize(p = 2, dim = 1) {
        return this.clone().normalize_(p, dim);
      }
      /**
       * Compute and return the stride of this tensor.
       * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.
       * @returns {number[]} The stride of this tensor.
       */
      stride() {
        return dimsToStride(this.dims);
      }
      /**
       * Returns a tensor with all specified dimensions of input of size 1 removed.
       * 
       * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.
       * If you would like a copy, use `tensor.clone()` before squeezing.
       * 
       * @param {number} [dim=null] If given, the input will be squeezed only in the specified dimensions.
       * @returns The squeezed tensor
       */
      squeeze(dim = null) {
        return new _Tensor(
          this.type,
          this.data,
          calc_squeeze_dims(this.dims, dim)
        );
      }
      /**
       * In-place version of @see {@link Tensor.squeeze}
       */
      squeeze_(dim = null) {
        this.dims = calc_squeeze_dims(this.dims, dim);
        return this;
      }
      /**
       * Returns a new tensor with a dimension of size one inserted at the specified position.
       * 
       * NOTE: The returned tensor shares the same underlying data with this tensor.
       * 
       * @param {number} dim The index at which to insert the singleton dimension
       * @returns The unsqueezed tensor
       */
      unsqueeze(dim = null) {
        return new _Tensor(
          this.type,
          this.data,
          calc_unsqueeze_dims(this.dims, dim)
        );
      }
      /**
       * In-place version of @see {@link Tensor.unsqueeze}
       */
      unsqueeze_(dim = null) {
        this.dims = calc_unsqueeze_dims(this.dims, dim);
        return this;
      }
      /**
       * In-place version of @see {@link Tensor.flatten}
       */
      flatten_(start_dim = 0, end_dim = -1) {
        end_dim = (end_dim + this.dims.length) % this.dims.length;
        let dimsToKeepBefore = this.dims.slice(0, start_dim);
        let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);
        let dimsToKeepAfter = this.dims.slice(end_dim + 1);
        this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter];
        return this;
      }
      /**
       * Flattens input by reshaping it into a one-dimensional tensor.
       * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`
       * and ending with `end_dim` are flattened. The order of elements in input is unchanged.
       * @param {number} start_dim the first dim to flatten
       * @param {number} end_dim the last dim to flatten
       * @returns The flattened tensor.
       */
      flatten(start_dim = 0, end_dim = -1) {
        return this.clone().flatten_(start_dim, end_dim);
      }
      /**
       * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.
       * @param  {...number} dims the desired size
       * @returns {Tensor} The tensor with the same data but different shape
       */
      view(...dims) {
        let inferredIndex = -1;
        for (let i = 0; i < dims.length; ++i) {
          if (dims[i] === -1) {
            if (inferredIndex !== -1) {
              throw new Error("Only one dimension can be inferred");
            }
            inferredIndex = i;
          }
        }
        if (inferredIndex !== -1) {
          const productOther = dims.reduce((product2, curr, index) => {
            return index !== inferredIndex ? product2 * curr : product2;
          }, 1);
          dims[inferredIndex] = this.data.length / productOther;
        }
        return new _Tensor(this.type, this.data, dims);
      }
      neg_() {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] = -this.data[i];
        }
        return this;
      }
      neg() {
        return this.clone().neg_();
      }
      /**
       * In-place version of @see {@link Tensor.clamp}
       */
      clamp_(min2, max2) {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] = Math.min(Math.max(this.data[i], min2), max2);
        }
        return this;
      }
      /**
       * Clamps all elements in input into the range [ min, max ]
       * @param {number} min lower-bound of the range to be clamped to
       * @param {number} max upper-bound of the range to be clamped to
       * @returns the output tensor.
       */
      clamp(min2, max2) {
        return this.clone().clamp_(min2, max2);
      }
      /**
       * In-place version of @see {@link Tensor.round}
       */
      round_() {
        for (let i = 0; i < this.data.length; ++i) {
          this.data[i] = Math.round(this.data[i]);
        }
        return this;
      }
      /**
       * Rounds elements of input to the nearest integer.
       * @returns the output tensor.
       */
      round() {
        return this.clone().round_();
      }
      /**
       * Performs Tensor dtype conversion.
       * @param {DataType} type The desired data type.
       * @returns {Tensor} The converted tensor.
       */
      to(type) {
        if (this.type === type) return this;
        if (!DataTypeMap.hasOwnProperty(type)) {
          throw new Error(`Unsupported type: ${type}`);
        }
        return new _Tensor(type, DataTypeMap[type].from(this.data), this.dims);
      }
    };
    __name(reshape, "reshape");
    __name(permute, "permute");
    __name(interpolate, "interpolate");
    __name(mean_pooling, "mean_pooling");
    __name(layer_norm, "layer_norm");
    __name(calc_squeeze_dims, "calc_squeeze_dims");
    __name(calc_unsqueeze_dims, "calc_unsqueeze_dims");
    __name(safeIndex, "safeIndex");
    __name(cat, "cat");
    __name(stack, "stack");
    __name(std_mean, "std_mean");
    __name(mean, "mean");
    __name(dynamicTimeWarping, "dynamicTimeWarping");
    __name(dimsToStride, "dimsToStride");
    __name(ones, "ones");
    __name(ones_like, "ones_like");
    __name(quantize_embeddings, "quantize_embeddings");
  }
});

// node_modules/@xenova/transformers/src/utils/data-structures.js
var PriorityQueue, CharTrie, CharTrieNode, TokenLattice, TokenLatticeNode;
var init_data_structures = __esm({
  "node_modules/@xenova/transformers/src/utils/data-structures.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    PriorityQueue = class {
      static {
        __name(this, "PriorityQueue");
      }
      /**
       * Create a new PriorityQueue.
       * @param {Function} comparator Comparator function to determine priority. Defaults to a MaxHeap.
       */
      constructor(comparator = (a, b) => a > b) {
        this._heap = [];
        this._comparator = comparator;
      }
      /**
       * The size of the queue
       */
      get size() {
        return this._heap.length;
      }
      /**
       * Check if the queue is empty.
       * @returns {boolean} `true` if the queue is empty, `false` otherwise.
       */
      isEmpty() {
        return this.size === 0;
      }
      /**
       * Return the element with the highest priority in the queue.
       * @returns {any} The highest priority element in the queue.
       */
      peek() {
        return this._heap[0];
      }
      /**
       * Add one or more elements to the queue.
       * @param  {...any} values The values to push into the queue.
       * @returns {number} The new size of the queue.
       */
      push(...values) {
        return this.extend(values);
      }
      /**
       * Add multiple elements to the queue.
       * @param {any[]} values The values to push into the queue.
       * @returns {number} The new size of the queue.
       */
      extend(values) {
        for (const value of values) {
          this._heap.push(value);
          this._siftUp();
        }
        return this.size;
      }
      /**
       * Remove and return the element with the highest priority in the queue.
       * @returns {any} The element with the highest priority in the queue.
       */
      pop() {
        const poppedValue = this.peek();
        const bottom = this.size - 1;
        if (bottom > 0) {
          this._swap(0, bottom);
        }
        this._heap.pop();
        this._siftDown();
        return poppedValue;
      }
      /**
       * Replace the element with the highest priority in the queue with a new value.
       * @param {*} value The new value.
       * @returns {*} The replaced value.
       */
      replace(value) {
        const replacedValue = this.peek();
        this._heap[0] = value;
        this._siftDown();
        return replacedValue;
      }
      /**
       * Compute the index for the parent of the node at index `i`.
       * @param {number} i The index of the node to get the parent of.
       * @returns {number} The index of the parent node.
       * @private
       */
      _parent(i) {
        return (i + 1 >>> 1) - 1;
      }
      /**
       * Compute the index for the left child of the node at index `i`.
       * @param {number} i The index of the node to get the left child of.
       * @returns {number} The index of the left child.
       * @private
       */
      _left(i) {
        return (i << 1) + 1;
      }
      /**
       * Compute the index for the right child of the node at index `i`.
       * @param {number} i The index of the node to get the right child of.
       * @returns {number} The index of the right child.
       * @private
       */
      _right(i) {
        return i + 1 << 1;
      }
      /**
       * Check if the element at index `i` is greater than the element at index `j`.
       * @param {number} i The index of the first element to compare.
       * @param {number} j The index of the second element to compare.
       * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.
       * @private
       */
      _greater(i, j) {
        return this._comparator(this._heap[i], this._heap[j]);
      }
      /**
       * Swap the elements at indices `i` and `j`.
       * @param {number} i The index of the first element to swap.
       * @param {number} j The index of the second element to swap.
       * @private
       */
      _swap(i, j) {
        const temp = this._heap[i];
        this._heap[i] = this._heap[j];
        this._heap[j] = temp;
      }
      /**
       * Maintain the heap property by updating positions in the heap,
       * starting at the last element and moving up the heap.
       * @private
       */
      _siftUp() {
        let node = this.size - 1;
        while (node > 0 && this._greater(node, this._parent(node))) {
          this._swap(node, this._parent(node));
          node = this._parent(node);
        }
      }
      /**
       * Maintain the heap property by updating positions in the heap,
       * starting at the first element and moving down the heap.
       * @private
       */
      _siftDown() {
        let node = 0;
        while (this._left(node) < this.size && this._greater(this._left(node), node) || this._right(node) < this.size && this._greater(this._right(node), node)) {
          const maxChild = this._right(node) < this.size && this._greater(this._right(node), this._left(node)) ? this._right(node) : this._left(node);
          this._swap(node, maxChild);
          node = maxChild;
        }
      }
    };
    CharTrie = class {
      static {
        __name(this, "CharTrie");
      }
      constructor() {
        this.root = CharTrieNode.default();
      }
      /**
       * Adds one or more `texts` to the trie.
       * @param {string[]} texts The strings to add to the trie.
       */
      extend(texts) {
        for (let text2 of texts) {
          this.push(text2);
        }
      }
      /**
       * Adds text to the trie.
       * @param {string} text The string to add to the trie.
       */
      push(text2) {
        let node = this.root;
        for (let ch of text2) {
          let child = node.children.get(ch);
          if (child === void 0) {
            child = CharTrieNode.default();
            node.children.set(ch, child);
          }
          node = child;
        }
        node.isLeaf = true;
      }
      /**
       * Searches the trie for all strings with a common prefix of `text`.
       * @param {string} text The common prefix to search for.
       * @yields {string} Each string in the trie that has `text` as a prefix.
       */
      *commonPrefixSearch(text2) {
        let node = this.root;
        let prefix = "";
        for (let i = 0; i < text2.length && node !== void 0; ++i) {
          const ch = text2[i];
          prefix += ch;
          node = node.children.get(ch);
          if (node !== void 0 && node.isLeaf) {
            yield prefix;
          }
        }
      }
    };
    CharTrieNode = class _CharTrieNode {
      static {
        __name(this, "CharTrieNode");
      }
      /**
       * Create a new CharTrieNode.
       * @param {boolean} isLeaf Whether the node is a leaf node or not.
       * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.
       */
      constructor(isLeaf, children) {
        this.isLeaf = isLeaf;
        this.children = children;
      }
      /**
       * Returns a new `CharTrieNode` instance with default values.
       * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.
       */
      static default() {
        return new _CharTrieNode(false, /* @__PURE__ */ new Map());
      }
    };
    TokenLattice = class {
      static {
        __name(this, "TokenLattice");
      }
      /**
       * Creates a new TokenLattice instance.
       *
       * @param {string} sentence The input sentence to be tokenized.
       * @param {number} bosTokenId The beginning-of-sequence token ID.
       * @param {number} eosTokenId The end-of-sequence token ID.
       */
      constructor(sentence, bosTokenId, eosTokenId) {
        this.sentence = sentence;
        this.len = sentence.length;
        this.bosTokenId = bosTokenId;
        this.eosTokenId = eosTokenId;
        this.nodes = [];
        this.beginNodes = Array.from({ length: this.len + 1 }, () => []);
        this.endNodes = Array.from({ length: this.len + 1 }, () => []);
        const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0);
        const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0);
        this.nodes.push(bos.clone());
        this.nodes.push(eos.clone());
        this.beginNodes[this.len].push(eos);
        this.endNodes[0].push(bos);
      }
      /**
       * Inserts a new token node into the token lattice.
       *
       * @param {number} pos The starting position of the token.
       * @param {number} length The length of the token.
       * @param {number} score The score of the token.
       * @param {number} tokenId The token ID of the token.
       */
      insert(pos, length, score, tokenId) {
        const nodeId = this.nodes.length;
        const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);
        this.beginNodes[pos].push(node);
        this.endNodes[pos + length].push(node);
        this.nodes.push(node);
      }
      /**
       * Implements the Viterbi algorithm to compute the most likely sequence of tokens.
       *
       * @returns {TokenLatticeNode[]} The array of nodes representing the most likely sequence of tokens.
       */
      viterbi() {
        const len = this.len;
        let pos = 0;
        while (pos <= len) {
          if (this.beginNodes[pos].length == 0) {
            return [];
          }
          for (let rnode of this.beginNodes[pos]) {
            rnode.prev = null;
            let bestScore = 0;
            let bestNode = null;
            for (let lnode of this.endNodes[pos]) {
              const score = lnode.backtraceScore + rnode.score;
              if (bestNode === null || score > bestScore) {
                bestNode = lnode.clone();
                bestScore = score;
              }
            }
            if (bestNode !== null) {
              rnode.prev = bestNode;
              rnode.backtraceScore = bestScore;
            } else {
              return [];
            }
          }
          ++pos;
        }
        const results = [];
        const root = this.beginNodes[len][0];
        const prev = root.prev;
        if (prev === null) {
          return [];
        }
        let node = prev.clone();
        while (node.prev !== null) {
          results.push(node.clone());
          const n = node.clone();
          node = n.prev.clone();
        }
        results.reverse();
        return results;
      }
      /**
       * @param {TokenLatticeNode} node
       * @returns {string} The array of nodes representing the most likely sequence of tokens.
       */
      piece(node) {
        return this.sentence.slice(node.pos, node.pos + node.length);
      }
      /**
       * @returns {Array} The array of nodes representing the most likely sequence of tokens.
       */
      tokens() {
        const nodes = this.viterbi();
        return nodes.map((x) => this.piece(x));
      }
      /**
       * @returns {Array} The array of nodes representing the most likely sequence of tokens.
       */
      tokenIds() {
        const nodes = this.viterbi();
        return nodes.map((x) => x.tokenId);
      }
    };
    TokenLatticeNode = class _TokenLatticeNode {
      static {
        __name(this, "TokenLatticeNode");
      }
      /**
       * Represents a node in a token lattice for a given sentence.
       * @param {number} tokenId The ID of the token associated with this node.
       * @param {number} nodeId The ID of this node.
       * @param {number} pos The starting position of the token in the sentence.
       * @param {number} length The length of the token.
       * @param {number} score The score associated with the token.
       */
      constructor(tokenId, nodeId, pos, length, score) {
        this.tokenId = tokenId;
        this.nodeId = nodeId;
        this.pos = pos;
        this.length = length;
        this.score = score;
        this.prev = null;
        this.backtraceScore = 0;
      }
      /**
       * Returns a clone of this node.
       * @returns {TokenLatticeNode} A clone of this node.
       */
      clone() {
        const n = new _TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);
        n.prev = this.prev;
        n.backtraceScore = this.backtraceScore;
        return n;
      }
    };
  }
});

// node_modules/@huggingface/jinja/dist/index.js
function isWord(char) {
  return /\w/.test(char);
}
function isInteger(char) {
  return /[0-9]/.test(char);
}
function preprocess(template, options = {}) {
  if (template.endsWith("\n")) {
    template = template.slice(0, -1);
  }
  template = template.replace(/{#.*?#}/gs, "{##}");
  if (options.lstrip_blocks) {
    template = template.replace(/^[ \t]*({[#%])/gm, "$1");
  }
  if (options.trim_blocks) {
    template = template.replace(/([#%]})\n/g, "$1");
  }
  return template.replace(/{##}/g, "").replace(/-%}\s*/g, "%}").replace(/\s*{%-/g, "{%").replace(/-}}\s*/g, "}}").replace(/\s*{{-/g, "{{");
}
function tokenize(source, options = {}) {
  const tokens = [];
  const src = preprocess(source, options);
  let cursorPosition = 0;
  const consumeWhile = /* @__PURE__ */ __name((predicate) => {
    let str = "";
    while (predicate(src[cursorPosition])) {
      if (src[cursorPosition] === "\\") {
        ++cursorPosition;
        if (cursorPosition >= src.length)
          throw new SyntaxError("Unexpected end of input");
        const escaped = src[cursorPosition++];
        const unescaped = ESCAPE_CHARACTERS.get(escaped);
        if (unescaped === void 0) {
          throw new SyntaxError(`Unexpected escaped character: ${escaped}`);
        }
        str += unescaped;
        continue;
      }
      str += src[cursorPosition++];
      if (cursorPosition >= src.length)
        throw new SyntaxError("Unexpected end of input");
    }
    return str;
  }, "consumeWhile");
  main:
    while (cursorPosition < src.length) {
      const lastTokenType = tokens.at(-1)?.type;
      if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {
        let text2 = "";
        while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression
        !(src[cursorPosition] === "{" && (src[cursorPosition + 1] === "%" || src[cursorPosition + 1] === "{"))) {
          text2 += src[cursorPosition++];
        }
        if (text2.length > 0) {
          tokens.push(new Token(text2, TOKEN_TYPES.Text));
          continue;
        }
      }
      consumeWhile((char2) => /\s/.test(char2));
      const char = src[cursorPosition];
      if (char === "-" || char === "+") {
        const lastTokenType2 = tokens.at(-1)?.type;
        if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {
          throw new SyntaxError(`Unexpected character: ${char}`);
        }
        switch (lastTokenType2) {
          case TOKEN_TYPES.Identifier:
          case TOKEN_TYPES.NumericLiteral:
          case TOKEN_TYPES.BooleanLiteral:
          case TOKEN_TYPES.StringLiteral:
          case TOKEN_TYPES.CloseParen:
          case TOKEN_TYPES.CloseSquareBracket:
            break;
          default: {
            ++cursorPosition;
            const num = consumeWhile(isInteger);
            tokens.push(
              new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)
            );
            continue;
          }
        }
      }
      for (const [char2, token] of ORDERED_MAPPING_TABLE) {
        const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);
        if (slice2 === char2) {
          tokens.push(new Token(char2, token));
          cursorPosition += char2.length;
          continue main;
        }
      }
      if (char === "'" || char === '"') {
        ++cursorPosition;
        const str = consumeWhile((c) => c !== char);
        tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));
        ++cursorPosition;
        continue;
      }
      if (isInteger(char)) {
        const num = consumeWhile(isInteger);
        tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));
        continue;
      }
      if (isWord(char)) {
        const word = consumeWhile(isWord);
        const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;
        if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {
          tokens.pop();
          tokens.push(new Token("not in", TOKEN_TYPES.NotIn));
        } else {
          tokens.push(new Token(word, type));
        }
        continue;
      }
      throw new SyntaxError(`Unexpected character: ${char}`);
    }
  return tokens;
}
function parse(tokens) {
  const program = new Program([]);
  let current = 0;
  function expect(type, error) {
    const prev = tokens[current++];
    if (!prev || prev.type !== type) {
      throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);
    }
    return prev;
  }
  __name(expect, "expect");
  function parseAny() {
    switch (tokens[current].type) {
      case TOKEN_TYPES.Text:
        return parseText();
      case TOKEN_TYPES.OpenStatement:
        return parseJinjaStatement();
      case TOKEN_TYPES.OpenExpression:
        return parseJinjaExpression();
      default:
        throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);
    }
  }
  __name(parseAny, "parseAny");
  function not2(...types) {
    return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);
  }
  __name(not2, "not");
  function is2(...types) {
    return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);
  }
  __name(is2, "is");
  function parseText() {
    return new StringLiteral(expect(TOKEN_TYPES.Text, "Expected text token").value);
  }
  __name(parseText, "parseText");
  function parseJinjaStatement() {
    expect(TOKEN_TYPES.OpenStatement, "Expected opening statement token");
    let result;
    switch (tokens[current].type) {
      case TOKEN_TYPES.Set:
        ++current;
        result = parseSetStatement();
        expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
        break;
      case TOKEN_TYPES.If:
        ++current;
        result = parseIfStatement();
        expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
        expect(TOKEN_TYPES.EndIf, "Expected endif token");
        expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
        break;
      case TOKEN_TYPES.For:
        ++current;
        result = parseForStatement();
        expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
        expect(TOKEN_TYPES.EndFor, "Expected endfor token");
        expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
        break;
      default:
        throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);
    }
    return result;
  }
  __name(parseJinjaStatement, "parseJinjaStatement");
  function parseJinjaExpression() {
    expect(TOKEN_TYPES.OpenExpression, "Expected opening expression token");
    const result = parseExpression();
    expect(TOKEN_TYPES.CloseExpression, "Expected closing expression token");
    return result;
  }
  __name(parseJinjaExpression, "parseJinjaExpression");
  function parseSetStatement() {
    const left = parseExpression();
    if (is2(TOKEN_TYPES.Equals)) {
      ++current;
      const value = parseSetStatement();
      return new SetStatement(left, value);
    }
    return left;
  }
  __name(parseSetStatement, "parseSetStatement");
  function parseIfStatement() {
    const test = parseExpression();
    expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
    const body = [];
    const alternate = [];
    while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {
      body.push(parseAny());
    }
    if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {
      ++current;
      if (is2(TOKEN_TYPES.ElseIf)) {
        expect(TOKEN_TYPES.ElseIf, "Expected elseif token");
        alternate.push(parseIfStatement());
      } else {
        expect(TOKEN_TYPES.Else, "Expected else token");
        expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
        while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {
          alternate.push(parseAny());
        }
      }
    }
    return new If(test, body, alternate);
  }
  __name(parseIfStatement, "parseIfStatement");
  function parseExpressionSequence(primary = false) {
    const fn = primary ? parsePrimaryExpression : parseExpression;
    const expressions = [fn()];
    const isTuple = is2(TOKEN_TYPES.Comma);
    while (isTuple) {
      ++current;
      expressions.push(fn());
      if (!is2(TOKEN_TYPES.Comma)) {
        break;
      }
    }
    return isTuple ? new TupleLiteral(expressions) : expressions[0];
  }
  __name(parseExpressionSequence, "parseExpressionSequence");
  function parseForStatement() {
    const loopVariable = parseExpressionSequence(true);
    if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {
      throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);
    }
    expect(TOKEN_TYPES.In, "Expected `in` keyword following loop variable");
    const iterable = parseExpression();
    expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
    const body = [];
    while (not2(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {
      body.push(parseAny());
    }
    return new For(loopVariable, iterable, body);
  }
  __name(parseForStatement, "parseForStatement");
  function parseExpression() {
    return parseTernaryExpression();
  }
  __name(parseExpression, "parseExpression");
  function parseTernaryExpression() {
    const a = parseLogicalOrExpression();
    if (is2(TOKEN_TYPES.If)) {
      ++current;
      const predicate = parseLogicalOrExpression();
      expect(TOKEN_TYPES.Else, "Expected else token");
      const b = parseLogicalOrExpression();
      return new If(predicate, [a], [b]);
    }
    return a;
  }
  __name(parseTernaryExpression, "parseTernaryExpression");
  function parseLogicalOrExpression() {
    let left = parseLogicalAndExpression();
    while (is2(TOKEN_TYPES.Or)) {
      const operator = tokens[current];
      ++current;
      const right = parseLogicalAndExpression();
      left = new BinaryExpression(operator, left, right);
    }
    return left;
  }
  __name(parseLogicalOrExpression, "parseLogicalOrExpression");
  function parseLogicalAndExpression() {
    let left = parseLogicalNegationExpression();
    while (is2(TOKEN_TYPES.And)) {
      const operator = tokens[current];
      ++current;
      const right = parseLogicalNegationExpression();
      left = new BinaryExpression(operator, left, right);
    }
    return left;
  }
  __name(parseLogicalAndExpression, "parseLogicalAndExpression");
  function parseLogicalNegationExpression() {
    let right;
    while (is2(TOKEN_TYPES.Not)) {
      const operator = tokens[current];
      ++current;
      const arg = parseLogicalNegationExpression();
      right = new UnaryExpression(operator, arg);
    }
    return right ?? parseComparisonExpression();
  }
  __name(parseLogicalNegationExpression, "parseLogicalNegationExpression");
  function parseComparisonExpression() {
    let left = parseAdditiveExpression();
    while (is2(TOKEN_TYPES.ComparisonBinaryOperator) || is2(TOKEN_TYPES.In) || is2(TOKEN_TYPES.NotIn)) {
      const operator = tokens[current];
      ++current;
      const right = parseAdditiveExpression();
      left = new BinaryExpression(operator, left, right);
    }
    return left;
  }
  __name(parseComparisonExpression, "parseComparisonExpression");
  function parseAdditiveExpression() {
    let left = parseMultiplicativeExpression();
    while (is2(TOKEN_TYPES.AdditiveBinaryOperator)) {
      const operator = tokens[current];
      ++current;
      const right = parseMultiplicativeExpression();
      left = new BinaryExpression(operator, left, right);
    }
    return left;
  }
  __name(parseAdditiveExpression, "parseAdditiveExpression");
  function parseCallMemberExpression() {
    const member = parseMemberExpression();
    if (is2(TOKEN_TYPES.OpenParen)) {
      return parseCallExpression(member);
    }
    return member;
  }
  __name(parseCallMemberExpression, "parseCallMemberExpression");
  function parseCallExpression(callee) {
    let callExpression = new CallExpression(callee, parseArgs());
    if (is2(TOKEN_TYPES.OpenParen)) {
      callExpression = parseCallExpression(callExpression);
    }
    return callExpression;
  }
  __name(parseCallExpression, "parseCallExpression");
  function parseArgs() {
    expect(TOKEN_TYPES.OpenParen, "Expected opening parenthesis for arguments list");
    const args = parseArgumentsList();
    expect(TOKEN_TYPES.CloseParen, "Expected closing parenthesis for arguments list");
    return args;
  }
  __name(parseArgs, "parseArgs");
  function parseArgumentsList() {
    const args = [];
    while (!is2(TOKEN_TYPES.CloseParen)) {
      let argument = parseExpression();
      if (is2(TOKEN_TYPES.Equals)) {
        ++current;
        if (!(argument instanceof Identifier)) {
          throw new SyntaxError(`Expected identifier for keyword argument`);
        }
        const value = parseExpression();
        argument = new KeywordArgumentExpression(argument, value);
      }
      args.push(argument);
      if (is2(TOKEN_TYPES.Comma)) {
        ++current;
      }
    }
    return args;
  }
  __name(parseArgumentsList, "parseArgumentsList");
  function parseMemberExpressionArgumentsList() {
    const slices = [];
    let isSlice = false;
    while (!is2(TOKEN_TYPES.CloseSquareBracket)) {
      if (is2(TOKEN_TYPES.Colon)) {
        slices.push(void 0);
        ++current;
        isSlice = true;
      } else {
        slices.push(parseExpression());
        if (is2(TOKEN_TYPES.Colon)) {
          ++current;
          isSlice = true;
        }
      }
    }
    if (slices.length === 0) {
      throw new SyntaxError(`Expected at least one argument for member/slice expression`);
    }
    if (isSlice) {
      if (slices.length > 3) {
        throw new SyntaxError(`Expected 0-3 arguments for slice expression`);
      }
      return new SliceExpression(...slices);
    }
    return slices[0];
  }
  __name(parseMemberExpressionArgumentsList, "parseMemberExpressionArgumentsList");
  function parseMemberExpression() {
    let object = parsePrimaryExpression();
    while (is2(TOKEN_TYPES.Dot) || is2(TOKEN_TYPES.OpenSquareBracket)) {
      const operator = tokens[current];
      ++current;
      let property;
      const computed = operator.type !== TOKEN_TYPES.Dot;
      if (computed) {
        property = parseMemberExpressionArgumentsList();
        expect(TOKEN_TYPES.CloseSquareBracket, "Expected closing square bracket");
      } else {
        property = parsePrimaryExpression();
        if (property.type !== "Identifier") {
          throw new SyntaxError(`Expected identifier following dot operator`);
        }
      }
      object = new MemberExpression(object, property, computed);
    }
    return object;
  }
  __name(parseMemberExpression, "parseMemberExpression");
  function parseMultiplicativeExpression() {
    let left = parseTestExpression();
    while (is2(TOKEN_TYPES.MultiplicativeBinaryOperator)) {
      const operator = tokens[current];
      ++current;
      const right = parseTestExpression();
      left = new BinaryExpression(operator, left, right);
    }
    return left;
  }
  __name(parseMultiplicativeExpression, "parseMultiplicativeExpression");
  function parseTestExpression() {
    let operand = parseFilterExpression();
    while (is2(TOKEN_TYPES.Is)) {
      ++current;
      const negate = is2(TOKEN_TYPES.Not);
      if (negate) {
        ++current;
      }
      let filter = parsePrimaryExpression();
      if (filter instanceof BooleanLiteral) {
        filter = new Identifier(filter.value.toString());
      }
      if (!(filter instanceof Identifier)) {
        throw new SyntaxError(`Expected identifier for the test`);
      }
      operand = new TestExpression(operand, negate, filter);
    }
    return operand;
  }
  __name(parseTestExpression, "parseTestExpression");
  function parseFilterExpression() {
    let operand = parseCallMemberExpression();
    while (is2(TOKEN_TYPES.Pipe)) {
      ++current;
      let filter = parsePrimaryExpression();
      if (!(filter instanceof Identifier)) {
        throw new SyntaxError(`Expected identifier for the filter`);
      }
      if (is2(TOKEN_TYPES.OpenParen)) {
        filter = parseCallExpression(filter);
      }
      operand = new FilterExpression(operand, filter);
    }
    return operand;
  }
  __name(parseFilterExpression, "parseFilterExpression");
  function parsePrimaryExpression() {
    const token = tokens[current];
    switch (token.type) {
      case TOKEN_TYPES.NumericLiteral:
        ++current;
        return new NumericLiteral(Number(token.value));
      case TOKEN_TYPES.StringLiteral:
        ++current;
        return new StringLiteral(token.value);
      case TOKEN_TYPES.BooleanLiteral:
        ++current;
        return new BooleanLiteral(token.value === "true");
      case TOKEN_TYPES.Identifier:
        ++current;
        return new Identifier(token.value);
      case TOKEN_TYPES.OpenParen: {
        ++current;
        const expression = parseExpressionSequence();
        if (tokens[current].type !== TOKEN_TYPES.CloseParen) {
          throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);
        }
        ++current;
        return expression;
      }
      case TOKEN_TYPES.OpenSquareBracket: {
        ++current;
        const values = [];
        while (!is2(TOKEN_TYPES.CloseSquareBracket)) {
          values.push(parseExpression());
          if (is2(TOKEN_TYPES.Comma)) {
            ++current;
          }
        }
        ++current;
        return new ArrayLiteral(values);
      }
      case TOKEN_TYPES.OpenCurlyBracket: {
        ++current;
        const values = /* @__PURE__ */ new Map();
        while (!is2(TOKEN_TYPES.CloseCurlyBracket)) {
          const key = parseExpression();
          expect(TOKEN_TYPES.Colon, "Expected colon between key and value in object literal");
          const value = parseExpression();
          values.set(key, value);
          if (is2(TOKEN_TYPES.Comma)) {
            ++current;
          }
        }
        ++current;
        return new ObjectLiteral(values);
      }
      default:
        throw new SyntaxError(`Unexpected token: ${token.type}`);
    }
  }
  __name(parsePrimaryExpression, "parsePrimaryExpression");
  while (current < tokens.length) {
    program.body.push(parseAny());
  }
  return program;
}
function range(start, stop, step = 1) {
  if (stop === void 0) {
    stop = start;
    start = 0;
  }
  const result = [];
  for (let i = start; i < stop; i += step) {
    result.push(i);
  }
  return result;
}
function slice(array, start, stop, step = 1) {
  const direction = Math.sign(step);
  if (direction >= 0) {
    start = (start ??= 0) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);
    stop = (stop ??= array.length) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);
  } else {
    start = (start ??= array.length - 1) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);
    stop = (stop ??= -1) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);
  }
  const result = [];
  for (let i = start; direction * i < direction * stop; i += step) {
    result.push(array[i]);
  }
  return result;
}
function titleCase(value) {
  return value.replace(/\b\w/g, (c) => c.toUpperCase());
}
function convertToRuntimeValues(input) {
  switch (typeof input) {
    case "number":
      return new NumericValue(input);
    case "string":
      return new StringValue(input);
    case "boolean":
      return new BooleanValue(input);
    case "object":
      if (input === null) {
        return new NullValue();
      } else if (Array.isArray(input)) {
        return new ArrayValue(input.map(convertToRuntimeValues));
      } else {
        return new ObjectValue(
          new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))
        );
      }
    case "function":
      return new FunctionValue((args, _scope) => {
        const result = input(...args.map((x) => x.value)) ?? null;
        return convertToRuntimeValues(result);
      });
    default:
      throw new Error(`Cannot convert to runtime value: ${input}`);
  }
}
var TOKEN_TYPES, KEYWORDS, Token, ORDERED_MAPPING_TABLE, ESCAPE_CHARACTERS, Statement, Program, If, For, SetStatement, Expression, MemberExpression, CallExpression, Identifier, Literal, NumericLiteral, StringLiteral, BooleanLiteral, ArrayLiteral, TupleLiteral, ObjectLiteral, BinaryExpression, FilterExpression, TestExpression, UnaryExpression, SliceExpression, KeywordArgumentExpression, RuntimeValue, NumericValue, StringValue, BooleanValue, ObjectValue, ArrayValue, TupleValue, FunctionValue, NullValue, UndefinedValue, Environment, Interpreter, Template;
var init_dist = __esm({
  "node_modules/@huggingface/jinja/dist/index.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    TOKEN_TYPES = Object.freeze({
      Text: "Text",
      // The text between Jinja statements or expressions
      NumericLiteral: "NumericLiteral",
      // e.g., 123
      BooleanLiteral: "BooleanLiteral",
      // true or false
      StringLiteral: "StringLiteral",
      // 'string'
      Identifier: "Identifier",
      // Variables, functions, etc.
      Equals: "Equals",
      // =
      OpenParen: "OpenParen",
      // (
      CloseParen: "CloseParen",
      // )
      OpenStatement: "OpenStatement",
      // {%
      CloseStatement: "CloseStatement",
      // %}
      OpenExpression: "OpenExpression",
      // {{
      CloseExpression: "CloseExpression",
      // }}
      OpenSquareBracket: "OpenSquareBracket",
      // [
      CloseSquareBracket: "CloseSquareBracket",
      // ]
      OpenCurlyBracket: "OpenCurlyBracket",
      // {
      CloseCurlyBracket: "CloseCurlyBracket",
      // }
      Comma: "Comma",
      // ,
      Dot: "Dot",
      // .
      Colon: "Colon",
      // :
      Pipe: "Pipe",
      // |
      CallOperator: "CallOperator",
      // ()
      AdditiveBinaryOperator: "AdditiveBinaryOperator",
      // + -
      MultiplicativeBinaryOperator: "MultiplicativeBinaryOperator",
      // * / %
      ComparisonBinaryOperator: "ComparisonBinaryOperator",
      // < > <= >= == !=
      UnaryOperator: "UnaryOperator",
      // ! - +
      // Keywords
      Set: "Set",
      If: "If",
      For: "For",
      In: "In",
      Is: "Is",
      NotIn: "NotIn",
      Else: "Else",
      EndIf: "EndIf",
      ElseIf: "ElseIf",
      EndFor: "EndFor",
      And: "And",
      Or: "Or",
      Not: "UnaryOperator"
    });
    KEYWORDS = Object.freeze({
      set: TOKEN_TYPES.Set,
      for: TOKEN_TYPES.For,
      in: TOKEN_TYPES.In,
      is: TOKEN_TYPES.Is,
      if: TOKEN_TYPES.If,
      else: TOKEN_TYPES.Else,
      endif: TOKEN_TYPES.EndIf,
      elif: TOKEN_TYPES.ElseIf,
      endfor: TOKEN_TYPES.EndFor,
      and: TOKEN_TYPES.And,
      or: TOKEN_TYPES.Or,
      not: TOKEN_TYPES.Not,
      "not in": TOKEN_TYPES.NotIn,
      // Literals
      true: TOKEN_TYPES.BooleanLiteral,
      false: TOKEN_TYPES.BooleanLiteral
    });
    Token = class {
      static {
        __name(this, "Token");
      }
      /**
       * Constructs a new Token.
       * @param {string} value The raw value as seen inside the source code.
       * @param {TokenType} type The type of token.
       */
      constructor(value, type) {
        this.value = value;
        this.type = type;
      }
    };
    __name(isWord, "isWord");
    __name(isInteger, "isInteger");
    ORDERED_MAPPING_TABLE = [
      // Control sequences
      ["{%", TOKEN_TYPES.OpenStatement],
      ["%}", TOKEN_TYPES.CloseStatement],
      ["{{", TOKEN_TYPES.OpenExpression],
      ["}}", TOKEN_TYPES.CloseExpression],
      // Single character tokens
      ["(", TOKEN_TYPES.OpenParen],
      [")", TOKEN_TYPES.CloseParen],
      ["{", TOKEN_TYPES.OpenCurlyBracket],
      ["}", TOKEN_TYPES.CloseCurlyBracket],
      ["[", TOKEN_TYPES.OpenSquareBracket],
      ["]", TOKEN_TYPES.CloseSquareBracket],
      [",", TOKEN_TYPES.Comma],
      [".", TOKEN_TYPES.Dot],
      [":", TOKEN_TYPES.Colon],
      ["|", TOKEN_TYPES.Pipe],
      // Comparison operators
      ["<=", TOKEN_TYPES.ComparisonBinaryOperator],
      [">=", TOKEN_TYPES.ComparisonBinaryOperator],
      ["==", TOKEN_TYPES.ComparisonBinaryOperator],
      ["!=", TOKEN_TYPES.ComparisonBinaryOperator],
      ["<", TOKEN_TYPES.ComparisonBinaryOperator],
      [">", TOKEN_TYPES.ComparisonBinaryOperator],
      // Arithmetic operators
      ["+", TOKEN_TYPES.AdditiveBinaryOperator],
      ["-", TOKEN_TYPES.AdditiveBinaryOperator],
      ["*", TOKEN_TYPES.MultiplicativeBinaryOperator],
      ["/", TOKEN_TYPES.MultiplicativeBinaryOperator],
      ["%", TOKEN_TYPES.MultiplicativeBinaryOperator],
      // Assignment operator
      ["=", TOKEN_TYPES.Equals]
    ];
    ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([
      ["n", "\n"],
      // New line
      ["t", "	"],
      // Horizontal tab
      ["r", "\r"],
      // Carriage return
      ["b", "\b"],
      // Backspace
      ["f", "\f"],
      // Form feed
      ["v", "\v"],
      // Vertical tab
      ["'", "'"],
      // Single quote
      ['"', '"'],
      // Double quote
      ["\\", "\\"]
      // Backslash
    ]);
    __name(preprocess, "preprocess");
    __name(tokenize, "tokenize");
    Statement = class {
      static {
        __name(this, "Statement");
      }
      type = "Statement";
    };
    Program = class extends Statement {
      static {
        __name(this, "Program");
      }
      constructor(body) {
        super();
        this.body = body;
      }
      type = "Program";
    };
    If = class extends Statement {
      static {
        __name(this, "If");
      }
      constructor(test, body, alternate) {
        super();
        this.test = test;
        this.body = body;
        this.alternate = alternate;
      }
      type = "If";
    };
    For = class extends Statement {
      static {
        __name(this, "For");
      }
      constructor(loopvar, iterable, body) {
        super();
        this.loopvar = loopvar;
        this.iterable = iterable;
        this.body = body;
      }
      type = "For";
    };
    SetStatement = class extends Statement {
      static {
        __name(this, "SetStatement");
      }
      constructor(assignee, value) {
        super();
        this.assignee = assignee;
        this.value = value;
      }
      type = "Set";
    };
    Expression = class extends Statement {
      static {
        __name(this, "Expression");
      }
      type = "Expression";
    };
    MemberExpression = class extends Expression {
      static {
        __name(this, "MemberExpression");
      }
      constructor(object, property, computed) {
        super();
        this.object = object;
        this.property = property;
        this.computed = computed;
      }
      type = "MemberExpression";
    };
    CallExpression = class extends Expression {
      static {
        __name(this, "CallExpression");
      }
      constructor(callee, args) {
        super();
        this.callee = callee;
        this.args = args;
      }
      type = "CallExpression";
    };
    Identifier = class extends Expression {
      static {
        __name(this, "Identifier");
      }
      /**
       * @param {string} value The name of the identifier
       */
      constructor(value) {
        super();
        this.value = value;
      }
      type = "Identifier";
    };
    Literal = class extends Expression {
      static {
        __name(this, "Literal");
      }
      constructor(value) {
        super();
        this.value = value;
      }
      type = "Literal";
    };
    NumericLiteral = class extends Literal {
      static {
        __name(this, "NumericLiteral");
      }
      type = "NumericLiteral";
    };
    StringLiteral = class extends Literal {
      static {
        __name(this, "StringLiteral");
      }
      type = "StringLiteral";
    };
    BooleanLiteral = class extends Literal {
      static {
        __name(this, "BooleanLiteral");
      }
      type = "BooleanLiteral";
    };
    ArrayLiteral = class extends Literal {
      static {
        __name(this, "ArrayLiteral");
      }
      type = "ArrayLiteral";
    };
    TupleLiteral = class extends Literal {
      static {
        __name(this, "TupleLiteral");
      }
      type = "TupleLiteral";
    };
    ObjectLiteral = class extends Literal {
      static {
        __name(this, "ObjectLiteral");
      }
      type = "ObjectLiteral";
    };
    BinaryExpression = class extends Expression {
      static {
        __name(this, "BinaryExpression");
      }
      constructor(operator, left, right) {
        super();
        this.operator = operator;
        this.left = left;
        this.right = right;
      }
      type = "BinaryExpression";
    };
    FilterExpression = class extends Expression {
      static {
        __name(this, "FilterExpression");
      }
      constructor(operand, filter) {
        super();
        this.operand = operand;
        this.filter = filter;
      }
      type = "FilterExpression";
    };
    TestExpression = class extends Expression {
      static {
        __name(this, "TestExpression");
      }
      constructor(operand, negate, test) {
        super();
        this.operand = operand;
        this.negate = negate;
        this.test = test;
      }
      type = "TestExpression";
    };
    UnaryExpression = class extends Expression {
      static {
        __name(this, "UnaryExpression");
      }
      constructor(operator, argument) {
        super();
        this.operator = operator;
        this.argument = argument;
      }
      type = "UnaryExpression";
    };
    SliceExpression = class extends Expression {
      static {
        __name(this, "SliceExpression");
      }
      constructor(start = void 0, stop = void 0, step = void 0) {
        super();
        this.start = start;
        this.stop = stop;
        this.step = step;
      }
      type = "SliceExpression";
    };
    KeywordArgumentExpression = class extends Expression {
      static {
        __name(this, "KeywordArgumentExpression");
      }
      constructor(key, value) {
        super();
        this.key = key;
        this.value = value;
      }
      type = "KeywordArgumentExpression";
    };
    __name(parse, "parse");
    __name(range, "range");
    __name(slice, "slice");
    __name(titleCase, "titleCase");
    RuntimeValue = class {
      static {
        __name(this, "RuntimeValue");
      }
      type = "RuntimeValue";
      value;
      /**
       * A collection of built-in functions for this type.
       */
      builtins = /* @__PURE__ */ new Map();
      /**
       * Creates a new RuntimeValue.
       */
      constructor(value = void 0) {
        this.value = value;
      }
      /**
       * Determines truthiness or falsiness of the runtime value.
       * This function should be overridden by subclasses if it has custom truthiness criteria.
       * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.
       */
      __bool__() {
        return new BooleanValue(!!this.value);
      }
    };
    NumericValue = class extends RuntimeValue {
      static {
        __name(this, "NumericValue");
      }
      type = "NumericValue";
    };
    StringValue = class extends RuntimeValue {
      static {
        __name(this, "StringValue");
      }
      type = "StringValue";
      builtins = /* @__PURE__ */ new Map([
        [
          "upper",
          new FunctionValue(() => {
            return new StringValue(this.value.toUpperCase());
          })
        ],
        [
          "lower",
          new FunctionValue(() => {
            return new StringValue(this.value.toLowerCase());
          })
        ],
        [
          "strip",
          new FunctionValue(() => {
            return new StringValue(this.value.trim());
          })
        ],
        [
          "title",
          new FunctionValue(() => {
            return new StringValue(titleCase(this.value));
          })
        ],
        ["length", new NumericValue(this.value.length)]
      ]);
    };
    BooleanValue = class extends RuntimeValue {
      static {
        __name(this, "BooleanValue");
      }
      type = "BooleanValue";
    };
    ObjectValue = class extends RuntimeValue {
      static {
        __name(this, "ObjectValue");
      }
      type = "ObjectValue";
      /**
       * NOTE: necessary to override since all JavaScript arrays are considered truthy,
       * while only non-empty Python arrays are consider truthy.
       *
       * e.g.,
       *  - JavaScript:  {} && 5 -> 5
       *  - Python:      {} and 5 -> {}
       */
      __bool__() {
        return new BooleanValue(this.value.size > 0);
      }
      builtins = /* @__PURE__ */ new Map([
        [
          "get",
          new FunctionValue(([key, defaultValue]) => {
            if (!(key instanceof StringValue)) {
              throw new Error(`Object key must be a string: got ${key.type}`);
            }
            return this.value.get(key.value) ?? defaultValue ?? new NullValue();
          })
        ],
        [
          "items",
          new FunctionValue(() => {
            return new ArrayValue(
              Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
            );
          })
        ]
      ]);
    };
    ArrayValue = class extends RuntimeValue {
      static {
        __name(this, "ArrayValue");
      }
      type = "ArrayValue";
      builtins = /* @__PURE__ */ new Map([["length", new NumericValue(this.value.length)]]);
      /**
       * NOTE: necessary to override since all JavaScript arrays are considered truthy,
       * while only non-empty Python arrays are consider truthy.
       *
       * e.g.,
       *  - JavaScript:  [] && 5 -> 5
       *  - Python:      [] and 5 -> []
       */
      __bool__() {
        return new BooleanValue(this.value.length > 0);
      }
    };
    TupleValue = class extends ArrayValue {
      static {
        __name(this, "TupleValue");
      }
      type = "TupleValue";
    };
    FunctionValue = class extends RuntimeValue {
      static {
        __name(this, "FunctionValue");
      }
      type = "FunctionValue";
    };
    NullValue = class extends RuntimeValue {
      static {
        __name(this, "NullValue");
      }
      type = "NullValue";
    };
    UndefinedValue = class extends RuntimeValue {
      static {
        __name(this, "UndefinedValue");
      }
      type = "UndefinedValue";
    };
    Environment = class {
      static {
        __name(this, "Environment");
      }
      constructor(parent) {
        this.parent = parent;
      }
      /**
       * The variables declared in this environment.
       */
      variables = /* @__PURE__ */ new Map([
        [
          "namespace",
          new FunctionValue((args) => {
            if (args.length === 0) {
              return new ObjectValue(/* @__PURE__ */ new Map());
            }
            if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {
              throw new Error("`namespace` expects either zero arguments or a single object argument");
            }
            return args[0];
          })
        ]
      ]);
      /**
       * The tests available in this environment.
       */
      tests = /* @__PURE__ */ new Map([
        ["boolean", (operand) => operand.type === "BooleanValue"],
        ["callable", (operand) => operand instanceof FunctionValue],
        [
          "odd",
          (operand) => {
            if (operand.type !== "NumericValue") {
              throw new Error(`Cannot apply test "odd" to type: ${operand.type}`);
            }
            return operand.value % 2 !== 0;
          }
        ],
        [
          "even",
          (operand) => {
            if (operand.type !== "NumericValue") {
              throw new Error(`Cannot apply test "even" to type: ${operand.type}`);
            }
            return operand.value % 2 === 0;
          }
        ],
        ["false", (operand) => operand.type === "BooleanValue" && !operand.value],
        ["true", (operand) => operand.type === "BooleanValue" && operand.value],
        ["number", (operand) => operand.type === "NumericValue"],
        ["integer", (operand) => operand.type === "NumericValue" && Number.isInteger(operand.value)],
        ["iterable", (operand) => operand instanceof ArrayValue || operand instanceof StringValue],
        [
          "lower",
          (operand) => {
            const str = operand.value;
            return operand.type === "StringValue" && str === str.toLowerCase();
          }
        ],
        [
          "upper",
          (operand) => {
            const str = operand.value;
            return operand.type === "StringValue" && str === str.toUpperCase();
          }
        ],
        ["none", (operand) => operand.type === "NullValue"],
        ["defined", (operand) => operand.type !== "UndefinedValue"],
        ["undefined", (operand) => operand.type === "UndefinedValue"],
        ["equalto", (a, b) => a.value === b.value]
      ]);
      /**
       * Set the value of a variable in the current environment.
       */
      set(name2, value) {
        return this.declareVariable(name2, convertToRuntimeValues(value));
      }
      declareVariable(name2, value) {
        if (this.variables.has(name2)) {
          throw new SyntaxError(`Variable already declared: ${name2}`);
        }
        this.variables.set(name2, value);
        return value;
      }
      // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {
      // 	const env = this.resolve(name);
      // 	env.variables.set(name, value);
      // 	return value;
      // }
      /**
       * Set variable in the current scope.
       * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.
       */
      setVariable(name2, value) {
        this.variables.set(name2, value);
        return value;
      }
      /**
       * Resolve the environment in which the variable is declared.
       * @param {string} name The name of the variable.
       * @returns {Environment} The environment in which the variable is declared.
       */
      resolve(name2) {
        if (this.variables.has(name2)) {
          return this;
        }
        if (this.parent) {
          return this.parent.resolve(name2);
        }
        throw new Error(`Unknown variable: ${name2}`);
      }
      lookupVariable(name2) {
        try {
          return this.resolve(name2).variables.get(name2) ?? new UndefinedValue();
        } catch {
          return new UndefinedValue();
        }
      }
    };
    Interpreter = class {
      static {
        __name(this, "Interpreter");
      }
      global;
      constructor(env3) {
        this.global = env3 ?? new Environment();
      }
      /**
       * Run the program.
       */
      run(program) {
        return this.evaluate(program, this.global);
      }
      /**
       * Evaluates expressions following the binary operation type.
       */
      evaluateBinaryExpression(node, environment) {
        const left = this.evaluate(node.left, environment);
        switch (node.operator.value) {
          case "and":
            return left.__bool__().value ? this.evaluate(node.right, environment) : left;
          case "or":
            return left.__bool__().value ? left : this.evaluate(node.right, environment);
        }
        const right = this.evaluate(node.right, environment);
        switch (node.operator.value) {
          case "==":
            return new BooleanValue(left.value == right.value);
          case "!=":
            return new BooleanValue(left.value != right.value);
        }
        if (left instanceof UndefinedValue || right instanceof UndefinedValue) {
          throw new Error("Cannot perform operation on undefined values");
        } else if (left instanceof NullValue || right instanceof NullValue) {
          throw new Error("Cannot perform operation on null values");
        } else if (left instanceof NumericValue && right instanceof NumericValue) {
          switch (node.operator.value) {
            case "+":
              return new NumericValue(left.value + right.value);
            case "-":
              return new NumericValue(left.value - right.value);
            case "*":
              return new NumericValue(left.value * right.value);
            case "/":
              return new NumericValue(left.value / right.value);
            case "%":
              return new NumericValue(left.value % right.value);
            case "<":
              return new BooleanValue(left.value < right.value);
            case ">":
              return new BooleanValue(left.value > right.value);
            case ">=":
              return new BooleanValue(left.value >= right.value);
            case "<=":
              return new BooleanValue(left.value <= right.value);
          }
        } else if (left instanceof ArrayValue && right instanceof ArrayValue) {
          switch (node.operator.value) {
            case "+":
              return new ArrayValue(left.value.concat(right.value));
          }
        } else if (right instanceof ArrayValue) {
          const member = right.value.find((x) => x.value === left.value) !== void 0;
          switch (node.operator.value) {
            case "in":
              return new BooleanValue(member);
            case "not in":
              return new BooleanValue(!member);
          }
        }
        if (left instanceof StringValue || right instanceof StringValue) {
          switch (node.operator.value) {
            case "+":
              return new StringValue(left.value.toString() + right.value.toString());
          }
        }
        if (left instanceof StringValue && right instanceof StringValue) {
          switch (node.operator.value) {
            case "in":
              return new BooleanValue(right.value.includes(left.value));
            case "not in":
              return new BooleanValue(!right.value.includes(left.value));
          }
        }
        if (left instanceof StringValue && right instanceof ObjectValue) {
          switch (node.operator.value) {
            case "in":
              return new BooleanValue(right.value.has(left.value));
            case "not in":
              return new BooleanValue(!right.value.has(left.value));
          }
        }
        throw new SyntaxError(`Unknown operator "${node.operator.value}" between ${left.type} and ${right.type}`);
      }
      /**
       * Evaluates expressions following the filter operation type.
       */
      evaluateFilterExpression(node, environment) {
        const operand = this.evaluate(node.operand, environment);
        if (node.filter.type === "Identifier") {
          const filter = node.filter;
          if (operand instanceof ArrayValue) {
            switch (filter.value) {
              case "list":
                return operand;
              case "first":
                return operand.value[0];
              case "last":
                return operand.value[operand.value.length - 1];
              case "length":
                return new NumericValue(operand.value.length);
              case "reverse":
                return new ArrayValue(operand.value.reverse());
              case "sort":
                return new ArrayValue(
                  operand.value.sort((a, b) => {
                    if (a.type !== b.type) {
                      throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);
                    }
                    switch (a.type) {
                      case "NumericValue":
                        return a.value - b.value;
                      case "StringValue":
                        return a.value.localeCompare(b.value);
                      default:
                        throw new Error(`Cannot compare type: ${a.type}`);
                    }
                  })
                );
              default:
                throw new Error(`Unknown ArrayValue filter: ${filter.value}`);
            }
          } else if (operand instanceof StringValue) {
            switch (filter.value) {
              case "length":
                return new NumericValue(operand.value.length);
              case "upper":
                return new StringValue(operand.value.toUpperCase());
              case "lower":
                return new StringValue(operand.value.toLowerCase());
              case "title":
                return new StringValue(titleCase(operand.value));
              case "capitalize":
                return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));
              case "trim":
                return new StringValue(operand.value.trim());
              default:
                throw new Error(`Unknown StringValue filter: ${filter.value}`);
            }
          } else if (operand instanceof NumericValue) {
            switch (filter.value) {
              case "abs":
                return new NumericValue(Math.abs(operand.value));
              default:
                throw new Error(`Unknown NumericValue filter: ${filter.value}`);
            }
          } else if (operand instanceof ObjectValue) {
            switch (filter.value) {
              case "items":
                return new ArrayValue(
                  Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
                );
              case "length":
                return new NumericValue(operand.value.size);
              default:
                throw new Error(`Unknown ObjectValue filter: ${filter.value}`);
            }
          }
          throw new Error(`Cannot apply filter "${filter.value}" to type: ${operand.type}`);
        } else if (node.filter.type === "CallExpression") {
          const filter = node.filter;
          if (filter.callee.type !== "Identifier") {
            throw new Error(`Unknown filter: ${filter.callee.type}`);
          }
          const filterName = filter.callee.value;
          if (operand instanceof ArrayValue) {
            switch (filterName) {
              case "selectattr": {
                if (operand.value.some((x) => !(x instanceof ObjectValue))) {
                  throw new Error("`selectattr` can only be applied to array of objects");
                }
                if (filter.args.some((x) => x.type !== "StringLiteral")) {
                  throw new Error("arguments of `selectattr` must be strings");
                }
                const [attr, testName, value] = filter.args.map((x) => this.evaluate(x, environment));
                let testFunction;
                if (testName) {
                  const test = environment.tests.get(testName.value);
                  if (!test) {
                    throw new Error(`Unknown test: ${testName.value}`);
                  }
                  testFunction = test;
                } else {
                  testFunction = /* @__PURE__ */ __name((...x) => x[0].__bool__().value, "testFunction");
                }
                const filtered = operand.value.filter((item) => {
                  const a = item.value.get(attr.value);
                  if (a) {
                    return testFunction(a, value);
                  }
                  return false;
                });
                return new ArrayValue(filtered);
              }
            }
            throw new Error(`Unknown ArrayValue filter: ${filterName}`);
          } else {
            throw new Error(`Cannot apply filter "${filterName}" to type: ${operand.type}`);
          }
        }
        throw new Error(`Unknown filter: ${node.filter.type}`);
      }
      /**
       * Evaluates expressions following the test operation type.
       */
      evaluateTestExpression(node, environment) {
        const operand = this.evaluate(node.operand, environment);
        const test = environment.tests.get(node.test.value);
        if (!test) {
          throw new Error(`Unknown test: ${node.test.value}`);
        }
        const result = test(operand);
        return new BooleanValue(node.negate ? !result : result);
      }
      /**
       * Evaluates expressions following the unary operation type.
       */
      evaluateUnaryExpression(node, environment) {
        const argument = this.evaluate(node.argument, environment);
        switch (node.operator.value) {
          case "not":
            return new BooleanValue(!argument.value);
          default:
            throw new SyntaxError(`Unknown operator: ${node.operator.value}`);
        }
      }
      evalProgram(program, environment) {
        return this.evaluateBlock(program.body, environment);
      }
      evaluateBlock(statements, environment) {
        let result = "";
        for (const statement of statements) {
          const lastEvaluated = this.evaluate(statement, environment);
          if (lastEvaluated.type !== "NullValue" && lastEvaluated.type !== "UndefinedValue") {
            result += lastEvaluated.value;
          }
        }
        return new StringValue(result);
      }
      evaluateIdentifier(node, environment) {
        return environment.lookupVariable(node.value);
      }
      evaluateCallExpression(expr, environment) {
        const args = [];
        const kwargs = /* @__PURE__ */ new Map();
        for (const argument of expr.args) {
          if (argument.type === "KeywordArgumentExpression") {
            const kwarg = argument;
            kwargs.set(kwarg.key.value, this.evaluate(kwarg.value, environment));
          } else {
            args.push(this.evaluate(argument, environment));
          }
        }
        if (kwargs.size > 0) {
          args.push(new ObjectValue(kwargs));
        }
        const fn = this.evaluate(expr.callee, environment);
        if (fn.type !== "FunctionValue") {
          throw new Error(`Cannot call something that is not a function: got ${fn.type}`);
        }
        return fn.value(args, environment);
      }
      evaluateSliceExpression(object, expr, environment) {
        if (!(object instanceof ArrayValue || object instanceof StringValue)) {
          throw new Error("Slice object must be an array or string");
        }
        const start = this.evaluate(expr.start, environment);
        const stop = this.evaluate(expr.stop, environment);
        const step = this.evaluate(expr.step, environment);
        if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {
          throw new Error("Slice start must be numeric or undefined");
        }
        if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {
          throw new Error("Slice stop must be numeric or undefined");
        }
        if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {
          throw new Error("Slice step must be numeric or undefined");
        }
        if (object instanceof ArrayValue) {
          return new ArrayValue(slice(object.value, start.value, stop.value, step.value));
        } else {
          return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(""));
        }
      }
      evaluateMemberExpression(expr, environment) {
        const object = this.evaluate(expr.object, environment);
        let property;
        if (expr.computed) {
          if (expr.property.type === "SliceExpression") {
            return this.evaluateSliceExpression(object, expr.property, environment);
          } else {
            property = this.evaluate(expr.property, environment);
          }
        } else {
          property = new StringValue(expr.property.value);
        }
        let value;
        if (object instanceof ObjectValue) {
          if (!(property instanceof StringValue)) {
            throw new Error(`Cannot access property with non-string: got ${property.type}`);
          }
          value = object.value.get(property.value) ?? object.builtins.get(property.value);
        } else if (object instanceof ArrayValue || object instanceof StringValue) {
          if (property instanceof NumericValue) {
            value = object.value.at(property.value);
            if (object instanceof StringValue) {
              value = new StringValue(object.value.at(property.value));
            }
          } else if (property instanceof StringValue) {
            value = object.builtins.get(property.value);
          } else {
            throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);
          }
        } else {
          if (!(property instanceof StringValue)) {
            throw new Error(`Cannot access property with non-string: got ${property.type}`);
          }
          value = object.builtins.get(property.value);
        }
        return value instanceof RuntimeValue ? value : new UndefinedValue();
      }
      evaluateSet(node, environment) {
        const rhs = this.evaluate(node.value, environment);
        if (node.assignee.type === "Identifier") {
          const variableName = node.assignee.value;
          environment.setVariable(variableName, rhs);
        } else if (node.assignee.type === "MemberExpression") {
          const member = node.assignee;
          const object = this.evaluate(member.object, environment);
          if (!(object instanceof ObjectValue)) {
            throw new Error("Cannot assign to member of non-object");
          }
          if (member.property.type !== "Identifier") {
            throw new Error("Cannot assign to member with non-identifier property");
          }
          object.value.set(member.property.value, rhs);
        } else {
          throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);
        }
        return new NullValue();
      }
      evaluateIf(node, environment) {
        const test = this.evaluate(node.test, environment);
        return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);
      }
      evaluateFor(node, environment) {
        const scope = new Environment(environment);
        const iterable = this.evaluate(node.iterable, scope);
        if (!(iterable instanceof ArrayValue)) {
          throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);
        }
        let result = "";
        for (let i = 0; i < iterable.value.length; ++i) {
          const loop = /* @__PURE__ */ new Map([
            ["index", new NumericValue(i + 1)],
            ["index0", new NumericValue(i)],
            ["revindex", new NumericValue(iterable.value.length - i)],
            ["revindex0", new NumericValue(iterable.value.length - i - 1)],
            ["first", new BooleanValue(i === 0)],
            ["last", new BooleanValue(i === iterable.value.length - 1)],
            ["length", new NumericValue(iterable.value.length)],
            ["previtem", i > 0 ? iterable.value[i - 1] : new UndefinedValue()],
            ["nextitem", i < iterable.value.length - 1 ? iterable.value[i + 1] : new UndefinedValue()]
          ]);
          scope.setVariable("loop", new ObjectValue(loop));
          const current = iterable.value[i];
          if (node.loopvar.type === "Identifier") {
            scope.setVariable(node.loopvar.value, current);
          } else if (node.loopvar.type === "TupleLiteral") {
            const loopvar = node.loopvar;
            if (current.type !== "ArrayValue") {
              throw new Error(`Cannot unpack non-iterable type: ${current.type}`);
            }
            const c = current;
            if (loopvar.value.length !== c.value.length) {
              throw new Error(`Too ${loopvar.value.length > c.value.length ? "few" : "many"} items to unpack`);
            }
            for (let j = 0; j < loopvar.value.length; ++j) {
              if (loopvar.value[j].type !== "Identifier") {
                throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);
              }
              scope.setVariable(loopvar.value[j].value, c.value[j]);
            }
          }
          const evaluated = this.evaluateBlock(node.body, scope);
          result += evaluated.value;
        }
        return new StringValue(result);
      }
      evaluate(statement, environment) {
        if (statement === void 0)
          return new UndefinedValue();
        switch (statement.type) {
          case "Program":
            return this.evalProgram(statement, environment);
          case "Set":
            return this.evaluateSet(statement, environment);
          case "If":
            return this.evaluateIf(statement, environment);
          case "For":
            return this.evaluateFor(statement, environment);
          case "NumericLiteral":
            return new NumericValue(Number(statement.value));
          case "StringLiteral":
            return new StringValue(statement.value);
          case "BooleanLiteral":
            return new BooleanValue(statement.value);
          case "ArrayLiteral":
            return new ArrayValue(statement.value.map((x) => this.evaluate(x, environment)));
          case "TupleLiteral":
            return new TupleValue(statement.value.map((x) => this.evaluate(x, environment)));
          case "ObjectLiteral": {
            const mapping = /* @__PURE__ */ new Map();
            for (const [key, value] of statement.value) {
              const evaluatedKey = this.evaluate(key, environment);
              if (!(evaluatedKey instanceof StringValue)) {
                throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);
              }
              mapping.set(evaluatedKey.value, this.evaluate(value, environment));
            }
            return new ObjectValue(mapping);
          }
          case "Identifier":
            return this.evaluateIdentifier(statement, environment);
          case "CallExpression":
            return this.evaluateCallExpression(statement, environment);
          case "MemberExpression":
            return this.evaluateMemberExpression(statement, environment);
          case "UnaryExpression":
            return this.evaluateUnaryExpression(statement, environment);
          case "BinaryExpression":
            return this.evaluateBinaryExpression(statement, environment);
          case "FilterExpression":
            return this.evaluateFilterExpression(statement, environment);
          case "TestExpression":
            return this.evaluateTestExpression(statement, environment);
          default:
            throw new SyntaxError(`Unknown node type: ${statement.type}`);
        }
      }
    };
    __name(convertToRuntimeValues, "convertToRuntimeValues");
    Template = class {
      static {
        __name(this, "Template");
      }
      parsed;
      /**
       * @param {string} template The template string
       */
      constructor(template) {
        const tokens = tokenize(template, {
          lstrip_blocks: true,
          trim_blocks: true
        });
        this.parsed = parse(tokens);
      }
      render(items) {
        const env3 = new Environment();
        env3.set("false", false);
        env3.set("true", true);
        env3.set("raise_exception", (args) => {
          throw new Error(args);
        });
        env3.set("range", range);
        for (const [key, value] of Object.entries(items)) {
          env3.set(key, value);
        }
        const interpreter = new Interpreter(env3);
        const result = interpreter.run(this.parsed);
        return result.value;
      }
    };
  }
});

// node_modules/@xenova/transformers/src/tokenizers.js
async function loadTokenizer(pretrained_model_name_or_path, options) {
  const info = await Promise.all([
    getModelJSON(pretrained_model_name_or_path, "tokenizer.json", true, options),
    getModelJSON(pretrained_model_name_or_path, "tokenizer_config.json", true, options)
  ]);
  if (options.legacy !== null) {
    info[1].legacy = options.legacy;
  }
  return info;
}
function regexSplit(text2, regex) {
  const result = [];
  let prev = 0;
  for (const match2 of text2.matchAll(regex)) {
    const fullMatch = match2[0];
    if (prev < match2.index) {
      result.push(text2.slice(prev, match2.index));
    }
    if (fullMatch.length > 0) {
      result.push(fullMatch);
    }
    prev = match2.index + fullMatch.length;
  }
  if (prev < text2.length) {
    result.push(text2.slice(prev));
  }
  return result;
}
function createPattern(pattern, invert = true) {
  if (pattern.Regex !== void 0) {
    let regex = pattern.Regex.replace(/\\([#&~])/g, "$1");
    for (const [key, value] of PROBLEMATIC_REGEX_MAP) {
      regex = regex.replaceAll(key, value);
    }
    return new RegExp(regex, "gu");
  } else if (pattern.String !== void 0) {
    const escaped = escapeRegExp(pattern.String);
    return new RegExp(invert ? escaped : `(${escaped})`, "gu");
  } else {
    console.warn("Unknown pattern type:", pattern);
    return null;
  }
}
function objectToMap(obj) {
  return new Map(Object.entries(obj));
}
function prepareTensorForDecode(tensor) {
  const dims = tensor.dims;
  switch (dims.length) {
    case 1:
      return tensor.tolist();
    case 2:
      if (dims[0] !== 1) {
        throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");
      }
      return tensor.tolist()[0];
    default:
      throw new Error(`Expected tensor to have 1-2 dimensions, got ${dims.length}.`);
  }
}
function clean_up_tokenization(text2) {
  return text2.replace(/ \./g, ".").replace(/ \?/g, "?").replace(/ \!/g, "!").replace(/ ,/g, ",").replace(/ \' /g, "'").replace(/ n\'t/g, "n't").replace(/ \'m/g, "'m").replace(/ \'s/g, "'s").replace(/ \'ve/g, "'ve").replace(/ \'re/g, "'re");
}
function remove_accents(text2) {
  return text2.replace(/[\u0300-\u036f]/g, "");
}
function lowercase_and_remove_accent(text2) {
  return remove_accents(text2.toLowerCase());
}
function fuse(arr, value, mapping) {
  const fused = [];
  let i = 0;
  while (i < arr.length) {
    fused.push(arr[i]);
    if ((mapping.get(arr[i]) ?? value) !== value) {
      ++i;
      continue;
    }
    while (i < arr.length && (mapping.get(arr[i]) ?? value) === value) {
      ++i;
    }
  }
  return fused;
}
function whitespace_split(text2) {
  return text2.match(/\S+/g) || [];
}
function padHelper(item, length, value_fn, side) {
  for (const key of Object.keys(item)) {
    const diff = length - item[key].length;
    const value = value_fn(key);
    const padData = new Array(diff).fill(value);
    item[key] = side === "right" ? mergeArrays(item[key], padData) : mergeArrays(padData, item[key]);
  }
}
function truncateHelper(item, length) {
  for (const key of Object.keys(item)) {
    item[key].length = length;
  }
}
function _build_translation_inputs(self2, raw_inputs, tokenizer_options, generate_kwargs) {
  if (!("language_codes" in self2) || !Array.isArray(self2.language_codes)) {
    throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");
  }
  if (!("languageRegex" in self2) || !(self2.languageRegex instanceof RegExp)) {
    throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");
  }
  if (!("lang_to_token" in self2) || typeof self2.lang_to_token !== "function") {
    throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");
  }
  const src_lang_token = generate_kwargs.src_lang;
  const tgt_lang_token = generate_kwargs.tgt_lang;
  if (!self2.language_codes.includes(tgt_lang_token)) {
    throw new Error(`Target language code "${tgt_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
  }
  if (src_lang_token !== void 0) {
    if (!self2.language_codes.includes(src_lang_token)) {
      throw new Error(`Source language code "${src_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
    }
    for (const item of self2.post_processor.config.single) {
      if ("SpecialToken" in item && self2.languageRegex.test(item.SpecialToken.id)) {
        item.SpecialToken.id = self2.lang_to_token(src_lang_token);
        break;
      }
    }
  }
  generate_kwargs.forced_bos_token_id = self2.model.convert_tokens_to_ids([self2.lang_to_token(tgt_lang_token)])[0];
  return self2._call(raw_inputs, tokenizer_options);
}
var PUNCTUATION_REGEX, PROBLEMATIC_REGEX_MAP, AddedToken, TokenizerModel, WordPieceTokenizer, Unigram, BYTES_TO_UNICODE, UNICODE_TO_BYTES, BPE, LegacyTokenizerModel, Normalizer, Replace, NFC, NFKC, NFKD, StripNormalizer, StripAccents, Lowercase, Prepend, NormalizerSequence, BertNormalizer, PreTokenizer, BertPreTokenizer, ByteLevelPreTokenizer, SplitPreTokenizer, PunctuationPreTokenizer, DigitsPreTokenizer, PostProcessor, BertProcessing, RobertaProcessing, TemplateProcessing, ByteLevelPostProcessor, PostProcessorSequence, Decoder, ReplaceDecoder, ByteFallback, FuseDecoder, StripDecoder, WordPieceDecoder, ByteLevelDecoder, CTCDecoder, DecoderSequence, BPEDecoder, VitsDecoder, MetaspacePreTokenizer, MetaspaceDecoder, Precompiled, PreTokenizerSequence, WhitespacePreTokenizer, WhitespaceSplit, ReplacePreTokenizer, SPECIAL_TOKEN_ATTRIBUTES, PreTrainedTokenizer, BertTokenizer, AlbertTokenizer, MobileBertTokenizer, SqueezeBertTokenizer, DebertaTokenizer, DebertaV2Tokenizer, HerbertTokenizer, ConvBertTokenizer, RoFormerTokenizer, DistilBertTokenizer, CamembertTokenizer, XLMTokenizer, ElectraTokenizer, T5Tokenizer, GPT2Tokenizer, BartTokenizer, MBartTokenizer, MBart50Tokenizer, RobertaTokenizer, BloomTokenizer, SPIECE_UNDERLINE, LlamaTokenizer, CodeLlamaTokenizer, XLMRobertaTokenizer, MPNetTokenizer, FalconTokenizer, GPTNeoXTokenizer, EsmTokenizer, Qwen2Tokenizer, GemmaTokenizer, Grok1Tokenizer, NllbTokenizer, M2M100Tokenizer, WHISPER_LANGUAGES, WHISPER_LANGUAGE_MAPPING, WHISPER_TO_LANGUAGE_CODE_MAPPING, WhisperTokenizer, CodeGenTokenizer, CLIPTokenizer, SiglipTokenizer, MarianTokenizer, Wav2Vec2CTCTokenizer, BlenderbotTokenizer, BlenderbotSmallTokenizer, SpeechT5Tokenizer, NougatTokenizer, VitsTokenizer, CohereTokenizer, AutoTokenizer;
var init_tokenizers = __esm({
  "node_modules/@xenova/transformers/src/tokenizers.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_core();
    init_hub();
    init_maths();
    init_tensor();
    init_data_structures();
    init_dist();
    __name(loadTokenizer, "loadTokenizer");
    __name(regexSplit, "regexSplit");
    __name(createPattern, "createPattern");
    __name(objectToMap, "objectToMap");
    __name(prepareTensorForDecode, "prepareTensorForDecode");
    __name(clean_up_tokenization, "clean_up_tokenization");
    __name(remove_accents, "remove_accents");
    __name(lowercase_and_remove_accent, "lowercase_and_remove_accent");
    __name(fuse, "fuse");
    __name(whitespace_split, "whitespace_split");
    PUNCTUATION_REGEX = "\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E";
    PROBLEMATIC_REGEX_MAP = /* @__PURE__ */ new Map([
      // This uses the case insensitive group modifier, which is not supported in JavaScript.
      // When parsing the regex, an "Invalid group" error is thrown.
      ["(?i:'s|'t|'re|'ve|'m|'ll|'d)", "(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]
    ]);
    AddedToken = class {
      static {
        __name(this, "AddedToken");
      }
      /**
       * Creates a new instance of AddedToken.
       * @param {Object} config Added token configuration object.
       * @param {string} config.content The content of the added token.
       * @param {number} config.id The id of the added token.
       * @param {boolean} [config.single_word=false] Whether this token must be a single word or can break words.
       * @param {boolean} [config.lstrip=false] Whether this token should strip whitespaces on its left.
       * @param {boolean} [config.rstrip=false] Whether this token should strip whitespaces on its right.
       * @param {boolean} [config.normalized=false] Whether this token should be normalized.
       * @param {boolean} [config.special=false] Whether this token is special.
       */
      constructor(config) {
        this.content = config.content;
        this.id = config.id;
        this.single_word = config.single_word ?? false;
        this.lstrip = config.lstrip ?? false;
        this.rstrip = config.rstrip ?? false;
        this.special = config.special ?? false;
        this.normalized = config.normalized ?? null;
      }
    };
    TokenizerModel = class extends Callable {
      static {
        __name(this, "TokenizerModel");
      }
      /**
       * Creates a new instance of TokenizerModel.
       * @param {Object} config The configuration object for the TokenizerModel.
       */
      constructor(config) {
        super();
        this.config = config;
        this.vocab = [];
        this.tokens_to_ids = /* @__PURE__ */ new Map();
        this.unk_token_id = void 0;
        this.unk_token = void 0;
        this.end_of_word_suffix = void 0;
        this.fuse_unk = this.config.fuse_unk ?? false;
      }
      /**
       * Instantiates a new TokenizerModel instance based on the configuration object provided.
       * @param {Object} config The configuration object for the TokenizerModel.
       * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.
       * @returns {TokenizerModel} A new instance of a TokenizerModel.
       * @throws Will throw an error if the TokenizerModel type in the config is not recognized.
       */
      static fromConfig(config, ...args) {
        switch (config.type) {
          case "WordPiece":
            return new WordPieceTokenizer(config);
          case "Unigram":
            return new Unigram(config, ...args);
          case "BPE":
            return new BPE(config);
          default:
            if (config.vocab) {
              return new LegacyTokenizerModel(config, ...args);
            }
            throw new Error(`Unknown TokenizerModel type: ${config.type}`);
        }
      }
      /**
       * Internal function to call the TokenizerModel instance.
       * @param {string[]} tokens The tokens to encode.
       * @returns {string[]} The encoded token IDs.
       */
      _call(tokens) {
        let ids = this.encode(tokens);
        if (this.fuse_unk) {
          ids = fuse(ids, this.unk_token_id, this.tokens_to_ids);
        }
        return ids;
      }
      /**
       * Encodes a list of tokens into a list of token IDs.
       * @param {string[]} tokens The tokens to encode.
       * @returns {string[]} The encoded tokens.
       * @throws Will throw an error if not implemented in a subclass.
       */
      encode(tokens) {
        throw Error("encode should be implemented in subclass.");
      }
      /**
       * Converts a list of tokens into a list of token IDs.
       * @param {string[]} tokens The tokens to convert.
       * @returns {number[]} The converted token IDs.
       */
      convert_tokens_to_ids(tokens) {
        return tokens.map((t) => this.tokens_to_ids.get(t) ?? this.unk_token_id);
      }
      /**
       * Converts a list of token IDs into a list of tokens.
       * @param {number[]} ids The token IDs to convert.
       * @returns {string[]} The converted tokens.
       */
      convert_ids_to_tokens(ids) {
        return ids.map((i) => this.vocab[i] ?? this.unk_token);
      }
    };
    WordPieceTokenizer = class extends TokenizerModel {
      static {
        __name(this, "WordPieceTokenizer");
      }
      /**
       * @param {Object} config The configuration object.
       * @param {Object} config.vocab A mapping of tokens to ids.
       * @param {string} config.unk_token The unknown token string.
       * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.
       * @param {number} [config.max_input_chars_per_word=100] The maximum number of characters per word.
       */
      constructor(config) {
        super(config);
        this.tokens_to_ids = objectToMap(config.vocab);
        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);
        this.unk_token = config.unk_token;
        this.max_input_chars_per_word = config.max_input_chars_per_word ?? 100;
        this.vocab = new Array(this.tokens_to_ids.size);
        for (const [key, value] of this.tokens_to_ids) {
          this.vocab[value] = key;
        }
      }
      /**
       * Encodes an array of tokens using WordPiece encoding.
       * @param {string[]} tokens The tokens to encode.
       * @returns {string[]} An array of encoded tokens.
       */
      encode(tokens) {
        const outputTokens = [];
        for (const token of tokens) {
          const chars = [...token];
          if (chars.length > this.max_input_chars_per_word) {
            outputTokens.push(this.unk_token);
            continue;
          }
          let isUnknown = false;
          let start = 0;
          const subTokens = [];
          while (start < chars.length) {
            let end = chars.length;
            let currentSubstring = null;
            while (start < end) {
              let substr = chars.slice(start, end).join("");
              if (start > 0) {
                substr = this.config.continuing_subword_prefix + substr;
              }
              if (this.tokens_to_ids.has(substr)) {
                currentSubstring = substr;
                break;
              }
              --end;
            }
            if (currentSubstring === null) {
              isUnknown = true;
              break;
            }
            subTokens.push(currentSubstring);
            start = end;
          }
          if (isUnknown) {
            outputTokens.push(this.unk_token);
          } else {
            outputTokens.push(...subTokens);
          }
        }
        return outputTokens;
      }
    };
    Unigram = class extends TokenizerModel {
      static {
        __name(this, "Unigram");
      }
      /**
       * Create a new Unigram tokenizer model.
       * @param {Object} config The configuration object for the Unigram model.
       * @param {number} config.unk_id The ID of the unknown token
       * @param {any[][]} config.vocab A 2D array representing a mapping of tokens to scores.
       * @param {Object} moreConfig Additional configuration object for the Unigram model.
       */
      constructor(config, moreConfig) {
        super(config);
        const vocabSize = config.vocab.length;
        this.vocab = new Array(vocabSize);
        this.scores = new Array(vocabSize);
        for (let i = 0; i < vocabSize; ++i) {
          const piece = config.vocab[i];
          this.vocab[i] = piece[0];
          this.scores[i] = piece[1];
        }
        this.unk_token_id = config.unk_id;
        this.unk_token = this.vocab[config.unk_id];
        this.tokens_to_ids = new Map(this.vocab.map((x, i) => [x, i]));
        this.bosToken = " ";
        this.bosTokenId = this.tokens_to_ids.get(this.bosToken);
        this.eosToken = moreConfig.eos_token;
        this.eosTokenId = this.tokens_to_ids.get(this.eosToken);
        this.unkToken = this.vocab[this.unk_token_id];
        this.minScore = min(this.scores)[0];
        this.unkScore = this.minScore - 10;
        this.scores[this.unk_token_id] = this.unkScore;
        this.trie = new CharTrie();
        this.trie.extend(this.vocab);
        this.fuse_unk = true;
      }
      /**
       * Populates lattice nodes.
       * @param {TokenLattice} lattice The token lattice to populate with nodes.
       */
      populateNodes(lattice) {
        const sentence = lattice.sentence;
        const len = sentence.length;
        let beginPos = 0;
        while (beginPos < len) {
          const mblen = 1;
          let hasSingleNode = false;
          const tokens = [];
          for (let token of this.trie.commonPrefixSearch(sentence.slice(beginPos))) {
            tokens.push(token);
            const tokenId = this.tokens_to_ids.get(token);
            const tokenScore = this.scores[tokenId];
            const n = token.length;
            lattice.insert(beginPos, n, tokenScore, tokenId);
            if (!hasSingleNode && n === mblen) {
              hasSingleNode = true;
            }
          }
          if (!hasSingleNode) {
            lattice.insert(beginPos, mblen, this.unkScore, this.unk_token_id);
          }
          beginPos += mblen;
        }
      }
      /**
       * Encodes an array of tokens into an array of subtokens using the unigram model.
       *
       * @param {string} normalized The normalized string.
       * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.
       */
      tokenize(normalized) {
        const lattice = new TokenLattice(normalized, this.bosTokenId, this.eosTokenId);
        this.populateNodes(lattice);
        return lattice.tokens();
      }
      /**
       * Encodes an array of tokens using Unigram encoding.
       * @param {string[]} tokens The tokens to encode.
       * @returns {string[]} An array of encoded tokens.
       */
      encode(tokens) {
        const toReturn = [];
        for (const token of tokens) {
          const tokenized = this.tokenize(token);
          toReturn.push(...tokenized);
        }
        return toReturn;
      }
    };
    BYTES_TO_UNICODE = (() => {
      const bs = [
        ...Array.from({ length: "~".charCodeAt(0) - "!".charCodeAt(0) + 1 }, (_, i) => i + "!".charCodeAt(0)),
        ...Array.from({ length: "\xAC".charCodeAt(0) - "\xA1".charCodeAt(0) + 1 }, (_, i) => i + "\xA1".charCodeAt(0)),
        ...Array.from({ length: "\xFF".charCodeAt(0) - "\xAE".charCodeAt(0) + 1 }, (_, i) => i + "\xAE".charCodeAt(0))
      ];
      const cs = bs.slice();
      let n = 0;
      for (let b = 0; b < 256; ++b) {
        if (!bs.includes(b)) {
          bs.push(b);
          cs.push(256 + n);
          n += 1;
        }
      }
      const ccs = cs.map((n2) => String.fromCharCode(n2));
      return Object.fromEntries(bs.map((b, i) => [b, ccs[i]]));
    })();
    UNICODE_TO_BYTES = reverseDictionary(BYTES_TO_UNICODE);
    BPE = class extends TokenizerModel {
      static {
        __name(this, "BPE");
      }
      /**
       * Create a BPE instance.
       * @param {Object} config The configuration object for BPE.
       * @param {Object} config.vocab A mapping of tokens to ids.
       * @param {string[]} config.merges An array of BPE merges as strings.
       * @param {string} config.unk_token The unknown token used for out of vocabulary words.
       * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.
       * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.
       * @param {boolean} [config.byte_fallback=false] Whether to use spm byte-fallback trick (defaults to False)
       * @param {boolean} [config.ignore_merges=false] Whether or not to match tokens with the vocab before using merges.
       */
      constructor(config) {
        super(config);
        this.BPE_SPLIT_TOKEN = " ";
        this.tokens_to_ids = objectToMap(config.vocab);
        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);
        this.unk_token = config.unk_token;
        this.vocab = new Array(this.tokens_to_ids.size);
        for (const [key, value] of this.tokens_to_ids) {
          this.vocab[value] = key;
        }
        this.bpe_ranks = new Map(config.merges.map((x, i) => [x, i]));
        this.merges = config.merges.map((x) => x.split(this.BPE_SPLIT_TOKEN));
        this.end_of_word_suffix = config.end_of_word_suffix;
        this.continuing_subword_suffix = config.continuing_subword_suffix ?? null;
        this.byte_fallback = this.config.byte_fallback ?? false;
        if (this.byte_fallback) {
          this.text_encoder = new TextEncoder();
        }
        this.ignore_merges = this.config.ignore_merges ?? false;
        this.cache = /* @__PURE__ */ new Map();
      }
      /**
       * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority
       * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.
       * @param {string} token The token to encode.
       * @returns {string[]} The BPE encoded tokens.
       */
      bpe(token) {
        if (token.length === 0) {
          return [];
        }
        const cached = this.cache.get(token);
        if (cached !== void 0) {
          return cached;
        }
        const word = Array.from(token);
        if (this.end_of_word_suffix) {
          word[word.length - 1] += this.end_of_word_suffix;
        }
        let result = [];
        if (word.length > 1) {
          const queue = new PriorityQueue((a, b) => a.score < b.score);
          let startingNode = {
            token: word[0],
            bias: 0,
            prev: null,
            next: null
          };
          let previousNode = startingNode;
          for (let i = 1; i < word.length; ++i) {
            const currentNode = {
              bias: i / word.length,
              // Add fractional component to break ties
              token: word[i],
              prev: previousNode,
              next: null
            };
            previousNode.next = currentNode;
            this._add_node(queue, previousNode);
            previousNode = currentNode;
          }
          while (!queue.isEmpty()) {
            const node = queue.pop();
            if (node.deleted || !node.next || node.next.deleted) continue;
            node.deleted = true;
            node.next.deleted = true;
            if (node.prev) {
              const newPreviousNode = { ...node.prev };
              node.prev.deleted = true;
              node.prev = newPreviousNode;
              if (newPreviousNode.prev) {
                newPreviousNode.prev.next = newPreviousNode;
              } else {
                startingNode = newPreviousNode;
              }
            }
            const merged = {
              token: node.token + node.next.token,
              bias: node.bias,
              prev: node.prev,
              next: node.next.next
            };
            if (merged.prev) {
              merged.prev.next = merged;
              this._add_node(queue, merged.prev);
            } else {
              startingNode = merged;
            }
            if (merged.next) {
              merged.next.prev = merged;
              this._add_node(queue, merged);
            }
          }
          for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {
            result.push(currentNode.token);
          }
        } else {
          result = word;
        }
        if (this.continuing_subword_suffix) {
          for (let i = 0; i < result.length - 1; ++i) {
            result[i] += this.continuing_subword_suffix;
          }
        }
        this.cache.set(token, result);
        return result;
      }
      /**
       * Helper function to add a node to the priority queue.
       * @param {PriorityQueue} queue 
       * @param {BPENode} node
       * @private
       */
      _add_node(queue, node) {
        const rank = this.bpe_ranks.get(node.token + this.BPE_SPLIT_TOKEN + node.next.token);
        if (rank !== void 0) {
          node.score = rank + node.bias;
          queue.push(node);
        }
      }
      /**
       * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.
       * @param {string[]} tokens The input sequence of tokens to encode.
       * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.
       */
      encode(tokens) {
        const outputTokens = [];
        for (const token of tokens) {
          if (this.ignore_merges && this.tokens_to_ids.has(token)) {
            outputTokens.push(token);
            continue;
          }
          const bpe_token_list = this.bpe(token);
          for (const t of bpe_token_list) {
            if (this.tokens_to_ids.has(t)) {
              outputTokens.push(t);
            } else {
              if (this.byte_fallback) {
                outputTokens.push(
                  ...Array.from(this.text_encoder.encode(t)).map((x) => `<0x${x.toString(16).toUpperCase().padStart(2, "0")}>`)
                );
              } else {
                outputTokens.push(this.unk_token);
              }
            }
          }
        }
        return outputTokens;
      }
    };
    LegacyTokenizerModel = class extends TokenizerModel {
      static {
        __name(this, "LegacyTokenizerModel");
      }
      /**
       * Create a LegacyTokenizerModel instance.
       * @param {Object} config The configuration object for LegacyTokenizerModel.
       * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.
       * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.
       */
      constructor(config, moreConfig) {
        super(config);
        this.tokens_to_ids = objectToMap(
          moreConfig.target_lang ? config.vocab[moreConfig.target_lang] : config.vocab
        );
        this.bos_token = moreConfig.bos_token;
        this.bos_token_id = this.tokens_to_ids.get(this.bos_token);
        this.eos_token = moreConfig.eos_token;
        this.eos_token_id = this.tokens_to_ids.get(this.eos_token);
        this.pad_token = moreConfig.pad_token;
        this.pad_token_id = this.tokens_to_ids.get(this.pad_token);
        this.unk_token = moreConfig.unk_token;
        this.unk_token_id = this.tokens_to_ids.get(this.unk_token);
        this.vocab = new Array(this.tokens_to_ids.size);
        for (const [key, value] of this.tokens_to_ids) {
          this.vocab[value] = key;
        }
      }
      encode(tokens) {
        return tokens;
      }
    };
    Normalizer = class extends Callable {
      static {
        __name(this, "Normalizer");
      }
      /**
       * @param {Object} config The configuration object for the normalizer.
       */
      constructor(config) {
        super();
        this.config = config;
      }
      /**
       * Factory method for creating normalizers from config objects.
       * @static
       * @param {Object} config The configuration object for the normalizer.
       * @returns {Normalizer} A Normalizer object.
       * @throws {Error} If an unknown Normalizer type is specified in the config.
       */
      static fromConfig(config) {
        if (config === null) return null;
        switch (config.type) {
          case "BertNormalizer":
            return new BertNormalizer(config);
          case "Precompiled":
            return new Precompiled(config);
          case "Sequence":
            return new NormalizerSequence(config);
          case "Replace":
            return new Replace(config);
          case "NFC":
            return new NFC(config);
          case "NFKC":
            return new NFKC(config);
          case "NFKD":
            return new NFKD(config);
          case "Strip":
            return new StripNormalizer(config);
          case "StripAccents":
            return new StripAccents(config);
          case "Lowercase":
            return new Lowercase(config);
          case "Prepend":
            return new Prepend(config);
          default:
            throw new Error(`Unknown Normalizer type: ${config.type}`);
        }
      }
      /**
       * Normalize the input text.
       * @abstract
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       * @throws {Error} If this method is not implemented in a subclass.
       */
      normalize(text2) {
        throw Error("normalize should be implemented in subclass.");
      }
      /**
       * Alias for {@link Normalizer#normalize}.
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       */
      _call(text2) {
        return this.normalize(text2);
      }
    };
    Replace = class extends Normalizer {
      static {
        __name(this, "Replace");
      }
      /**
       * Normalize the input text by replacing the pattern with the content.
       * @param {string} text The input text to be normalized.
       * @returns {string} The normalized text after replacing the pattern with the content.
       */
      normalize(text2) {
        const pattern = createPattern(this.config.pattern);
        return pattern === null ? text2 : text2.replaceAll(pattern, this.config.content);
      }
    };
    NFC = class extends Normalizer {
      static {
        __name(this, "NFC");
      }
      /**
       * Normalize the input text by applying Unicode normalization form C (NFC).
       * @param {string} text The input text to be normalized.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = text2.normalize("NFC");
        return text2;
      }
    };
    NFKC = class extends Normalizer {
      static {
        __name(this, "NFKC");
      }
      /**
       * Normalize text using NFKC normalization.
       * @param {string} text The text to be normalized.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = text2.normalize("NFKC");
        return text2;
      }
    };
    NFKD = class extends Normalizer {
      static {
        __name(this, "NFKD");
      }
      /**
       * Normalize text using NFKD normalization.
       * @param {string} text The text to be normalized.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = text2.normalize("NFKD");
        return text2;
      }
    };
    StripNormalizer = class extends Normalizer {
      static {
        __name(this, "StripNormalizer");
      }
      /**
       * Strip leading and/or trailing whitespace from the input text.
       * @param {string} text The input text.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        if (this.config.strip_left && this.config.strip_right) {
          text2 = text2.trim();
        } else {
          if (this.config.strip_left) {
            text2 = text2.trimStart();
          }
          if (this.config.strip_right) {
            text2 = text2.trimEnd();
          }
        }
        return text2;
      }
    };
    StripAccents = class extends Normalizer {
      static {
        __name(this, "StripAccents");
      }
      /**
       * Remove all accents from the text.
       * @param {string} text The input text.
       * @returns {string} The normalized text without accents.
       */
      normalize(text2) {
        text2 = remove_accents(text2);
        return text2;
      }
    };
    Lowercase = class extends Normalizer {
      static {
        __name(this, "Lowercase");
      }
      /**
       * Lowercases the input string.
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = text2.toLowerCase();
        return text2;
      }
    };
    Prepend = class extends Normalizer {
      static {
        __name(this, "Prepend");
      }
      /**
       * Prepends the input string.
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = this.config.prepend + text2;
        return text2;
      }
    };
    NormalizerSequence = class extends Normalizer {
      static {
        __name(this, "NormalizerSequence");
      }
      /**
      * Create a new instance of NormalizerSequence.
      * @param {Object} config The configuration object.
      * @param {Object[]} config.normalizers An array of Normalizer configuration objects.
      */
      constructor(config) {
        super(config);
        this.normalizers = config.normalizers.map((x) => Normalizer.fromConfig(x));
      }
      /**
      * Apply a sequence of Normalizers to the input text.
      * @param {string} text The text to normalize.
      * @returns {string} The normalized text.
      */
      normalize(text2) {
        return this.normalizers.reduce((t, normalizer) => {
          return normalizer.normalize(t);
        }, text2);
      }
    };
    BertNormalizer = class extends Normalizer {
      static {
        __name(this, "BertNormalizer");
      }
      /**
       * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.
       *
       * @param {string} text The input text to tokenize.
       * @returns {string} The tokenized text with whitespace added around CJK characters.
       */
      _tokenize_chinese_chars(text2) {
        const output = [];
        for (let i = 0; i < text2.length; ++i) {
          const char = text2[i];
          const cp = char.charCodeAt(0);
          if (this._is_chinese_char(cp)) {
            output.push(" ");
            output.push(char);
            output.push(" ");
          } else {
            output.push(char);
          }
        }
        return output.join("");
      }
      /**
       * Checks whether the given Unicode codepoint represents a CJK (Chinese, Japanese, or Korean) character.
       *
       * A "chinese character" is defined as anything in the CJK Unicode block:
       * https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)
       *
       * Note that the CJK Unicode block is NOT all Japanese and Korean characters, despite its name.
       * The modern Korean Hangul alphabet is a different block, as is Japanese Hiragana and Katakana.
       * Those alphabets are used to write space-separated words, so they are not treated specially
       * and are handled like all other languages.
       *
       * @param {number} cp The Unicode codepoint to check.
       * @returns {boolean} True if the codepoint represents a CJK character, false otherwise.
       */
      _is_chinese_char(cp) {
        return cp >= 19968 && cp <= 40959 || cp >= 13312 && cp <= 19903 || cp >= 131072 && cp <= 173791 || cp >= 173824 && cp <= 177983 || cp >= 177984 && cp <= 178207 || cp >= 178208 && cp <= 183983 || cp >= 63744 && cp <= 64255 || cp >= 194560 && cp <= 195103;
      }
      /**
       * Strips accents from the given text.
       * @param {string} text The text to strip accents from.
       * @returns {string} The text with accents removed.
       */
      stripAccents(text2) {
        return text2.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      }
      /**
       * Checks whether `char` is a control character.
       * @param {string} char The character to check.
       * @returns {boolean} Whether `char` is a control character.
       * @private
       */
      _is_control(char) {
        switch (char) {
          case "	":
          case "\n":
          case "\r":
            return false;
          default:
            return /^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(char);
        }
      }
      /**
       * Performs invalid character removal and whitespace cleanup on text.
       * @param {string} text The text to clean.
       * @returns {string} The cleaned text.
       * @private
       */
      _clean_text(text2) {
        const output = [];
        for (const char of text2) {
          const cp = char.charCodeAt(0);
          if (cp === 0 || cp === 65533 || this._is_control(char)) {
            continue;
          }
          if (/^\s$/.test(char)) {
            output.push(" ");
          } else {
            output.push(char);
          }
        }
        return output.join("");
      }
      /**
       * Normalizes the given text based on the configuration.
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        if (this.config.clean_text) {
          text2 = this._clean_text(text2);
        }
        if (this.config.handle_chinese_chars) {
          text2 = this._tokenize_chinese_chars(text2);
        }
        if (this.config.lowercase) {
          text2 = text2.toLowerCase();
          if (this.config.strip_accents !== false) {
            text2 = this.stripAccents(text2);
          }
        } else if (this.config.strip_accents) {
          text2 = this.stripAccents(text2);
        }
        return text2;
      }
    };
    PreTokenizer = class extends Callable {
      static {
        __name(this, "PreTokenizer");
      }
      /**
      * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.
      *
      * @static
      * @param {Object} config A configuration object for the pre-tokenizer.
      * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.
      * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.
      */
      static fromConfig(config) {
        if (config === null) return null;
        switch (config.type) {
          case "BertPreTokenizer":
            return new BertPreTokenizer(config);
          case "Sequence":
            return new PreTokenizerSequence(config);
          case "Whitespace":
            return new WhitespacePreTokenizer(config);
          case "WhitespaceSplit":
            return new WhitespaceSplit(config);
          case "Metaspace":
            return new MetaspacePreTokenizer(config);
          case "ByteLevel":
            return new ByteLevelPreTokenizer(config);
          case "Split":
            return new SplitPreTokenizer(config);
          case "Punctuation":
            return new PunctuationPreTokenizer(config);
          case "Digits":
            return new DigitsPreTokenizer(config);
          case "Replace":
            return new ReplacePreTokenizer(config);
          default:
            throw new Error(`Unknown PreTokenizer type: ${config.type}`);
        }
      }
      /**
       * Method that should be implemented by subclasses to define the specific pre-tokenization logic.
       *
       * @abstract
       * @param {string} text The text to pre-tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} The pre-tokenized text.
       * @throws {Error} If the method is not implemented in the subclass.
       */
      pre_tokenize_text(text2, options) {
        throw Error("pre_tokenize_text should be implemented in subclass.");
      }
      /**
       * Tokenizes the given text into pre-tokens.
       * @param {string|string[]} text The text or array of texts to pre-tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of pre-tokens.
       */
      pre_tokenize(text2, options) {
        return (Array.isArray(text2) ? text2.map((x) => this.pre_tokenize_text(x, options)) : this.pre_tokenize_text(text2, options)).flat();
      }
      /**
       * Alias for {@link PreTokenizer#pre_tokenize}.
       * @param {string|string[]} text The text or array of texts to pre-tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of pre-tokens.
       */
      _call(text2, options) {
        return this.pre_tokenize(text2, options);
      }
    };
    BertPreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "BertPreTokenizer");
      }
      /**
       * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme
       * similar to that used in the original implementation of BERT.
       * 
       * @param {Object} config The configuration object.
       */
      constructor(config) {
        super();
        this.pattern = new RegExp(`[^\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, "gu");
      }
      /**
       * Tokenizes a single text using the BERT pre-tokenization scheme.
       * 
       * @param {string} text The text to tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens.
       */
      pre_tokenize_text(text2, options) {
        return text2.trim().match(this.pattern) || [];
      }
    };
    ByteLevelPreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "ByteLevelPreTokenizer");
      }
      /**
       * Creates a new instance of the `ByteLevelPreTokenizer` class.
       * @param {Object} config The configuration object.
       */
      constructor(config) {
        super();
        this.config = config;
        this.add_prefix_space = this.config.add_prefix_space;
        this.trim_offsets = this.config.trim_offsets;
        this.use_regex = this.config.use_regex ?? true;
        this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu;
        this.byte_encoder = BYTES_TO_UNICODE;
        this.text_encoder = new TextEncoder();
      }
      /**
       * Tokenizes a single piece of text using byte-level tokenization.
       * @param {string} text The text to tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens.
       */
      pre_tokenize_text(text2, options) {
        if (this.add_prefix_space && !text2.startsWith(" ")) {
          text2 = " " + text2;
        }
        const tokens = this.use_regex ? text2.match(this.pattern) || [] : [text2];
        return tokens.map(
          (token) => Array.from(this.text_encoder.encode(token), (byte) => this.byte_encoder[byte]).join("")
        );
      }
    };
    SplitPreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "SplitPreTokenizer");
      }
      /**
       * @param {Object} config The configuration options for the pre-tokenizer.
       * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
       * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.
       * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.
       * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
       * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.
       */
      constructor(config) {
        super();
        this.config = config;
        this.pattern = createPattern(this.config.pattern, this.config.invert);
      }
      /**
       * Tokenizes text by splitting it using the given pattern.
       * @param {string} text The text to tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens.
       */
      pre_tokenize_text(text2, options) {
        if (this.pattern === null) {
          return [];
        }
        if (this.config.invert) {
          return text2.match(this.pattern) || [];
        } else {
          return regexSplit(text2, this.pattern);
        }
      }
    };
    PunctuationPreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "PunctuationPreTokenizer");
      }
      /**
       * @param {Object} config The configuration options for the pre-tokenizer.
       * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
       */
      constructor(config) {
        super();
        this.config = config;
        this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, "gu");
      }
      /**
       * Tokenizes text by splitting it using the given pattern.
       * @param {string} text The text to tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens.
       */
      pre_tokenize_text(text2, options) {
        return text2.match(this.pattern) || [];
      }
    };
    DigitsPreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "DigitsPreTokenizer");
      }
      /**
       * @param {Object} config The configuration options for the pre-tokenizer.
       * @param {boolean} config.individual_digits Whether to split on individual digits.
       */
      constructor(config) {
        super();
        this.config = config;
        const digit_pattern = `[^\\d]+|\\d${this.config.individual_digits ? "" : "+"}`;
        this.pattern = new RegExp(digit_pattern, "gu");
      }
      /**
       * Tokenizes text by splitting it using the given pattern.
       * @param {string} text The text to tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens.
       */
      pre_tokenize_text(text2, options) {
        return text2.match(this.pattern) || [];
      }
    };
    PostProcessor = class extends Callable {
      static {
        __name(this, "PostProcessor");
      }
      /**
       * @param {Object} config The configuration for the post-processor.
       */
      constructor(config) {
        super();
        this.config = config;
      }
      /**
       * Factory method to create a PostProcessor object from a configuration object.
       *
       * @param {Object} config Configuration object representing a PostProcessor.
       * @returns {PostProcessor} A PostProcessor object created from the given configuration.
       * @throws {Error} If an unknown PostProcessor type is encountered.
       */
      static fromConfig(config) {
        if (config === null) return null;
        switch (config.type) {
          case "TemplateProcessing":
            return new TemplateProcessing(config);
          case "ByteLevel":
            return new ByteLevelPostProcessor(config);
          case "RobertaProcessing":
            return new RobertaProcessing(config);
          case "BertProcessing":
            return new BertProcessing(config);
          case "Sequence":
            return new PostProcessorSequence(config);
          default:
            throw new Error(`Unknown PostProcessor type: ${config.type}`);
        }
      }
      /**
       * Method to be implemented in subclass to apply post-processing on the given tokens.
       *
       * @param {Array} tokens The input tokens to be post-processed.
       * @param {...*} args Additional arguments required by the post-processing logic.
       * @returns {PostProcessedOutput} The post-processed tokens.
       * @throws {Error} If the method is not implemented in subclass.
       */
      post_process(tokens, ...args) {
        throw Error("post_process should be implemented in subclass.");
      }
      /**
       * Alias for {@link PostProcessor#post_process}.
       * @param {Array} tokens The text or array of texts to post-process.
       * @param {...*} args Additional arguments required by the post-processing logic.
       * @returns {PostProcessedOutput} The post-processed tokens.
       */
      _call(tokens, ...args) {
        return this.post_process(tokens, ...args);
      }
    };
    BertProcessing = class extends PostProcessor {
      static {
        __name(this, "BertProcessing");
      }
      /**
       * @param {Object} config The configuration for the post-processor.
       * @param {string[]} config.cls The special tokens to add to the beginning of the input.
       * @param {string[]} config.sep The special tokens to add to the end of the input.
       */
      constructor(config) {
        super(config);
        this.cls = config.cls[0];
        this.sep = config.sep[0];
      }
      /**
       * Adds the special tokens to the beginning and end of the input.
       * @param {string[]} tokens The input tokens.
       * @param {string[]} [tokens_pair=null] An optional second set of input tokens.
       * @returns {PostProcessedOutput} The post-processed tokens with the special tokens added to the beginning and end.
       */
      post_process(tokens, tokens_pair = null, {
        add_special_tokens = true
      } = {}) {
        if (add_special_tokens) {
          tokens = mergeArrays([this.cls], tokens, [this.sep]);
        }
        let token_type_ids = new Array(tokens.length).fill(0);
        if (tokens_pair !== null) {
          const middle = add_special_tokens && this instanceof RobertaProcessing ? [this.sep] : [];
          const after = add_special_tokens ? [this.sep] : [];
          tokens = mergeArrays(tokens, middle, tokens_pair, after);
          token_type_ids = mergeArrays(token_type_ids, new Array(tokens_pair.length + middle.length + after.length).fill(1));
        }
        return { tokens, token_type_ids };
      }
    };
    RobertaProcessing = class extends BertProcessing {
      static {
        __name(this, "RobertaProcessing");
      }
    };
    TemplateProcessing = class extends PostProcessor {
      static {
        __name(this, "TemplateProcessing");
      }
      /**
       * Creates a new instance of `TemplateProcessing`.
       * @param {Object} config The configuration options for the post processor.
       * @param {Array} config.single The template for a single sequence of tokens.
       * @param {Array} config.pair The template for a pair of sequences of tokens.
       */
      constructor(config) {
        super(config);
        this.single = config.single;
        this.pair = config.pair;
      }
      /**
       * Replaces special tokens in the template with actual tokens.
       * @param {string[]} tokens The list of tokens for the first sequence.
       * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
       * @returns {PostProcessedOutput} An object containing the list of tokens with the special tokens replaced with actual tokens.
       */
      post_process(tokens, tokens_pair = null, {
        add_special_tokens = true
      } = {}) {
        const type = tokens_pair === null ? this.single : this.pair;
        let processedTokens = [];
        let types = [];
        for (const item of type) {
          if ("SpecialToken" in item) {
            if (add_special_tokens) {
              processedTokens.push(item.SpecialToken.id);
              types.push(item.SpecialToken.type_id);
            }
          } else if ("Sequence" in item) {
            if (item.Sequence.id === "A") {
              processedTokens = mergeArrays(processedTokens, tokens);
              types = mergeArrays(types, new Array(tokens.length).fill(item.Sequence.type_id));
            } else if (item.Sequence.id === "B") {
              processedTokens = mergeArrays(processedTokens, tokens_pair);
              types = mergeArrays(types, new Array(tokens_pair.length).fill(item.Sequence.type_id));
            }
          }
        }
        return { tokens: processedTokens, token_type_ids: types };
      }
    };
    ByteLevelPostProcessor = class extends PostProcessor {
      static {
        __name(this, "ByteLevelPostProcessor");
      }
      /**
       * Post process the given tokens.
       * @param {string[]} tokens The list of tokens for the first sequence.
       * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
       * @returns {PostProcessedOutput} An object containing the post-processed tokens.
       */
      post_process(tokens, tokens_pair = null) {
        if (tokens_pair) {
          tokens = mergeArrays(tokens, tokens_pair);
        }
        return { tokens };
      }
    };
    PostProcessorSequence = class extends PostProcessor {
      static {
        __name(this, "PostProcessorSequence");
      }
      /**
       * Creates a new instance of PostProcessorSequence.
       * @param {Object} config The configuration object.
       * @param {Object[]} config.processors The list of post-processors to apply.
       */
      constructor(config) {
        super(config);
        this.processors = config.processors.map((x) => PostProcessor.fromConfig(x));
      }
      /**
       * Post process the given tokens.
       * @param {string[]} tokens The list of tokens for the first sequence.
       * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
       * @returns {PostProcessedOutput} An object containing the post-processed tokens.
       */
      post_process(tokens, tokens_pair = null, options = {}) {
        let token_type_ids;
        for (const processor of this.processors) {
          if (processor instanceof ByteLevelPostProcessor) {
            const output = processor.post_process(tokens);
            tokens = output.tokens;
            if (tokens_pair) {
              const pair_output = processor.post_process(tokens_pair);
              tokens_pair = pair_output.tokens;
            }
          } else {
            const output = processor.post_process(tokens, tokens_pair, options);
            tokens = output.tokens;
            token_type_ids = output.token_type_ids;
          }
        }
        return { tokens, token_type_ids };
      }
    };
    Decoder = class extends Callable {
      static {
        __name(this, "Decoder");
      }
      /**
      * Creates an instance of `Decoder`.
      *
      * @param {Object} config The configuration object.
      */
      constructor(config) {
        super();
        this.config = config;
        this.added_tokens = [];
        this.end_of_word_suffix = null;
        this.trim_offsets = config.trim_offsets;
      }
      /**
      * Creates a decoder instance based on the provided configuration.
      *
      * @param {Object} config The configuration object.
      * @returns {Decoder} A decoder instance.
      * @throws {Error} If an unknown decoder type is provided.
      */
      static fromConfig(config) {
        if (config === null) return null;
        switch (config.type) {
          case "WordPiece":
            return new WordPieceDecoder(config);
          case "Metaspace":
            return new MetaspaceDecoder(config);
          case "ByteLevel":
            return new ByteLevelDecoder(config);
          case "Replace":
            return new ReplaceDecoder(config);
          case "ByteFallback":
            return new ByteFallback(config);
          case "Fuse":
            return new FuseDecoder(config);
          case "Strip":
            return new StripDecoder(config);
          case "Sequence":
            return new DecoderSequence(config);
          case "CTC":
            return new CTCDecoder(config);
          case "BPEDecoder":
            return new BPEDecoder(config);
          default:
            throw new Error(`Unknown Decoder type: ${config.type}`);
        }
      }
      /**
      * Calls the `decode` method.
      *
      * @param {string[]} tokens The list of tokens.
      * @returns {string} The decoded string.
      */
      _call(tokens) {
        return this.decode(tokens);
      }
      /**
      * Decodes a list of tokens.
      * @param {string[]} tokens The list of tokens.
      * @returns {string} The decoded string.
      */
      decode(tokens) {
        return this.decode_chain(tokens).join("");
      }
      /**
       * Apply the decoder to a list of tokens.
       * 
       * @param {string[]} tokens The list of tokens.
       * @returns {string[]} The decoded list of tokens.
       * @throws {Error} If the `decode_chain` method is not implemented in the subclass.
       */
      decode_chain(tokens) {
        throw Error("`decode_chain` should be implemented in subclass.");
      }
    };
    ReplaceDecoder = class extends Decoder {
      static {
        __name(this, "ReplaceDecoder");
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        const pattern = createPattern(this.config.pattern);
        return pattern === null ? tokens : tokens.map((token) => token.replaceAll(pattern, this.config.content));
      }
    };
    ByteFallback = class extends Decoder {
      static {
        __name(this, "ByteFallback");
      }
      constructor(config) {
        super(config);
        this.text_decoder = new TextDecoder();
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        const new_tokens = [];
        let previous_byte_tokens = [];
        for (const token of tokens) {
          let bytes = null;
          if (token.length === 6 && token.startsWith("<0x") && token.endsWith(">")) {
            const byte = parseInt(token.slice(3, 5), 16);
            if (!isNaN(byte)) {
              bytes = byte;
            }
          }
          if (bytes !== null) {
            previous_byte_tokens.push(bytes);
          } else {
            if (previous_byte_tokens.length > 0) {
              const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
              new_tokens.push(string);
              previous_byte_tokens = [];
            }
            new_tokens.push(token);
          }
        }
        if (previous_byte_tokens.length > 0) {
          const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
          new_tokens.push(string);
          previous_byte_tokens = [];
        }
        return new_tokens;
      }
    };
    FuseDecoder = class extends Decoder {
      static {
        __name(this, "FuseDecoder");
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return [tokens.join("")];
      }
    };
    StripDecoder = class extends Decoder {
      static {
        __name(this, "StripDecoder");
      }
      constructor(config) {
        super(config);
        this.content = this.config.content;
        this.start = this.config.start;
        this.stop = this.config.stop;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return tokens.map((token) => {
          let start_cut = 0;
          for (let i = 0; i < this.start; ++i) {
            if (token[i] === this.content) {
              start_cut = i + 1;
              continue;
            } else {
              break;
            }
          }
          let stop_cut = token.length;
          for (let i = 0; i < this.stop; ++i) {
            const index = token.length - i - 1;
            if (token[index] === this.content) {
              stop_cut = index;
              continue;
            } else {
              break;
            }
          }
          return token.slice(start_cut, stop_cut);
        });
      }
    };
    WordPieceDecoder = class extends Decoder {
      static {
        __name(this, "WordPieceDecoder");
      }
      /**
       * Creates a new instance of WordPieceDecoder.
       * @param {Object} config The configuration object.
       * @param {string} config.prefix The prefix used for WordPiece encoding.
       * @param {boolean} config.cleanup Whether to cleanup the decoded string.
       */
      constructor(config) {
        super(config);
        this.cleanup = config.cleanup;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return tokens.map((token, i) => {
          if (i !== 0) {
            if (token.startsWith(this.config.prefix)) {
              token = token.replace(this.config.prefix, "");
            } else {
              token = " " + token;
            }
          }
          if (this.cleanup) {
            token = clean_up_tokenization(token);
          }
          return token;
        });
      }
    };
    ByteLevelDecoder = class extends Decoder {
      static {
        __name(this, "ByteLevelDecoder");
      }
      /**
       * Create a `ByteLevelDecoder` object.
       * @param {Object} config Configuration object.
       */
      constructor(config) {
        super(config);
        this.byte_decoder = UNICODE_TO_BYTES;
        this.text_decoder = new TextDecoder("utf-8", {
          fatal: false,
          ignoreBOM: true
        });
        this.end_of_word_suffix = null;
      }
      /**
       * Convert an array of tokens to string by decoding each byte.
       * @param {string[]} tokens Array of tokens to be decoded.
       * @returns {string} The decoded string.
       */
      convert_tokens_to_string(tokens) {
        const text2 = tokens.join("");
        const byteArray = new Uint8Array([...text2].map((c) => this.byte_decoder[c]));
        const decoded_text = this.text_decoder.decode(byteArray);
        return decoded_text;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        const sub_texts = [];
        let current_sub_text = [];
        for (const token of tokens) {
          if (this.added_tokens.find((x) => x.content === token) !== void 0) {
            if (current_sub_text.length > 0) {
              sub_texts.push(this.convert_tokens_to_string(current_sub_text));
              current_sub_text = [];
            }
            sub_texts.push(token);
          } else {
            current_sub_text.push(token);
          }
        }
        if (current_sub_text.length > 0) {
          sub_texts.push(this.convert_tokens_to_string(current_sub_text));
        }
        return sub_texts;
      }
    };
    CTCDecoder = class extends Decoder {
      static {
        __name(this, "CTCDecoder");
      }
      constructor(config) {
        super(config);
        this.pad_token = this.config.pad_token;
        this.word_delimiter_token = this.config.word_delimiter_token;
        this.cleanup = this.config.cleanup;
      }
      /**
       * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.
       * @param {string[]} tokens Array of tokens to be decoded.
       * @returns {string} The decoded string.
       */
      convert_tokens_to_string(tokens) {
        if (tokens.length === 0) return "";
        const grouped_tokens = [tokens[0]];
        for (let i = 1; i < tokens.length; ++i) {
          if (tokens[i] !== grouped_tokens.at(-1)) {
            grouped_tokens.push(tokens[i]);
          }
        }
        const filtered_tokens = grouped_tokens.filter((token) => token !== this.pad_token);
        let text2 = filtered_tokens.join("");
        if (this.cleanup) {
          text2 = clean_up_tokenization(text2).replaceAll(this.word_delimiter_token, " ").trim();
        }
        return text2;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return [this.convert_tokens_to_string(tokens)];
      }
    };
    DecoderSequence = class extends Decoder {
      static {
        __name(this, "DecoderSequence");
      }
      /**
       * Creates a new instance of DecoderSequence.
       * @param {Object} config The configuration object.
       * @param {Object[]} config.decoders The list of decoders to apply.
       */
      constructor(config) {
        super(config);
        this.decoders = config.decoders.map((x) => Decoder.fromConfig(x));
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return this.decoders.reduce((toks, decoder) => {
          return decoder.decode_chain(toks);
        }, tokens);
      }
    };
    BPEDecoder = class extends Decoder {
      static {
        __name(this, "BPEDecoder");
      }
      constructor(config) {
        super(config);
        this.suffix = this.config.suffix;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        return tokens.map((token, i) => {
          return token.replaceAll(this.suffix, i === tokens.length - 1 ? "" : " ");
        });
      }
    };
    VitsDecoder = class extends Decoder {
      static {
        __name(this, "VitsDecoder");
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        let decoded = "";
        for (let i = 1; i < tokens.length; i += 2) {
          decoded += tokens[i];
        }
        return [decoded];
      }
    };
    MetaspacePreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "MetaspacePreTokenizer");
      }
      /**
       * @param {Object} config The configuration object for the MetaspacePreTokenizer.
       * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.
       * @param {string} config.replacement The character to replace spaces with.
       * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.
       * @param {'first'|'never'|'always'} [config.prepend_scheme='always'] The metaspace prepending scheme.
       */
      constructor(config) {
        super();
        this.addPrefixSpace = config.add_prefix_space;
        this.replacement = config.replacement;
        this.strRep = config.str_rep || this.replacement;
        this.prepend_scheme = config.prepend_scheme ?? "always";
      }
      /**
       * This method takes a string, replaces spaces with the replacement character,
       * adds a prefix space if requested, and returns a new list of tokens.
       * @param {string} text The text to pre-tokenize.
       * @param {Object} [options] The options for the pre-tokenization.
       * @param {number} [options.section_index] The index of the section to pre-tokenize.
       * @returns {string[]} A new list of pre-tokenized tokens.
       */
      pre_tokenize_text(text2, {
        section_index = void 0
      } = {}) {
        let normalized = text2.replaceAll(" ", this.strRep);
        if (
          // We add a prefix space if:
          //  (1) The addPrefixSpace option is enabled and the normalized
          //      token does not already start with the replacement character.
          this.addPrefixSpace && !normalized.startsWith(this.replacement) && (this.prepend_scheme === "always" || this.prepend_scheme === "first" && section_index === 0)
        ) {
          normalized = this.strRep + normalized;
        }
        return [normalized];
      }
    };
    MetaspaceDecoder = class extends Decoder {
      static {
        __name(this, "MetaspaceDecoder");
      }
      /**
       * Constructs a new MetaspaceDecoder object.
       * @param {Object} config The configuration object for the MetaspaceDecoder.
       * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.
       * @param {string} config.replacement The string to replace spaces with.
       */
      constructor(config) {
        super(config);
        this.addPrefixSpace = config.add_prefix_space;
        this.replacement = config.replacement;
      }
      /** @type {Decoder['decode_chain']} */
      decode_chain(tokens) {
        const result = [];
        for (let i = 0; i < tokens.length; ++i) {
          let normalized = tokens[i].replaceAll(this.replacement, " ");
          if (this.addPrefixSpace && i == 0 && normalized.startsWith(" ")) {
            normalized = normalized.substring(1);
          }
          result.push(normalized);
        }
        return result;
      }
    };
    Precompiled = class extends Normalizer {
      static {
        __name(this, "Precompiled");
      }
      /**
       * Create a new instance of Precompiled normalizer.
       * @param {Object} config The configuration object.
       * @param {any} config.precompiled_charsmap Precompiled chars mapping.
       */
      constructor(config) {
        super(config);
        this.charsmap = config.precompiled_charsmap;
      }
      /**
       * Normalizes the given text by applying the precompiled charsmap.
       * @param {string} text The text to normalize.
       * @returns {string} The normalized text.
       */
      normalize(text2) {
        text2 = text2.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm, "");
        text2 = text2.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm, " ");
        if (text2.includes("\uFF5E")) {
          const parts = text2.split("\uFF5E");
          text2 = parts.map((part) => part.normalize("NFKC")).join("\uFF5E");
        } else {
          text2 = text2.normalize("NFKC");
        }
        return text2;
      }
    };
    PreTokenizerSequence = class extends PreTokenizer {
      static {
        __name(this, "PreTokenizerSequence");
      }
      /**
       * Creates an instance of PreTokenizerSequence.
       * @param {Object} config The configuration object for the pre-tokenizer sequence.
       * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.
       */
      constructor(config) {
        super();
        this.tokenizers = config.pretokenizers.map((x) => PreTokenizer.fromConfig(x));
      }
      /**
       * Applies each pre-tokenizer in the sequence to the input text in turn.
       * @param {string} text The text to pre-tokenize.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} The pre-tokenized text.
       */
      pre_tokenize_text(text2, options) {
        return this.tokenizers.reduce((preTokenizedText, tokenizer) => {
          return tokenizer.pre_tokenize(preTokenizedText, options);
        }, [text2]);
      }
    };
    WhitespacePreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "WhitespacePreTokenizer");
      }
      /**
       * Creates an instance of WhitespacePreTokenizer.
       * @param {Object} config The configuration object for the pre-tokenizer.
       */
      constructor(config) {
        super();
      }
      /**
       * Pre-tokenizes the input text by splitting it on word boundaries.
       * @param {string} text The text to be pre-tokenized.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
       */
      pre_tokenize_text(text2, options) {
        return text2.match(/\w+|[^\w\s]+/g) || [];
      }
    };
    WhitespaceSplit = class extends PreTokenizer {
      static {
        __name(this, "WhitespaceSplit");
      }
      /**
       * Creates an instance of WhitespaceSplit.
       * @param {Object} config The configuration object for the pre-tokenizer.
       */
      constructor(config) {
        super();
      }
      /**
       * Pre-tokenizes the input text by splitting it on whitespace characters.
       * @param {string} text The text to be pre-tokenized.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
       */
      pre_tokenize_text(text2, options) {
        return whitespace_split(text2);
      }
    };
    ReplacePreTokenizer = class extends PreTokenizer {
      static {
        __name(this, "ReplacePreTokenizer");
      }
      /**
       * @param {Object} config The configuration options for the pre-tokenizer.
       * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
       * @param {string} config.content What to replace the pattern with.
       */
      constructor(config) {
        super();
        this.config = config;
        this.pattern = createPattern(this.config.pattern);
        this.content = this.config.content;
      }
      /**
       * Pre-tokenizes the input text by replacing certain characters.
       * @param {string} text The text to be pre-tokenized.
       * @param {Object} [options] Additional options for the pre-tokenization logic.
       * @returns {string[]} An array of tokens produced by replacing certain characters.
       */
      pre_tokenize_text(text2, options) {
        if (this.pattern === null) {
          return [text2];
        }
        return [text2.replaceAll(this.pattern, this.config.content)];
      }
    };
    SPECIAL_TOKEN_ATTRIBUTES = [
      "bos_token",
      "eos_token",
      "unk_token",
      "sep_token",
      "pad_token",
      "cls_token",
      "mask_token"
      // additional_special_tokens (TODO)
    ];
    __name(padHelper, "padHelper");
    __name(truncateHelper, "truncateHelper");
    PreTrainedTokenizer = class extends Callable {
      static {
        __name(this, "PreTrainedTokenizer");
      }
      return_token_type_ids = false;
      _default_chat_template = `{% for message in messages %}{{'<|im_start|>' + message['role'] + '
' + message['content'] + '<|im_end|>' + '
'}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
' }}{% endif %}`;
      /**
       * Create a new PreTrainedTokenizer instance.
       * @param {Object} tokenizerJSON The JSON of the tokenizer.
       * @param {Object} tokenizerConfig The config of the tokenizer.
       */
      constructor(tokenizerJSON, tokenizerConfig) {
        super();
        this._tokenizer_config = tokenizerConfig;
        this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);
        this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);
        this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);
        this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);
        this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);
        this.special_tokens = [];
        this.all_special_ids = [];
        this.added_tokens = [];
        for (const addedToken of tokenizerJSON.added_tokens) {
          const token = new AddedToken(addedToken);
          this.added_tokens.push(token);
          this.model.tokens_to_ids.set(token.content, token.id);
          this.model.vocab[token.id] = token.content;
          if (token.special) {
            this.special_tokens.push(token.content);
            this.all_special_ids.push(token.id);
          }
        }
        this.additional_special_tokens = tokenizerConfig.additional_special_tokens ?? [];
        this.special_tokens.push(...this.additional_special_tokens);
        this.special_tokens = [...new Set(this.special_tokens)];
        if (this.decoder) {
          this.decoder.added_tokens = this.added_tokens;
          this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;
        }
        this.added_tokens_regex = this.added_tokens.length > 0 ? new RegExp(
          this.added_tokens.map((x) => `${x.lstrip ? "\\s*" : ""}(${escapeRegExp(x.content)})${x.rstrip ? "\\s*" : ""}`).join("|")
        ) : null;
        this.mask_token = this.getToken("mask_token");
        this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);
        this.pad_token = this.getToken("pad_token", "eos_token");
        this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);
        this.sep_token = this.getToken("sep_token");
        this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);
        this.unk_token = this.getToken("unk_token");
        this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token);
        this.model_max_length = tokenizerConfig.model_max_length;
        this.remove_space = tokenizerConfig.remove_space;
        this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;
        this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;
        this.padding_side = "right";
        this.legacy = false;
        this.chat_template = tokenizerConfig.chat_template ?? null;
        if (Array.isArray(this.chat_template)) {
          const chat_template = /* @__PURE__ */ Object.create(null);
          for (const { name: name2, template } of this.chat_template) {
            if (typeof name2 !== "string" || typeof template !== "string") {
              throw new Error('Chat template must be a list of objects with "name" and "template" properties');
            }
            chat_template[name2] = template;
          }
          this.chat_template = chat_template;
        }
        this._compiled_template_cache = /* @__PURE__ */ new Map();
      }
      /**
       * Returns the value of the first matching key in the tokenizer config object.
       * @param {...string} keys One or more keys to search for in the tokenizer config object.
       * @returns {string|null} The value associated with the first matching key, or null if no match is found.
       * @throws {Error} If an object is found for a matching key and its __type property is not "AddedToken".
       */
      getToken(...keys2) {
        for (const key of keys2) {
          const item = this._tokenizer_config[key];
          if (!item) continue;
          if (typeof item === "object") {
            if (item.__type === "AddedToken") {
              return item.content;
            } else {
              throw Error(`Unknown token: ${item}`);
            }
          } else {
            return item;
          }
        }
        return null;
      }
      /**
       * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. 
       * 
       * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.
       * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
       * 
       * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.
       * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.
       */
      static async from_pretrained(pretrained_model_name_or_path, {
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main",
        legacy = null
      } = {}) {
        const info = await loadTokenizer(pretrained_model_name_or_path, {
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision,
          legacy
        });
        return new this(...info);
      }
      /**
       * @typedef {number[]|number[][]|Tensor} BatchEncodingItem
       * 
       * @typedef {Object} BatchEncoding Holds the output of the tokenizer's call function.
       * @property {BatchEncodingItem} input_ids List of token ids to be fed to a model.
       * @property {BatchEncodingItem} attention_mask List of indices specifying which tokens should be attended to by the model.
       * @property {BatchEncodingItem} [token_type_ids] List of token type ids to be fed to a model.
       */
      /**
       * Encode/tokenize the given text(s).
       * @param {string|string[]} text The text to tokenize.
       * @param {Object} options An optional object containing the following properties:
       * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.
       * @param {boolean|'max_length'} [options.padding=false] Whether to pad the input sequences.
       * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
       * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.
       * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.
       * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.
       * @param {boolean} [options.return_token_type_ids=null] Whether to return the token type ids.
       * @returns {BatchEncoding} Object to be passed to the model.
       */
      _call(text2, {
        text_pair = null,
        add_special_tokens = true,
        padding = false,
        truncation = null,
        max_length = null,
        return_tensor = true,
        // Different to HF
        return_token_type_ids = null
      } = {}) {
        const isBatched = Array.isArray(text2);
        let encodedTokens;
        if (isBatched) {
          if (text2.length === 0) {
            throw Error("text array must be non-empty");
          }
          if (text_pair !== null) {
            if (!Array.isArray(text_pair)) {
              throw Error("text_pair must also be an array");
            } else if (text2.length !== text_pair.length) {
              throw Error("text and text_pair must have the same length");
            }
            encodedTokens = text2.map(
              (t, i) => this._encode_plus(t, text_pair[i], { add_special_tokens, return_token_type_ids })
            );
          } else {
            encodedTokens = text2.map((x) => this._encode_plus(x, null, { add_special_tokens, return_token_type_ids }));
          }
        } else {
          if (text2 === null || text2 === void 0) {
            throw Error("text may not be null or undefined");
          }
          if (Array.isArray(text_pair)) {
            throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");
          }
          encodedTokens = [this._encode_plus(text2, text_pair, { add_special_tokens, return_token_type_ids })];
        }
        if (max_length === null) {
          if (padding === "max_length") {
            max_length = this.model_max_length;
          } else {
            max_length = max(encodedTokens.map((x) => x.input_ids.length))[0];
          }
        } else {
          if (!truncation) {
            console.warn(`Truncation was not explicitly activated but \`max_length\` is provided a specific value, please use \`truncation=true\` to explicitly truncate examples to max length.`);
          }
        }
        max_length = Math.min(max_length, this.model_max_length);
        if (padding || truncation) {
          for (let i = 0; i < encodedTokens.length; ++i) {
            if (encodedTokens[i].input_ids.length === max_length) {
              continue;
            } else if (encodedTokens[i].input_ids.length > max_length) {
              if (truncation) {
                truncateHelper(encodedTokens[i], max_length);
              }
            } else {
              if (padding) {
                padHelper(
                  encodedTokens[i],
                  max_length,
                  (key) => key === "input_ids" ? this.pad_token_id : 0,
                  this.padding_side
                );
              }
            }
          }
        }
        const result = {};
        if (return_tensor) {
          if (!(padding && truncation)) {
            if (encodedTokens.some((x) => {
              for (const key of Object.keys(x)) {
                if (x[key].length !== encodedTokens[0][key]?.length) {
                  return true;
                }
              }
              return false;
            })) {
              throw Error(
                "Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length."
              );
            }
          }
          const dims = [encodedTokens.length, encodedTokens[0].input_ids.length];
          for (const key of Object.keys(encodedTokens[0])) {
            result[key] = new Tensor(
              "int64",
              BigInt64Array.from(encodedTokens.flatMap((x) => x[key]).map(BigInt)),
              dims
            );
          }
        } else {
          for (const key of Object.keys(encodedTokens[0])) {
            result[key] = encodedTokens.map((x) => x[key]);
          }
          if (!isBatched) {
            for (const key of Object.keys(result)) {
              result[key] = result[key][0];
            }
          }
        }
        return (
          /** @type {BatchEncoding} */
          result
        );
      }
      /**
       * Encodes a single text using the preprocessor pipeline of the tokenizer.
       *
       * @param {string|null} text The text to encode.
       * @returns {string[]|null} The encoded tokens.
       */
      _encode_text(text2) {
        if (text2 === null) return null;
        const sections = this.added_tokens_regex ? text2.split(this.added_tokens_regex).filter((x) => x) : [text2];
        const tokens = sections.map((x, section_index) => {
          const addedToken = this.added_tokens.find((t) => t.content === x);
          if (addedToken !== void 0) {
            return x;
          } else {
            if (this.remove_space === true) {
              x = x.trim().split(/\s+/).join(" ");
            }
            if (this.do_lowercase_and_remove_accent) {
              x = lowercase_and_remove_accent(x);
            }
            if (this.normalizer !== null) {
              x = this.normalizer(x);
            }
            if (x.length === 0) {
              return [];
            }
            const sectionTokens = this.pre_tokenizer !== null ? this.pre_tokenizer(x, {
              section_index
            }) : [x];
            const tokens2 = this.model(sectionTokens);
            return tokens2;
          }
        }).flat();
        return tokens;
      }
      /**
       * Encodes a single text or a pair of texts using the model's tokenizer.
       *
       * @param {string} text The text to encode.
       * @param {string|null} text_pair The optional second text to encode.
       * @param {Object} options An optional object containing the following properties:
       * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
       * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
       * @returns {EncodingSingle} An object containing the encoded text.
       * @private
       */
      _encode_plus(text2, text_pair = null, {
        add_special_tokens = true,
        return_token_type_ids = null
      } = {}) {
        const tokens = this._encode_text(text2);
        const tokens2 = this._encode_text(text_pair);
        const combinedTokens = this.post_processor ? this.post_processor(tokens, tokens2, { add_special_tokens }) : { tokens: mergeArrays(tokens ?? [], tokens2 ?? []) };
        const input_ids = this.model.convert_tokens_to_ids(combinedTokens.tokens);
        const result = {
          input_ids,
          attention_mask: new Array(input_ids.length).fill(1)
        };
        if ((return_token_type_ids ?? this.return_token_type_ids) && combinedTokens.token_type_ids) {
          result.token_type_ids = combinedTokens.token_type_ids;
        }
        return result;
      }
      /**
       * Encodes a single text or a pair of texts using the model's tokenizer.
       *
       * @param {string} text The text to encode.
       * @param {string|null} text_pair The optional second text to encode.
       * @param {Object} options An optional object containing the following properties:
       * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
       * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
       * @returns {number[]} An array of token IDs representing the encoded text(s).
       */
      encode(text2, text_pair = null, {
        add_special_tokens = true,
        return_token_type_ids = null
      } = {}) {
        const { input_ids } = this._encode_plus(text2, text_pair, {
          add_special_tokens,
          return_token_type_ids
        });
        return input_ids;
      }
      /**
       * Decode a batch of tokenized sequences.
       * @param {number[][]|Tensor} batch List/Tensor of tokenized input sequences.
       * @param {Object} decode_args (Optional) Object with decoding arguments.
       * @returns {string[]} List of decoded sequences.
       */
      batch_decode(batch, decode_args = {}) {
        if (batch instanceof Tensor) {
          batch = batch.tolist();
        }
        return batch.map((x) => this.decode(x, decode_args));
      }
      /**
       * Decodes a sequence of token IDs back to a string.
       *
       * @param {number[]|Tensor} token_ids List/Tensor of token IDs to decode.
       * @param {Object} [decode_args={}]
       * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.
       * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.
       *
       * @returns {string} The decoded string.
       * @throws {Error} If `token_ids` is not a non-empty array of integers.
       */
      decode(token_ids, decode_args = {}) {
        if (token_ids instanceof Tensor) {
          token_ids = prepareTensorForDecode(token_ids);
        }
        if (!Array.isArray(token_ids) || token_ids.length === 0 || !isIntegralNumber(token_ids[0])) {
          throw Error("token_ids must be a non-empty array of integers.");
        }
        return this.decode_single(token_ids, decode_args);
      }
      /**
       * Decode a single list of token ids to a string.
       * @param {number[]} token_ids List of token ids to decode
       * @param {Object} decode_args Optional arguments for decoding
       * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding
       * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.
       * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.
       * @returns {string} The decoded string
       */
      decode_single(token_ids, {
        skip_special_tokens = false,
        clean_up_tokenization_spaces = null
      }) {
        let tokens = this.model.convert_ids_to_tokens(token_ids);
        if (skip_special_tokens) {
          tokens = tokens.filter((x) => !this.special_tokens.includes(x));
        }
        let decoded = this.decoder ? this.decoder(tokens) : tokens.join(" ");
        if (this.decoder && this.decoder.end_of_word_suffix) {
          decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, " ");
          if (skip_special_tokens) {
            decoded = decoded.trim();
          }
        }
        if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {
          decoded = clean_up_tokenization(decoded);
        }
        return decoded;
      }
      get default_chat_template() {
        if (!this._warned_about_chat_template) {
          console.warn(
            "No chat template is defined for this tokenizer - using a default chat template that implements the ChatML format. If the default is not appropriate for your model, please set `tokenizer.chat_template` to an appropriate template. See https://huggingface.co/docs/transformers/main/chat_templating for more information."
          );
          this._warned_about_chat_template = true;
        }
        return this._default_chat_template;
      }
      /**
       * Converts a list of message objects with `"role"` and `"content"` keys to a list of token
       * ids. This method is intended for use with chat models, and will read the tokenizer's chat_template attribute to
       * determine the format and control tokens to use when converting. When chat_template is None, it will fall back
       * to the default_chat_template specified at the class level.
       * 
       * See [here](https://huggingface.co/docs/transformers/chat_templating) for more information.
       * 
       * **Example:** Applying a chat template to a conversation.
       * 
       * ```javascript
       * import { AutoTokenizer } from "@xenova/transformers";
       * 
       * const tokenizer = await AutoTokenizer.from_pretrained("Xenova/mistral-tokenizer-v1");
       * 
       * const chat = [
       *   { "role": "user", "content": "Hello, how are you?" },
       *   { "role": "assistant", "content": "I'm doing great. How can I help you today?" },
       *   { "role": "user", "content": "I'd like to show off how chat templating works!" },
       * ]
       * 
       * const text = tokenizer.apply_chat_template(chat, { tokenize: false });
       * // "<s>[INST] Hello, how are you? [/INST]I'm doing great. How can I help you today?</s> [INST] I'd like to show off how chat templating works! [/INST]"
       * 
       * const input_ids = tokenizer.apply_chat_template(chat, { tokenize: true, return_tensor: false });
       * // [1, 733, 16289, 28793, 22557, 28725, 910, 460, 368, 28804, 733, 28748, 16289, 28793, 28737, 28742, 28719, 2548, 1598, 28723, 1602, 541, 315, 1316, 368, 3154, 28804, 2, 28705, 733, 16289, 28793, 315, 28742, 28715, 737, 298, 1347, 805, 910, 10706, 5752, 1077, 3791, 28808, 733, 28748, 16289, 28793]
       * ```
       * 
       * @param {Message[]} conversation A list of message objects with `"role"` and `"content"` keys.
       * @param {Object} options An optional object containing the following properties:
       * @param {string} [options.chat_template=null] A Jinja template to use for this conversion. If
       * this is not passed, the model's default chat template will be used instead.
       * @param {boolean} [options.add_generation_prompt=false] Whether to end the prompt with the token(s) that indicate
       * the start of an assistant message. This is useful when you want to generate a response from the model.
       * Note that this argument will be passed to the chat template, and so it must be supported in the
       * template for this argument to have any effect.
       * @param {boolean} [options.tokenize=true] Whether to tokenize the output. If false, the output will be a string.
       * @param {boolean} [options.padding=false] Whether to pad sequences to the maximum length. Has no effect if tokenize is false.
       * @param {boolean} [options.truncation=false] Whether to truncate sequences to the maximum length. Has no effect if tokenize is false.
       * @param {number} [options.max_length=null] Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is false.
       * If not specified, the tokenizer's `max_length` attribute will be used as a default.
       * @param {boolean} [options.return_tensor=true] Whether to return the output as a Tensor or an Array. Has no effect if tokenize is false.
       * @param {Object} [options.tokenizer_kwargs={}] Additional options to pass to the tokenizer.
       * @returns {string | Tensor | number[]| number[][]} The tokenized output.
       */
      apply_chat_template(conversation, {
        chat_template = null,
        add_generation_prompt = false,
        tokenize: tokenize2 = true,
        padding = false,
        truncation = false,
        max_length = null,
        return_tensor = true,
        tokenizer_kwargs = {},
        ...kwargs
      } = {}) {
        if (this.chat_template && typeof this.chat_template === "object" || this.chat_template === null && this.default_chat_template && typeof this.default_chat_template === "object") {
          const template_dict = this.chat_template ?? this.default_chat_template;
          if (chat_template !== null && Object.hasOwn(template_dict, chat_template)) {
            chat_template = template_dict[chat_template];
          } else if (chat_template === null && "default" in template_dict) {
            chat_template = template_dict["default"];
          } else if (chat_template === null) {
            throw Error(
              `This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(template_dict).sort()}.`
            );
          }
        } else {
          chat_template ??= this.chat_template ?? this.default_chat_template;
        }
        if (typeof chat_template !== "string") {
          throw Error(`chat_template must be a string, but got ${typeof chat_template}`);
        }
        let compiledTemplate = this._compiled_template_cache.get(chat_template);
        if (compiledTemplate === void 0) {
          compiledTemplate = new Template(chat_template);
          this._compiled_template_cache.set(chat_template, compiledTemplate);
        }
        const special_tokens_map = /* @__PURE__ */ Object.create(null);
        for (const key of SPECIAL_TOKEN_ATTRIBUTES) {
          const value = this.getToken(key);
          if (value) {
            special_tokens_map[key] = value;
          }
        }
        const rendered = compiledTemplate.render({
          messages: conversation,
          add_generation_prompt,
          ...special_tokens_map,
          ...kwargs
        });
        if (tokenize2) {
          return this._call(rendered, {
            add_special_tokens: false,
            padding,
            truncation,
            max_length,
            return_tensor,
            ...tokenizer_kwargs
          }).input_ids;
        }
        return rendered;
      }
    };
    BertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "BertTokenizer");
      }
      return_token_type_ids = true;
    };
    AlbertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "AlbertTokenizer");
      }
      return_token_type_ids = true;
    };
    MobileBertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "MobileBertTokenizer");
      }
      return_token_type_ids = true;
    };
    SqueezeBertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "SqueezeBertTokenizer");
      }
      return_token_type_ids = true;
    };
    DebertaTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "DebertaTokenizer");
      }
      return_token_type_ids = true;
    };
    DebertaV2Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "DebertaV2Tokenizer");
      }
      return_token_type_ids = true;
    };
    HerbertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "HerbertTokenizer");
      }
      return_token_type_ids = true;
    };
    ConvBertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "ConvBertTokenizer");
      }
      return_token_type_ids = true;
    };
    RoFormerTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "RoFormerTokenizer");
      }
      return_token_type_ids = true;
    };
    DistilBertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "DistilBertTokenizer");
      }
    };
    CamembertTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "CamembertTokenizer");
      }
    };
    XLMTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "XLMTokenizer");
      }
      return_token_type_ids = true;
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
      }
    };
    ElectraTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "ElectraTokenizer");
      }
      return_token_type_ids = true;
    };
    T5Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "T5Tokenizer");
      }
    };
    GPT2Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "GPT2Tokenizer");
      }
      _default_chat_template = `{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}`;
    };
    BartTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "BartTokenizer");
      }
    };
    MBartTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "MBartTokenizer");
      }
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;
        this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));
        this.lang_to_token = (x) => x;
      }
      /**
       * Helper function to build translation inputs for an `MBartTokenizer`.
       * @param {string|string[]} raw_inputs The text to tokenize.
       * @param {Object} tokenizer_options Options to be sent to the tokenizer
       * @param {Object} generate_kwargs Generation options.
       * @returns {Object} Object to be passed to the model.
       */
      _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
      }
    };
    MBart50Tokenizer = class extends MBartTokenizer {
      static {
        __name(this, "MBart50Tokenizer");
      }
    };
    RobertaTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "RobertaTokenizer");
      }
    };
    BloomTokenizer = class extends GPT2Tokenizer {
      static {
        __name(this, "BloomTokenizer");
      }
      // NOTE: `GPT2Tokenizer` to get the correct chat template
      constructor(tokenizerJSON, tokenizerConfig) {
        const splitChars = ".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C";
        const patternObject = tokenizerJSON.pre_tokenizer?.pretokenizers[0]?.pattern;
        if (patternObject && patternObject.Regex === ` ?[^(\\s|[${splitChars}])]+`) {
          patternObject.Regex = ` ?[^\\s${splitChars}]+`;
        }
        super(tokenizerJSON, tokenizerConfig);
      }
    };
    SPIECE_UNDERLINE = "\u2581";
    LlamaTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "LlamaTokenizer");
      }
      _default_chat_template = `{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% elif USE_DEFAULT_PROMPT == true and not '<<SYS>>' in messages[0]['content'] %}{% set loop_messages = messages %}{% set system_message = 'DEFAULT_SYSTEM_MESSAGE' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if loop.index0 == 0 and system_message != false %}{% set content = '<<SYS>>
' + system_message + '
<</SYS>>

' + message['content'] %}{% else %}{% set content = message['content'] %}{% endif %}{% if message['role'] == 'user' %}{{ bos_token + '[INST] ' + content.strip() + ' [/INST]' }}{% elif message['role'] == 'system' %}{{ '<<SYS>>
' + content.strip() + '
<</SYS>>

' }}{% elif message['role'] == 'assistant' %}{{ ' '  + content.strip() + ' ' + eos_token }}{% endif %}{% endfor %}`;
      DEFAULT_SYSTEM_PROMPT = "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.\n\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.";
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.use_default_system_prompt = tokenizerConfig.use_default_system_prompt ?? false;
        this.legacy = tokenizerConfig.legacy ?? true;
        if (!this.legacy) {
          this.normalizer = null;
          this.pre_tokenizer = new MetaspacePreTokenizer({
            replacement: SPIECE_UNDERLINE,
            add_prefix_space: true,
            prepend_scheme: "first"
          });
        }
      }
      /**
       * Helper function to handle legacy encoding of SPM tokenizers.
       * Adapted from https://github.com/huggingface/transformers/blob/e6dcf8abd6f65bb4b6dfc1831b20d9ba49ce00e2/src/transformers/models/t5/tokenization_t5.py#L374-L387
       * @param {string} text The text to encode.
       * @returns {string[]} The encoded tokens.
       */
      _encode_text(text2) {
        if (text2 === null) return null;
        if (this.legacy || text2.length === 0) {
          return super._encode_text(text2);
        }
        let tokens = super._encode_text(SPIECE_UNDERLINE + text2.replaceAll(SPIECE_UNDERLINE, " "));
        if (tokens.length > 1 && tokens[0] === SPIECE_UNDERLINE && this.special_tokens.includes(tokens[1])) {
          tokens = tokens.slice(1);
        }
        return tokens;
      }
      get default_chat_template() {
        return super.default_chat_template.replaceAll("USE_DEFAULT_PROMPT", this.use_default_system_prompt ? "true" : "false").replaceAll("DEFAULT_SYSTEM_MESSAGE", this.DEFAULT_SYSTEM_PROMPT.replaceAll("\n", "\\n").replaceAll("'", "\\'"));
      }
    };
    CodeLlamaTokenizer = class extends LlamaTokenizer {
      static {
        __name(this, "CodeLlamaTokenizer");
      }
    };
    XLMRobertaTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "XLMRobertaTokenizer");
      }
    };
    MPNetTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "MPNetTokenizer");
      }
    };
    FalconTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "FalconTokenizer");
      }
    };
    GPTNeoXTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "GPTNeoXTokenizer");
      }
    };
    EsmTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "EsmTokenizer");
      }
    };
    Qwen2Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "Qwen2Tokenizer");
      }
    };
    GemmaTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "GemmaTokenizer");
      }
      _default_chat_template = "{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '\n' + message['content'] | trim + '<end_of_turn>\n' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model\n'}}{% endif %}";
    };
    Grok1Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "Grok1Tokenizer");
      }
    };
    __name(_build_translation_inputs, "_build_translation_inputs");
    NllbTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "NllbTokenizer");
      }
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;
        this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));
        this.lang_to_token = (x) => x;
      }
      /**
       * Helper function to build translation inputs for an `NllbTokenizer`.
       * @param {string|string[]} raw_inputs The text to tokenize.
       * @param {Object} tokenizer_options Options to be sent to the tokenizer
       * @param {Object} generate_kwargs Generation options.
       * @returns {Object} Object to be passed to the model.
       */
      _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
      }
    };
    M2M100Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "M2M100Tokenizer");
      }
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.languageRegex = /^__[a-z]{2,3}__$/;
        this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x)).map((x) => x.slice(2, -2));
        this.lang_to_token = (x) => `__${x}__`;
      }
      /**
       * Helper function to build translation inputs for an `M2M100Tokenizer`.
       * @param {string|string[]} raw_inputs The text to tokenize.
       * @param {Object} tokenizer_options Options to be sent to the tokenizer
       * @param {Object} generate_kwargs Generation options.
       * @returns {Object} Object to be passed to the model.
       */
      _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
      }
    };
    WHISPER_LANGUAGES = [
      ["en", "english"],
      ["zh", "chinese"],
      ["de", "german"],
      ["es", "spanish"],
      ["ru", "russian"],
      ["ko", "korean"],
      ["fr", "french"],
      ["ja", "japanese"],
      ["pt", "portuguese"],
      ["tr", "turkish"],
      ["pl", "polish"],
      ["ca", "catalan"],
      ["nl", "dutch"],
      ["ar", "arabic"],
      ["sv", "swedish"],
      ["it", "italian"],
      ["id", "indonesian"],
      ["hi", "hindi"],
      ["fi", "finnish"],
      ["vi", "vietnamese"],
      ["he", "hebrew"],
      ["uk", "ukrainian"],
      ["el", "greek"],
      ["ms", "malay"],
      ["cs", "czech"],
      ["ro", "romanian"],
      ["da", "danish"],
      ["hu", "hungarian"],
      ["ta", "tamil"],
      ["no", "norwegian"],
      ["th", "thai"],
      ["ur", "urdu"],
      ["hr", "croatian"],
      ["bg", "bulgarian"],
      ["lt", "lithuanian"],
      ["la", "latin"],
      ["mi", "maori"],
      ["ml", "malayalam"],
      ["cy", "welsh"],
      ["sk", "slovak"],
      ["te", "telugu"],
      ["fa", "persian"],
      ["lv", "latvian"],
      ["bn", "bengali"],
      ["sr", "serbian"],
      ["az", "azerbaijani"],
      ["sl", "slovenian"],
      ["kn", "kannada"],
      ["et", "estonian"],
      ["mk", "macedonian"],
      ["br", "breton"],
      ["eu", "basque"],
      ["is", "icelandic"],
      ["hy", "armenian"],
      ["ne", "nepali"],
      ["mn", "mongolian"],
      ["bs", "bosnian"],
      ["kk", "kazakh"],
      ["sq", "albanian"],
      ["sw", "swahili"],
      ["gl", "galician"],
      ["mr", "marathi"],
      ["pa", "punjabi"],
      ["si", "sinhala"],
      ["km", "khmer"],
      ["sn", "shona"],
      ["yo", "yoruba"],
      ["so", "somali"],
      ["af", "afrikaans"],
      ["oc", "occitan"],
      ["ka", "georgian"],
      ["be", "belarusian"],
      ["tg", "tajik"],
      ["sd", "sindhi"],
      ["gu", "gujarati"],
      ["am", "amharic"],
      ["yi", "yiddish"],
      ["lo", "lao"],
      ["uz", "uzbek"],
      ["fo", "faroese"],
      ["ht", "haitian creole"],
      ["ps", "pashto"],
      ["tk", "turkmen"],
      ["nn", "nynorsk"],
      ["mt", "maltese"],
      ["sa", "sanskrit"],
      ["lb", "luxembourgish"],
      ["my", "myanmar"],
      ["bo", "tibetan"],
      ["tl", "tagalog"],
      ["mg", "malagasy"],
      ["as", "assamese"],
      ["tt", "tatar"],
      ["haw", "hawaiian"],
      ["ln", "lingala"],
      ["ha", "hausa"],
      ["ba", "bashkir"],
      ["jw", "javanese"],
      ["su", "sundanese"]
    ];
    WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);
    WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([
      ...WHISPER_LANGUAGES.map(([k, v]) => [v, k]),
      ...[
        ["burmese", "my"],
        ["valencian", "ca"],
        ["flemish", "nl"],
        ["haitian", "ht"],
        ["letzeburgesch", "lb"],
        ["pushto", "ps"],
        ["panjabi", "pa"],
        ["moldavian", "ro"],
        ["moldovan", "ro"],
        ["sinhalese", "si"],
        ["castilian", "es"]
      ]
    ]);
    WhisperTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "WhisperTokenizer");
      }
      _default_chat_template = `{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}`;
      /**
       * Decodes automatic speech recognition (ASR) sequences.
       * @param {Array<{tokens: number[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.
       * @param {Object} options The options to use for decoding.
       * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.
       */
      _decode_asr(sequences, {
        return_timestamps = false,
        return_language = false,
        time_precision = null,
        force_full_sequences = true
      } = {}) {
        if (time_precision === null) {
          throw Error("Must specify time_precision");
        }
        let last_language = null;
        const returnWordTimestamps = return_timestamps === "word";
        function new_chunk() {
          return { "language": last_language, "timestamp": [null, null], "text": "" };
        }
        __name(new_chunk, "new_chunk");
        const chunks = [];
        let chunk = new_chunk();
        let time_offset = 0;
        const timestamp_begin = this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0] + 1;
        let previous_tokens = [];
        let previous_token_timestamps = [];
        let skip = false;
        let right_stride_start = null;
        const all_special_ids = new Set(this.all_special_ids);
        for (const output of sequences) {
          const token_ids = output.tokens;
          const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;
          let last_timestamp = null;
          let first_timestamp = timestamp_begin;
          if ("stride" in output) {
            const [chunk_len, stride_left, stride_right] = output.stride;
            time_offset -= stride_left;
            right_stride_start = chunk_len - stride_right;
            if (stride_left) {
              first_timestamp = stride_left / time_precision + timestamp_begin;
            }
            if (stride_right) {
              for (let i = token_ids.length - 1; i >= 0; --i) {
                const token = token_ids[i];
                if (token >= timestamp_begin) {
                  if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {
                    break;
                  }
                  last_timestamp = token;
                }
              }
            }
          }
          let current_tokens = [];
          let current_token_timestamps = [];
          for (let i = 0; i < token_ids.length; ++i) {
            const token = token_ids[i];
            if (all_special_ids.has(token)) {
              const text2 = this.decode([token]);
              const language = WHISPER_LANGUAGE_MAPPING.get(text2.slice(2, -2));
              if (language !== void 0) {
                if (last_language !== null && language !== last_language && !return_timestamps) {
                  previous_tokens.push(current_tokens);
                  const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];
                  const resolved_text = this.decode(resolved_tokens);
                  chunk.text = resolved_text;
                  chunks.push(chunk);
                  previous_tokens = [];
                  current_tokens = [];
                  chunk = new_chunk();
                }
                last_language = chunk.language = language;
              } else {
              }
            } else if (token >= timestamp_begin) {
              const time2 = (token - timestamp_begin) * time_precision + time_offset;
              const rounded_time = round(time2, 2);
              if (last_timestamp !== null && token >= last_timestamp) {
                skip = true;
              } else if (skip || previous_tokens.length > 0 && token < first_timestamp) {
                skip = false;
              } else if (chunk.timestamp[0] === null) {
                chunk.timestamp[0] = rounded_time;
              } else {
                if (rounded_time === chunk.timestamp[0]) {
                } else {
                  chunk.timestamp[1] = rounded_time;
                  previous_tokens.push(current_tokens);
                  if (returnWordTimestamps) {
                    previous_token_timestamps.push(current_token_timestamps);
                  }
                  const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(
                    previous_tokens,
                    previous_token_timestamps
                  );
                  const resolved_text = this.decode(resolved_tokens);
                  chunk.text = resolved_text;
                  if (returnWordTimestamps) {
                    chunk.words = this.collateWordTimestamps(
                      resolved_tokens,
                      resolved_token_timestamps,
                      last_language
                    );
                  }
                  chunks.push(chunk);
                  previous_tokens = [];
                  current_tokens = [];
                  previous_token_timestamps = [];
                  current_token_timestamps = [];
                  chunk = new_chunk();
                }
              }
            } else {
              current_tokens.push(token);
              if (returnWordTimestamps) {
                let start_time = round(token_timestamps[i] + time_offset, 2);
                let end_time;
                if (i + 1 < token_timestamps.length) {
                  end_time = round(token_timestamps[i + 1] + time_offset, 2);
                } else {
                  end_time = null;
                }
                current_token_timestamps.push([start_time, end_time]);
              }
            }
          }
          if ("stride" in output) {
            const [chunk_len, stride_left, stride_right] = output.stride;
            time_offset += chunk_len - stride_right;
          }
          if (current_tokens.length > 0) {
            previous_tokens.push(current_tokens);
            if (returnWordTimestamps) {
              previous_token_timestamps.push(current_token_timestamps);
            }
          } else if (previous_tokens.every((p) => p.length === 0)) {
            chunk = new_chunk();
            previous_tokens = [];
            current_tokens = [];
            previous_token_timestamps = [];
            current_token_timestamps = [];
          }
        }
        if (previous_tokens.length > 0) {
          if (force_full_sequences && return_timestamps) {
            throw new Error(
              "Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation."
            );
          }
          const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);
          const resolved_text = this.decode(resolved_tokens);
          chunk.text = resolved_text;
          if (returnWordTimestamps) {
            chunk.words = this.collateWordTimestamps(
              resolved_tokens,
              resolved_token_timestamps,
              last_language
            );
          }
          chunks.push(chunk);
        }
        let optional = /* @__PURE__ */ Object.create(null);
        const full_text = chunks.map((chunk2) => chunk2.text).join("");
        if (return_timestamps || return_language) {
          for (let i = 0; i < chunks.length; ++i) {
            const chunk2 = chunks[i];
            if (!return_timestamps) {
              delete chunk2["timestamp"];
            }
            if (!return_language) {
              delete chunk2["language"];
            }
          }
          if (returnWordTimestamps) {
            const new_chunks = [];
            for (const chunk2 of chunks) {
              for (const word of chunk2.words) {
                new_chunks.push(word);
              }
            }
            optional = { "chunks": new_chunks };
          } else {
            optional = { "chunks": chunks };
          }
        }
        return [full_text, optional];
      }
      /**
       * Finds the longest common sequence among the provided sequences.
       * @param {number[][]} sequences An array of sequences of token ids to compare.
       * @returns {number[][]} The longest common sequence found.
       * @throws {Error} If there is a bug within the function.
       * @private
       */
      findLongestCommonSequence(sequences, token_timestamp_sequences = null) {
        let leftSequence = sequences[0];
        let leftLength = leftSequence.length;
        let totalSequence = [];
        const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;
        let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;
        let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;
        for (let i = 1; i < sequences.length; ++i) {
          const rightSequence = sequences[i];
          let max2 = 0;
          let maxIndices = [leftLength, leftLength, 0, 0];
          const rightLength = rightSequence.length;
          for (let j = 1; j < leftLength + rightLength; ++j) {
            const eps = j / 1e4;
            const leftStart2 = Math.max(0, leftLength - j);
            const leftStop2 = Math.min(leftLength, leftLength + rightLength - j);
            const left = leftSequence.slice(leftStart2, leftStop2);
            const rightStart2 = Math.max(0, j - leftLength);
            const rightStop2 = Math.min(rightLength, j);
            const right = rightSequence.slice(rightStart2, rightStop2);
            if (left.length !== right.length) {
              throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");
            }
            const matches = left.filter((elem, idx) => elem === right[idx]).length;
            const matching = matches / j + eps;
            if (matches > 1 && matching > max2) {
              max2 = matching;
              maxIndices = [leftStart2, leftStop2, rightStart2, rightStop2];
            }
          }
          const [leftStart, leftStop, rightStart, rightStop] = maxIndices;
          const leftMid = Math.floor((leftStop + leftStart) / 2);
          const rightMid = Math.floor((rightStop + rightStart) / 2);
          totalSequence.push(...leftSequence.slice(0, leftMid));
          leftSequence = rightSequence.slice(rightMid);
          leftLength = leftSequence.length;
          if (use_token_timestamp_sequences) {
            total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));
            left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);
          }
        }
        totalSequence.push(...leftSequence);
        if (use_token_timestamp_sequences) {
          total_token_timestamp_sequence.push(...left_token_timestamp_sequence);
          return [totalSequence, total_token_timestamp_sequence];
        } else {
          return [totalSequence, []];
        }
      }
      /** @private */
      collateWordTimestamps(tokens, token_timestamps, language) {
        const [words, _, token_indices] = this.combineTokensIntoWords(tokens, language);
        const timings = [];
        for (let i = 0; i < words.length; ++i) {
          const indices = token_indices[i];
          timings.push({
            text: words[i],
            timestamp: [
              token_timestamps[indices.at(0)][0],
              token_timestamps[indices.at(-1)][1]
            ]
          });
        }
        return timings;
      }
      /**
       * Groups tokens by word. Returns a tuple containing a list of strings with the words,
       * and a list of `token_id` sequences with the tokens making up each word.
       * @param {number[]} tokens 
       * @param {string} [language] 
       * @param {string} prepend_punctionations 
       * @param {string} append_punctuations 
       * 
       * @private
       */
      combineTokensIntoWords(tokens, language, prepend_punctionations = `"'\u201C\xA1\xBF([{-`, append_punctuations = `"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`) {
        language = language ?? "english";
        let words, word_tokens, token_indices;
        if (["chinese", "japanese", "thai", "lao", "myanmar"].includes(language)) {
          [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens);
        } else {
          [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens);
        }
        return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);
      }
      /** @type {PreTrainedTokenizer['decode']} */
      decode(token_ids, decode_args) {
        let text2;
        if (decode_args && decode_args.decode_with_timestamps) {
          if (token_ids instanceof Tensor) {
            token_ids = prepareTensorForDecode(token_ids);
          }
          text2 = this.decodeWithTimestamps(token_ids, decode_args);
        } else {
          text2 = super.decode(token_ids, decode_args);
        }
        return text2;
      }
      /**
       * @param {number[]} token_ids List of token IDs to decode.
       * @param {Object} decode_args Optional arguments for decoding
       * @private
       */
      decodeWithTimestamps(token_ids, decode_args) {
        const time_precision = decode_args?.time_precision ?? 0.02;
        const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;
        let outputs = [[]];
        for (const token of token_ids) {
          if (token >= timestamp_begin) {
            const timestamp = round((token - timestamp_begin) * time_precision, 2);
            outputs.push(`<|${timestamp}|>`);
            outputs.push([]);
          } else {
            outputs[outputs.length - 1].push(token);
          }
        }
        outputs = outputs.map(
          (s) => {
            if (typeof s === "string") {
              return s;
            } else {
              return super.decode(s, decode_args);
            }
          }
        );
        return outputs.join("");
      }
      /**
       * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.
       * @param {number[]} tokens 
       * @returns {*}
       * @private
       */
      splitTokensOnUnicode(tokens) {
        const decoded_full = this.decode(tokens, {
          // @ts-ignore
          decode_with_timestamps: true
        });
        const replacement_char = "\uFFFD";
        const words = [];
        const word_tokens = [];
        const token_indices = [];
        let current_tokens = [];
        let current_indices = [];
        let unicode_offset = 0;
        for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {
          const token = tokens[token_idx];
          current_tokens.push(token);
          current_indices.push(token_idx);
          const decoded = this.decode(current_tokens, {
            // @ts-ignore
            decode_with_timestamps: true
          });
          if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {
            words.push(decoded);
            word_tokens.push(current_tokens);
            token_indices.push(current_indices);
            current_tokens = [];
            current_indices = [];
            unicode_offset += decoded.length;
          }
        }
        return [words, word_tokens, token_indices];
      }
      /**
       * Combine tokens into words by splitting at whitespace and punctuation tokens.
       * @param {number[]} tokens 
       * @private
       */
      splitTokensOnSpaces(tokens) {
        const [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);
        const words = [];
        const word_tokens = [];
        const token_indices = [];
        const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, "gu");
        for (let i = 0; i < subwords.length; ++i) {
          const subword = subwords[i];
          const subword_tokens = subword_tokens_list[i];
          const subword_indices = subword_indices_list[i];
          const special = subword_tokens[0] >= this.model.tokens_to_ids.get("<|endoftext|>");
          const with_space = subword.startsWith(" ");
          const trimmed = subword.trim();
          const punctuation = punctuationRegex.test(trimmed);
          if (special || with_space || punctuation || words.length === 0) {
            words.push(subword);
            word_tokens.push(subword_tokens);
            token_indices.push(subword_indices);
          } else {
            const ix = words.length - 1;
            words[ix] += subword;
            word_tokens[ix].push(...subword_tokens);
            token_indices[ix].push(...subword_indices);
          }
        }
        return [words, word_tokens, token_indices];
      }
      /**
       * Merges punctuation tokens with neighboring words.
       * @param {string[]} words 
       * @param {number[][]} tokens 
       * @param {number[][]} indices 
       * @param {string} prepended 
       * @param {string} appended 
       * @private
       */
      mergePunctuations(words, tokens, indices, prepended, appended) {
        const newWords = structuredClone(words);
        const newTokens = structuredClone(tokens);
        const newIndices = structuredClone(indices);
        let i = newWords.length - 2;
        let j = newWords.length - 1;
        while (i >= 0) {
          if (newWords[i].startsWith(" ") && prepended.includes(newWords[i].trim())) {
            newWords[j] = newWords[i] + newWords[j];
            newTokens[j] = mergeArrays(newTokens[i], newTokens[j]);
            newIndices[j] = mergeArrays(newIndices[i], newIndices[j]);
            newWords[i] = "";
            newTokens[i] = [];
            newIndices[i] = [];
          } else {
            j = i;
          }
          --i;
        }
        i = 0;
        j = 1;
        while (j < newWords.length) {
          if (!newWords[i].endsWith(" ") && appended.includes(newWords[j])) {
            newWords[i] += newWords[j];
            newTokens[i] = mergeArrays(newTokens[i], newTokens[j]);
            newIndices[i] = mergeArrays(newIndices[i], newIndices[j]);
            newWords[j] = "";
            newTokens[j] = [];
            newIndices[j] = [];
          } else {
            i = j;
          }
          ++j;
        }
        return [
          newWords.filter((x) => x),
          newTokens.filter((x) => x.length > 0),
          newIndices.filter((x) => x.length > 0)
        ];
      }
      /**
       * Helper function to build translation inputs for a `WhisperTokenizer`,
       * depending on the language, task, and whether to predict timestamp tokens.
       * 
       * Used to override the prefix tokens appended to the start of the label sequence.
       * 
       * **Example: Get ids for a language**
       * ```javascript
       * // instantiate the tokenizer and set the prefix token to Spanish
       * const tokenizer = await WhisperTokenizer.from_pretrained('Xenova/whisper-tiny');
       * const forced_decoder_ids = tokenizer.get_decoder_prompt_ids({ language: 'spanish' });
       * // [(1, 50262), (2, 50363)]
       * ```
       * 
       * @param {Object} options Options to generate the decoder prompt.
       * @param {string} [options.language] The language of the transcription text.
       * The corresponding language id token is appended to the start of the sequence for multilingual
       * speech recognition and speech translation tasks, e.g. for "Spanish" the token "<|es|>" is appended
       * to the start of sequence.
       * @param {string} [options.task] Task identifier to append at the start of sequence (if any).
       * This should be used for mulitlingual fine-tuning, with "transcribe" for speech recognition and
       * "translate" for speech translation.
       * @param {boolean} [options.no_timestamps] Whether to add the <|notimestamps|> token at the start of the sequence.
       * @returns {number[][]} The decoder prompt ids.
       */
      get_decoder_prompt_ids({
        language = null,
        task = null,
        no_timestamps = true
      } = {}) {
        const forced_decoder_ids = [];
        if (language) {
          language = language.toLowerCase();
          let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);
          if (language_code === void 0) {
            if (WHISPER_LANGUAGE_MAPPING.has(language)) {
              language_code = language;
            } else {
              const is_language_code = language.length === 2;
              const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();
              throw new Error(`Language "${language}" is not supported. Must be one of: ${JSON.stringify(langs)}`);
            }
          }
          const language_token_id = this.model.tokens_to_ids.get(`<|${language_code}|>`);
          if (language_token_id === void 0) {
            throw new Error(`Unable to find language "${language_code}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);
          }
          forced_decoder_ids.push(language_token_id);
        } else {
          forced_decoder_ids.push(null);
        }
        if (task) {
          task = task.toLowerCase();
          if (task !== "transcribe" && task !== "translate") {
            throw new Error(`Task "${task}" is not supported. Must be one of: ["transcribe", "translate"]`);
          }
          const task_token_id = this.model.tokens_to_ids.get(`<|${task}|>`);
          if (task_token_id === void 0) {
            throw new Error(`Unable to find task "${task}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);
          }
          forced_decoder_ids.push(task_token_id);
        } else {
          forced_decoder_ids.push(null);
        }
        if (no_timestamps) {
          const no_timestamps_id = this.model.tokens_to_ids.get(`<|notimestamps|>`);
          if (no_timestamps_id === void 0) {
            throw new Error('Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.');
          }
          forced_decoder_ids.push(no_timestamps_id);
        }
        return forced_decoder_ids.map((x, i) => [i + 1, x]).filter((x) => x[1] !== null);
      }
    };
    CodeGenTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "CodeGenTokenizer");
      }
    };
    CLIPTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "CLIPTokenizer");
      }
    };
    SiglipTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "SiglipTokenizer");
      }
    };
    MarianTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "MarianTokenizer");
      }
      /**
       * Create a new MarianTokenizer instance.
       * @param {Object} tokenizerJSON The JSON of the tokenizer.
       * @param {Object} tokenizerConfig The config of the tokenizer.
       */
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.languageRegex = /^(>>\w+<<)\s*/g;
        this.supported_language_codes = this.model.vocab.filter(
          (x) => this.languageRegex.test(x)
        );
        console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
      }
      /**
       * Encodes a single text. Overriding this method is necessary since the language codes
       * must be removed before encoding with sentencepiece model.
       * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213
       *
       * @param {string|null} text The text to encode.
       * @returns {Array} The encoded tokens.
       */
      _encode_text(text2) {
        if (text2 === null) return null;
        const [matchInfo, ...remainder] = text2.trim().split(this.languageRegex);
        if (remainder.length === 0) {
          return super._encode_text(matchInfo);
        } else if (remainder.length === 2) {
          const [language, text3] = remainder;
          if (!this.supported_language_codes.includes(language)) {
            console.warn(`Unsupported language code "${language}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`);
          }
          return mergeArrays([language], super._encode_text(text3));
        }
      }
    };
    Wav2Vec2CTCTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "Wav2Vec2CTCTokenizer");
      }
    };
    BlenderbotTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "BlenderbotTokenizer");
      }
      _default_chat_template = `{% for message in messages %}{% if message['role'] == 'user' %}{{ ' ' }}{% endif %}{{ message['content'] }}{% if not loop.last %}{{ '  ' }}{% endif %}{% endfor %}{{ eos_token }}`;
    };
    BlenderbotSmallTokenizer = class extends BlenderbotTokenizer {
      static {
        __name(this, "BlenderbotSmallTokenizer");
      }
    };
    SpeechT5Tokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "SpeechT5Tokenizer");
      }
    };
    NougatTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "NougatTokenizer");
      }
    };
    VitsTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "VitsTokenizer");
      }
      constructor(tokenizerJSON, tokenizerConfig) {
        super(tokenizerJSON, tokenizerConfig);
        this.decoder = new VitsDecoder({});
      }
    };
    CohereTokenizer = class extends PreTrainedTokenizer {
      static {
        __name(this, "CohereTokenizer");
      }
    };
    AutoTokenizer = class {
      static {
        __name(this, "AutoTokenizer");
      }
      static TOKENIZER_CLASS_MAPPING = {
        T5Tokenizer,
        DistilBertTokenizer,
        CamembertTokenizer,
        DebertaTokenizer,
        DebertaV2Tokenizer,
        BertTokenizer,
        HerbertTokenizer,
        ConvBertTokenizer,
        RoFormerTokenizer,
        XLMTokenizer,
        ElectraTokenizer,
        MobileBertTokenizer,
        SqueezeBertTokenizer,
        AlbertTokenizer,
        GPT2Tokenizer,
        BartTokenizer,
        MBartTokenizer,
        MBart50Tokenizer,
        RobertaTokenizer,
        WhisperTokenizer,
        CodeGenTokenizer,
        CLIPTokenizer,
        SiglipTokenizer,
        MarianTokenizer,
        BloomTokenizer,
        NllbTokenizer,
        M2M100Tokenizer,
        LlamaTokenizer,
        CodeLlamaTokenizer,
        XLMRobertaTokenizer,
        MPNetTokenizer,
        FalconTokenizer,
        GPTNeoXTokenizer,
        EsmTokenizer,
        Wav2Vec2CTCTokenizer,
        BlenderbotTokenizer,
        BlenderbotSmallTokenizer,
        SpeechT5Tokenizer,
        NougatTokenizer,
        VitsTokenizer,
        Qwen2Tokenizer,
        GemmaTokenizer,
        Grok1Tokenizer,
        CohereTokenizer,
        // Base case:
        PreTrainedTokenizer
      };
      /**
       * Instantiate one of the tokenizer classes of the library from a pretrained model.
       * 
       * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object
       * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
       * 
       * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
       * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.
       *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
       *   user or organization name, like `dbmdz/bert-base-german-cased`.
       * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.
       * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
       * 
       * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.
       */
      static async from_pretrained(pretrained_model_name_or_path, {
        quantized = true,
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main",
        legacy = null
      } = {}) {
        const [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {
          quantized,
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision,
          legacy
        });
        const tokenizerName = tokenizerConfig.tokenizer_class?.replace(/Fast$/, "") ?? "PreTrainedTokenizer";
        let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];
        if (!cls) {
          console.warn(`Unknown tokenizer class "${tokenizerName}", attempting to construct from base class.`);
          cls = PreTrainedTokenizer;
        }
        return new cls(tokenizerJSON, tokenizerConfig);
      }
    };
  }
});

// node_modules/@xenova/transformers/src/configs.js
async function loadConfig(pretrained_model_name_or_path, options) {
  let info = await getModelJSON(pretrained_model_name_or_path, "config.json", true, options);
  return info;
}
var PretrainedConfig, AutoConfig;
var init_configs = __esm({
  "node_modules/@xenova/transformers/src/configs.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_hub();
    __name(loadConfig, "loadConfig");
    PretrainedConfig = class {
      static {
        __name(this, "PretrainedConfig");
      }
      // NOTE: Typo in original
      /**
       * Create a new PreTrainedTokenizer instance.
       * @param {Object} configJSON The JSON of the config.
       */
      constructor(configJSON) {
        this.model_type = null;
        this.is_encoder_decoder = false;
        Object.assign(this, configJSON);
      }
      /**
       * Loads a pre-trained config from the given `pretrained_model_name_or_path`. 
       * 
       * @param {string} pretrained_model_name_or_path The path to the pre-trained config.
       * @param {PretrainedOptions} options Additional options for loading the config.
       * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.
       * 
       * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.
       */
      static async from_pretrained(pretrained_model_name_or_path, {
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main"
      } = {}) {
        let data = config ?? await loadConfig(pretrained_model_name_or_path, {
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision
        });
        return new this(data);
      }
    };
    AutoConfig = class {
      static {
        __name(this, "AutoConfig");
      }
      /** @type {PretrainedConfig.from_pretrained} */
      static async from_pretrained(...args) {
        return PretrainedConfig.from_pretrained(...args);
      }
    };
  }
});

// node_modules/@xenova/transformers/src/utils/generation.js
var LogitsProcessorList, LogitsProcessor, ForceTokensLogitsProcessor, ForcedBOSTokenLogitsProcessor, ForcedEOSTokenLogitsProcessor, SuppressTokensAtBeginLogitsProcessor, WhisperTimeStampLogitsProcessor, NoRepeatNGramLogitsProcessor, RepetitionPenaltyLogitsProcessor, MinLengthLogitsProcessor, MinNewTokensLengthLogitsProcessor, NoBadWordsLogitsProcessor, GenerationConfig, Sampler, GreedySampler, MultinomialSampler, BeamSearchSampler;
var init_generation = __esm({
  "node_modules/@xenova/transformers/src/utils/generation.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_tensor();
    init_core();
    init_maths();
    LogitsProcessorList = class extends Callable {
      static {
        __name(this, "LogitsProcessorList");
      }
      /**
       * Constructs a new instance of `LogitsProcessorList`.
       */
      constructor() {
        super();
        this.processors = [];
      }
      /**
       * Adds a new logits processor to the list.
       *
       * @param {LogitsProcessor} item The logits processor function to add.
       */
      push(item) {
        this.processors.push(item);
      }
      /**
       * Adds multiple logits processors to the list.
       *
       * @param {LogitsProcessor[]} items The logits processor functions to add.
       */
      extend(items) {
        this.processors.push(...items);
      }
      /**
       * Applies all logits processors in the list to a batch of logits, modifying them in-place.
       *
       * @param {number[]} input_ids The input IDs for the language model.
       * @param {number[][]} batchedLogits A 2D array of logits, where each row corresponds to a single
       *                                                input sequence in the batch.
       */
      _call(input_ids, batchedLogits) {
        for (let logits of batchedLogits) {
          this.processors.forEach(
            (func) => func(input_ids, logits)
          );
        }
      }
      [Symbol.iterator]() {
        return this.processors.values();
      }
    };
    LogitsProcessor = class extends Callable {
      static {
        __name(this, "LogitsProcessor");
      }
      /**
       * Apply the processor to the input logits.
       *
       * @abstract
       * @param {Array} input_ids The input ids.
       * @param {Tensor} logits The logits to process.
       * @throws {Error} Throws an error if `_call` is not implemented in the subclass.
       */
      _call(input_ids, logits) {
        throw Error("`_call` should be implemented in a subclass");
      }
    };
    ForceTokensLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "ForceTokensLogitsProcessor");
      }
      /**
       * Constructs a new instance of `ForceTokensLogitsProcessor`.
       * 
       * @param {Array} forced_decoder_ids The ids of tokens that should be forced.
       */
      constructor(forced_decoder_ids) {
        super();
        this.force_token_map = Object.fromEntries(forced_decoder_ids ?? []);
      }
      /**
       * Apply the processor to the input logits.
       *
       * @param {Array} input_ids The input ids.
       * @param {Tensor} logits The logits to process.
       * @returns {Tensor} The processed logits.
       */
      _call(input_ids, logits) {
        let map = this.force_token_map[input_ids.length];
        if (exists2(map)) {
          logits.data.fill(-Infinity);
          logits.data[map] = 0;
        }
        return logits;
      }
    };
    ForcedBOSTokenLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "ForcedBOSTokenLogitsProcessor");
      }
      /**
       * Create a ForcedBOSTokenLogitsProcessor.
       * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.
       */
      constructor(bos_token_id) {
        super();
        this.bos_token_id = bos_token_id;
      }
      /**
       * Apply the BOS token forcing to the logits.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The logits with BOS token forcing.
       */
      _call(input_ids, logits) {
        if (input_ids.length === 1) {
          logits.data.fill(-Infinity);
          logits.data[this.bos_token_id] = 0;
        }
        return logits;
      }
    };
    ForcedEOSTokenLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "ForcedEOSTokenLogitsProcessor");
      }
      /**
       * Create a ForcedEOSTokenLogitsProcessor.
       * @param {number} max_length Max length of the sequence.
       * @param {number|number[]} forced_eos_token_id The ID of the end-of-sequence token to be forced.
       */
      constructor(max_length, forced_eos_token_id) {
        super();
        this.max_length = max_length;
        this.forced_eos_token_id = forced_eos_token_id;
      }
      /**
       * Apply the processor to input_ids and logits.
       * 
       * @param {number[]} input_ids The input ids.
       * @param {Tensor} logits The logits tensor.
       */
      _call(input_ids, logits) {
      }
    };
    SuppressTokensAtBeginLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "SuppressTokensAtBeginLogitsProcessor");
      }
      /**
       * Create a SuppressTokensAtBeginLogitsProcessor.
       * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.
       * @param {number} begin_index The number of tokens to generate before suppressing tokens.
       */
      constructor(begin_suppress_tokens, begin_index) {
        super();
        this.begin_suppress_tokens = begin_suppress_tokens;
        this.begin_index = begin_index;
      }
      /**
       * Apply the BOS token forcing to the logits.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The logits with BOS token forcing.
       */
      _call(input_ids, logits) {
        if (input_ids.length === this.begin_index) {
          for (let token_id of this.begin_suppress_tokens) {
            logits.data[token_id] = -Infinity;
          }
        }
        return logits;
      }
    };
    WhisperTimeStampLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "WhisperTimeStampLogitsProcessor");
      }
      /**
       * Constructs a new WhisperTimeStampLogitsProcessor.
       * @param {Object} generate_config The config object passed to the `generate()` method of a transformer model.
       * @param {number} generate_config.eos_token_id The ID of the end-of-sequence token.
       * @param {number} generate_config.no_timestamps_token_id The ID of the token used to indicate that a token should not have a timestamp.
       * @param {number[][]} [generate_config.forced_decoder_ids] An array of two-element arrays representing decoder IDs that are forced to appear in the output. The second element of each array indicates whether the token is a timestamp.
       * @param {number} [generate_config.max_initial_timestamp_index] The maximum index at which an initial timestamp can appear.
       */
      constructor(generate_config) {
        super();
        this.eos_token_id = generate_config.eos_token_id;
        this.no_timestamps_token_id = generate_config.no_timestamps_token_id;
        this.timestamp_begin = this.no_timestamps_token_id + 1;
        this.begin_index = (generate_config.forced_decoder_ids || []).length + 2;
        if (generate_config.forced_decoder_ids.slice(-1)[0][1] === this.no_timestamps_token_id) {
          this.begin_index -= 1;
        }
        this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;
      }
      /**
       * Modify the logits to handle timestamp tokens.
       * @param {Array} input_ids The input sequence of tokens.
       * @param {Tensor} logits The logits output by the model.
       * @returns {Tensor} The modified logits.
       */
      _call(input_ids, logits) {
        const logitsData = (
          /** @type {Float32Array} */
          logits.data
        );
        logitsData[this.no_timestamps_token_id] = -Infinity;
        if (input_ids.length === this.begin_index - 1) {
          logitsData.fill(-Infinity);
          logitsData[this.timestamp_begin] = 0;
          return logits;
        }
        const seq = input_ids.slice(this.begin_index);
        const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;
        const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;
        if (last_was_timestamp) {
          if (penultimate_was_timestamp) {
            logitsData.subarray(this.timestamp_begin).fill(-Infinity);
          } else {
            logitsData.subarray(0, this.eos_token_id).fill(-Infinity);
          }
        }
        if (input_ids.length === this.begin_index && this.max_initial_timestamp_index !== null) {
          const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;
          logitsData.subarray(last_allowed + 1).fill(-Infinity);
        }
        const logprobs = log_softmax(logitsData);
        const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));
        const max_text_token_logprob = max(logprobs.subarray(0, this.timestamp_begin))[0];
        if (timestamp_logprob > max_text_token_logprob) {
          logitsData.subarray(0, this.timestamp_begin).fill(-Infinity);
        }
        return logits;
      }
    };
    NoRepeatNGramLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "NoRepeatNGramLogitsProcessor");
      }
      /**
       * Create a NoRepeatNGramLogitsProcessor.
       * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.
       */
      constructor(no_repeat_ngram_size) {
        super();
        this.no_repeat_ngram_size = no_repeat_ngram_size;
      }
      /**
       * Generate n-grams from a sequence of token ids.
       * @param {number[]} prevInputIds List of previous input ids
       * @returns {Map<string, number[]>} Map of generated n-grams
       */
      getNgrams(prevInputIds) {
        const curLen = prevInputIds.length;
        const ngrams = [];
        for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {
          const ngram = [];
          for (let k = 0; k < this.no_repeat_ngram_size; ++k) {
            ngram.push(prevInputIds[j + k]);
          }
          ngrams.push(ngram);
        }
        const generatedNgram = /* @__PURE__ */ new Map();
        for (const ngram of ngrams) {
          const prevNgram = ngram.slice(0, ngram.length - 1);
          const prevNgramKey = JSON.stringify(prevNgram);
          const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];
          prevNgramValue.push(ngram[ngram.length - 1]);
          generatedNgram.set(prevNgramKey, prevNgramValue);
        }
        return generatedNgram;
      }
      /**
       * Generate n-grams from a sequence of token ids.
       * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams
       * @param {number[]} prevInputIds List of previous input ids
       * @returns {number[]} Map of generated n-grams
       */
      getGeneratedNgrams(bannedNgrams, prevInputIds) {
        const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);
        const banned = bannedNgrams.get(JSON.stringify(ngramIdx)) ?? [];
        return banned;
      }
      /**
       * Calculate banned n-gram tokens
       * @param {number[]} prevInputIds List of previous input ids
       * @returns {number[]} Map of generated n-grams
       */
      calcBannedNgramTokens(prevInputIds) {
        const bannedTokens = [];
        if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {
          return bannedTokens;
        } else {
          const generatedNgrams = this.getNgrams(prevInputIds);
          const bannedTokens2 = this.getGeneratedNgrams(generatedNgrams, prevInputIds);
          return bannedTokens2;
        }
      }
      /**
       * Apply the no-repeat-ngram processor to the logits.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The logits with no-repeat-ngram processing.
       */
      _call(input_ids, logits) {
        const bannedTokens = this.calcBannedNgramTokens(input_ids);
        for (const token of bannedTokens) {
          logits.data[token] = -Infinity;
        }
        return logits;
      }
    };
    RepetitionPenaltyLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "RepetitionPenaltyLogitsProcessor");
      }
      /**
       * Create a RepetitionPenaltyLogitsProcessor.
       * @param {number} penalty The penalty to apply for repeated tokens.
       */
      constructor(penalty) {
        super();
        this.penalty = penalty;
      }
      /**
       * Apply the repetition penalty to the logits.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The logits with repetition penalty processing.
       */
      _call(input_ids, logits) {
        for (const input_id of input_ids) {
          if (logits.data[input_id] < 0) {
            logits.data[input_id] *= this.penalty;
          } else {
            logits.data[input_id] /= this.penalty;
          }
        }
        return logits;
      }
    };
    MinLengthLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "MinLengthLogitsProcessor");
      }
      /**
       * Create a MinLengthLogitsProcessor.
       * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.
       * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
       */
      constructor(min_length, eos_token_id) {
        super();
        this.min_length = min_length;
        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
      }
      /**
       * Apply logit processor.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The processed logits.
       */
      _call(input_ids, logits) {
        if (input_ids.length < this.min_length) {
          for (const eos_token of this.eos_token_id) {
            logits.data[eos_token] = -Infinity;
          }
        }
        return logits;
      }
    };
    MinNewTokensLengthLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "MinNewTokensLengthLogitsProcessor");
      }
      /**
       * Create a MinNewTokensLengthLogitsProcessor.
       * @param {number} prompt_length_to_skip The input tokens length.
       * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.
       * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
       */
      constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {
        super();
        this.prompt_length_to_skip = prompt_length_to_skip;
        this.min_new_tokens = min_new_tokens;
        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
      }
      /**
       * Apply logit processor.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The processed logits.
       */
      _call(input_ids, logits) {
        const new_tokens_length = input_ids.length - this.prompt_length_to_skip;
        if (new_tokens_length < this.min_new_tokens) {
          for (const eos_token of this.eos_token_id) {
            logits.data[eos_token] = -Infinity;
          }
        }
        return logits;
      }
    };
    NoBadWordsLogitsProcessor = class extends LogitsProcessor {
      static {
        __name(this, "NoBadWordsLogitsProcessor");
      }
      /**
       * Create a `NoBadWordsLogitsProcessor`.
       * @param {number[][]} bad_words_ids List of list of token ids that are not allowed to be generated.
       * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.
       */
      constructor(bad_words_ids, eos_token_id) {
        super();
        this.bad_words_ids = bad_words_ids;
        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
      }
      /**
       * Apply logit processor.
       * @param {Array} input_ids The input IDs.
       * @param {Object} logits The logits.
       * @returns {Object} The processed logits.
       */
      _call(input_ids, logits) {
        for (const bad_word_ids of this.bad_words_ids) {
          let mark = true;
          for (let i = 1; i <= bad_word_ids.length - 1 && bad_word_ids.length < input_ids.length; ++i) {
            if (bad_word_ids.at(-i - 1) !== input_ids.at(-i)) {
              mark = false;
              break;
            }
          }
          if (mark) {
            logits.data[bad_word_ids.at(-1)] = -Infinity;
          }
        }
        return logits;
      }
    };
    GenerationConfig = /** @type {any} */
    class {
      static {
        __name(this, "GenerationConfig");
      }
      /**
       * Create a new GenerationConfig object.
       * @param {GenerationConfigType} kwargs 
       */
      constructor(kwargs = {}) {
        this.max_length = kwargs.max_length ?? 20;
        this.max_new_tokens = kwargs.max_new_tokens ?? null;
        this.min_length = kwargs.min_length ?? 0;
        this.min_new_tokens = kwargs.min_new_tokens ?? null;
        this.early_stopping = kwargs.early_stopping ?? false;
        this.max_time = kwargs.max_time ?? null;
        this.do_sample = kwargs.do_sample ?? false;
        this.num_beams = kwargs.num_beams ?? 1;
        this.num_beam_groups = kwargs.num_beam_groups ?? 1;
        this.penalty_alpha = kwargs.penalty_alpha ?? null;
        this.use_cache = kwargs.use_cache ?? true;
        this.temperature = kwargs.temperature ?? 1;
        this.top_k = kwargs.top_k ?? 50;
        this.top_p = kwargs.top_p ?? 1;
        this.typical_p = kwargs.typical_p ?? 1;
        this.epsilon_cutoff = kwargs.epsilon_cutoff ?? 0;
        this.eta_cutoff = kwargs.eta_cutoff ?? 0;
        this.diversity_penalty = kwargs.diversity_penalty ?? 0;
        this.repetition_penalty = kwargs.repetition_penalty ?? 1;
        this.encoder_repetition_penalty = kwargs.encoder_repetition_penalty ?? 1;
        this.length_penalty = kwargs.length_penalty ?? 1;
        this.no_repeat_ngram_size = kwargs.no_repeat_ngram_size ?? 0;
        this.bad_words_ids = kwargs.bad_words_ids ?? null;
        this.force_words_ids = kwargs.force_words_ids ?? null;
        this.renormalize_logits = kwargs.renormalize_logits ?? false;
        this.constraints = kwargs.constraints ?? null;
        this.forced_bos_token_id = kwargs.forced_bos_token_id ?? null;
        this.forced_eos_token_id = kwargs.forced_eos_token_id ?? null;
        this.remove_invalid_values = kwargs.remove_invalid_values ?? false;
        this.exponential_decay_length_penalty = kwargs.exponential_decay_length_penalty ?? null;
        this.suppress_tokens = kwargs.suppress_tokens ?? null;
        this.begin_suppress_tokens = kwargs.begin_suppress_tokens ?? null;
        this.forced_decoder_ids = kwargs.forced_decoder_ids ?? null;
        this.num_return_sequences = kwargs.num_return_sequences ?? 1;
        this.output_attentions = kwargs.output_attentions ?? false;
        this.output_hidden_states = kwargs.output_hidden_states ?? false;
        this.output_scores = kwargs.output_scores ?? false;
        this.return_dict_in_generate = kwargs.return_dict_in_generate ?? false;
        this.pad_token_id = kwargs.pad_token_id ?? null;
        this.bos_token_id = kwargs.bos_token_id ?? null;
        this.eos_token_id = kwargs.eos_token_id ?? null;
        this.encoder_no_repeat_ngram_size = kwargs.encoder_no_repeat_ngram_size ?? 0;
        this.decoder_start_token_id = kwargs.decoder_start_token_id ?? null;
        this.generation_kwargs = kwargs.generation_kwargs ?? {};
      }
    };
    Sampler = class extends Callable {
      static {
        __name(this, "Sampler");
      }
      /**
       * Creates a new Sampler object with the specified generation config.
       * @param {GenerationConfigType} generation_config The generation config.
       */
      constructor(generation_config) {
        super();
        this.generation_config = generation_config;
      }
      /**
       * Executes the sampler, using the specified logits.
       * @param {Tensor} logits
       * @param {number} index
       * @returns {void}
       */
      _call(logits, index = -1) {
        return this.sample(logits, index);
      }
      /**
       * Abstract method for sampling the logits.
       * @param {Tensor} logits
       * @param {number} index
       * @throws {Error}
       */
      sample(logits, index) {
        throw Error("sample should be implemented in subclasses.");
      }
      /**
       * Returns the specified logits as an array, with temperature applied.
       * @param {Tensor} logits
       * @param {number} index
       * @returns {Float32Array}
       */
      getLogits(logits, index) {
        let vocabSize = logits.dims.at(-1);
        let logs = (
          /** @type {Float32Array} */
          logits.data
        );
        if (index === -1) {
          logs = logs.slice(-vocabSize);
        } else {
          let startIndex = index * vocabSize;
          logs = logs.slice(startIndex, startIndex + vocabSize);
        }
        if (this.generation_config.temperature > 0) {
          logs = logs.map((x) => x / this.generation_config.temperature);
        }
        return logs;
      }
      /**
       * Selects an item randomly based on the specified probabilities.
       * @param {Array} probabilities An array of probabilities to use for selection.
       * @returns {number} The index of the selected item.
       */
      randomSelect(probabilities) {
        let sumProbabilities = probabilities.reduce((acc, curr) => acc + curr, 0);
        let r = Math.random() * sumProbabilities;
        for (let i = 0; i < probabilities.length; ++i) {
          r -= probabilities[i];
          if (r <= 0) {
            return i;
          }
        }
        return 0;
      }
      /**
       * Returns a Sampler object based on the specified options.
       * @param {GenerationConfigType} generation_config An object containing options for the sampler.
       * @returns {Sampler} A Sampler object.
       */
      static getSampler(generation_config) {
        if (generation_config.do_sample) {
          return new MultinomialSampler(generation_config);
        } else if (generation_config.num_beams > 1) {
          return new BeamSearchSampler(generation_config);
        } else {
          if (generation_config.num_return_sequences > 1) {
            throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`);
          }
          return new GreedySampler(generation_config);
        }
      }
    };
    GreedySampler = class extends Sampler {
      static {
        __name(this, "GreedySampler");
      }
      /**
       * Sample the maximum probability of a given logits tensor.
       * @param {Tensor} logits
       * @param {number} [index=-1]
       * @returns {Array} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).
       */
      sample(logits, index = -1) {
        let logs = this.getLogits(logits, index);
        let argmax = max(logs)[1];
        return [
          [argmax, 0]
        ];
      }
    };
    MultinomialSampler = class extends Sampler {
      static {
        __name(this, "MultinomialSampler");
      }
      /**
       * Sample from the logits.
       * @param {Tensor} logits
       * @param {number} index
       * @returns {Array}
       */
      sample(logits, index = -1) {
        let k = logits.dims.at(-1);
        if (this.generation_config.top_k > 0) {
          k = Math.min(this.generation_config.top_k, k);
        }
        const logs = this.getLogits(logits, index);
        const topLogits = getTopItems(logs, k);
        const probabilities = softmax(topLogits.map((x) => x[1]));
        return Array.from({ length: this.generation_config.num_beams }, () => {
          const sampledIndex = this.randomSelect(probabilities);
          return [
            topLogits[sampledIndex][0],
            // token id
            Math.log(probabilities[sampledIndex])
            // score
          ];
        });
      }
    };
    BeamSearchSampler = class extends Sampler {
      static {
        __name(this, "BeamSearchSampler");
      }
      /**
       * Sample from the logits.
       * @param {Tensor} logits
       * @param {number} index
       * @returns {Array}
       */
      sample(logits, index = -1) {
        let k = logits.dims.at(-1);
        if (this.generation_config.top_k > 0) {
          k = Math.min(this.generation_config.top_k, k);
        }
        const logs = this.getLogits(logits, index);
        const topLogits = getTopItems(logs, k);
        const probabilities = softmax(topLogits.map((x) => x[1]));
        return Array.from({ length: this.generation_config.num_beams }, (_, i) => {
          return [
            topLogits[i][0],
            // token id
            Math.log(probabilities[i])
            // score
          ];
        });
      }
    };
  }
});

// node_modules/@xenova/transformers/src/models.js
async function constructSession(pretrained_model_name_or_path, fileName, options) {
  let modelFileName = `onnx/${fileName}${options.quantized ? "_quantized" : ""}.onnx`;
  let buffer = await getModelFile(pretrained_model_name_or_path, modelFileName, true, options);
  try {
    return await InferenceSession.create(buffer, {
      executionProviders
    });
  } catch (err) {
    if (executionProviders.length === 1 && executionProviders[0] === "wasm") {
      throw err;
    }
    console.warn(err);
    console.warn(
      "Something went wrong during model construction (most likely a missing operation). Using `wasm` as a fallback. "
    );
    return await InferenceSession.create(buffer, {
      executionProviders: ["wasm"]
    });
  }
}
function validateInputs(session, inputs) {
  const checkedInputs = /* @__PURE__ */ Object.create(null);
  const missingInputs = [];
  for (const inputName of session.inputNames) {
    const tensor = inputs[inputName];
    if (!(tensor instanceof Tensor)) {
      missingInputs.push(inputName);
      continue;
    }
    checkedInputs[inputName] = env2.wasm.proxy ? tensor.clone() : tensor;
  }
  if (missingInputs.length > 0) {
    throw new Error(
      `An error occurred during model execution: "Missing the following inputs: ${missingInputs.join(", ")}.`
    );
  }
  const numInputsProvided = Object.keys(inputs).length;
  const numInputsNeeded = session.inputNames.length;
  if (numInputsProvided > numInputsNeeded) {
    let ignored = Object.keys(inputs).filter((inputName) => !session.inputNames.includes(inputName));
    console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: "${ignored.join(", ")}".`);
  }
  return checkedInputs;
}
async function sessionRun(session, inputs) {
  const checkedInputs = validateInputs(session, inputs);
  try {
    let output = await session.run(checkedInputs);
    output = replaceTensors(output);
    return output;
  } catch (e) {
    console.error(`An error occurred during model execution: "${e}".`);
    console.error("Inputs given to model:", checkedInputs);
    throw e;
  }
}
function replaceTensors(obj) {
  for (let prop in obj) {
    if (obj[prop] instanceof ONNXTensor2) {
      obj[prop] = new Tensor(obj[prop]);
    } else if (typeof obj[prop] === "object") {
      replaceTensors(obj[prop]);
    }
  }
  return obj;
}
function toI64Tensor(items) {
  if (items instanceof Tensor) {
    return items;
  }
  if (items.length === 0) {
    throw Error("items must be non-empty");
  }
  if (Array.isArray(items[0])) {
    if (items.some((x) => x.length !== items[0].length)) {
      throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");
    }
    return new Tensor(
      "int64",
      BigInt64Array.from(items.flat().map((x) => BigInt(x))),
      [items.length, items[0].length]
    );
  } else {
    return new Tensor(
      "int64",
      BigInt64Array.from(items.map((x) => BigInt(x))),
      [1, items.length]
    );
  }
}
function prepareAttentionMask(self2, tokens) {
  let pad_token_id = self2.config.pad_token_id ?? null;
  let eos_token_id = self2.config.eos_token_id ?? null;
  if (isIntegralNumber(eos_token_id)) {
    eos_token_id = [eos_token_id];
  }
  let is_pad_token_in_inputs = tokens.indexOf(pad_token_id) !== -1;
  let is_pad_token_not_equal_to_eos_token_id = eos_token_id === null || !eos_token_id.includes(pad_token_id);
  if (is_pad_token_in_inputs && is_pad_token_not_equal_to_eos_token_id) {
    let data = BigInt64Array.from(
      // Note: != so that int matches bigint
      // @ts-ignore
      tokens.data.map((x) => x != pad_token_id)
    );
    return new Tensor("int64", data, tokens.dims);
  } else {
    return ones_like(tokens);
  }
}
function preparePositionIds(session, feeds, use_cache_branch) {
  if (!session.inputNames.includes("position_ids")) return;
  const data = new BigInt64Array(feeds.attention_mask.data.length);
  for (let i = 0; i < feeds.attention_mask.dims[0]; ++i) {
    let start = i * feeds.attention_mask.dims[1];
    let sum = BigInt(0);
    for (let j = 0; j < feeds.attention_mask.dims[1]; ++j) {
      const index = start + j;
      if (feeds.attention_mask.data[index] === 0n) {
        data[index] = BigInt(1);
      } else {
        data[index] = sum;
        sum += feeds.attention_mask.data[index];
      }
    }
  }
  feeds.position_ids = new Tensor("int64", data, feeds.attention_mask.dims);
  if (use_cache_branch) {
    feeds.position_ids = feeds.position_ids.slice(null, -1).unsqueeze_(-1);
  }
}
function boolTensor(value) {
  return new Tensor("bool", [value], [1]);
}
async function seq2seqForward(self2, model_inputs) {
  let { encoder_outputs, past_key_values } = model_inputs;
  if (!encoder_outputs) {
    encoder_outputs = (await encoderForward(self2, model_inputs)).last_hidden_state;
  }
  let decoderFeeds = {
    input_ids: model_inputs.decoder_input_ids,
    encoder_hidden_states: encoder_outputs
  };
  const use_cache_branch = !!past_key_values;
  if (self2.decoder_merged_session.inputNames.includes("use_cache_branch")) {
    decoderFeeds.use_cache_branch = boolTensor(use_cache_branch);
  }
  if (self2.decoder_merged_session.inputNames.includes("encoder_attention_mask")) {
    decoderFeeds.encoder_attention_mask = model_inputs.attention_mask;
  }
  preparePositionIds(self2.decoder_merged_session, decoderFeeds, use_cache_branch);
  self2.addPastKeyValues(decoderFeeds, past_key_values);
  const decoderResults = await sessionRun(self2.decoder_merged_session, decoderFeeds);
  let logits = decoderResults.logits;
  past_key_values = self2.getPastKeyValues(decoderResults, past_key_values);
  const attns = self2.getAttentions(decoderResults);
  return new Seq2SeqLMOutput({ logits, past_key_values, encoder_outputs, ...attns });
}
function seq2seqStartBeams(self2, inputTokenIds, generation_config, numOutputTokens) {
  let beams = [];
  let beamId = 0;
  const requires_attention_mask = self2.requires_attention_mask ?? true;
  let decoder_input_ids = generation_config.decoder_input_ids ?? generation_config.decoder_start_token_id ?? generation_config.bos_token_id ?? generation_config.eos_token_id;
  if (decoder_input_ids instanceof Tensor) {
    decoder_input_ids = decoder_input_ids.tolist().flat();
  } else if (!Array.isArray(decoder_input_ids)) {
    decoder_input_ids = [decoder_input_ids];
  }
  for (let tokens of inputTokenIds) {
    tokens.dims = [1, ...tokens.dims];
    let start = {
      inputs: tokens,
      encoder_outputs: null,
      prev_model_outputs: null,
      output_token_ids: decoder_input_ids,
      done: false,
      score: 0,
      id: beamId++
      // assign unique id to beams
    };
    if (requires_attention_mask) {
      start.attention_mask = prepareAttentionMask(self2, tokens);
    }
    beams.push(start);
  }
  return beams;
}
async function seq2seqRunBeam(self2, beam) {
  const input_name = self2.main_input_name;
  let decoder_input_ids = beam.output_token_ids;
  if (beam.prev_model_outputs) {
    decoder_input_ids = decoder_input_ids.slice(-1);
  }
  let model_inputs = {
    [input_name]: beam.inputs,
    decoder_input_ids: toI64Tensor(decoder_input_ids),
    encoder_outputs: beam.encoder_outputs,
    past_key_values: beam.prev_model_outputs?.past_key_values
  };
  if (beam.attention_mask) {
    model_inputs.attention_mask = beam.attention_mask;
  }
  let output = await self2.forward(model_inputs);
  beam.prev_model_outputs = output;
  beam.encoder_outputs = output.encoder_outputs;
  return output;
}
function seq2seqUpdatebeam(beam, newTokenId) {
  beam.output_token_ids = [...beam.output_token_ids, newTokenId];
}
async function encoderForward(self2, model_inputs) {
  const encoderFeeds = /* @__PURE__ */ Object.create(null);
  for (const key of self2.session.inputNames) {
    encoderFeeds[key] = model_inputs[key];
  }
  if (self2.session.inputNames.includes("token_type_ids") && !encoderFeeds.token_type_ids) {
    encoderFeeds.token_type_ids = new Tensor(
      "int64",
      new BigInt64Array(encoderFeeds.input_ids.data.length),
      encoderFeeds.input_ids.dims
    );
  }
  return await sessionRun(self2.session, encoderFeeds);
}
async function decoderForward(self2, model_inputs) {
  let { input_ids, past_key_values, attention_mask } = model_inputs;
  let decoderFeeds = {
    input_ids,
    attention_mask: attention_mask ?? prepareAttentionMask(self2, input_ids)
  };
  const use_cache_branch = !!past_key_values;
  if (self2.session.inputNames.includes("use_cache_branch")) {
    decoderFeeds.use_cache_branch = boolTensor(use_cache_branch);
  }
  preparePositionIds(self2.session, decoderFeeds, use_cache_branch);
  self2.addPastKeyValues(decoderFeeds, past_key_values);
  let decoderResults = await sessionRun(self2.session, decoderFeeds);
  let logits = decoderResults.logits;
  past_key_values = self2.getPastKeyValues(decoderResults, past_key_values);
  return { logits, past_key_values };
}
function decoderStartBeams(self2, inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask) {
  let beams = [];
  let beamId = 0;
  for (let tokens of inputTokenIds) {
    let output_token_ids = tokens.tolist().map(Number);
    tokens.dims = [1, ...tokens.dims];
    let attn_mask;
    if (inputs_attention_mask) {
      attn_mask = inputs_attention_mask[beamId];
      attn_mask.dims = [1, ...attn_mask.dims];
    } else {
      attn_mask = prepareAttentionMask(self2, tokens);
    }
    let start = {
      input: tokens,
      model_input_ids: tokens,
      attention_mask: attn_mask,
      prev_model_outputs: null,
      output_token_ids,
      num_output_tokens: numOutputTokens,
      done: false,
      score: 0,
      id: beamId++
      // assign unique id to beams
    };
    beams.push(start);
  }
  return beams;
}
async function decoderRunBeam(self2, beam) {
  let attnMaskData = new BigInt64Array(beam.output_token_ids.length).fill(1n);
  let model_inputs = {
    input_ids: beam.model_input_ids,
    attention_mask: new Tensor(
      "int64",
      attnMaskData,
      [1, attnMaskData.length]
    ),
    past_key_values: beam.prev_model_outputs?.past_key_values
  };
  let output = await self2.forward(model_inputs);
  beam.prev_model_outputs = output;
  return output;
}
function decoderUpdatebeam(beam, newTokenId) {
  beam.output_token_ids = [...beam.output_token_ids, newTokenId];
  beam.model_input_ids = new Tensor("int64", [BigInt(newTokenId)], [1, 1]);
}
var InferenceSession, ONNXTensor2, env2, MODEL_TYPES, MODEL_TYPE_MAPPING, MODEL_NAME_TO_CLASS_MAPPING, MODEL_CLASS_TO_NAME_MAPPING, PreTrainedModel, ModelOutput, BaseModelOutput, BertPreTrainedModel, BertModel, BertForMaskedLM, BertForSequenceClassification, BertForTokenClassification, BertForQuestionAnswering, NomicBertPreTrainedModel, NomicBertModel, RoFormerPreTrainedModel, RoFormerModel, RoFormerForMaskedLM, RoFormerForSequenceClassification, RoFormerForTokenClassification, RoFormerForQuestionAnswering, ConvBertPreTrainedModel, ConvBertModel, ConvBertForMaskedLM, ConvBertForSequenceClassification, ConvBertForTokenClassification, ConvBertForQuestionAnswering, ElectraPreTrainedModel, ElectraModel, ElectraForMaskedLM, ElectraForSequenceClassification, ElectraForTokenClassification, ElectraForQuestionAnswering, CamembertPreTrainedModel, CamembertModel, CamembertForMaskedLM, CamembertForSequenceClassification, CamembertForTokenClassification, CamembertForQuestionAnswering, DebertaPreTrainedModel, DebertaModel, DebertaForMaskedLM, DebertaForSequenceClassification, DebertaForTokenClassification, DebertaForQuestionAnswering, DebertaV2PreTrainedModel, DebertaV2Model, DebertaV2ForMaskedLM, DebertaV2ForSequenceClassification, DebertaV2ForTokenClassification, DebertaV2ForQuestionAnswering, DistilBertPreTrainedModel, DistilBertModel, DistilBertForSequenceClassification, DistilBertForTokenClassification, DistilBertForQuestionAnswering, DistilBertForMaskedLM, EsmPreTrainedModel, EsmModel, EsmForMaskedLM, EsmForSequenceClassification, EsmForTokenClassification, MobileBertPreTrainedModel, MobileBertModel, MobileBertForMaskedLM, MobileBertForSequenceClassification, MobileBertForQuestionAnswering, MPNetPreTrainedModel, MPNetModel, MPNetForMaskedLM, MPNetForSequenceClassification, MPNetForTokenClassification, MPNetForQuestionAnswering, SqueezeBertPreTrainedModel, SqueezeBertModel, SqueezeBertForMaskedLM, SqueezeBertForSequenceClassification, SqueezeBertForQuestionAnswering, AlbertPreTrainedModel, AlbertModel, AlbertForSequenceClassification, AlbertForQuestionAnswering, AlbertForMaskedLM, T5PreTrainedModel, T5Model, T5ForConditionalGeneration, LongT5PreTrainedModel, LongT5Model, LongT5ForConditionalGeneration, MT5PreTrainedModel, MT5Model, MT5ForConditionalGeneration, BartPretrainedModel, BartModel, BartForConditionalGeneration, BartForSequenceClassification, MBartPreTrainedModel, MBartModel, MBartForConditionalGeneration, MBartForSequenceClassification, MBartForCausalLM, BlenderbotPreTrainedModel, BlenderbotModel, BlenderbotForConditionalGeneration, BlenderbotSmallPreTrainedModel, BlenderbotSmallModel, BlenderbotSmallForConditionalGeneration, RobertaPreTrainedModel, RobertaModel, RobertaForMaskedLM, RobertaForSequenceClassification, RobertaForTokenClassification, RobertaForQuestionAnswering, XLMPreTrainedModel, XLMModel, XLMWithLMHeadModel, XLMForSequenceClassification, XLMForTokenClassification, XLMForQuestionAnswering, XLMRobertaPreTrainedModel, XLMRobertaModel, XLMRobertaForMaskedLM, XLMRobertaForSequenceClassification, XLMRobertaForTokenClassification, XLMRobertaForQuestionAnswering, ASTPreTrainedModel, ASTModel, ASTForAudioClassification, WhisperPreTrainedModel, WhisperModel, WhisperForConditionalGeneration, VisionEncoderDecoderModel, CLIPPreTrainedModel, CLIPModel, CLIPTextModelWithProjection, CLIPVisionModelWithProjection, SiglipPreTrainedModel, SiglipModel, SiglipTextModel, SiglipVisionModel, ChineseCLIPPreTrainedModel, ChineseCLIPModel, CLIPSegPreTrainedModel, CLIPSegModel, CLIPSegForImageSegmentation, GPT2PreTrainedModel, GPT2Model, GPT2LMHeadModel, GPTNeoPreTrainedModel, GPTNeoModel, GPTNeoForCausalLM, GPTNeoXPreTrainedModel, GPTNeoXModel, GPTNeoXForCausalLM, GPTJPreTrainedModel, GPTJModel, GPTJForCausalLM, GPTBigCodePreTrainedModel, GPTBigCodeModel, GPTBigCodeForCausalLM, CodeGenPreTrainedModel, CodeGenModel, CodeGenForCausalLM, LlamaPreTrainedModel, LlamaModel, LlamaForCausalLM, Qwen2PreTrainedModel, Qwen2Model, Qwen2ForCausalLM, PhiPreTrainedModel, PhiModel, PhiForCausalLM, BloomPreTrainedModel, BloomModel, BloomForCausalLM, MptPreTrainedModel, MptModel, MptForCausalLM, OPTPreTrainedModel, OPTModel, OPTForCausalLM, ViTPreTrainedModel, ViTModel, ViTForImageClassification, FastViTPreTrainedModel, FastViTModel, FastViTForImageClassification, VitMattePreTrainedModel, VitMatteForImageMatting, MobileViTPreTrainedModel, MobileViTModel, MobileViTForImageClassification, MobileViTV2PreTrainedModel, MobileViTV2Model, MobileViTV2ForImageClassification, OwlViTPreTrainedModel, OwlViTModel, OwlViTForObjectDetection, Owlv2PreTrainedModel, Owlv2Model, Owlv2ForObjectDetection, BeitPreTrainedModel, BeitModel, BeitForImageClassification, DetrPreTrainedModel, DetrModel, DetrForObjectDetection, DetrForSegmentation, DetrObjectDetectionOutput, DetrSegmentationOutput, TableTransformerPreTrainedModel, TableTransformerModel, TableTransformerForObjectDetection, TableTransformerObjectDetectionOutput, DeiTPreTrainedModel, DeiTModel, DeiTForImageClassification, ResNetPreTrainedModel, ResNetModel, ResNetForImageClassification, SwinPreTrainedModel, SwinModel, SwinForImageClassification, Swin2SRPreTrainedModel, Swin2SRModel, Swin2SRForImageSuperResolution, DPTPreTrainedModel, DPTModel, DPTForDepthEstimation, DepthAnythingPreTrainedModel, DepthAnythingForDepthEstimation, GLPNPreTrainedModel, GLPNModel, GLPNForDepthEstimation, DonutSwinPreTrainedModel, DonutSwinModel, ConvNextPreTrainedModel, ConvNextModel, ConvNextForImageClassification, ConvNextV2PreTrainedModel, ConvNextV2Model, ConvNextV2ForImageClassification, Dinov2PreTrainedModel, Dinov2Model, Dinov2ForImageClassification, YolosPreTrainedModel, YolosModel, YolosForObjectDetection, YolosObjectDetectionOutput, SamPreTrainedModel, SamModel, SamImageSegmentationOutput, MarianPreTrainedModel, MarianModel, MarianMTModel, M2M100PreTrainedModel, M2M100Model, M2M100ForConditionalGeneration, Wav2Vec2PreTrainedModel, Wav2Vec2Model, Wav2Vec2ForCTC, Wav2Vec2ForSequenceClassification, Wav2Vec2ForAudioFrameClassification, UniSpeechPreTrainedModel, UniSpeechModel, UniSpeechForCTC, UniSpeechForSequenceClassification, UniSpeechSatPreTrainedModel, UniSpeechSatModel, UniSpeechSatForCTC, UniSpeechSatForSequenceClassification, UniSpeechSatForAudioFrameClassification, Wav2Vec2BertPreTrainedModel, Wav2Vec2BertModel, Wav2Vec2BertForCTC, Wav2Vec2BertForSequenceClassification, HubertPreTrainedModel, HubertModel, HubertForCTC, HubertForSequenceClassification, WavLMPreTrainedModel, WavLMModel, WavLMForCTC, WavLMForSequenceClassification, WavLMForXVector, WavLMForAudioFrameClassification, SpeechT5PreTrainedModel, SpeechT5Model, SpeechT5ForSpeechToText, SpeechT5ForTextToSpeech, SpeechT5HifiGan, TrOCRPreTrainedModel, TrOCRForCausalLM, MistralPreTrainedModel, MistralModel, MistralForCausalLM, Starcoder2PreTrainedModel, Starcoder2Model, Starcoder2ForCausalLM, FalconPreTrainedModel, FalconModel, FalconForCausalLM, ClapPreTrainedModel, ClapModel, ClapTextModelWithProjection, ClapAudioModelWithProjection, VitsPreTrainedModel, VitsModel, SegformerPreTrainedModel, SegformerModel, SegformerForImageClassification, SegformerForSemanticSegmentation, StableLmPreTrainedModel, StableLmModel, StableLmForCausalLM, EfficientNetPreTrainedModel, EfficientNetModel, EfficientNetForImageClassification, PretrainedMixin, MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_WITH_LM_HEAD_MAPPING_NAMES, MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_FOR_CTC_MAPPING_NAMES, MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_CLASS_TYPE_MAPPING, CUSTOM_MAPPING, AutoModel, AutoModelForSequenceClassification, AutoModelForTokenClassification, AutoModelForSeq2SeqLM, AutoModelForSpeechSeq2Seq, AutoModelForTextToSpectrogram, AutoModelForTextToWaveform, AutoModelForCausalLM, AutoModelForMaskedLM, AutoModelForQuestionAnswering, AutoModelForVision2Seq, AutoModelForImageClassification, AutoModelForImageSegmentation, AutoModelForSemanticSegmentation, AutoModelForObjectDetection, AutoModelForZeroShotObjectDetection, AutoModelForMaskGeneration, AutoModelForCTC, AutoModelForAudioClassification, AutoModelForXVector, AutoModelForAudioFrameClassification, AutoModelForDocumentQuestionAnswering, AutoModelForImageMatting, AutoModelForImageToImage, AutoModelForDepthEstimation, AutoModelForImageFeatureExtraction, Seq2SeqLMOutput, SequenceClassifierOutput, XVectorOutput, TokenClassifierOutput, MaskedLMOutput, QuestionAnsweringModelOutput, CausalLMOutput, CausalLMOutputWithPast, ImageMattingOutput, VitsModelOutput;
var init_models = __esm({
  "node_modules/@xenova/transformers/src/models.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_configs();
    init_core();
    init_hub();
    init_generation();
    init_tensor();
    init_onnx();
    init_transformers();
    ({ InferenceSession, Tensor: ONNXTensor2, env: env2 } = ONNX);
    MODEL_TYPES = {
      EncoderOnly: 0,
      EncoderDecoder: 1,
      Seq2Seq: 2,
      Vision2Seq: 3,
      DecoderOnly: 4,
      MaskGeneration: 5
    };
    MODEL_TYPE_MAPPING = /* @__PURE__ */ new Map();
    MODEL_NAME_TO_CLASS_MAPPING = /* @__PURE__ */ new Map();
    MODEL_CLASS_TO_NAME_MAPPING = /* @__PURE__ */ new Map();
    __name(constructSession, "constructSession");
    __name(validateInputs, "validateInputs");
    __name(sessionRun, "sessionRun");
    __name(replaceTensors, "replaceTensors");
    __name(toI64Tensor, "toI64Tensor");
    __name(prepareAttentionMask, "prepareAttentionMask");
    __name(preparePositionIds, "preparePositionIds");
    __name(boolTensor, "boolTensor");
    __name(seq2seqForward, "seq2seqForward");
    __name(seq2seqStartBeams, "seq2seqStartBeams");
    __name(seq2seqRunBeam, "seq2seqRunBeam");
    __name(seq2seqUpdatebeam, "seq2seqUpdatebeam");
    __name(encoderForward, "encoderForward");
    __name(decoderForward, "decoderForward");
    __name(decoderStartBeams, "decoderStartBeams");
    __name(decoderRunBeam, "decoderRunBeam");
    __name(decoderUpdatebeam, "decoderUpdatebeam");
    PreTrainedModel = class extends Callable {
      static {
        __name(this, "PreTrainedModel");
      }
      main_input_name = "input_ids";
      /**
       * Creates a new instance of the `PreTrainedModel` class.
       * @param {Object} config The model configuration.
       * @param {any} session session for the model.
       */
      constructor(config, session) {
        super();
        this.config = config;
        this.session = session;
        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
        const modelType = MODEL_TYPE_MAPPING.get(modelName);
        this.can_generate = false;
        this._runBeam = null;
        this._getStartBeams = null;
        this._updateBeam = null;
        this._forward = null;
        if (modelType === MODEL_TYPES.DecoderOnly) {
          this.can_generate = true;
          this._runBeam = decoderRunBeam;
          this._getStartBeams = decoderStartBeams;
          this._updateBeam = decoderUpdatebeam;
          this._forward = decoderForward;
        } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {
          this.can_generate = true;
          this._runBeam = seq2seqRunBeam;
          this._getStartBeams = seq2seqStartBeams;
          this._updateBeam = seq2seqUpdatebeam;
          this._forward = seq2seqForward;
        } else if (modelType === MODEL_TYPES.EncoderDecoder) {
          this._forward = encoderForward;
        } else {
          this._forward = encoderForward;
        }
      }
      /**
      * Disposes of all the ONNX sessions that were created during inference.
      * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.
      * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
      */
      async dispose() {
        const promises = [];
        for (let key of Object.keys(this)) {
          const item = this[key];
          if (item instanceof InferenceSession) {
            promises.push(item.handler.dispose());
          }
        }
        return await Promise.all(promises);
      }
      /**
       * Instantiate one of the model classes of the library from a pretrained model.
       * 
       * The model class to instantiate is selected based on the `model_type` property of the config object
       * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
       * 
       * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
       * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.
       *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
       *   user or organization name, like `dbmdz/bert-base-german-cased`.
       * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.
       * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the model.
       * 
       * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.
       */
      static async from_pretrained(pretrained_model_name_or_path, {
        quantized = true,
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main",
        model_file_name = null
      } = {}) {
        let options = {
          quantized,
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision,
          model_file_name
        };
        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);
        const modelType = MODEL_TYPE_MAPPING.get(modelName);
        let info;
        if (modelType === MODEL_TYPES.DecoderOnly) {
          info = await Promise.all([
            AutoConfig.from_pretrained(pretrained_model_name_or_path, options),
            constructSession(pretrained_model_name_or_path, options.model_file_name ?? "decoder_model_merged", options),
            getModelJSON(pretrained_model_name_or_path, "generation_config.json", false, options)
          ]);
        } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {
          info = await Promise.all([
            AutoConfig.from_pretrained(pretrained_model_name_or_path, options),
            constructSession(pretrained_model_name_or_path, "encoder_model", options),
            constructSession(pretrained_model_name_or_path, "decoder_model_merged", options),
            getModelJSON(pretrained_model_name_or_path, "generation_config.json", false, options)
          ]);
        } else if (modelType === MODEL_TYPES.MaskGeneration) {
          info = await Promise.all([
            AutoConfig.from_pretrained(pretrained_model_name_or_path, options),
            constructSession(pretrained_model_name_or_path, "vision_encoder", options),
            constructSession(pretrained_model_name_or_path, "prompt_encoder_mask_decoder", options)
          ]);
        } else if (modelType === MODEL_TYPES.EncoderDecoder) {
          info = await Promise.all([
            AutoConfig.from_pretrained(pretrained_model_name_or_path, options),
            constructSession(pretrained_model_name_or_path, "encoder_model", options),
            constructSession(pretrained_model_name_or_path, "decoder_model_merged", options)
          ]);
        } else {
          if (modelType !== MODEL_TYPES.EncoderOnly) {
            console.warn(`Model type for '${modelName ?? config?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`);
          }
          info = await Promise.all([
            AutoConfig.from_pretrained(pretrained_model_name_or_path, options),
            constructSession(pretrained_model_name_or_path, options.model_file_name ?? "model", options)
          ]);
        }
        return new this(...info);
      }
      /**
       * Runs the model with the provided inputs
       * @param {Object} model_inputs Object containing input tensors
       * @returns {Promise<Object>} Object containing output tensors
       */
      async _call(model_inputs) {
        return await this.forward(model_inputs);
      }
      /**
       * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method
       * will be chosen based on the model type.
       * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.
       * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.
       * @throws {Error} This method must be implemented in subclasses.
       */
      async forward(model_inputs) {
        return await this._forward(this, model_inputs);
      }
      /**
       * @param {import('./utils/generation.js').GenerationConfigType} generation_config 
       * @param {number} input_ids_seq_length The starting sequence length for the input ids.
       * @returns {LogitsProcessorList}
       * @private
       */
      _get_logits_processor(generation_config, input_ids_seq_length, logits_processor = null) {
        const processors = new LogitsProcessorList();
        if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1) {
          processors.push(new RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));
        }
        if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {
          processors.push(new NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));
        }
        if (generation_config.bad_words_ids !== null) {
          processors.push(new NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));
        }
        if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {
          processors.push(new MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));
        }
        if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {
          processors.push(new MinNewTokensLengthLogitsProcessor(
            input_ids_seq_length,
            generation_config.min_new_tokens,
            generation_config.eos_token_id
          ));
        }
        if (generation_config.forced_bos_token_id !== null) {
          processors.push(new ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));
        }
        if (generation_config.forced_eos_token_id !== null) {
          processors.push(new ForcedEOSTokenLogitsProcessor(
            generation_config.max_length,
            generation_config.forced_eos_token_id
          ));
        }
        if (generation_config.begin_suppress_tokens !== null) {
          let begin_index = input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null ? input_ids_seq_length : input_ids_seq_length + 1;
          if (generation_config.forced_decoder_ids !== null) {
            begin_index += generation_config.forced_decoder_ids[generation_config.forced_decoder_ids.length - 1][0];
          }
          processors.push(new SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));
        }
        if (generation_config.forced_decoder_ids !== null) {
          processors.push(new ForceTokensLogitsProcessor(generation_config.forced_decoder_ids));
        }
        if (logits_processor !== null) {
          processors.extend(logits_processor);
        }
        return processors;
      }
      /**
       * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.
       * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.
       * @param {import('./utils/generation.js').GenerationConfigType} generation_config A `GenerationConfig` object containing generation parameters.
       * @returns {import('./utils/generation.js').GenerationConfigType} The final generation config object to be used by the model for text generation.
       */
      _get_generation_config(generation_config) {
        let gen_config = new GenerationConfig(this.config);
        if ("generation_config" in this) {
          Object.assign(gen_config, this.generation_config);
        }
        if (generation_config !== null) {
          Object.assign(gen_config, generation_config);
        }
        return gen_config;
      }
      /**
       * @typedef {import('./utils/maths.js').TypedArray} TypedArray
       */
      /**
       * @typedef {{ sequences: Tensor, decoder_attentions: Tensor, cross_attentions: Tensor }} EncoderDecoderOutput
       * @typedef {Object} DecoderOutput
       * 
       * Generates text based on the given inputs and generation configuration using the model.
       * @param {Tensor|Array|TypedArray} inputs An array of input token IDs.
       * @param {Object|GenerationConfig|null} generation_config The generation configuration to use. If null, default configuration will be used.
       * @param {Object|null} logits_processor An optional logits processor to use. If null, a new LogitsProcessorList instance will be created.
       * @param {Object} options options
       * @param {Object} [options.inputs_attention_mask=null] An optional attention mask for the inputs.
       * @returns {Promise<number[][]|EncoderDecoderOutput|DecoderOutput>} An array of generated output sequences, where each sequence is an array of token IDs.
       * @throws {Error} Throws an error if the inputs array is empty.
       */
      async generate(inputs, generation_config = null, logits_processor = null, {
        inputs_attention_mask = null
      } = {}) {
        if (!this.can_generate) {
          const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
          let errorMessage = `The current model class (${modelName}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;
          const modelType = this.config.model_type;
          const possibleInfo = MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(modelType) ?? MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES.get(modelType) ?? MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES.get(modelType) ?? MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES.get(modelType);
          if (possibleInfo) {
            errorMessage += ` Please use the following class instead: '${possibleInfo[0]}'`;
          }
          throw Error(errorMessage);
        }
        if (!(inputs instanceof Tensor) && !isTypedArray(inputs) && !Array.isArray(inputs)) {
          throw Error(`\`inputs\` must be a Tensor, TypedArray, or Array, but is "${inputs.constructor.name}".`);
        }
        let input_ids_seq_length;
        if (this.config.is_encoder_decoder) {
          input_ids_seq_length = 0;
        } else {
          input_ids_seq_length = inputs instanceof Tensor ? inputs.dims.at(-1) : inputs.length;
          if (input_ids_seq_length === 0) {
            throw Error("Must supply a non-empty array of input token ids.");
          }
        }
        generation_config = this._get_generation_config(generation_config);
        logits_processor = logits_processor ?? new LogitsProcessorList();
        logits_processor = this._get_logits_processor(
          generation_config,
          input_ids_seq_length,
          logits_processor
        );
        let eos_token_ids = generation_config.eos_token_id;
        if (eos_token_ids !== null && !Array.isArray(eos_token_ids)) {
          eos_token_ids = [eos_token_ids];
        }
        let numOutputTokens = 1;
        const maxOutputTokens = numOutputTokens + (generation_config.max_new_tokens ?? Infinity);
        const useMaxLength = Number.isInteger(generation_config.max_length) && (generation_config.max_new_tokens ?? null) === null;
        let sampler = Sampler.getSampler(generation_config);
        let beams = this.getStartBeams(inputs, generation_config, numOutputTokens, inputs_attention_mask);
        while (beams.some((x) => !x.done) && numOutputTokens < maxOutputTokens) {
          let newest_beams = [];
          for (let beam of beams) {
            if (beam.done) {
              newest_beams.push(beam);
              continue;
            }
            if (useMaxLength && beam.output_token_ids.length >= generation_config.max_length) {
              beam.done = true;
              newest_beams.push(beam);
              continue;
            }
            let output = await this.runBeam(beam);
            if (generation_config.output_attentions) {
              this.addAttentionsToBeam(beam, output);
            }
            if (generation_config.output_scores) {
            }
            let logits = output.logits.slice(null, -1, null);
            logits_processor(beam.output_token_ids, logits);
            let sampledTokens = sampler(logits);
            for (let [newTokenId, logProb] of sampledTokens) {
              let newBeam = { ...beam };
              this.updateBeam(newBeam, newTokenId);
              newBeam.score += logProb;
              if (eos_token_ids && eos_token_ids.includes(newTokenId)) {
                newBeam.done = true;
              }
              newest_beams.push(newBeam);
            }
          }
          ++numOutputTokens;
          newest_beams = this.groupBeams(newest_beams).map(
            (group) => group.sort((a, b) => b.score - a.score).slice(0, generation_config.num_beams)
            // remove outside beam width
          );
          beams = newest_beams.flat();
          if (generation_config.callback_function) {
            generation_config.callback_function(beams);
          }
        }
        const groupedBeams = this.groupBeams(beams);
        const getFlattened = /* @__PURE__ */ __name((key) => groupedBeams.map(
          (batch) => {
            if (generation_config.num_return_sequences > 1) {
              return batch.slice(0, generation_config.num_return_sequences).map((x) => x[key]);
            } else {
              return [batch[0][key]];
            }
          }
        ).flat(), "getFlattened");
        const sequences = getFlattened("output_token_ids");
        if (generation_config.return_dict_in_generate) {
          const decoder_attentions = getFlattened("decoder_attentions");
          const cross_attentions = getFlattened("cross_attentions");
          return {
            sequences,
            decoder_attentions,
            cross_attentions
          };
        } else {
          return sequences;
        }
      }
      /**
       * Helper function to add attentions to beam
       * @param {Object} beam 
       * @param {Object} output
       * @private 
       */
      addAttentionsToBeam(beam, output) {
        if (this.config.is_encoder_decoder) {
          if (!output.cross_attentions || output.cross_attentions.length === 0) {
            throw Error(
              "`output_attentions` is true, but the model did not produce cross-attentions. This is most likely because the model was not exported with `output_attentions=True`."
            );
          }
          if (!beam.cross_attentions) {
            beam.cross_attentions = [];
          }
          beam.cross_attentions.push(output.cross_attentions);
        }
        if (!output.decoder_attentions || output.decoder_attentions.length === 0) {
          throw Error(
            "`output_attentions` is true, but the model did not produce decoder-attentions. This is most likely because the model was not exported with `output_attentions=True`."
          );
        }
        if (!beam.decoder_attentions) {
          beam.decoder_attentions = [];
        }
        beam.decoder_attentions.push(output.decoder_attentions);
      }
      /**
       * Groups an array of beam objects by their ids.
       *
       * @param {Array} beams The array of beam objects to group.
       * @returns {Array} An array of arrays, where each inner array contains beam objects with the same id.
       */
      groupBeams(beams) {
        const groups = /* @__PURE__ */ Object.create(null);
        for (const obj of beams) {
          if (groups[obj.id] === void 0) {
            groups[obj.id] = [obj];
          } else {
            groups[obj.id].push(obj);
          }
        }
        return Object.values(groups);
      }
      /**
       * Returns an object containing past key values from the given decoder results object.
       *
       * @param {Object} decoderResults The decoder results object.
       * @param {Object} pastKeyValues The previous past key values.
       * @returns {Object} An object containing past key values.
       */
      getPastKeyValues(decoderResults, pastKeyValues) {
        const pkvs = /* @__PURE__ */ Object.create(null);
        for (const name2 in decoderResults) {
          if (name2.startsWith("present")) {
            let newName = name2.replace("present", "past_key_values");
            if (pastKeyValues && name2.includes("encoder")) {
              pkvs[newName] = pastKeyValues[newName];
            } else {
              pkvs[newName] = decoderResults[name2];
            }
          }
        }
        return pkvs;
      }
      /**
       * Returns an object containing attentions from the given decoder results object.
       *
       * @param {Object} decoderResults The decoder results object.
       * @returns {Object} An object containing attentions.
       */
      getAttentions(decoderResults) {
        const attns = /* @__PURE__ */ Object.create(null);
        for (const attnName of ["cross_attentions", "decoder_attentions"]) {
          const result = [];
          for (const name2 in decoderResults) {
            if (name2.startsWith(attnName)) {
              const index = name2.split(".").pop();
              result[index] = decoderResults[name2];
            }
          }
          attns[attnName] = result;
        }
        return attns;
      }
      /**
       * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.
       *
       * @param {Object} decoderFeeds The decoder feeds object to add past key values to.
       * @param {Object} pastKeyValues An object containing past key values.
       */
      addPastKeyValues(decoderFeeds, pastKeyValues) {
        if (pastKeyValues) {
          Object.assign(decoderFeeds, pastKeyValues);
        } else {
          const batch_size = 1;
          if (this.config.is_encoder_decoder && (this.add_encoder_pkv ?? true)) {
            let encoder_dims = [batch_size, this.num_encoder_heads, 0, this.encoder_dim_kv];
            let decoder_dims = [batch_size, this.num_decoder_heads, 0, this.decoder_dim_kv];
            for (let i = 0; i < this.num_decoder_layers; ++i) {
              decoderFeeds[`past_key_values.${i}.encoder.key`] = new Tensor("float32", [], encoder_dims);
              decoderFeeds[`past_key_values.${i}.encoder.value`] = new Tensor("float32", [], encoder_dims);
              decoderFeeds[`past_key_values.${i}.decoder.key`] = new Tensor("float32", [], decoder_dims);
              decoderFeeds[`past_key_values.${i}.decoder.value`] = new Tensor("float32", [], decoder_dims);
            }
          } else if (this.config.model_type === "falcon") {
            let dims = [batch_size * this.num_heads, 0, this.dim_kv];
            for (let i = 0; i < this.num_layers; ++i) {
              decoderFeeds[`past_key_values.${i}.key`] = new Tensor("float32", [], dims);
              decoderFeeds[`past_key_values.${i}.value`] = new Tensor("float32", [], dims);
            }
          } else if (this.config.multi_query) {
            let dims = [batch_size * this.num_heads, 0, 2 * this.dim_kv];
            for (let i = 0; i < this.num_layers; ++i) {
              decoderFeeds[`past_key_values.${i}.key_value`] = new Tensor("float32", [], dims);
            }
          } else if (this.config.model_type === "bloom") {
            let keyDims = [batch_size * this.num_heads, this.dim_kv, 0];
            let valueDims = [batch_size * this.num_heads, 0, this.dim_kv];
            for (let i = 0; i < this.num_layers; ++i) {
              decoderFeeds[`past_key_values.${i}.key`] = new Tensor("float32", [], keyDims);
              decoderFeeds[`past_key_values.${i}.value`] = new Tensor("float32", [], valueDims);
            }
          } else {
            let dims = [batch_size, this.num_heads, 0, this.dim_kv];
            for (let i = 0; i < this.num_layers; ++i) {
              decoderFeeds[`past_key_values.${i}.key`] = new Tensor("float32", [], dims);
              decoderFeeds[`past_key_values.${i}.value`] = new Tensor("float32", [], dims);
            }
          }
        }
      }
      /**
       * Initializes and returns the beam for text generation task
       * @param {Tensor} inputTokenIds The input token ids.
       * @param {Object} generation_config The generation config.
       * @param {number} numOutputTokens The number of tokens to be generated.
       * @param {Tensor} inputs_attention_mask Optional input attention mask.
       * @returns {any} A Beam object representing the initialized beam.
       * @private
       */
      getStartBeams(inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask) {
        return this._getStartBeams(this, inputTokenIds, generation_config, numOutputTokens, inputs_attention_mask);
      }
      /**
       * Runs a single step of the beam search generation algorithm.
       * @param {any} beam The current beam being generated.
       * @returns {Promise<any>} The updated beam after a single generation step.
       * @private
       */
      async runBeam(beam) {
        return await this._runBeam(this, beam);
      }
      /**
       * Update a beam with a new token ID.
       * @param {Object} beam The beam to update.
       * @param {number} newTokenId The new token ID to add to the beam's output.
       * @private
       */
      updateBeam(beam, newTokenId) {
        return this._updateBeam(beam, newTokenId);
      }
    };
    ModelOutput = class {
      static {
        __name(this, "ModelOutput");
      }
    };
    BaseModelOutput = class extends ModelOutput {
      static {
        __name(this, "BaseModelOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.
       * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.
       * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.
       */
      constructor({ last_hidden_state, hidden_states = null, attentions = null }) {
        super();
        this.last_hidden_state = last_hidden_state;
        this.hidden_states = hidden_states;
        this.attentions = attentions;
      }
    };
    BertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BertPreTrainedModel");
      }
    };
    BertModel = class extends BertPreTrainedModel {
      static {
        __name(this, "BertModel");
      }
    };
    BertForMaskedLM = class extends BertPreTrainedModel {
      static {
        __name(this, "BertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    BertForSequenceClassification = class extends BertPreTrainedModel {
      static {
        __name(this, "BertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    BertForTokenClassification = class extends BertPreTrainedModel {
      static {
        __name(this, "BertForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    BertForQuestionAnswering = class extends BertPreTrainedModel {
      static {
        __name(this, "BertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    NomicBertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "NomicBertPreTrainedModel");
      }
    };
    NomicBertModel = class extends NomicBertPreTrainedModel {
      static {
        __name(this, "NomicBertModel");
      }
    };
    RoFormerPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "RoFormerPreTrainedModel");
      }
    };
    RoFormerModel = class extends RoFormerPreTrainedModel {
      static {
        __name(this, "RoFormerModel");
      }
    };
    RoFormerForMaskedLM = class extends RoFormerPreTrainedModel {
      static {
        __name(this, "RoFormerForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    RoFormerForSequenceClassification = class extends RoFormerPreTrainedModel {
      static {
        __name(this, "RoFormerForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    RoFormerForTokenClassification = class extends RoFormerPreTrainedModel {
      static {
        __name(this, "RoFormerForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    RoFormerForQuestionAnswering = class extends RoFormerPreTrainedModel {
      static {
        __name(this, "RoFormerForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    ConvBertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ConvBertPreTrainedModel");
      }
    };
    ConvBertModel = class extends ConvBertPreTrainedModel {
      static {
        __name(this, "ConvBertModel");
      }
    };
    ConvBertForMaskedLM = class extends ConvBertPreTrainedModel {
      static {
        __name(this, "ConvBertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    ConvBertForSequenceClassification = class extends ConvBertPreTrainedModel {
      static {
        __name(this, "ConvBertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    ConvBertForTokenClassification = class extends ConvBertPreTrainedModel {
      static {
        __name(this, "ConvBertForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    ConvBertForQuestionAnswering = class extends ConvBertPreTrainedModel {
      static {
        __name(this, "ConvBertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    ElectraPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ElectraPreTrainedModel");
      }
    };
    ElectraModel = class extends ElectraPreTrainedModel {
      static {
        __name(this, "ElectraModel");
      }
    };
    ElectraForMaskedLM = class extends ElectraPreTrainedModel {
      static {
        __name(this, "ElectraForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    ElectraForSequenceClassification = class extends ElectraPreTrainedModel {
      static {
        __name(this, "ElectraForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    ElectraForTokenClassification = class extends ElectraPreTrainedModel {
      static {
        __name(this, "ElectraForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    ElectraForQuestionAnswering = class extends ElectraPreTrainedModel {
      static {
        __name(this, "ElectraForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    CamembertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "CamembertPreTrainedModel");
      }
    };
    CamembertModel = class extends CamembertPreTrainedModel {
      static {
        __name(this, "CamembertModel");
      }
    };
    CamembertForMaskedLM = class extends CamembertPreTrainedModel {
      static {
        __name(this, "CamembertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    CamembertForSequenceClassification = class extends CamembertPreTrainedModel {
      static {
        __name(this, "CamembertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    CamembertForTokenClassification = class extends CamembertPreTrainedModel {
      static {
        __name(this, "CamembertForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    CamembertForQuestionAnswering = class extends CamembertPreTrainedModel {
      static {
        __name(this, "CamembertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    DebertaPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DebertaPreTrainedModel");
      }
    };
    DebertaModel = class extends DebertaPreTrainedModel {
      static {
        __name(this, "DebertaModel");
      }
    };
    DebertaForMaskedLM = class extends DebertaPreTrainedModel {
      static {
        __name(this, "DebertaForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    DebertaForSequenceClassification = class extends DebertaPreTrainedModel {
      static {
        __name(this, "DebertaForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    DebertaForTokenClassification = class extends DebertaPreTrainedModel {
      static {
        __name(this, "DebertaForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    DebertaForQuestionAnswering = class extends DebertaPreTrainedModel {
      static {
        __name(this, "DebertaForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    DebertaV2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DebertaV2PreTrainedModel");
      }
    };
    DebertaV2Model = class extends DebertaV2PreTrainedModel {
      static {
        __name(this, "DebertaV2Model");
      }
    };
    DebertaV2ForMaskedLM = class extends DebertaV2PreTrainedModel {
      static {
        __name(this, "DebertaV2ForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    DebertaV2ForSequenceClassification = class extends DebertaV2PreTrainedModel {
      static {
        __name(this, "DebertaV2ForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    DebertaV2ForTokenClassification = class extends DebertaV2PreTrainedModel {
      static {
        __name(this, "DebertaV2ForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    DebertaV2ForQuestionAnswering = class extends DebertaV2PreTrainedModel {
      static {
        __name(this, "DebertaV2ForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    DistilBertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DistilBertPreTrainedModel");
      }
    };
    DistilBertModel = class extends DistilBertPreTrainedModel {
      static {
        __name(this, "DistilBertModel");
      }
    };
    DistilBertForSequenceClassification = class extends DistilBertPreTrainedModel {
      static {
        __name(this, "DistilBertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    DistilBertForTokenClassification = class extends DistilBertPreTrainedModel {
      static {
        __name(this, "DistilBertForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    DistilBertForQuestionAnswering = class extends DistilBertPreTrainedModel {
      static {
        __name(this, "DistilBertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    DistilBertForMaskedLM = class extends DistilBertPreTrainedModel {
      static {
        __name(this, "DistilBertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    EsmPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "EsmPreTrainedModel");
      }
    };
    EsmModel = class extends EsmPreTrainedModel {
      static {
        __name(this, "EsmModel");
      }
    };
    EsmForMaskedLM = class extends EsmPreTrainedModel {
      static {
        __name(this, "EsmForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    EsmForSequenceClassification = class extends EsmPreTrainedModel {
      static {
        __name(this, "EsmForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    EsmForTokenClassification = class extends EsmPreTrainedModel {
      static {
        __name(this, "EsmForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    MobileBertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MobileBertPreTrainedModel");
      }
    };
    MobileBertModel = class extends MobileBertPreTrainedModel {
      static {
        __name(this, "MobileBertModel");
      }
    };
    MobileBertForMaskedLM = class extends MobileBertPreTrainedModel {
      static {
        __name(this, "MobileBertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    MobileBertForSequenceClassification = class extends MobileBertPreTrainedModel {
      static {
        __name(this, "MobileBertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    MobileBertForQuestionAnswering = class extends MobileBertPreTrainedModel {
      static {
        __name(this, "MobileBertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    MPNetPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MPNetPreTrainedModel");
      }
    };
    MPNetModel = class extends MPNetPreTrainedModel {
      static {
        __name(this, "MPNetModel");
      }
    };
    MPNetForMaskedLM = class extends MPNetPreTrainedModel {
      static {
        __name(this, "MPNetForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    MPNetForSequenceClassification = class extends MPNetPreTrainedModel {
      static {
        __name(this, "MPNetForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    MPNetForTokenClassification = class extends MPNetPreTrainedModel {
      static {
        __name(this, "MPNetForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    MPNetForQuestionAnswering = class extends MPNetPreTrainedModel {
      static {
        __name(this, "MPNetForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    SqueezeBertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SqueezeBertPreTrainedModel");
      }
    };
    SqueezeBertModel = class extends SqueezeBertPreTrainedModel {
      static {
        __name(this, "SqueezeBertModel");
      }
    };
    SqueezeBertForMaskedLM = class extends SqueezeBertPreTrainedModel {
      static {
        __name(this, "SqueezeBertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    SqueezeBertForSequenceClassification = class extends SqueezeBertPreTrainedModel {
      static {
        __name(this, "SqueezeBertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    SqueezeBertForQuestionAnswering = class extends SqueezeBertPreTrainedModel {
      static {
        __name(this, "SqueezeBertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    AlbertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "AlbertPreTrainedModel");
      }
    };
    AlbertModel = class extends AlbertPreTrainedModel {
      static {
        __name(this, "AlbertModel");
      }
    };
    AlbertForSequenceClassification = class extends AlbertPreTrainedModel {
      static {
        __name(this, "AlbertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    AlbertForQuestionAnswering = class extends AlbertPreTrainedModel {
      static {
        __name(this, "AlbertForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    AlbertForMaskedLM = class extends AlbertPreTrainedModel {
      static {
        __name(this, "AlbertForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    T5PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "T5PreTrainedModel");
      }
    };
    T5Model = class extends T5PreTrainedModel {
      static {
        __name(this, "T5Model");
      }
    };
    T5ForConditionalGeneration = class extends T5PreTrainedModel {
      static {
        __name(this, "T5ForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `T5ForConditionalGeneration` class.
       * @param {Object} config The model configuration.
       * @param {any} session session for the model.
       * @param {any} decoder_merged_session session for the decoder.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.num_decoder_layers;
        this.num_decoder_heads = this.config.num_heads;
        this.decoder_dim_kv = this.config.d_kv;
        this.num_encoder_layers = this.config.num_layers;
        this.num_encoder_heads = this.config.num_heads;
        this.encoder_dim_kv = this.config.d_kv;
      }
    };
    LongT5PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "LongT5PreTrainedModel");
      }
    };
    LongT5Model = class extends LongT5PreTrainedModel {
      static {
        __name(this, "LongT5Model");
      }
    };
    LongT5ForConditionalGeneration = class extends LongT5PreTrainedModel {
      static {
        __name(this, "LongT5ForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `LongT5ForConditionalGeneration` class.
       * @param {Object} config The model configuration.
       * @param {any} session session for the model.
       * @param {any} decoder_merged_session session for the decoder.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.num_decoder_layers;
        this.num_decoder_heads = this.config.num_heads;
        this.decoder_dim_kv = this.config.d_kv;
        this.num_encoder_layers = this.config.num_layers;
        this.num_encoder_heads = this.config.num_heads;
        this.encoder_dim_kv = this.config.d_kv;
      }
    };
    MT5PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MT5PreTrainedModel");
      }
    };
    MT5Model = class extends MT5PreTrainedModel {
      static {
        __name(this, "MT5Model");
      }
    };
    MT5ForConditionalGeneration = class extends MT5PreTrainedModel {
      static {
        __name(this, "MT5ForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `MT5ForConditionalGeneration` class.
       * @param {any} config The model configuration.
       * @param {any} session The ONNX session containing the encoder weights.
       * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.num_decoder_layers;
        this.num_decoder_heads = this.config.num_heads;
        this.decoder_dim_kv = this.config.d_kv;
        this.num_encoder_layers = this.config.num_layers;
        this.num_encoder_heads = this.config.num_heads;
        this.encoder_dim_kv = this.config.d_kv;
      }
    };
    BartPretrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BartPretrainedModel");
      }
    };
    BartModel = class extends BartPretrainedModel {
      static {
        __name(this, "BartModel");
      }
    };
    BartForConditionalGeneration = class extends BartPretrainedModel {
      static {
        __name(this, "BartForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `BartForConditionalGeneration` class.
       * @param {Object} config The configuration object for the Bart model.
       * @param {Object} session The ONNX session used to execute the model.
       * @param {Object} decoder_merged_session The ONNX session used to execute the decoder.
       * @param {Object} generation_config The generation configuration object.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    BartForSequenceClassification = class extends BartPretrainedModel {
      static {
        __name(this, "BartForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    MBartPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MBartPreTrainedModel");
      }
    };
    MBartModel = class extends MBartPreTrainedModel {
      static {
        __name(this, "MBartModel");
      }
    };
    MBartForConditionalGeneration = class extends MBartPreTrainedModel {
      static {
        __name(this, "MBartForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `MBartForConditionalGeneration` class.
       * @param {Object} config The configuration object for the Bart model.
       * @param {Object} session The ONNX session used to execute the model.
       * @param {Object} decoder_merged_session The ONNX session used to execute the decoder.
       * @param {Object} generation_config The generation configuration object.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    MBartForSequenceClassification = class extends MBartPreTrainedModel {
      static {
        __name(this, "MBartForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    MBartForCausalLM = class extends MBartPreTrainedModel {
      static {
        __name(this, "MBartForCausalLM");
      }
      /**
       * Creates a new instance of the `MBartForCausalLM` class.
       * @param {Object} config Configuration object for the model.
       * @param {Object} decoder_merged_session ONNX Session object for the decoder.
       * @param {Object} generation_config Configuration object for the generation process.
       */
      constructor(config, decoder_merged_session, generation_config) {
        super(config, decoder_merged_session);
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    BlenderbotPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BlenderbotPreTrainedModel");
      }
    };
    BlenderbotModel = class extends BlenderbotPreTrainedModel {
      static {
        __name(this, "BlenderbotModel");
      }
    };
    BlenderbotForConditionalGeneration = class extends BlenderbotPreTrainedModel {
      static {
        __name(this, "BlenderbotForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `BlenderbotForConditionalGeneration` class.
       * @param {any} config The model configuration.
       * @param {any} session The ONNX session containing the encoder weights.
       * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    BlenderbotSmallPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BlenderbotSmallPreTrainedModel");
      }
    };
    BlenderbotSmallModel = class extends BlenderbotSmallPreTrainedModel {
      static {
        __name(this, "BlenderbotSmallModel");
      }
    };
    BlenderbotSmallForConditionalGeneration = class extends BlenderbotSmallPreTrainedModel {
      static {
        __name(this, "BlenderbotSmallForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `BlenderbotForConditionalGeneration` class.
       * @param {any} config The model configuration.
       * @param {any} session The ONNX session containing the encoder weights.
       * @param {any} decoder_merged_session The ONNX session containing the merged decoder weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    RobertaPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "RobertaPreTrainedModel");
      }
    };
    RobertaModel = class extends RobertaPreTrainedModel {
      static {
        __name(this, "RobertaModel");
      }
    };
    RobertaForMaskedLM = class extends RobertaPreTrainedModel {
      static {
        __name(this, "RobertaForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    RobertaForSequenceClassification = class extends RobertaPreTrainedModel {
      static {
        __name(this, "RobertaForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    RobertaForTokenClassification = class extends RobertaPreTrainedModel {
      static {
        __name(this, "RobertaForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    RobertaForQuestionAnswering = class extends RobertaPreTrainedModel {
      static {
        __name(this, "RobertaForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    XLMPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "XLMPreTrainedModel");
      }
    };
    XLMModel = class extends XLMPreTrainedModel {
      static {
        __name(this, "XLMModel");
      }
    };
    XLMWithLMHeadModel = class extends XLMPreTrainedModel {
      static {
        __name(this, "XLMWithLMHeadModel");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    XLMForSequenceClassification = class extends XLMPreTrainedModel {
      static {
        __name(this, "XLMForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    XLMForTokenClassification = class extends XLMPreTrainedModel {
      static {
        __name(this, "XLMForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    XLMForQuestionAnswering = class extends XLMPreTrainedModel {
      static {
        __name(this, "XLMForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    XLMRobertaPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "XLMRobertaPreTrainedModel");
      }
    };
    XLMRobertaModel = class extends XLMRobertaPreTrainedModel {
      static {
        __name(this, "XLMRobertaModel");
      }
    };
    XLMRobertaForMaskedLM = class extends XLMRobertaPreTrainedModel {
      static {
        __name(this, "XLMRobertaForMaskedLM");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<MaskedLMOutput>} returned object
       */
      async _call(model_inputs) {
        return new MaskedLMOutput(await super._call(model_inputs));
      }
    };
    XLMRobertaForSequenceClassification = class extends XLMRobertaPreTrainedModel {
      static {
        __name(this, "XLMRobertaForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} returned object
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    XLMRobertaForTokenClassification = class extends XLMRobertaPreTrainedModel {
      static {
        __name(this, "XLMRobertaForTokenClassification");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    XLMRobertaForQuestionAnswering = class extends XLMRobertaPreTrainedModel {
      static {
        __name(this, "XLMRobertaForQuestionAnswering");
      }
      /**
       * Calls the model on new inputs.
       *
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<QuestionAnsweringModelOutput>} returned object
       */
      async _call(model_inputs) {
        return new QuestionAnsweringModelOutput(await super._call(model_inputs));
      }
    };
    ASTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ASTPreTrainedModel");
      }
    };
    ASTModel = class extends ASTPreTrainedModel {
      static {
        __name(this, "ASTModel");
      }
    };
    ASTForAudioClassification = class extends ASTPreTrainedModel {
      static {
        __name(this, "ASTForAudioClassification");
      }
    };
    WhisperPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "WhisperPreTrainedModel");
      }
    };
    WhisperModel = class extends WhisperPreTrainedModel {
      static {
        __name(this, "WhisperModel");
      }
    };
    WhisperForConditionalGeneration = class extends WhisperPreTrainedModel {
      static {
        __name(this, "WhisperForConditionalGeneration");
      }
      requires_attention_mask = false;
      main_input_name = "input_features";
      /**
       * Creates a new instance of the `WhisperForConditionalGeneration` class.
       * @param {Object} config Configuration object for the model.
       * @param {Object} session ONNX Session object for the model.
       * @param {Object} decoder_merged_session ONNX Session object for the decoder.
       * @param {Object} generation_config Configuration object for the generation process.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
      /**
       * @typedef {Object} WhisperGenerationConfig
       * @extends GenerationConfig
       * @property {boolean} [return_timestamps=null] Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.
       * @property {boolean} [return_token_timestamps=null] Whether to return token-level timestamps
       * with the text. This can be used with or without the `return_timestamps` option. To get word-level
       * timestamps, use the tokenizer to group the tokens into words.
       * @property {number} [num_frames=null]  The number of audio frames available in this chunk. This is only used generating word-level timestamps.
       */
      /**
       * Generates outputs based on input and generation configuration.
       * @param {Object} inputs Input data for the model.
       * @param {WhisperGenerationConfig} generation_config Configuration object for the generation process.
       * @param {Object} logits_processor Optional logits processor object.
       * @returns {Promise<Object>} Promise object represents the generated outputs.
       */
      async generate(inputs, generation_config = null, logits_processor = null) {
        generation_config = this._get_generation_config(generation_config);
        generation_config.return_timestamps ??= false;
        if (generation_config.return_timestamps) {
          logits_processor = [new WhisperTimeStampLogitsProcessor(generation_config)];
        }
        if (generation_config.return_token_timestamps) {
          generation_config.output_attentions = true;
          generation_config.return_dict_in_generate = true;
          if (generation_config.task === "translate") {
            console.warn("Token-level timestamps may not be reliable for task 'translate'.");
          }
          if (!generation_config.alignment_heads) {
            throw new Error(
              "Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config."
            );
          }
        }
        const outputs = await super.generate(inputs, generation_config, logits_processor);
        if (generation_config.return_token_timestamps && generation_config.alignment_heads) {
          outputs["token_timestamps"] = this._extract_token_timestamps(
            outputs,
            generation_config.alignment_heads,
            generation_config.num_frames
          );
        }
        return outputs;
      }
      /**
       * Calculates token-level timestamps using the encoder-decoder cross-attentions and
       * dynamic time-warping (DTW) to map each output token to a position in the input audio.
       * @param {Object} generate_outputs Outputs generated by the model
       * @param {Tensor[][][]} generate_outputs.cross_attentions The cross attentions output by the model
       * @param {Tensor[][][]} generate_outputs.decoder_attentions The decoder attentions output by the model
       * @param {number[][]} generate_outputs.sequences The sequences output by the model
       * @param {number[][]} alignment_heads Alignment heads of the model
       * @param {number} [num_frames=null] Number of frames in the input audio.
       * @param {number} [time_precision=0.02] Precision of the timestamps in seconds
       * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token
       */
      _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {
        if (!generate_outputs.cross_attentions) {
          throw new Error(
            "Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`."
          );
        }
        let median_filter_width = this.config.median_filter_width;
        if (median_filter_width === void 0) {
          console.warn("Model config has no `median_filter_width`, using default value of 7.");
          median_filter_width = 7;
        }
        const batchedMatrices = generate_outputs.cross_attentions.map((batch) => {
          let cross_attentions = Array.from(
            { length: this.config.decoder_layers },
            (_, i) => cat(batch.map((x) => x[i]), 2)
          );
          let weights = stack(alignment_heads.map(([l, h]) => {
            return num_frames ? cross_attentions[l].slice(null, h, null, [0, num_frames]) : cross_attentions[l].slice(null, h);
          }));
          weights = weights.transpose(1, 0, 2, 3);
          let [std, calculatedMean] = std_mean(weights, -2, 0, true);
          let smoothedWeights = weights.clone();
          for (let a = 0; a < smoothedWeights.dims[0]; ++a) {
            let aTensor = smoothedWeights[a];
            for (let b = 0; b < aTensor.dims[0]; ++b) {
              let bTensor = aTensor[b];
              const stdTensor = std[a][b][0];
              const meanTensor = calculatedMean[a][b][0];
              for (let c = 0; c < bTensor.dims[0]; ++c) {
                let cTensor = bTensor[c];
                for (let d = 0; d < cTensor.data.length; ++d) {
                  cTensor.data[d] = (cTensor.data[d] - meanTensor.data[d]) / stdTensor.data[d];
                }
                cTensor.data.set(medianFilter(cTensor.data, median_filter_width));
              }
            }
          }
          const matrix = mean(smoothedWeights, 1);
          return matrix;
        });
        const timestampsShape = [generate_outputs.sequences.length, generate_outputs.sequences[0].length];
        const timestamps = new Tensor(
          "float32",
          new Float32Array(timestampsShape[0] * timestampsShape[1]),
          timestampsShape
        );
        for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {
          const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);
          let [text_indices, time_indices] = dynamicTimeWarping(matrix);
          let diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);
          let jumps = mergeArrays([1], diffs).map((x) => !!x);
          let jump_times = [];
          for (let i = 0; i < jumps.length; ++i) {
            if (jumps[i]) {
              jump_times.push(time_indices[i] * time_precision);
            }
          }
          timestamps[batch_idx].data.set(jump_times, 1);
        }
        return timestamps;
      }
    };
    VisionEncoderDecoderModel = class extends PreTrainedModel {
      static {
        __name(this, "VisionEncoderDecoderModel");
      }
      main_input_name = "pixel_values";
      /**
       * Creates a new instance of the `VisionEncoderDecoderModel` class.
       * @param {Object} config The configuration object specifying the hyperparameters and other model settings.
       * @param {Object} session The ONNX session containing the encoder model.
       * @param {any} decoder_merged_session The ONNX session containing the merged decoder model.
       * @param {Object} generation_config Configuration object for the generation process.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        const encoderConfig = this.config.encoder;
        const decoderConfig = this.config.decoder;
        const encoderModelType = encoderConfig.model_type;
        const encoderModel = MODEL_MAPPING_NAMES_ENCODER_ONLY.get(encoderModelType) ?? MODEL_MAPPING_NAMES_ENCODER_DECODER.get(encoderModelType);
        if (!encoderModel) {
          console.warn(`Model type for encoder '${encoderModelType}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`);
        }
        const decoderModel = MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(decoderConfig.model_type);
        if (!decoderModel) {
          throw new Error(`Unable to construct \`VisionEncoderDecoder\` due to unsupported decoder: "${this.config.decoder.model_type}"`);
        }
        const decoderModelClass = decoderModel[1];
        const decoder = new decoderModelClass(decoderConfig, decoder_merged_session, generation_config);
        this.add_encoder_pkv = "num_decoder_layers" in decoder;
        if (this.add_encoder_pkv) {
          this.num_decoder_layers = decoder.num_decoder_layers;
          this.num_decoder_heads = decoder.num_decoder_heads;
          this.decoder_dim_kv = decoder.decoder_dim_kv;
          this.num_encoder_layers = decoder.num_encoder_layers;
          this.num_encoder_heads = decoder.num_encoder_heads;
          this.encoder_dim_kv = decoder.encoder_dim_kv;
        } else {
          this.num_layers = decoder.num_layers;
          this.num_heads = decoder.num_heads;
          this.dim_kv = decoder.dim_kv;
        }
      }
    };
    CLIPPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "CLIPPreTrainedModel");
      }
    };
    CLIPModel = class extends CLIPPreTrainedModel {
      static {
        __name(this, "CLIPModel");
      }
    };
    CLIPTextModelWithProjection = class extends CLIPPreTrainedModel {
      static {
        __name(this, "CLIPTextModelWithProjection");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "text_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    CLIPVisionModelWithProjection = class extends CLIPPreTrainedModel {
      static {
        __name(this, "CLIPVisionModelWithProjection");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "vision_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    SiglipPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SiglipPreTrainedModel");
      }
    };
    SiglipModel = class extends SiglipPreTrainedModel {
      static {
        __name(this, "SiglipModel");
      }
    };
    SiglipTextModel = class extends SiglipPreTrainedModel {
      static {
        __name(this, "SiglipTextModel");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "text_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    SiglipVisionModel = class extends CLIPPreTrainedModel {
      static {
        __name(this, "SiglipVisionModel");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "vision_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    ChineseCLIPPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ChineseCLIPPreTrainedModel");
      }
    };
    ChineseCLIPModel = class extends ChineseCLIPPreTrainedModel {
      static {
        __name(this, "ChineseCLIPModel");
      }
    };
    CLIPSegPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "CLIPSegPreTrainedModel");
      }
    };
    CLIPSegModel = class extends CLIPSegPreTrainedModel {
      static {
        __name(this, "CLIPSegModel");
      }
    };
    CLIPSegForImageSegmentation = class extends CLIPSegPreTrainedModel {
      static {
        __name(this, "CLIPSegForImageSegmentation");
      }
    };
    GPT2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GPT2PreTrainedModel");
      }
      /**
       * Creates a new instance of the `GPT2PreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_head;
        this.num_layers = this.config.n_layer;
        this.dim_kv = this.config.n_embd / this.num_heads;
      }
    };
    GPT2Model = class extends GPT2PreTrainedModel {
      static {
        __name(this, "GPT2Model");
      }
    };
    GPT2LMHeadModel = class extends GPT2PreTrainedModel {
      static {
        __name(this, "GPT2LMHeadModel");
      }
    };
    GPTNeoPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GPTNeoPreTrainedModel");
      }
      /**
       * Creates a new instance of the `GPTNeoPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_heads;
        this.num_layers = this.config.num_layers;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    GPTNeoModel = class extends GPTNeoPreTrainedModel {
      static {
        __name(this, "GPTNeoModel");
      }
    };
    GPTNeoForCausalLM = class extends GPTNeoPreTrainedModel {
      static {
        __name(this, "GPTNeoForCausalLM");
      }
    };
    GPTNeoXPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GPTNeoXPreTrainedModel");
      }
      /**
       * Creates a new instance of the `GPTNeoXPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    GPTNeoXModel = class extends GPTNeoXPreTrainedModel {
      static {
        __name(this, "GPTNeoXModel");
      }
    };
    GPTNeoXForCausalLM = class extends GPTNeoXPreTrainedModel {
      static {
        __name(this, "GPTNeoXForCausalLM");
      }
    };
    GPTJPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GPTJPreTrainedModel");
      }
      /**
       * Creates a new instance of the `GPTJPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_head;
        this.num_layers = this.config.n_layer;
        this.dim_kv = this.config.n_embd / this.num_heads;
      }
    };
    GPTJModel = class extends GPTJPreTrainedModel {
      static {
        __name(this, "GPTJModel");
      }
    };
    GPTJForCausalLM = class extends GPTJPreTrainedModel {
      static {
        __name(this, "GPTJForCausalLM");
      }
    };
    GPTBigCodePreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GPTBigCodePreTrainedModel");
      }
      /**
       * Creates a new instance of the `GPTBigCodePreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_head;
        this.num_layers = this.config.n_layer;
        this.dim_kv = this.config.n_embd / this.num_heads;
      }
    };
    GPTBigCodeModel = class extends GPTBigCodePreTrainedModel {
      static {
        __name(this, "GPTBigCodeModel");
      }
    };
    GPTBigCodeForCausalLM = class extends GPTBigCodePreTrainedModel {
      static {
        __name(this, "GPTBigCodeForCausalLM");
      }
    };
    CodeGenPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "CodeGenPreTrainedModel");
      }
      /**
       * Creates a new instance of the `CodeGenPreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_head;
        this.num_layers = this.config.n_layer;
        this.dim_kv = this.config.n_embd / this.num_heads;
      }
    };
    CodeGenModel = class extends CodeGenPreTrainedModel {
      static {
        __name(this, "CodeGenModel");
      }
    };
    CodeGenForCausalLM = class extends CodeGenPreTrainedModel {
      static {
        __name(this, "CodeGenForCausalLM");
      }
    };
    LlamaPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "LlamaPreTrainedModel");
      }
      /**
       * Creates a new instance of the `LlamaPreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_key_value_heads ?? this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
      }
    };
    LlamaModel = class extends LlamaPreTrainedModel {
      static {
        __name(this, "LlamaModel");
      }
    };
    LlamaForCausalLM = class extends LlamaPreTrainedModel {
      static {
        __name(this, "LlamaForCausalLM");
      }
    };
    Qwen2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Qwen2PreTrainedModel");
      }
      /**
       * Creates a new instance of the `Qwen2PreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_key_value_heads ?? this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
      }
    };
    Qwen2Model = class extends Qwen2PreTrainedModel {
      static {
        __name(this, "Qwen2Model");
      }
    };
    Qwen2ForCausalLM = class extends Qwen2PreTrainedModel {
      static {
        __name(this, "Qwen2ForCausalLM");
      }
    };
    PhiPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "PhiPreTrainedModel");
      }
      /**
       * Creates a new instance of the `PhiPreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    PhiModel = class extends PhiPreTrainedModel {
      static {
        __name(this, "PhiModel");
      }
    };
    PhiForCausalLM = class extends PhiPreTrainedModel {
      static {
        __name(this, "PhiForCausalLM");
      }
    };
    BloomPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BloomPreTrainedModel");
      }
      /**
       * Creates a new instance of the `BloomPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_head;
        this.num_layers = this.config.n_layer;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    BloomModel = class extends BloomPreTrainedModel {
      static {
        __name(this, "BloomModel");
      }
    };
    BloomForCausalLM = class extends BloomPreTrainedModel {
      static {
        __name(this, "BloomForCausalLM");
      }
    };
    MptPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MptPreTrainedModel");
      }
      /**
       * Creates a new instance of the `MptPreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.n_heads;
        this.num_layers = this.config.n_layers;
        this.dim_kv = this.config.d_model / this.num_heads;
      }
    };
    MptModel = class extends MptPreTrainedModel {
      static {
        __name(this, "MptModel");
      }
    };
    MptForCausalLM = class extends MptPreTrainedModel {
      static {
        __name(this, "MptForCausalLM");
      }
    };
    OPTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "OPTPreTrainedModel");
      }
      /**
       * Creates a new instance of the `OPTPreTrainedModel` class.
       * @param {Object} config The model configuration object.
       * @param {Object} session The ONNX session object.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    OPTModel = class extends OPTPreTrainedModel {
      static {
        __name(this, "OPTModel");
      }
    };
    OPTForCausalLM = class extends OPTPreTrainedModel {
      static {
        __name(this, "OPTForCausalLM");
      }
    };
    ViTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ViTPreTrainedModel");
      }
    };
    ViTModel = class extends ViTPreTrainedModel {
      static {
        __name(this, "ViTModel");
      }
    };
    ViTForImageClassification = class extends ViTPreTrainedModel {
      static {
        __name(this, "ViTForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    FastViTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "FastViTPreTrainedModel");
      }
    };
    FastViTModel = class extends FastViTPreTrainedModel {
      static {
        __name(this, "FastViTModel");
      }
    };
    FastViTForImageClassification = class extends FastViTPreTrainedModel {
      static {
        __name(this, "FastViTForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    VitMattePreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "VitMattePreTrainedModel");
      }
    };
    VitMatteForImageMatting = class extends VitMattePreTrainedModel {
      static {
        __name(this, "VitMatteForImageMatting");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new ImageMattingOutput(await super._call(model_inputs));
      }
    };
    MobileViTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MobileViTPreTrainedModel");
      }
    };
    MobileViTModel = class extends MobileViTPreTrainedModel {
      static {
        __name(this, "MobileViTModel");
      }
    };
    MobileViTForImageClassification = class extends MobileViTPreTrainedModel {
      static {
        __name(this, "MobileViTForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    MobileViTV2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MobileViTV2PreTrainedModel");
      }
    };
    MobileViTV2Model = class extends MobileViTV2PreTrainedModel {
      static {
        __name(this, "MobileViTV2Model");
      }
    };
    MobileViTV2ForImageClassification = class extends MobileViTV2PreTrainedModel {
      static {
        __name(this, "MobileViTV2ForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    OwlViTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "OwlViTPreTrainedModel");
      }
    };
    OwlViTModel = class extends OwlViTPreTrainedModel {
      static {
        __name(this, "OwlViTModel");
      }
    };
    OwlViTForObjectDetection = class extends OwlViTPreTrainedModel {
      static {
        __name(this, "OwlViTForObjectDetection");
      }
    };
    Owlv2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Owlv2PreTrainedModel");
      }
    };
    Owlv2Model = class extends Owlv2PreTrainedModel {
      static {
        __name(this, "Owlv2Model");
      }
    };
    Owlv2ForObjectDetection = class extends Owlv2PreTrainedModel {
      static {
        __name(this, "Owlv2ForObjectDetection");
      }
    };
    BeitPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "BeitPreTrainedModel");
      }
    };
    BeitModel = class extends BeitPreTrainedModel {
      static {
        __name(this, "BeitModel");
      }
    };
    BeitForImageClassification = class extends BeitPreTrainedModel {
      static {
        __name(this, "BeitForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    DetrPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DetrPreTrainedModel");
      }
    };
    DetrModel = class extends DetrPreTrainedModel {
      static {
        __name(this, "DetrModel");
      }
    };
    DetrForObjectDetection = class extends DetrPreTrainedModel {
      static {
        __name(this, "DetrForObjectDetection");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new DetrObjectDetectionOutput(await super._call(model_inputs));
      }
    };
    DetrForSegmentation = class extends DetrPreTrainedModel {
      static {
        __name(this, "DetrForSegmentation");
      }
      /**
       * Runs the model with the provided inputs
       * @param {Object} model_inputs Model inputs
       * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs
       */
      async _call(model_inputs) {
        return new DetrSegmentationOutput(await super._call(model_inputs));
      }
    };
    DetrObjectDetectionOutput = class extends ModelOutput {
      static {
        __name(this, "DetrObjectDetectionOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
       * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
       * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
       */
      constructor({ logits, pred_boxes }) {
        super();
        this.logits = logits;
        this.pred_boxes = pred_boxes;
      }
    };
    DetrSegmentationOutput = class extends ModelOutput {
      static {
        __name(this, "DetrSegmentationOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits The output logits of the model.
       * @param {Tensor} output.pred_boxes Predicted boxes.
       * @param {Tensor} output.pred_masks Predicted masks.
       */
      constructor({ logits, pred_boxes, pred_masks }) {
        super();
        this.logits = logits;
        this.pred_boxes = pred_boxes;
        this.pred_masks = pred_masks;
      }
    };
    TableTransformerPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "TableTransformerPreTrainedModel");
      }
    };
    TableTransformerModel = class extends TableTransformerPreTrainedModel {
      static {
        __name(this, "TableTransformerModel");
      }
    };
    TableTransformerForObjectDetection = class extends TableTransformerPreTrainedModel {
      static {
        __name(this, "TableTransformerForObjectDetection");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new TableTransformerObjectDetectionOutput(await super._call(model_inputs));
      }
    };
    TableTransformerObjectDetectionOutput = class extends DetrObjectDetectionOutput {
      static {
        __name(this, "TableTransformerObjectDetectionOutput");
      }
    };
    DeiTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DeiTPreTrainedModel");
      }
    };
    DeiTModel = class extends DeiTPreTrainedModel {
      static {
        __name(this, "DeiTModel");
      }
    };
    DeiTForImageClassification = class extends DeiTPreTrainedModel {
      static {
        __name(this, "DeiTForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    ResNetPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ResNetPreTrainedModel");
      }
    };
    ResNetModel = class extends ResNetPreTrainedModel {
      static {
        __name(this, "ResNetModel");
      }
    };
    ResNetForImageClassification = class extends ResNetPreTrainedModel {
      static {
        __name(this, "ResNetForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    SwinPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SwinPreTrainedModel");
      }
    };
    SwinModel = class extends SwinPreTrainedModel {
      static {
        __name(this, "SwinModel");
      }
    };
    SwinForImageClassification = class extends SwinPreTrainedModel {
      static {
        __name(this, "SwinForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    Swin2SRPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Swin2SRPreTrainedModel");
      }
    };
    Swin2SRModel = class extends Swin2SRPreTrainedModel {
      static {
        __name(this, "Swin2SRModel");
      }
    };
    Swin2SRForImageSuperResolution = class extends Swin2SRPreTrainedModel {
      static {
        __name(this, "Swin2SRForImageSuperResolution");
      }
    };
    DPTPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DPTPreTrainedModel");
      }
    };
    DPTModel = class extends DPTPreTrainedModel {
      static {
        __name(this, "DPTModel");
      }
    };
    DPTForDepthEstimation = class extends DPTPreTrainedModel {
      static {
        __name(this, "DPTForDepthEstimation");
      }
    };
    DepthAnythingPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DepthAnythingPreTrainedModel");
      }
    };
    DepthAnythingForDepthEstimation = class extends DepthAnythingPreTrainedModel {
      static {
        __name(this, "DepthAnythingForDepthEstimation");
      }
    };
    GLPNPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "GLPNPreTrainedModel");
      }
    };
    GLPNModel = class extends GLPNPreTrainedModel {
      static {
        __name(this, "GLPNModel");
      }
    };
    GLPNForDepthEstimation = class extends GLPNPreTrainedModel {
      static {
        __name(this, "GLPNForDepthEstimation");
      }
    };
    DonutSwinPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "DonutSwinPreTrainedModel");
      }
    };
    DonutSwinModel = class extends DonutSwinPreTrainedModel {
      static {
        __name(this, "DonutSwinModel");
      }
    };
    ConvNextPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ConvNextPreTrainedModel");
      }
    };
    ConvNextModel = class extends ConvNextPreTrainedModel {
      static {
        __name(this, "ConvNextModel");
      }
    };
    ConvNextForImageClassification = class extends ConvNextPreTrainedModel {
      static {
        __name(this, "ConvNextForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    ConvNextV2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ConvNextV2PreTrainedModel");
      }
    };
    ConvNextV2Model = class extends ConvNextV2PreTrainedModel {
      static {
        __name(this, "ConvNextV2Model");
      }
    };
    ConvNextV2ForImageClassification = class extends ConvNextV2PreTrainedModel {
      static {
        __name(this, "ConvNextV2ForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    Dinov2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Dinov2PreTrainedModel");
      }
    };
    Dinov2Model = class extends Dinov2PreTrainedModel {
      static {
        __name(this, "Dinov2Model");
      }
    };
    Dinov2ForImageClassification = class extends Dinov2PreTrainedModel {
      static {
        __name(this, "Dinov2ForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    YolosPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "YolosPreTrainedModel");
      }
    };
    YolosModel = class extends YolosPreTrainedModel {
      static {
        __name(this, "YolosModel");
      }
    };
    YolosForObjectDetection = class extends YolosPreTrainedModel {
      static {
        __name(this, "YolosForObjectDetection");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new YolosObjectDetectionOutput(await super._call(model_inputs));
      }
    };
    YolosObjectDetectionOutput = class extends ModelOutput {
      static {
        __name(this, "YolosObjectDetectionOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
       * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
       * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
       */
      constructor({ logits, pred_boxes }) {
        super();
        this.logits = logits;
        this.pred_boxes = pred_boxes;
      }
    };
    SamPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SamPreTrainedModel");
      }
    };
    SamModel = class extends SamPreTrainedModel {
      static {
        __name(this, "SamModel");
      }
      /**
       * Creates a new instance of the `SamModel` class.
       * @param {Object} config The configuration object specifying the hyperparameters and other model settings.
       * @param {Object} vision_encoder The ONNX session containing the vision encoder model.
       * @param {any} prompt_encoder_mask_decoder The ONNX session containing the prompt encoder and mask decoder model.
       */
      constructor(config, vision_encoder, prompt_encoder_mask_decoder) {
        super(config, vision_encoder);
        this.prompt_encoder_mask_decoder = prompt_encoder_mask_decoder;
      }
      /**
       * Compute image embeddings and positional image embeddings, given the pixel values of an image.
       * @param {Object} model_inputs Object containing the model inputs.
       * @param {Tensor} model_inputs.pixel_values Pixel values obtained using a `SamProcessor`.
       * @returns {Promise<{ image_embeddings: Tensor, image_positional_embeddings: Tensor }>} The image embeddings and positional image embeddings.
       */
      async get_image_embeddings({ pixel_values }) {
        return await encoderForward(this, { pixel_values });
      }
      /**
       * @typedef {Object} SamModelInputs Object containing the model inputs.
       * @property {Tensor} pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.
       * These can be obtained using a `SamProcessor`.
       * @property {Tensor} input_points Input 2D spatial points with shape `(batch_size, num_points, 2)`.
       * This is used by the prompt encoder to encode the prompt.
       * @property {Tensor} [input_labels] Input labels for the points, as a Tensor of shape `(batch_size, point_batch_size, num_points)`.
       * This is used by the prompt encoder to encode the prompt. There are 4 types of labels:
       *  - `1`: the point is a point that contains the object of interest
       *  - `0`: the point is a point that does not contain the object of interest
       *  - `-1`: the point corresponds to the background
       *  - `-10`: the point is a padding point, thus should be ignored by the prompt encoder
       * @property {Tensor} [image_embeddings] Image embeddings used by the mask decoder.
       * @property {Tensor} [image_positional_embeddings] Image positional embeddings used by the mask decoder.
       */
      /**
       * @param {SamModelInputs} model_inputs Object containing the model inputs.
       * @returns {Promise<Object>} The output of the model.
       */
      async forward(model_inputs) {
        if (!model_inputs.image_embeddings || !model_inputs.image_positional_embeddings) {
          model_inputs = {
            ...model_inputs,
            ...await this.get_image_embeddings(model_inputs)
          };
        }
        if (!model_inputs.input_labels) {
          const shape = model_inputs.input_points.dims.slice(0, -1);
          const numElements = shape.reduce((a, b) => a * b, 1);
          model_inputs.input_labels = new Tensor(
            "int64",
            new BigInt64Array(numElements).fill(1n),
            shape
          );
        }
        return await sessionRun(this.prompt_encoder_mask_decoder, {
          input_points: model_inputs.input_points,
          input_labels: model_inputs.input_labels,
          image_embeddings: model_inputs.image_embeddings,
          image_positional_embeddings: model_inputs.image_positional_embeddings
        });
      }
      /**
       * Runs the model with the provided inputs
       * @param {Object} model_inputs Model inputs
       * @returns {Promise<SamImageSegmentationOutput>} Object containing segmentation outputs
       */
      async _call(model_inputs) {
        return new SamImageSegmentationOutput(await super._call(model_inputs));
      }
    };
    SamImageSegmentationOutput = class extends ModelOutput {
      static {
        __name(this, "SamImageSegmentationOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.iou_scores The output logits of the model.
       * @param {Tensor} output.pred_masks Predicted boxes.
       */
      constructor({ iou_scores, pred_masks }) {
        super();
        this.iou_scores = iou_scores;
        this.pred_masks = pred_masks;
      }
    };
    MarianPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MarianPreTrainedModel");
      }
    };
    MarianModel = class extends MarianPreTrainedModel {
      static {
        __name(this, "MarianModel");
      }
    };
    MarianMTModel = class extends MarianPreTrainedModel {
      static {
        __name(this, "MarianMTModel");
      }
      /**
       * Creates a new instance of the `MarianMTModel` class.
      * @param {Object} config The model configuration object.
      * @param {Object} session The ONNX session object.
      * @param {any} decoder_merged_session 
      * @param {any} generation_config 
      */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    M2M100PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "M2M100PreTrainedModel");
      }
    };
    M2M100Model = class extends M2M100PreTrainedModel {
      static {
        __name(this, "M2M100Model");
      }
    };
    M2M100ForConditionalGeneration = class extends M2M100PreTrainedModel {
      static {
        __name(this, "M2M100ForConditionalGeneration");
      }
      /**
       * Creates a new instance of the `M2M100ForConditionalGeneration` class.
      * @param {Object} config The model configuration object.
      * @param {Object} session The ONNX session object.
      * @param {any} decoder_merged_session 
      * @param {any} generation_config 
      */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
      }
    };
    Wav2Vec2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Wav2Vec2PreTrainedModel");
      }
    };
    Wav2Vec2Model = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "Wav2Vec2Model");
      }
    };
    Wav2Vec2ForCTC = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "Wav2Vec2ForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    Wav2Vec2ForSequenceClassification = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "Wav2Vec2ForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    Wav2Vec2ForAudioFrameClassification = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "Wav2Vec2ForAudioFrameClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    UniSpeechPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "UniSpeechPreTrainedModel");
      }
    };
    UniSpeechModel = class extends UniSpeechPreTrainedModel {
      static {
        __name(this, "UniSpeechModel");
      }
    };
    UniSpeechForCTC = class extends UniSpeechPreTrainedModel {
      static {
        __name(this, "UniSpeechForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    UniSpeechForSequenceClassification = class extends UniSpeechPreTrainedModel {
      static {
        __name(this, "UniSpeechForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    UniSpeechSatPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "UniSpeechSatPreTrainedModel");
      }
    };
    UniSpeechSatModel = class extends UniSpeechSatPreTrainedModel {
      static {
        __name(this, "UniSpeechSatModel");
      }
    };
    UniSpeechSatForCTC = class extends UniSpeechSatPreTrainedModel {
      static {
        __name(this, "UniSpeechSatForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    UniSpeechSatForSequenceClassification = class extends UniSpeechSatPreTrainedModel {
      static {
        __name(this, "UniSpeechSatForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    UniSpeechSatForAudioFrameClassification = class extends UniSpeechSatPreTrainedModel {
      static {
        __name(this, "UniSpeechSatForAudioFrameClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    Wav2Vec2BertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Wav2Vec2BertPreTrainedModel");
      }
    };
    Wav2Vec2BertModel = class extends Wav2Vec2BertPreTrainedModel {
      static {
        __name(this, "Wav2Vec2BertModel");
      }
    };
    Wav2Vec2BertForCTC = class extends Wav2Vec2BertPreTrainedModel {
      static {
        __name(this, "Wav2Vec2BertForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_features Float values of input mel-spectrogram.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    Wav2Vec2BertForSequenceClassification = class extends Wav2Vec2BertPreTrainedModel {
      static {
        __name(this, "Wav2Vec2BertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    HubertPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "HubertPreTrainedModel");
      }
    };
    HubertModel = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "HubertModel");
      }
    };
    HubertForCTC = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "HubertForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    HubertForSequenceClassification = class extends Wav2Vec2PreTrainedModel {
      static {
        __name(this, "HubertForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    WavLMPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "WavLMPreTrainedModel");
      }
    };
    WavLMModel = class extends WavLMPreTrainedModel {
      static {
        __name(this, "WavLMModel");
      }
    };
    WavLMForCTC = class extends WavLMPreTrainedModel {
      static {
        __name(this, "WavLMForCTC");
      }
      /**
       * @param {Object} model_inputs
       * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
       * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
       */
      async _call(model_inputs) {
        return new CausalLMOutput(await super._call(model_inputs));
      }
    };
    WavLMForSequenceClassification = class extends WavLMPreTrainedModel {
      static {
        __name(this, "WavLMForSequenceClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    WavLMForXVector = class extends WavLMPreTrainedModel {
      static {
        __name(this, "WavLMForXVector");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<XVectorOutput>} An object containing the model's output logits and speaker embeddings.
       */
      async _call(model_inputs) {
        return new XVectorOutput(await super._call(model_inputs));
      }
    };
    WavLMForAudioFrameClassification = class extends WavLMPreTrainedModel {
      static {
        __name(this, "WavLMForAudioFrameClassification");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
       */
      async _call(model_inputs) {
        return new TokenClassifierOutput(await super._call(model_inputs));
      }
    };
    SpeechT5PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SpeechT5PreTrainedModel");
      }
    };
    SpeechT5Model = class extends SpeechT5PreTrainedModel {
      static {
        __name(this, "SpeechT5Model");
      }
    };
    SpeechT5ForSpeechToText = class extends SpeechT5PreTrainedModel {
      static {
        __name(this, "SpeechT5ForSpeechToText");
      }
    };
    SpeechT5ForTextToSpeech = class extends SpeechT5PreTrainedModel {
      static {
        __name(this, "SpeechT5ForTextToSpeech");
      }
      /**
       * Creates a new instance of the `SpeechT5ForTextToSpeech` class.
       * @param {Object} config The model configuration.
       * @param {any} session session for the model.
       * @param {any} decoder_merged_session session for the decoder.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, decoder_merged_session, generation_config) {
        super(config, session);
        this.decoder_merged_session = decoder_merged_session;
        this.generation_config = generation_config;
        this.num_decoder_layers = this.config.decoder_layers;
        this.num_decoder_heads = this.config.decoder_attention_heads;
        this.decoder_dim_kv = this.config.hidden_size / this.num_decoder_heads;
        this.num_encoder_layers = this.config.encoder_layers;
        this.num_encoder_heads = this.config.encoder_attention_heads;
        this.encoder_dim_kv = this.config.hidden_size / this.num_encoder_heads;
      }
      /**
       * @typedef {Object} SpeechOutput
       * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape
       * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided
       * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.
       * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape
       * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.
       */
      /**
       * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.
       * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.
       * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.
       * @param {Object} options Optional parameters for generating speech.
       * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.
       * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.
       * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.
       * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.
       * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.
       * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.
       */
      async generate_speech(input_values, speaker_embeddings, {
        threshold = 0.5,
        minlenratio = 0,
        maxlenratio = 20,
        vocoder = null
        // output_cross_attentions = false, // TODO add
      } = {}) {
        const model_inputs = {
          input_ids: input_values
        };
        const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);
        const r = encoder_outputs.dims[1] / this.config.reduction_factor;
        const maxlen = Math.floor(r * maxlenratio);
        const minlen = Math.floor(r * minlenratio);
        const num_mel_bins = this.config.num_mel_bins;
        let spectrogramParts = [];
        let past_key_values = null;
        let decoder_outputs = null;
        let idx = 0;
        while (true) {
          ++idx;
          const use_cache_branch = boolTensor(!!decoder_outputs);
          let output_sequence;
          if (decoder_outputs) {
            output_sequence = decoder_outputs.output_sequence_out;
          } else {
            output_sequence = new Tensor(
              "float32",
              new Float32Array(num_mel_bins),
              [1, 1, num_mel_bins]
            );
          }
          let decoderFeeds = {
            use_cache_branch,
            output_sequence,
            encoder_attention_mask,
            speaker_embeddings,
            encoder_hidden_states: encoder_outputs
          };
          this.addPastKeyValues(decoderFeeds, past_key_values);
          decoder_outputs = await sessionRun(this.decoder_merged_session, decoderFeeds);
          past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);
          const { prob, spectrum } = decoder_outputs;
          spectrogramParts.push(spectrum);
          if (idx >= minlen && // Finished when stop token or maximum length is reached.
          (Array.from(prob.data).filter((p) => p >= threshold).length > 0 || idx >= maxlen)) {
            break;
          }
        }
        const spectrogram2 = cat(spectrogramParts);
        const { waveform } = await sessionRun(vocoder.session, { spectrogram: spectrogram2 });
        return {
          spectrogram: spectrogram2,
          waveform
          // cross_attentions: null, // TODO add
        };
      }
    };
    SpeechT5HifiGan = class extends PreTrainedModel {
      static {
        __name(this, "SpeechT5HifiGan");
      }
      main_input_name = "spectrogram";
    };
    TrOCRPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "TrOCRPreTrainedModel");
      }
      /**
       * Creates a new instance of the `TrOCRPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_encoder_layers = this.num_decoder_layers = this.config.decoder_layers;
        this.num_encoder_heads = this.num_decoder_heads = this.config.decoder_attention_heads;
        this.encoder_dim_kv = this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
      }
    };
    TrOCRForCausalLM = class extends TrOCRPreTrainedModel {
      static {
        __name(this, "TrOCRForCausalLM");
      }
    };
    MistralPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "MistralPreTrainedModel");
      }
      /**
       * Creates a new instance of the `MistralPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_key_value_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
      }
    };
    MistralModel = class extends MistralPreTrainedModel {
      static {
        __name(this, "MistralModel");
      }
    };
    MistralForCausalLM = class extends MistralPreTrainedModel {
      static {
        __name(this, "MistralForCausalLM");
      }
    };
    Starcoder2PreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "Starcoder2PreTrainedModel");
      }
      /**
       * Creates a new instance of the `Starcoder2PreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_key_value_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
      }
    };
    Starcoder2Model = class extends Starcoder2PreTrainedModel {
      static {
        __name(this, "Starcoder2Model");
      }
    };
    Starcoder2ForCausalLM = class extends Starcoder2PreTrainedModel {
      static {
        __name(this, "Starcoder2ForCausalLM");
      }
    };
    FalconPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "FalconPreTrainedModel");
      }
      /**
       * Creates a new instance of the `FalconPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
      }
    };
    FalconModel = class extends FalconPreTrainedModel {
      static {
        __name(this, "FalconModel");
      }
    };
    FalconForCausalLM = class extends FalconPreTrainedModel {
      static {
        __name(this, "FalconForCausalLM");
      }
    };
    ClapPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "ClapPreTrainedModel");
      }
    };
    ClapModel = class extends ClapPreTrainedModel {
      static {
        __name(this, "ClapModel");
      }
    };
    ClapTextModelWithProjection = class extends ClapPreTrainedModel {
      static {
        __name(this, "ClapTextModelWithProjection");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "text_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    ClapAudioModelWithProjection = class extends ClapPreTrainedModel {
      static {
        __name(this, "ClapAudioModelWithProjection");
      }
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, options = {}) {
        options.model_file_name ??= "audio_model";
        return super.from_pretrained(pretrained_model_name_or_path, options);
      }
    };
    VitsPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "VitsPreTrainedModel");
      }
    };
    VitsModel = class extends VitsPreTrainedModel {
      static {
        __name(this, "VitsModel");
      }
      /**
       * Calls the model on new inputs.
       * @param {Object} model_inputs The inputs to the model.
       * @returns {Promise<VitsModelOutput>} The outputs for the VITS model.
       */
      async _call(model_inputs) {
        return new VitsModelOutput(await super._call(model_inputs));
      }
    };
    SegformerPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "SegformerPreTrainedModel");
      }
    };
    SegformerModel = class extends SegformerPreTrainedModel {
      static {
        __name(this, "SegformerModel");
      }
    };
    SegformerForImageClassification = class extends SegformerPreTrainedModel {
      static {
        __name(this, "SegformerForImageClassification");
      }
    };
    SegformerForSemanticSegmentation = class extends SegformerPreTrainedModel {
      static {
        __name(this, "SegformerForSemanticSegmentation");
      }
    };
    StableLmPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "StableLmPreTrainedModel");
      }
      /**
       * Creates a new instance of the `StableLmPreTrainedModel` class.
       * @param {Object} config The configuration of the model.
       * @param {any} session The ONNX session containing the model weights.
       * @param {GenerationConfig} generation_config The generation configuration.
       */
      constructor(config, session, generation_config) {
        super(config, session);
        this.generation_config = generation_config;
        this.config.pad_token_id = this.config.eos_token_id;
        this.num_heads = this.config.num_attention_heads;
        this.num_layers = this.config.num_hidden_layers;
        this.dim_kv = this.config.hidden_size / this.num_heads;
      }
    };
    StableLmModel = class extends StableLmPreTrainedModel {
      static {
        __name(this, "StableLmModel");
      }
    };
    StableLmForCausalLM = class extends StableLmPreTrainedModel {
      static {
        __name(this, "StableLmForCausalLM");
      }
    };
    EfficientNetPreTrainedModel = class extends PreTrainedModel {
      static {
        __name(this, "EfficientNetPreTrainedModel");
      }
    };
    EfficientNetModel = class extends EfficientNetPreTrainedModel {
      static {
        __name(this, "EfficientNetModel");
      }
    };
    EfficientNetForImageClassification = class extends EfficientNetPreTrainedModel {
      static {
        __name(this, "EfficientNetForImageClassification");
      }
      /**
       * @param {any} model_inputs
       */
      async _call(model_inputs) {
        return new SequenceClassifierOutput(await super._call(model_inputs));
      }
    };
    PretrainedMixin = class {
      static {
        __name(this, "PretrainedMixin");
      }
      /**
       * Mapping from model type to model class.
       * @type {Map<string, Object>[]}
       */
      static MODEL_CLASS_MAPPINGS = null;
      /**
       * Whether to attempt to instantiate the base class (`PretrainedModel`) if 
       * the model type is not found in the mapping.
       */
      static BASE_IF_FAIL = false;
      /** @type {PreTrainedModel.from_pretrained} */
      static async from_pretrained(pretrained_model_name_or_path, {
        quantized = true,
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main",
        model_file_name = null
      } = {}) {
        let options = {
          quantized,
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision,
          model_file_name
        };
        config = await AutoConfig.from_pretrained(pretrained_model_name_or_path, options);
        if (!options.config) {
          options.config = config;
        }
        if (!this.MODEL_CLASS_MAPPINGS) {
          throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: " + this.name);
        }
        for (let MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {
          const modelInfo = MODEL_CLASS_MAPPING.get(config.model_type);
          if (!modelInfo) {
            continue;
          }
          return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options);
        }
        if (this.BASE_IF_FAIL) {
          console.warn(`Unknown model class "${config.model_type}", attempting to construct from base class.`);
          return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options);
        } else {
          throw Error(`Unsupported model type: ${config.model_type}`);
        }
      }
    };
    MODEL_MAPPING_NAMES_ENCODER_ONLY = /* @__PURE__ */ new Map([
      ["bert", ["BertModel", BertModel]],
      ["nomic_bert", ["NomicBertModel", NomicBertModel]],
      ["roformer", ["RoFormerModel", RoFormerModel]],
      ["electra", ["ElectraModel", ElectraModel]],
      ["esm", ["EsmModel", EsmModel]],
      ["convbert", ["ConvBertModel", ConvBertModel]],
      ["camembert", ["CamembertModel", CamembertModel]],
      ["deberta", ["DebertaModel", DebertaModel]],
      ["deberta-v2", ["DebertaV2Model", DebertaV2Model]],
      ["mpnet", ["MPNetModel", MPNetModel]],
      ["albert", ["AlbertModel", AlbertModel]],
      ["distilbert", ["DistilBertModel", DistilBertModel]],
      ["roberta", ["RobertaModel", RobertaModel]],
      ["xlm", ["XLMModel", XLMModel]],
      ["xlm-roberta", ["XLMRobertaModel", XLMRobertaModel]],
      ["clap", ["ClapModel", ClapModel]],
      ["clip", ["CLIPModel", CLIPModel]],
      ["clipseg", ["CLIPSegModel", CLIPSegModel]],
      ["chinese_clip", ["ChineseCLIPModel", ChineseCLIPModel]],
      ["siglip", ["SiglipModel", SiglipModel]],
      ["mobilebert", ["MobileBertModel", MobileBertModel]],
      ["squeezebert", ["SqueezeBertModel", SqueezeBertModel]],
      ["wav2vec2", ["Wav2Vec2Model", Wav2Vec2Model]],
      ["wav2vec2-bert", ["Wav2Vec2BertModel", Wav2Vec2BertModel]],
      ["unispeech", ["UniSpeechModel", UniSpeechModel]],
      ["unispeech-sat", ["UniSpeechSatModel", UniSpeechSatModel]],
      ["hubert", ["HubertModel", HubertModel]],
      ["wavlm", ["WavLMModel", WavLMModel]],
      ["audio-spectrogram-transformer", ["ASTModel", ASTModel]],
      ["vits", ["VitsModel", VitsModel]],
      ["detr", ["DetrModel", DetrModel]],
      ["table-transformer", ["TableTransformerModel", TableTransformerModel]],
      ["vit", ["ViTModel", ViTModel]],
      ["fastvit", ["FastViTModel", FastViTModel]],
      ["mobilevit", ["MobileViTModel", MobileViTModel]],
      ["mobilevitv2", ["MobileViTV2Model", MobileViTV2Model]],
      ["owlvit", ["OwlViTModel", OwlViTModel]],
      ["owlv2", ["Owlv2Model", Owlv2Model]],
      ["beit", ["BeitModel", BeitModel]],
      ["deit", ["DeiTModel", DeiTModel]],
      ["convnext", ["ConvNextModel", ConvNextModel]],
      ["convnextv2", ["ConvNextV2Model", ConvNextV2Model]],
      ["dinov2", ["Dinov2Model", Dinov2Model]],
      ["resnet", ["ResNetModel", ResNetModel]],
      ["swin", ["SwinModel", SwinModel]],
      ["swin2sr", ["Swin2SRModel", Swin2SRModel]],
      ["donut-swin", ["DonutSwinModel", DonutSwinModel]],
      ["yolos", ["YolosModel", YolosModel]],
      ["dpt", ["DPTModel", DPTModel]],
      ["glpn", ["GLPNModel", GLPNModel]],
      ["hifigan", ["SpeechT5HifiGan", SpeechT5HifiGan]],
      ["efficientnet", ["EfficientNetModel", EfficientNetModel]]
    ]);
    MODEL_MAPPING_NAMES_ENCODER_DECODER = /* @__PURE__ */ new Map([
      ["t5", ["T5Model", T5Model]],
      ["longt5", ["LongT5Model", LongT5Model]],
      ["mt5", ["MT5Model", MT5Model]],
      ["bart", ["BartModel", BartModel]],
      ["mbart", ["MBartModel", MBartModel]],
      ["marian", ["MarianModel", MarianModel]],
      ["whisper", ["WhisperModel", WhisperModel]],
      ["m2m_100", ["M2M100Model", M2M100Model]],
      ["blenderbot", ["BlenderbotModel", BlenderbotModel]],
      ["blenderbot-small", ["BlenderbotSmallModel", BlenderbotSmallModel]]
    ]);
    MODEL_MAPPING_NAMES_DECODER_ONLY = /* @__PURE__ */ new Map([
      ["bloom", ["BloomModel", BloomModel]],
      ["gpt2", ["GPT2Model", GPT2Model]],
      ["gptj", ["GPTJModel", GPTJModel]],
      ["gpt_bigcode", ["GPTBigCodeModel", GPTBigCodeModel]],
      ["gpt_neo", ["GPTNeoModel", GPTNeoModel]],
      ["gpt_neox", ["GPTNeoXModel", GPTNeoXModel]],
      ["codegen", ["CodeGenModel", CodeGenModel]],
      ["llama", ["LlamaModel", LlamaModel]],
      ["qwen2", ["Qwen2Model", Qwen2Model]],
      ["phi", ["PhiModel", PhiModel]],
      ["mpt", ["MptModel", MptModel]],
      ["opt", ["OPTModel", OPTModel]],
      ["mistral", ["MistralModel", MistralModel]],
      ["starcoder2", ["Starcoder2Model", Starcoder2Model]],
      ["falcon", ["FalconModel", FalconModel]]
    ]);
    MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["speecht5", ["SpeechT5ForSpeechToText", SpeechT5ForSpeechToText]],
      ["whisper", ["WhisperForConditionalGeneration", WhisperForConditionalGeneration]]
    ]);
    MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["speecht5", ["SpeechT5ForTextToSpeech", SpeechT5ForTextToSpeech]]
    ]);
    MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["vits", ["VitsModel", VitsModel]]
    ]);
    MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["bert", ["BertForSequenceClassification", BertForSequenceClassification]],
      ["roformer", ["RoFormerForSequenceClassification", RoFormerForSequenceClassification]],
      ["electra", ["ElectraForSequenceClassification", ElectraForSequenceClassification]],
      ["esm", ["EsmForSequenceClassification", EsmForSequenceClassification]],
      ["convbert", ["ConvBertForSequenceClassification", ConvBertForSequenceClassification]],
      ["camembert", ["CamembertForSequenceClassification", CamembertForSequenceClassification]],
      ["deberta", ["DebertaForSequenceClassification", DebertaForSequenceClassification]],
      ["deberta-v2", ["DebertaV2ForSequenceClassification", DebertaV2ForSequenceClassification]],
      ["mpnet", ["MPNetForSequenceClassification", MPNetForSequenceClassification]],
      ["albert", ["AlbertForSequenceClassification", AlbertForSequenceClassification]],
      ["distilbert", ["DistilBertForSequenceClassification", DistilBertForSequenceClassification]],
      ["roberta", ["RobertaForSequenceClassification", RobertaForSequenceClassification]],
      ["xlm", ["XLMForSequenceClassification", XLMForSequenceClassification]],
      ["xlm-roberta", ["XLMRobertaForSequenceClassification", XLMRobertaForSequenceClassification]],
      ["bart", ["BartForSequenceClassification", BartForSequenceClassification]],
      ["mbart", ["MBartForSequenceClassification", MBartForSequenceClassification]],
      ["mobilebert", ["MobileBertForSequenceClassification", MobileBertForSequenceClassification]],
      ["squeezebert", ["SqueezeBertForSequenceClassification", SqueezeBertForSequenceClassification]]
    ]);
    MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["bert", ["BertForTokenClassification", BertForTokenClassification]],
      ["roformer", ["RoFormerForTokenClassification", RoFormerForTokenClassification]],
      ["electra", ["ElectraForTokenClassification", ElectraForTokenClassification]],
      ["esm", ["EsmForTokenClassification", EsmForTokenClassification]],
      ["convbert", ["ConvBertForTokenClassification", ConvBertForTokenClassification]],
      ["camembert", ["CamembertForTokenClassification", CamembertForTokenClassification]],
      ["deberta", ["DebertaForTokenClassification", DebertaForTokenClassification]],
      ["deberta-v2", ["DebertaV2ForTokenClassification", DebertaV2ForTokenClassification]],
      ["mpnet", ["MPNetForTokenClassification", MPNetForTokenClassification]],
      ["distilbert", ["DistilBertForTokenClassification", DistilBertForTokenClassification]],
      ["roberta", ["RobertaForTokenClassification", RobertaForTokenClassification]],
      ["xlm", ["XLMForTokenClassification", XLMForTokenClassification]],
      ["xlm-roberta", ["XLMRobertaForTokenClassification", XLMRobertaForTokenClassification]]
    ]);
    MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["t5", ["T5ForConditionalGeneration", T5ForConditionalGeneration]],
      ["longt5", ["LongT5ForConditionalGeneration", LongT5ForConditionalGeneration]],
      ["mt5", ["MT5ForConditionalGeneration", MT5ForConditionalGeneration]],
      ["bart", ["BartForConditionalGeneration", BartForConditionalGeneration]],
      ["mbart", ["MBartForConditionalGeneration", MBartForConditionalGeneration]],
      ["marian", ["MarianMTModel", MarianMTModel]],
      ["m2m_100", ["M2M100ForConditionalGeneration", M2M100ForConditionalGeneration]],
      ["blenderbot", ["BlenderbotForConditionalGeneration", BlenderbotForConditionalGeneration]],
      ["blenderbot-small", ["BlenderbotSmallForConditionalGeneration", BlenderbotSmallForConditionalGeneration]]
    ]);
    MODEL_WITH_LM_HEAD_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["bloom", ["BloomForCausalLM", BloomForCausalLM]],
      ["gpt2", ["GPT2LMHeadModel", GPT2LMHeadModel]],
      ["gptj", ["GPTJForCausalLM", GPTJForCausalLM]],
      ["gpt_bigcode", ["GPTBigCodeForCausalLM", GPTBigCodeForCausalLM]],
      ["gpt_neo", ["GPTNeoForCausalLM", GPTNeoForCausalLM]],
      ["gpt_neox", ["GPTNeoXForCausalLM", GPTNeoXForCausalLM]],
      ["codegen", ["CodeGenForCausalLM", CodeGenForCausalLM]],
      ["llama", ["LlamaForCausalLM", LlamaForCausalLM]],
      ["qwen2", ["Qwen2ForCausalLM", Qwen2ForCausalLM]],
      ["phi", ["PhiForCausalLM", PhiForCausalLM]],
      ["mpt", ["MptForCausalLM", MptForCausalLM]],
      ["opt", ["OPTForCausalLM", OPTForCausalLM]],
      ["mbart", ["MBartForCausalLM", MBartForCausalLM]],
      ["mistral", ["MistralForCausalLM", MistralForCausalLM]],
      ["starcoder2", ["Starcoder2ForCausalLM", Starcoder2ForCausalLM]],
      ["falcon", ["FalconForCausalLM", FalconForCausalLM]],
      ["trocr", ["TrOCRForCausalLM", TrOCRForCausalLM]],
      ["stablelm", ["StableLmForCausalLM", StableLmForCausalLM]]
    ]);
    MODEL_FOR_MASKED_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["bert", ["BertForMaskedLM", BertForMaskedLM]],
      ["roformer", ["RoFormerForMaskedLM", RoFormerForMaskedLM]],
      ["electra", ["ElectraForMaskedLM", ElectraForMaskedLM]],
      ["esm", ["EsmForMaskedLM", EsmForMaskedLM]],
      ["convbert", ["ConvBertForMaskedLM", ConvBertForMaskedLM]],
      ["camembert", ["CamembertForMaskedLM", CamembertForMaskedLM]],
      ["deberta", ["DebertaForMaskedLM", DebertaForMaskedLM]],
      ["deberta-v2", ["DebertaV2ForMaskedLM", DebertaV2ForMaskedLM]],
      ["mpnet", ["MPNetForMaskedLM", MPNetForMaskedLM]],
      ["albert", ["AlbertForMaskedLM", AlbertForMaskedLM]],
      ["distilbert", ["DistilBertForMaskedLM", DistilBertForMaskedLM]],
      ["roberta", ["RobertaForMaskedLM", RobertaForMaskedLM]],
      ["xlm", ["XLMWithLMHeadModel", XLMWithLMHeadModel]],
      ["xlm-roberta", ["XLMRobertaForMaskedLM", XLMRobertaForMaskedLM]],
      ["mobilebert", ["MobileBertForMaskedLM", MobileBertForMaskedLM]],
      ["squeezebert", ["SqueezeBertForMaskedLM", SqueezeBertForMaskedLM]]
    ]);
    MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["bert", ["BertForQuestionAnswering", BertForQuestionAnswering]],
      ["roformer", ["RoFormerForQuestionAnswering", RoFormerForQuestionAnswering]],
      ["electra", ["ElectraForQuestionAnswering", ElectraForQuestionAnswering]],
      ["convbert", ["ConvBertForQuestionAnswering", ConvBertForQuestionAnswering]],
      ["camembert", ["CamembertForQuestionAnswering", CamembertForQuestionAnswering]],
      ["deberta", ["DebertaForQuestionAnswering", DebertaForQuestionAnswering]],
      ["deberta-v2", ["DebertaV2ForQuestionAnswering", DebertaV2ForQuestionAnswering]],
      ["mpnet", ["MPNetForQuestionAnswering", MPNetForQuestionAnswering]],
      ["albert", ["AlbertForQuestionAnswering", AlbertForQuestionAnswering]],
      ["distilbert", ["DistilBertForQuestionAnswering", DistilBertForQuestionAnswering]],
      ["roberta", ["RobertaForQuestionAnswering", RobertaForQuestionAnswering]],
      ["xlm", ["XLMForQuestionAnswering", XLMForQuestionAnswering]],
      ["xlm-roberta", ["XLMRobertaForQuestionAnswering", XLMRobertaForQuestionAnswering]],
      ["mobilebert", ["MobileBertForQuestionAnswering", MobileBertForQuestionAnswering]],
      ["squeezebert", ["SqueezeBertForQuestionAnswering", SqueezeBertForQuestionAnswering]]
    ]);
    MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]]
    ]);
    MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]]
    ]);
    MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["vit", ["ViTForImageClassification", ViTForImageClassification]],
      ["fastvit", ["FastViTForImageClassification", FastViTForImageClassification]],
      ["mobilevit", ["MobileViTForImageClassification", MobileViTForImageClassification]],
      ["mobilevitv2", ["MobileViTV2ForImageClassification", MobileViTV2ForImageClassification]],
      ["beit", ["BeitForImageClassification", BeitForImageClassification]],
      ["deit", ["DeiTForImageClassification", DeiTForImageClassification]],
      ["convnext", ["ConvNextForImageClassification", ConvNextForImageClassification]],
      ["convnextv2", ["ConvNextV2ForImageClassification", ConvNextV2ForImageClassification]],
      ["dinov2", ["Dinov2ForImageClassification", Dinov2ForImageClassification]],
      ["resnet", ["ResNetForImageClassification", ResNetForImageClassification]],
      ["swin", ["SwinForImageClassification", SwinForImageClassification]],
      ["segformer", ["SegformerForImageClassification", SegformerForImageClassification]],
      ["efficientnet", ["EfficientNetForImageClassification", EfficientNetForImageClassification]]
    ]);
    MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["detr", ["DetrForObjectDetection", DetrForObjectDetection]],
      ["table-transformer", ["TableTransformerForObjectDetection", TableTransformerForObjectDetection]],
      ["yolos", ["YolosForObjectDetection", YolosForObjectDetection]]
    ]);
    MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["owlvit", ["OwlViTForObjectDetection", OwlViTForObjectDetection]],
      ["owlv2", ["Owlv2ForObjectDetection", Owlv2ForObjectDetection]]
    ]);
    MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["detr", ["DetrForSegmentation", DetrForSegmentation]],
      ["clipseg", ["CLIPSegForImageSegmentation", CLIPSegForImageSegmentation]]
    ]);
    MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["segformer", ["SegformerForSemanticSegmentation", SegformerForSemanticSegmentation]]
    ]);
    MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["sam", ["SamModel", SamModel]]
    ]);
    MODEL_FOR_CTC_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["wav2vec2", ["Wav2Vec2ForCTC", Wav2Vec2ForCTC]],
      ["wav2vec2-bert", ["Wav2Vec2BertForCTC", Wav2Vec2BertForCTC]],
      ["unispeech", ["UniSpeechForCTC", UniSpeechForCTC]],
      ["unispeech-sat", ["UniSpeechSatForCTC", UniSpeechSatForCTC]],
      ["wavlm", ["WavLMForCTC", WavLMForCTC]],
      ["hubert", ["HubertForCTC", HubertForCTC]]
    ]);
    MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["wav2vec2", ["Wav2Vec2ForSequenceClassification", Wav2Vec2ForSequenceClassification]],
      ["wav2vec2-bert", ["Wav2Vec2BertForSequenceClassification", Wav2Vec2BertForSequenceClassification]],
      ["unispeech", ["UniSpeechForSequenceClassification", UniSpeechForSequenceClassification]],
      ["unispeech-sat", ["UniSpeechSatForSequenceClassification", UniSpeechSatForSequenceClassification]],
      ["wavlm", ["WavLMForSequenceClassification", WavLMForSequenceClassification]],
      ["hubert", ["HubertForSequenceClassification", HubertForSequenceClassification]],
      ["audio-spectrogram-transformer", ["ASTForAudioClassification", ASTForAudioClassification]]
    ]);
    MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["wavlm", ["WavLMForXVector", WavLMForXVector]]
    ]);
    MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["unispeech-sat", ["UniSpeechSatForAudioFrameClassification", UniSpeechSatForAudioFrameClassification]],
      ["wavlm", ["WavLMForAudioFrameClassification", WavLMForAudioFrameClassification]],
      ["wav2vec2", ["Wav2Vec2ForAudioFrameClassification", Wav2Vec2ForAudioFrameClassification]]
    ]);
    MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["vitmatte", ["VitMatteForImageMatting", VitMatteForImageMatting]]
    ]);
    MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["swin2sr", ["Swin2SRForImageSuperResolution", Swin2SRForImageSuperResolution]]
    ]);
    MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["dpt", ["DPTForDepthEstimation", DPTForDepthEstimation]],
      ["depth_anything", ["DepthAnythingForDepthEstimation", DepthAnythingForDepthEstimation]],
      ["glpn", ["GLPNForDepthEstimation", GLPNForDepthEstimation]]
    ]);
    MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
      ["clip", ["CLIPVisionModelWithProjection", CLIPVisionModelWithProjection]],
      ["siglip", ["SiglipVisionModel", SiglipVisionModel]]
    ]);
    MODEL_CLASS_TYPE_MAPPING = [
      [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],
      [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],
      [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],
      [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
      [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
      [MODEL_WITH_LM_HEAD_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],
      [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],
      [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.MaskGeneration],
      [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
      [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
      // Custom:
      [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly]
    ];
    for (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {
      for (const [name2, model] of mappings.values()) {
        MODEL_TYPE_MAPPING.set(name2, type);
        MODEL_CLASS_TO_NAME_MAPPING.set(model, name2);
        MODEL_NAME_TO_CLASS_MAPPING.set(name2, model);
      }
    }
    CUSTOM_MAPPING = [
      ["CLIPTextModelWithProjection", CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],
      ["SiglipTextModel", SiglipTextModel, MODEL_TYPES.EncoderOnly],
      ["ClapTextModelWithProjection", ClapTextModelWithProjection, MODEL_TYPES.EncoderOnly],
      ["ClapAudioModelWithProjection", ClapAudioModelWithProjection, MODEL_TYPES.EncoderOnly]
    ];
    for (const [name2, model, type] of CUSTOM_MAPPING) {
      MODEL_TYPE_MAPPING.set(name2, type);
      MODEL_CLASS_TO_NAME_MAPPING.set(model, name2);
      MODEL_NAME_TO_CLASS_MAPPING.set(name2, model);
    }
    AutoModel = class extends PretrainedMixin {
      static {
        __name(this, "AutoModel");
      }
      /** @type {Map<string, Object>[]} */
      // @ts-ignore
      static MODEL_CLASS_MAPPINGS = MODEL_CLASS_TYPE_MAPPING.map((x) => x[0]);
      static BASE_IF_FAIL = true;
    };
    AutoModelForSequenceClassification = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForSequenceClassification");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES];
    };
    AutoModelForTokenClassification = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForTokenClassification");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES];
    };
    AutoModelForSeq2SeqLM = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForSeq2SeqLM");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES];
    };
    AutoModelForSpeechSeq2Seq = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForSpeechSeq2Seq");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES];
    };
    AutoModelForTextToSpectrogram = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForTextToSpectrogram");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES];
    };
    AutoModelForTextToWaveform = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForTextToWaveform");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES];
    };
    AutoModelForCausalLM = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForCausalLM");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_WITH_LM_HEAD_MAPPING_NAMES];
    };
    AutoModelForMaskedLM = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForMaskedLM");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASKED_LM_MAPPING_NAMES];
    };
    AutoModelForQuestionAnswering = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForQuestionAnswering");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES];
    };
    AutoModelForVision2Seq = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForVision2Seq");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES];
    };
    AutoModelForImageClassification = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForImageClassification");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES];
    };
    AutoModelForImageSegmentation = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForImageSegmentation");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES];
    };
    AutoModelForSemanticSegmentation = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForSemanticSegmentation");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES];
    };
    AutoModelForObjectDetection = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForObjectDetection");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES];
    };
    AutoModelForZeroShotObjectDetection = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForZeroShotObjectDetection");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES];
    };
    AutoModelForMaskGeneration = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForMaskGeneration");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES];
    };
    AutoModelForCTC = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForCTC");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CTC_MAPPING_NAMES];
    };
    AutoModelForAudioClassification = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForAudioClassification");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES];
    };
    AutoModelForXVector = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForXVector");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES];
    };
    AutoModelForAudioFrameClassification = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForAudioFrameClassification");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES];
    };
    AutoModelForDocumentQuestionAnswering = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForDocumentQuestionAnswering");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES];
    };
    AutoModelForImageMatting = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForImageMatting");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES];
    };
    AutoModelForImageToImage = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForImageToImage");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES];
    };
    AutoModelForDepthEstimation = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForDepthEstimation");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES];
    };
    AutoModelForImageFeatureExtraction = class extends PretrainedMixin {
      static {
        __name(this, "AutoModelForImageFeatureExtraction");
      }
      static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES];
    };
    Seq2SeqLMOutput = class extends ModelOutput {
      static {
        __name(this, "Seq2SeqLMOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits The output logits of the model.
       * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.
       * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.
       * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.
       * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.
       */
      constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {
        super();
        this.logits = logits;
        this.past_key_values = past_key_values;
        this.encoder_outputs = encoder_outputs;
        this.decoder_attentions = decoder_attentions;
        this.cross_attentions = cross_attentions;
      }
    };
    SequenceClassifierOutput = class extends ModelOutput {
      static {
        __name(this, "SequenceClassifierOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).
       */
      constructor({ logits }) {
        super();
        this.logits = logits;
      }
    };
    XVectorOutput = class extends ModelOutput {
      static {
        __name(this, "XVectorOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Classification hidden states before AMSoftmax, of shape `(batch_size, config.xvector_output_dim)`.
       * @param {Tensor} output.embeddings Utterance embeddings used for vector similarity-based retrieval, of shape `(batch_size, config.xvector_output_dim)`.
       */
      constructor({ logits, embeddings }) {
        super();
        this.logits = logits;
        this.embeddings = embeddings;
      }
    };
    TokenClassifierOutput = class extends ModelOutput {
      static {
        __name(this, "TokenClassifierOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Classification scores (before SoftMax).
       */
      constructor({ logits }) {
        super();
        this.logits = logits;
      }
    };
    MaskedLMOutput = class extends ModelOutput {
      static {
        __name(this, "MaskedLMOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
       */
      constructor({ logits }) {
        super();
        this.logits = logits;
      }
    };
    QuestionAnsweringModelOutput = class extends ModelOutput {
      static {
        __name(this, "QuestionAnsweringModelOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.start_logits Span-start scores (before SoftMax).
       * @param {Tensor} output.end_logits Span-end scores (before SoftMax).
       */
      constructor({ start_logits, end_logits }) {
        super();
        this.start_logits = start_logits;
        this.end_logits = end_logits;
      }
    };
    CausalLMOutput = class extends ModelOutput {
      static {
        __name(this, "CausalLMOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
       */
      constructor({ logits }) {
        super();
        this.logits = logits;
      }
    };
    CausalLMOutputWithPast = class extends ModelOutput {
      static {
        __name(this, "CausalLMOutputWithPast");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
       * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)
       * that can be used (see `past_key_values` input) to speed up sequential decoding.
       */
      constructor({ logits, past_key_values }) {
        super();
        this.logits = logits;
        this.past_key_values = past_key_values;
      }
    };
    ImageMattingOutput = class extends ModelOutput {
      static {
        __name(this, "ImageMattingOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.alphas Estimated alpha values, of shape `(batch_size, num_channels, height, width)`.
       */
      constructor({ alphas }) {
        super();
        this.alphas = alphas;
      }
    };
    VitsModelOutput = class extends ModelOutput {
      static {
        __name(this, "VitsModelOutput");
      }
      /**
       * @param {Object} output The output of the model.
       * @param {Tensor} output.waveform The final audio waveform predicted by the model, of shape `(batch_size, sequence_length)`.
       * @param {Tensor} output.spectrogram The log-mel spectrogram predicted at the output of the flow model.
       * This spectrogram is passed to the Hi-Fi GAN decoder model to obtain the final audio waveform.
       */
      constructor({ waveform, spectrogram: spectrogram2 }) {
        super();
        this.waveform = waveform;
        this.spectrogram = spectrogram2;
      }
    };
  }
});

// (disabled):node_modules/@xenova/transformers/node_modules/sharp/lib/index.js
var require_lib = __commonJS({
  "(disabled):node_modules/@xenova/transformers/node_modules/sharp/lib/index.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
  }
});

// node_modules/@xenova/transformers/src/utils/image.js
var import_sharp, BROWSER_ENV, WEBWORKER_ENV, createCanvasFunction, ImageDataClass, loadImageFunction, RESAMPLING_MAPPING, CONTENT_TYPE_MAP, RawImage;
var init_image = __esm({
  "node_modules/@xenova/transformers/src/utils/image.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_hub();
    init_env();
    init_tensor();
    import_sharp = __toESM(require_lib(), 1);
    BROWSER_ENV = typeof self !== "undefined";
    WEBWORKER_ENV = BROWSER_ENV && self.constructor.name === "DedicatedWorkerGlobalScope";
    if (BROWSER_ENV) {
      createCanvasFunction = /* @__PURE__ */ __name((width, height) => {
        if (!self.OffscreenCanvas) {
          throw new Error("OffscreenCanvas not supported by this browser.");
        }
        return new self.OffscreenCanvas(width, height);
      }, "createCanvasFunction");
      loadImageFunction = self.createImageBitmap;
      ImageDataClass = self.ImageData;
    } else if (import_sharp.default) {
      loadImageFunction = /* @__PURE__ */ __name(async (img) => {
        const metadata = await img.metadata();
        const rawChannels = metadata.channels;
        let { data, info } = await img.rotate().raw().toBuffer({ resolveWithObject: true });
        const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);
        if (rawChannels !== void 0 && rawChannels !== info.channels) {
          newImage.convert(rawChannels);
        }
        return newImage;
      }, "loadImageFunction");
    } else {
      throw new Error("Unable to load image processing library.");
    }
    RESAMPLING_MAPPING = {
      0: "nearest",
      1: "lanczos",
      2: "bilinear",
      3: "bicubic",
      4: "box",
      5: "hamming"
    };
    CONTENT_TYPE_MAP = /* @__PURE__ */ new Map([
      ["png", "image/png"],
      ["jpg", "image/jpeg"],
      ["jpeg", "image/jpeg"],
      ["gif", "image/gif"]
    ]);
    RawImage = class _RawImage {
      static {
        __name(this, "RawImage");
      }
      /**
       * Create a new `RawImage` object.
       * @param {Uint8ClampedArray|Uint8Array} data The pixel data.
       * @param {number} width The width of the image.
       * @param {number} height The height of the image.
       * @param {1|2|3|4} channels The number of channels.
       */
      constructor(data, width, height, channels) {
        this.data = data;
        this.width = width;
        this.height = height;
        this.channels = channels;
      }
      /** 
       * Returns the size of the image (width, height).
       * @returns {[number, number]} The size of the image (width, height).
       */
      get size() {
        return [this.width, this.height];
      }
      /**
       * Helper method for reading an image from a variety of input types.
       * @param {RawImage|string|URL} input 
       * @returns The image object.
       * 
       * **Example:** Read image from a URL.
       * ```javascript
       * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');
       * // RawImage {
       * //   "data": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],
       * //   "width": 800,
       * //   "height": 533,
       * //   "channels": 3
       * // }
       * ```
       */
      static async read(input) {
        if (input instanceof _RawImage) {
          return input;
        } else if (typeof input === "string" || input instanceof URL) {
          return await this.fromURL(input);
        } else {
          throw new Error(`Unsupported input type: ${typeof input}`);
        }
      }
      /**
       * Read an image from a URL or file path.
       * @param {string|URL} url The URL or file path to read the image from.
       * @returns {Promise<RawImage>} The image object.
       */
      static async fromURL(url2) {
        let response = await getFile(url2);
        if (response.status !== 200) {
          throw new Error(`Unable to read image from "${url2}" (${response.status} ${response.statusText})`);
        }
        let blob2 = await response.blob();
        return this.fromBlob(blob2);
      }
      /**
       * Helper method to create a new Image from a blob.
       * @param {Blob} blob The blob to read the image from.
       * @returns {Promise<RawImage>} The image object.
       */
      static async fromBlob(blob2) {
        if (BROWSER_ENV) {
          let img = await loadImageFunction(blob2);
          const ctx = createCanvasFunction(img.width, img.height).getContext("2d");
          ctx.drawImage(img, 0, 0);
          return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);
        } else {
          let img = (0, import_sharp.default)(await blob2.arrayBuffer());
          return await loadImageFunction(img);
        }
      }
      /**
       * Helper method to create a new Image from a tensor
       * @param {Tensor} tensor 
       */
      static fromTensor(tensor, channel_format = "CHW") {
        if (tensor.dims.length !== 3) {
          throw new Error(`Tensor should have 3 dimensions, but has ${tensor.dims.length} dimensions.`);
        }
        if (channel_format === "CHW") {
          tensor = tensor.transpose(1, 2, 0);
        } else if (channel_format === "HWC") {
        } else {
          throw new Error(`Unsupported channel format: ${channel_format}`);
        }
        if (!(tensor.data instanceof Uint8ClampedArray || tensor.data instanceof Uint8Array)) {
          throw new Error(`Unsupported tensor type: ${tensor.type}`);
        }
        switch (tensor.dims[2]) {
          case 1:
          case 2:
          case 3:
          case 4:
            return new _RawImage(tensor.data, tensor.dims[1], tensor.dims[0], tensor.dims[2]);
          default:
            throw new Error(`Unsupported number of channels: ${tensor.dims[2]}`);
        }
      }
      /**
       * Convert the image to grayscale format.
       * @returns {RawImage} `this` to support chaining.
       */
      grayscale() {
        if (this.channels === 1) {
          return this;
        }
        let newData = new Uint8ClampedArray(this.width * this.height * 1);
        switch (this.channels) {
          case 3:
          // rgb to grayscale
          case 4:
            for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {
              const red = this.data[i];
              const green = this.data[i + 1];
              const blue = this.data[i + 2];
              newData[offset++] = Math.round(0.2989 * red + 0.587 * green + 0.114 * blue);
            }
            break;
          default:
            throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
        }
        return this._update(newData, this.width, this.height, 1);
      }
      /**
       * Convert the image to RGB format.
       * @returns {RawImage} `this` to support chaining.
       */
      rgb() {
        if (this.channels === 3) {
          return this;
        }
        let newData = new Uint8ClampedArray(this.width * this.height * 3);
        switch (this.channels) {
          case 1:
            for (let i = 0, offset = 0; i < this.data.length; ++i) {
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i];
            }
            break;
          case 4:
            for (let i = 0, offset = 0; i < this.data.length; i += 4) {
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i + 1];
              newData[offset++] = this.data[i + 2];
            }
            break;
          default:
            throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
        }
        return this._update(newData, this.width, this.height, 3);
      }
      /**
       * Convert the image to RGBA format.
       * @returns {RawImage} `this` to support chaining.
       */
      rgba() {
        if (this.channels === 4) {
          return this;
        }
        let newData = new Uint8ClampedArray(this.width * this.height * 4);
        switch (this.channels) {
          case 1:
            for (let i = 0, offset = 0; i < this.data.length; ++i) {
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i];
              newData[offset++] = 255;
            }
            break;
          case 3:
            for (let i = 0, offset = 0; i < this.data.length; i += 3) {
              newData[offset++] = this.data[i];
              newData[offset++] = this.data[i + 1];
              newData[offset++] = this.data[i + 2];
              newData[offset++] = 255;
            }
            break;
          default:
            throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
        }
        return this._update(newData, this.width, this.height, 4);
      }
      /**
       * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.
       * @param {number} width The width of the new image.
       * @param {number} height The height of the new image.
       * @param {Object} options Additional options for resizing.
       * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.
       * @returns {Promise<RawImage>} `this` to support chaining.
       */
      async resize(width, height, {
        resample = 2
      } = {}) {
        let resampleMethod = RESAMPLING_MAPPING[resample] ?? resample;
        if (BROWSER_ENV) {
          let numChannels = this.channels;
          let canvas = this.toCanvas();
          const ctx = createCanvasFunction(width, height).getContext("2d");
          ctx.drawImage(canvas, 0, 0, width, height);
          let resizedImage = new _RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);
          return resizedImage.convert(numChannels);
        } else {
          let img = this.toSharp();
          switch (resampleMethod) {
            case "box":
            case "hamming":
              if (resampleMethod === "box" || resampleMethod === "hamming") {
                console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);
                resampleMethod = "bilinear";
              }
            case "nearest":
            case "bilinear":
            case "bicubic":
              img = img.affine([width / this.width, 0, 0, height / this.height], {
                interpolator: resampleMethod
              });
              break;
            case "lanczos":
              img = img.resize({
                width,
                height,
                fit: "fill",
                kernel: "lanczos3"
                // PIL Lanczos uses a kernel size of 3 
              });
              break;
            default:
              throw new Error(`Resampling method ${resampleMethod} is not supported.`);
          }
          return await loadImageFunction(img);
        }
      }
      async pad([left, right, top, bottom]) {
        left = Math.max(left, 0);
        right = Math.max(right, 0);
        top = Math.max(top, 0);
        bottom = Math.max(bottom, 0);
        if (left === 0 && right === 0 && top === 0 && bottom === 0) {
          return this;
        }
        if (BROWSER_ENV) {
          let numChannels = this.channels;
          let canvas = this.toCanvas();
          let newWidth = this.width + left + right;
          let newHeight = this.height + top + bottom;
          const ctx = createCanvasFunction(newWidth, newHeight).getContext("2d");
          ctx.drawImage(
            canvas,
            0,
            0,
            this.width,
            this.height,
            left,
            top,
            newWidth,
            newHeight
          );
          let paddedImage = new _RawImage(
            ctx.getImageData(0, 0, newWidth, newHeight).data,
            newWidth,
            newHeight,
            4
          );
          return paddedImage.convert(numChannels);
        } else {
          let img = this.toSharp().extend({ left, right, top, bottom });
          return await loadImageFunction(img);
        }
      }
      async crop([x_min, y_min, x_max, y_max]) {
        x_min = Math.max(x_min, 0);
        y_min = Math.max(y_min, 0);
        x_max = Math.min(x_max, this.width - 1);
        y_max = Math.min(y_max, this.height - 1);
        if (x_min === 0 && y_min === 0 && x_max === this.width - 1 && y_max === this.height - 1) {
          return this;
        }
        const crop_width = x_max - x_min + 1;
        const crop_height = y_max - y_min + 1;
        if (BROWSER_ENV) {
          const numChannels = this.channels;
          const canvas = this.toCanvas();
          const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
          ctx.drawImage(
            canvas,
            x_min,
            y_min,
            crop_width,
            crop_height,
            0,
            0,
            crop_width,
            crop_height
          );
          const resizedImage = new _RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
          return resizedImage.convert(numChannels);
        } else {
          const img = this.toSharp().extract({
            left: x_min,
            top: y_min,
            width: crop_width,
            height: crop_height
          });
          return await loadImageFunction(img);
        }
      }
      async center_crop(crop_width, crop_height) {
        if (this.width === crop_width && this.height === crop_height) {
          return this;
        }
        let width_offset = (this.width - crop_width) / 2;
        let height_offset = (this.height - crop_height) / 2;
        if (BROWSER_ENV) {
          let numChannels = this.channels;
          let canvas = this.toCanvas();
          const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
          let sourceX = 0;
          let sourceY = 0;
          let destX = 0;
          let destY = 0;
          if (width_offset >= 0) {
            sourceX = width_offset;
          } else {
            destX = -width_offset;
          }
          if (height_offset >= 0) {
            sourceY = height_offset;
          } else {
            destY = -height_offset;
          }
          ctx.drawImage(
            canvas,
            sourceX,
            sourceY,
            crop_width,
            crop_height,
            destX,
            destY,
            crop_width,
            crop_height
          );
          let resizedImage = new _RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
          return resizedImage.convert(numChannels);
        } else {
          let img = this.toSharp();
          if (width_offset >= 0 && height_offset >= 0) {
            img = img.extract({
              left: Math.floor(width_offset),
              top: Math.floor(height_offset),
              width: crop_width,
              height: crop_height
            });
          } else if (width_offset <= 0 && height_offset <= 0) {
            let top = Math.floor(-height_offset);
            let left = Math.floor(-width_offset);
            img = img.extend({
              top,
              left,
              // Ensures the resulting image has the desired dimensions
              right: crop_width - this.width - left,
              bottom: crop_height - this.height - top
            });
          } else {
            let y_padding = [0, 0];
            let y_extract = 0;
            if (height_offset < 0) {
              y_padding[0] = Math.floor(-height_offset);
              y_padding[1] = crop_height - this.height - y_padding[0];
            } else {
              y_extract = Math.floor(height_offset);
            }
            let x_padding = [0, 0];
            let x_extract = 0;
            if (width_offset < 0) {
              x_padding[0] = Math.floor(-width_offset);
              x_padding[1] = crop_width - this.width - x_padding[0];
            } else {
              x_extract = Math.floor(width_offset);
            }
            img = img.extend({
              top: y_padding[0],
              bottom: y_padding[1],
              left: x_padding[0],
              right: x_padding[1]
            }).extract({
              left: x_extract,
              top: y_extract,
              width: crop_width,
              height: crop_height
            });
          }
          return await loadImageFunction(img);
        }
      }
      async toBlob(type = "image/png", quality = 1) {
        if (!BROWSER_ENV) {
          throw new Error("toBlob() is only supported in browser environments.");
        }
        const canvas = this.toCanvas();
        return await canvas.convertToBlob({ type, quality });
      }
      toTensor(channel_format = "CHW") {
        let tensor = new Tensor(
          "uint8",
          new Uint8Array(this.data),
          [this.height, this.width, this.channels]
        );
        if (channel_format === "HWC") {
        } else if (channel_format === "CHW") {
          tensor = tensor.permute(2, 0, 1);
        } else {
          throw new Error(`Unsupported channel format: ${channel_format}`);
        }
        return tensor;
      }
      toCanvas() {
        if (!BROWSER_ENV) {
          throw new Error("toCanvas() is only supported in browser environments.");
        }
        let cloned = this.clone().rgba();
        let clonedCanvas = createCanvasFunction(cloned.width, cloned.height);
        let data = new ImageDataClass(cloned.data, cloned.width, cloned.height);
        clonedCanvas.getContext("2d").putImageData(data, 0, 0);
        return clonedCanvas;
      }
      /**
       * Helper method to update the image data.
       * @param {Uint8ClampedArray} data The new image data.
       * @param {number} width The new width of the image.
       * @param {number} height The new height of the image.
       * @param {1|2|3|4|null} [channels] The new number of channels of the image.
       * @private
       */
      _update(data, width, height, channels = null) {
        this.data = data;
        this.width = width;
        this.height = height;
        if (channels !== null) {
          this.channels = channels;
        }
        return this;
      }
      /**
       * Clone the image
       * @returns {RawImage} The cloned image
       */
      clone() {
        return new _RawImage(this.data.slice(), this.width, this.height, this.channels);
      }
      /**
       * Helper method for converting image to have a certain number of channels
       * @param {number} numChannels The number of channels. Must be 1, 3, or 4.
       * @returns {RawImage} `this` to support chaining.
       */
      convert(numChannels) {
        if (this.channels === numChannels) return this;
        switch (numChannels) {
          case 1:
            this.grayscale();
            break;
          case 3:
            this.rgb();
            break;
          case 4:
            this.rgba();
            break;
          default:
            throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
        }
        return this;
      }
      /**
       * Save the image to the given path.
       * @param {string} path The path to save the image to.
       */
      async save(path3) {
        if (BROWSER_ENV) {
          if (WEBWORKER_ENV) {
            throw new Error("Unable to save an image from a Web Worker.");
          }
          const extension = path3.split(".").pop().toLowerCase();
          const mime = CONTENT_TYPE_MAP.get(extension) ?? "image/png";
          const blob2 = await this.toBlob(mime);
          const dataURL = URL.createObjectURL(blob2);
          const downloadLink = document.createElement("a");
          downloadLink.href = dataURL;
          downloadLink.download = path3;
          downloadLink.click();
          downloadLink.remove();
        } else if (!env.useFS) {
          throw new Error("Unable to save the image because filesystem is disabled in this environment.");
        } else {
          const img = this.toSharp();
          return await img.toFile(path3);
        }
      }
      toSharp() {
        if (BROWSER_ENV) {
          throw new Error("toSharp() is only supported in server-side environments.");
        }
        return (0, import_sharp.default)(this.data, {
          raw: {
            width: this.width,
            height: this.height,
            channels: this.channels
          }
        });
      }
    };
  }
});

// node_modules/@xenova/transformers/src/utils/audio.js
async function read_audio(url2, sampling_rate) {
  if (typeof AudioContext === "undefined") {
    throw Error(
      "Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing."
    );
  }
  const response = await (await getFile(url2)).arrayBuffer();
  const audioCTX = new AudioContext({ sampleRate: sampling_rate });
  if (typeof sampling_rate === "undefined") {
    console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`);
  }
  const decoded = await audioCTX.decodeAudioData(response);
  let audio;
  if (decoded.numberOfChannels === 2) {
    const SCALING_FACTOR = Math.sqrt(2);
    const left = decoded.getChannelData(0);
    const right = decoded.getChannelData(1);
    audio = new Float32Array(left.length);
    for (let i = 0; i < decoded.length; ++i) {
      audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;
    }
  } else {
    audio = decoded.getChannelData(0);
  }
  return audio;
}
function hanning(M) {
  if (M < 1) {
    return new Float64Array();
  }
  if (M === 1) {
    return new Float64Array([1]);
  }
  const denom = M - 1;
  const factor = Math.PI / denom;
  const cos_vals = new Float64Array(M);
  for (let i = 0; i < M; ++i) {
    const n = 2 * i - denom;
    cos_vals[i] = 0.5 + 0.5 * Math.cos(factor * n);
  }
  return cos_vals;
}
function hertz_to_mel(freq, mel_scale = "htk") {
  const fn = HERTZ_TO_MEL_MAPPING[mel_scale];
  if (!fn) {
    throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
  }
  return typeof freq === "number" ? fn(freq) : freq.map((x) => fn(x));
}
function mel_to_hertz(mels, mel_scale = "htk") {
  const fn = MEL_TO_HERTZ_MAPPING[mel_scale];
  if (!fn) {
    throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
  }
  return typeof mels === "number" ? fn(mels) : mels.map((x) => fn(x));
}
function _create_triangular_filter_bank(fft_freqs, filter_freqs) {
  const filter_diff = Float64Array.from(
    { length: filter_freqs.length - 1 },
    (_, i) => filter_freqs[i + 1] - filter_freqs[i]
  );
  const slopes = Array.from({
    length: fft_freqs.length
  }, () => new Array(filter_freqs.length));
  for (let j = 0; j < fft_freqs.length; ++j) {
    const slope = slopes[j];
    for (let i = 0; i < filter_freqs.length; ++i) {
      slope[i] = filter_freqs[i] - fft_freqs[j];
    }
  }
  const numFreqs = filter_freqs.length - 2;
  const ret = Array.from({ length: numFreqs }, () => new Array(fft_freqs.length));
  for (let j = 0; j < fft_freqs.length; ++j) {
    const slope = slopes[j];
    for (let i = 0; i < numFreqs; ++i) {
      const down = -slope[i] / filter_diff[i];
      const up = slope[i + 2] / filter_diff[i + 1];
      ret[i][j] = Math.max(0, Math.min(down, up));
    }
  }
  return ret;
}
function linspace(start, end, num) {
  const step = (end - start) / (num - 1);
  return Float64Array.from({ length: num }, (_, i) => start + step * i);
}
function mel_filter_bank(num_frequency_bins, num_mel_filters, min_frequency, max_frequency, sampling_rate, norm = null, mel_scale = "htk", triangularize_in_mel_space = false) {
  if (norm !== null && norm !== "slaney") {
    throw new Error('norm must be one of null or "slaney"');
  }
  const mel_min = hertz_to_mel(min_frequency, mel_scale);
  const mel_max = hertz_to_mel(max_frequency, mel_scale);
  const mel_freqs = linspace(mel_min, mel_max, num_mel_filters + 2);
  let filter_freqs = mel_to_hertz(mel_freqs, mel_scale);
  let fft_freqs;
  if (triangularize_in_mel_space) {
    const fft_bin_width = sampling_rate / (num_frequency_bins * 2);
    fft_freqs = hertz_to_mel(Float64Array.from({ length: num_frequency_bins }, (_, i) => i * fft_bin_width), mel_scale);
    filter_freqs = mel_freqs;
  } else {
    fft_freqs = linspace(0, Math.floor(sampling_rate / 2), num_frequency_bins);
  }
  const mel_filters = _create_triangular_filter_bank(fft_freqs, filter_freqs);
  if (norm !== null && norm === "slaney") {
    for (let i = 0; i < num_mel_filters; ++i) {
      const filter = mel_filters[i];
      const enorm = 2 / (filter_freqs[i + 2] - filter_freqs[i]);
      for (let j = 0; j < num_frequency_bins; ++j) {
        filter[j] *= enorm;
      }
    }
  }
  return mel_filters;
}
function padReflect(array, left, right) {
  const padded = new array.constructor(array.length + left + right);
  const w = array.length - 1;
  for (let i = 0; i < array.length; ++i) {
    padded[left + i] = array[i];
  }
  for (let i = 1; i <= left; ++i) {
    padded[left - i] = array[calculateReflectOffset(i, w)];
  }
  for (let i = 1; i <= right; ++i) {
    padded[w + left + i] = array[calculateReflectOffset(w - i, w)];
  }
  return padded;
}
function _db_conversion_helper(spectrogram2, factor, reference, min_value, db_range) {
  if (reference <= 0) {
    throw new Error("reference must be greater than zero");
  }
  if (min_value <= 0) {
    throw new Error("min_value must be greater than zero");
  }
  reference = Math.max(min_value, reference);
  const logReference = Math.log10(reference);
  for (let i = 0; i < spectrogram2.length; ++i) {
    spectrogram2[i] = factor * Math.log10(Math.max(min_value, spectrogram2[i]) - logReference);
  }
  if (db_range !== null) {
    if (db_range <= 0) {
      throw new Error("db_range must be greater than zero");
    }
    const maxValue = max(spectrogram2)[0] - db_range;
    for (let i = 0; i < spectrogram2.length; ++i) {
      spectrogram2[i] = Math.max(spectrogram2[i], maxValue);
    }
  }
  return spectrogram2;
}
function amplitude_to_db(spectrogram2, reference = 1, min_value = 1e-5, db_range = null) {
  return _db_conversion_helper(spectrogram2, 20, reference, min_value, db_range);
}
function power_to_db(spectrogram2, reference = 1, min_value = 1e-10, db_range = null) {
  return _db_conversion_helper(spectrogram2, 10, reference, min_value, db_range);
}
function spectrogram(waveform, window2, frame_length, hop_length, {
  fft_length = null,
  power = 1,
  center = true,
  pad_mode = "reflect",
  onesided = true,
  preemphasis = null,
  mel_filters = null,
  mel_floor = 1e-10,
  log_mel = null,
  reference = 1,
  min_value = 1e-10,
  db_range = null,
  remove_dc_offset = null,
  // Custom parameters for efficiency reasons
  max_num_frames = null,
  do_pad = true,
  transpose = false
} = {}) {
  const window_length = window2.length;
  if (fft_length === null) {
    fft_length = frame_length;
  }
  if (frame_length > fft_length) {
    throw Error(`frame_length (${frame_length}) may not be larger than fft_length (${fft_length})`);
  }
  if (window_length !== frame_length) {
    throw new Error(`Length of the window (${window_length}) must equal frame_length (${frame_length})`);
  }
  if (hop_length <= 0) {
    throw new Error("hop_length must be greater than zero");
  }
  if (power === null && mel_filters !== null) {
    throw new Error(
      "You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue."
    );
  }
  if (center) {
    if (pad_mode !== "reflect") {
      throw new Error(`pad_mode="${pad_mode}" not implemented yet.`);
    }
    const half_window = Math.floor((fft_length - 1) / 2) + 1;
    waveform = padReflect(waveform, half_window, half_window);
  }
  const num_frames = Math.floor(1 + Math.floor((waveform.length - frame_length) / hop_length));
  const num_frequency_bins = onesided ? Math.floor(fft_length / 2) + 1 : fft_length;
  let d1 = num_frames;
  let d1Max = num_frames;
  if (max_num_frames !== null) {
    if (max_num_frames > num_frames) {
      if (do_pad) {
        d1Max = max_num_frames;
      }
    } else {
      d1Max = d1 = max_num_frames;
    }
  }
  const fft = new FFT(fft_length);
  const inputBuffer = new Float64Array(fft_length);
  const outputBuffer = new Float64Array(fft.outputBufferSize);
  const magnitudes = new Array(d1);
  for (let i = 0; i < d1; ++i) {
    const offset = i * hop_length;
    for (let j = 0; j < frame_length; ++j) {
      inputBuffer[j] = waveform[offset + j];
    }
    if (remove_dc_offset) {
      let sum = 0;
      for (let j = 0; j < frame_length; ++j) {
        sum += inputBuffer[j];
      }
      const mean2 = sum / frame_length;
      for (let j = 0; j < frame_length; ++j) {
        inputBuffer[j] -= mean2;
      }
    }
    if (preemphasis !== null) {
      for (let j = frame_length - 1; j >= 1; --j) {
        inputBuffer[j] -= preemphasis * inputBuffer[j - 1];
      }
      inputBuffer[0] *= 1 - preemphasis;
    }
    for (let j = 0; j < window2.length; ++j) {
      inputBuffer[j] *= window2[j];
    }
    fft.realTransform(outputBuffer, inputBuffer);
    const row = new Array(num_frequency_bins);
    for (let j = 0; j < row.length; ++j) {
      const j2 = j << 1;
      row[j] = outputBuffer[j2] ** 2 + outputBuffer[j2 + 1] ** 2;
    }
    magnitudes[i] = row;
  }
  if (power !== null && power !== 2) {
    const pow = 2 / power;
    for (let i = 0; i < magnitudes.length; ++i) {
      const magnitude2 = magnitudes[i];
      for (let j = 0; j < magnitude2.length; ++j) {
        magnitude2[j] **= pow;
      }
    }
  }
  const num_mel_filters = mel_filters.length;
  const mel_spec = new Float32Array(num_mel_filters * d1Max);
  const dims = transpose ? [d1Max, num_mel_filters] : [num_mel_filters, d1Max];
  for (let i = 0; i < num_mel_filters; ++i) {
    const filter = mel_filters[i];
    for (let j = 0; j < d1; ++j) {
      const magnitude2 = magnitudes[j];
      let sum = 0;
      for (let k = 0; k < num_frequency_bins; ++k) {
        sum += filter[k] * magnitude2[k];
      }
      mel_spec[transpose ? j * num_mel_filters + i : i * d1 + j] = Math.max(mel_floor, sum);
    }
  }
  if (power !== null && log_mel !== null) {
    const o = Math.min(mel_spec.length, d1 * num_mel_filters);
    switch (log_mel) {
      case "log":
        for (let i = 0; i < o; ++i) {
          mel_spec[i] = Math.log(mel_spec[i]);
        }
        break;
      case "log10":
        for (let i = 0; i < o; ++i) {
          mel_spec[i] = Math.log10(mel_spec[i]);
        }
        break;
      case "dB":
        if (power === 1) {
          amplitude_to_db(mel_spec, reference, min_value, db_range);
        } else if (power === 2) {
          power_to_db(mel_spec, reference, min_value, db_range);
        } else {
          throw new Error(`Cannot use log_mel option '${log_mel}' with power ${power}`);
        }
        break;
      default:
        throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${log_mel}'`);
    }
  }
  return { data: mel_spec, dims };
}
function window_function(window_length, name2, {
  periodic = true,
  frame_length = null,
  center = true
} = {}) {
  const length = periodic ? window_length + 1 : window_length;
  let window2;
  switch (name2) {
    case "boxcar":
      window2 = new Float64Array(length).fill(1);
      break;
    case "hann":
    case "hann_window":
      window2 = hanning(length);
      break;
    case "povey":
      window2 = hanning(length).map((x) => Math.pow(x, 0.85));
      break;
    default:
      throw new Error(`Unknown window type ${name2}.`);
  }
  if (periodic) {
    window2 = window2.subarray(0, window_length);
  }
  if (frame_length === null) {
    return window2;
  }
  if (window_length > frame_length) {
    throw new Error(`Length of the window (${window_length}) may not be larger than frame_length (${frame_length})`);
  }
  return window2;
}
var HERTZ_TO_MEL_MAPPING, MEL_TO_HERTZ_MAPPING;
var init_audio = __esm({
  "node_modules/@xenova/transformers/src/utils/audio.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_hub();
    init_maths();
    init_core();
    __name(read_audio, "read_audio");
    __name(hanning, "hanning");
    HERTZ_TO_MEL_MAPPING = {
      "htk": /* @__PURE__ */ __name((freq) => 2595 * Math.log10(1 + freq / 700), "htk"),
      "kaldi": /* @__PURE__ */ __name((freq) => 1127 * Math.log(1 + freq / 700), "kaldi"),
      "slaney": /* @__PURE__ */ __name((freq, min_log_hertz = 1e3, min_log_mel = 15, logstep = 27 / Math.log(6.4)) => freq >= min_log_hertz ? min_log_mel + Math.log(freq / min_log_hertz) * logstep : 3 * freq / 200, "slaney")
    };
    __name(hertz_to_mel, "hertz_to_mel");
    MEL_TO_HERTZ_MAPPING = {
      "htk": /* @__PURE__ */ __name((mels) => 700 * (10 ** (mels / 2595) - 1), "htk"),
      "kaldi": /* @__PURE__ */ __name((mels) => 700 * (Math.exp(mels / 1127) - 1), "kaldi"),
      "slaney": /* @__PURE__ */ __name((mels, min_log_hertz = 1e3, min_log_mel = 15, logstep = Math.log(6.4) / 27) => mels >= min_log_mel ? min_log_hertz * Math.exp(logstep * (mels - min_log_mel)) : 200 * mels / 3, "slaney")
    };
    __name(mel_to_hertz, "mel_to_hertz");
    __name(_create_triangular_filter_bank, "_create_triangular_filter_bank");
    __name(linspace, "linspace");
    __name(mel_filter_bank, "mel_filter_bank");
    __name(padReflect, "padReflect");
    __name(_db_conversion_helper, "_db_conversion_helper");
    __name(amplitude_to_db, "amplitude_to_db");
    __name(power_to_db, "power_to_db");
    __name(spectrogram, "spectrogram");
    __name(window_function, "window_function");
  }
});

// node_modules/@xenova/transformers/src/processors.js
function center_to_corners_format([centerX, centerY, width, height]) {
  return [
    centerX - width / 2,
    centerY - height / 2,
    centerX + width / 2,
    centerY + height / 2
  ];
}
function post_process_object_detection(outputs, threshold = 0.5, target_sizes = null, is_zero_shot = false) {
  const out_logits = outputs.logits;
  const out_bbox = outputs.pred_boxes;
  const [batch_size, num_boxes, num_classes] = out_logits.dims;
  if (target_sizes !== null && target_sizes.length !== batch_size) {
    throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
  }
  let toReturn = [];
  for (let i = 0; i < batch_size; ++i) {
    let target_size = target_sizes !== null ? target_sizes[i] : null;
    let info = {
      boxes: [],
      classes: [],
      scores: []
    };
    let logits = out_logits[i];
    let bbox = out_bbox[i];
    for (let j = 0; j < num_boxes; ++j) {
      let logit = logits[j];
      let indices = [];
      let probs;
      if (is_zero_shot) {
        probs = logit.sigmoid().data;
        for (let k = 0; k < probs.length; ++k) {
          if (probs[k] > threshold) {
            indices.push(k);
          }
        }
      } else {
        let maxIndex = max(logit.data)[1];
        if (maxIndex === num_classes - 1) {
          continue;
        }
        indices.push(maxIndex);
        probs = softmax(logit.data);
      }
      for (const index of indices) {
        let box = bbox[j].data;
        box = center_to_corners_format(box);
        if (target_size !== null) {
          box = box.map((x, i2) => x * target_size[(i2 + 1) % 2]);
        }
        info.boxes.push(box);
        info.classes.push(index);
        info.scores.push(probs[index]);
      }
    }
    toReturn.push(info);
  }
  return toReturn;
}
function validate_audio_inputs(audio, feature_extractor) {
  if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {
    throw new Error(
      `${feature_extractor} expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`
    );
  }
}
function constraint_to_multiple_of(val, multiple, minVal = 0, maxVal = null) {
  const a = val / multiple;
  let x = bankers_round(a) * multiple;
  if (maxVal !== null && x > maxVal) {
    x = Math.floor(a) * multiple;
  }
  if (x < minVal) {
    x = Math.ceil(a) * multiple;
  }
  return x;
}
function enforce_size_divisibility([width, height], divisor) {
  return [
    Math.max(Math.floor(width / divisor), 1) * divisor,
    Math.max(Math.floor(height / divisor), 1) * divisor
  ];
}
var FeatureExtractor, ImageFeatureExtractor, SegformerFeatureExtractor, DPTFeatureExtractor, DPTImageProcessor, BitImageProcessor, GLPNFeatureExtractor, CLIPFeatureExtractor, ChineseCLIPFeatureExtractor, SiglipImageProcessor, ConvNextFeatureExtractor, ConvNextImageProcessor, ViTFeatureExtractor, ViTImageProcessor, EfficientNetImageProcessor, MobileViTFeatureExtractor, MobileViTImageProcessor, OwlViTFeatureExtractor, Owlv2ImageProcessor, DeiTFeatureExtractor, BeitFeatureExtractor, DonutFeatureExtractor, NougatImageProcessor, DetrFeatureExtractor, YolosFeatureExtractor, SamImageProcessor, Swin2SRImageProcessor, VitMatteImageProcessor, WhisperFeatureExtractor, Wav2Vec2FeatureExtractor, SeamlessM4TFeatureExtractor, ASTFeatureExtractor, ClapFeatureExtractor, SpeechT5FeatureExtractor, Processor, SamProcessor, WhisperProcessor, Wav2Vec2ProcessorWithLM, SpeechT5Processor, OwlViTProcessor, AutoProcessor;
var init_processors = __esm({
  "node_modules/@xenova/transformers/src/processors.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_core();
    init_hub();
    init_maths();
    init_tensor();
    init_image();
    init_audio();
    __name(center_to_corners_format, "center_to_corners_format");
    __name(post_process_object_detection, "post_process_object_detection");
    __name(validate_audio_inputs, "validate_audio_inputs");
    __name(constraint_to_multiple_of, "constraint_to_multiple_of");
    __name(enforce_size_divisibility, "enforce_size_divisibility");
    FeatureExtractor = class extends Callable {
      static {
        __name(this, "FeatureExtractor");
      }
      /**
       * Constructs a new FeatureExtractor instance.
       *
       * @param {Object} config The configuration for the feature extractor.
       */
      constructor(config) {
        super();
        this.config = config;
      }
    };
    ImageFeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "ImageFeatureExtractor");
      }
      /**
       * Constructs a new ImageFeatureExtractor instance.
       *
       * @param {Object} config The configuration for the feature extractor.
       * @param {number[]} config.image_mean The mean values for image normalization.
       * @param {number[]} config.image_std The standard deviation values for image normalization.
       * @param {boolean} config.do_rescale Whether to rescale the image pixel values to the [0,1] range.
       * @param {number} config.rescale_factor The factor to use for rescaling the image pixel values.
       * @param {boolean} config.do_normalize Whether to normalize the image pixel values.
       * @param {boolean} config.do_resize Whether to resize the image.
       * @param {number} config.resample What method to use for resampling.
       * @param {number|Object} config.size The size to resize the image to.
       * @param {boolean} [config.do_flip_channel_order=false] Whether to flip the color channels from RGB to BGR.
       * Can be overridden by the `do_flip_channel_order` parameter in the `preprocess` method.
       */
      constructor(config) {
        super(config);
        this.image_mean = this.config.image_mean ?? this.config.mean;
        this.image_std = this.config.image_std ?? this.config.std;
        this.resample = this.config.resample ?? 2;
        this.do_rescale = this.config.do_rescale ?? true;
        this.rescale_factor = this.config.rescale_factor ?? 1 / 255;
        this.do_normalize = this.config.do_normalize;
        this.do_resize = this.config.do_resize;
        this.do_thumbnail = this.config.do_thumbnail;
        this.size = this.config.size;
        this.size_divisibility = this.config.size_divisibility ?? this.config.size_divisor;
        this.do_center_crop = this.config.do_center_crop;
        this.crop_size = this.config.crop_size;
        this.do_convert_rgb = this.config.do_convert_rgb ?? true;
        this.do_crop_margin = this.config.do_crop_margin;
        this.pad_size = this.config.pad_size;
        this.do_pad = this.config.do_pad;
        if (this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0) {
          this.pad_size = this.size;
        }
        this.do_flip_channel_order = this.config.do_flip_channel_order ?? false;
      }
      /**
       * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any
       * corresponding dimension of the specified size.
       * @param {RawImage} image The image to be resized.
       * @param {{height:number, width:number}} size The size `{"height": h, "width": w}` to resize the image to.
       * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.
       * @returns {Promise<RawImage>} The resized image.
       */
      async thumbnail(image, size, resample = 2) {
        const input_height = image.height;
        const input_width = image.width;
        const output_height = size.height;
        const output_width = size.width;
        let height = Math.min(input_height, output_height);
        let width = Math.min(input_width, output_width);
        if (height === input_height && width === input_width) {
          return image;
        }
        if (input_height > input_width) {
          width = Math.floor(input_width * height / input_height);
        } else if (input_width > input_height) {
          height = Math.floor(input_height * width / input_width);
        }
        return await image.resize(width, height, { resample });
      }
      /**
       * Crops the margin of the image. Gray pixels are considered margin (i.e., pixels with a value below the threshold).
       * @param {RawImage} image The image to be cropped.
       * @param {number} gray_threshold Value below which pixels are considered to be gray.
       * @returns {Promise<RawImage>} The cropped image.
       */
      async crop_margin(image, gray_threshold = 200) {
        const gray_image = image.clone().grayscale();
        const minValue = min(gray_image.data)[0];
        const maxValue = max(gray_image.data)[0];
        const diff = maxValue - minValue;
        if (diff === 0) {
          return image;
        }
        const threshold = gray_threshold / 255;
        let x_min = gray_image.width, y_min = gray_image.height, x_max = 0, y_max = 0;
        for (let j = 0; j < gray_image.height; ++j) {
          const row = j * gray_image.width;
          for (let i = 0; i < gray_image.width; ++i) {
            if ((gray_image.data[row + i] - minValue) / diff < threshold) {
              x_min = Math.min(x_min, i);
              y_min = Math.min(y_min, j);
              x_max = Math.max(x_max, i);
              y_max = Math.max(y_max, j);
            }
          }
        }
        image = await image.crop([x_min, y_min, x_max, y_max]);
        return image;
      }
      /**
       * Pad the image by a certain amount.
       * @param {Float32Array} pixelData The pixel data to pad.
       * @param {number[]} imgDims The dimensions of the image (height, width, channels).
       * @param {{width:number; height:number}|number} padSize The dimensions of the padded image.
       * @param {Object} options The options for padding.
       * @param {'constant'|'symmetric'} [options.mode='constant'] The type of padding to add.
       * @param {boolean} [options.center=false] Whether to center the image.
       * @param {number} [options.constant_values=0] The constant value to use for padding.
       * @returns {[Float32Array, number[]]} The padded pixel data and image dimensions.
       */
      pad_image(pixelData, imgDims, padSize, {
        mode = "constant",
        center = false,
        constant_values = 0
      } = {}) {
        const [imageHeight, imageWidth, imageChannels] = imgDims;
        let paddedImageWidth, paddedImageHeight;
        if (typeof padSize === "number") {
          paddedImageWidth = padSize;
          paddedImageHeight = padSize;
        } else {
          paddedImageWidth = padSize.width;
          paddedImageHeight = padSize.height;
        }
        if (paddedImageWidth !== imageWidth || paddedImageHeight !== imageHeight) {
          const paddedPixelData = new Float32Array(paddedImageWidth * paddedImageHeight * imageChannels);
          if (Array.isArray(constant_values)) {
            for (let i = 0; i < paddedPixelData.length; ++i) {
              paddedPixelData[i] = constant_values[i % imageChannels];
            }
          } else if (constant_values !== 0) {
            paddedPixelData.fill(constant_values);
          }
          const [left, top] = center ? [Math.floor((paddedImageWidth - imageWidth) / 2), Math.floor((paddedImageHeight - imageHeight) / 2)] : [0, 0];
          for (let i = 0; i < imageHeight; ++i) {
            const a = (i + top) * paddedImageWidth;
            const b = i * imageWidth;
            for (let j = 0; j < imageWidth; ++j) {
              const c = (a + j + left) * imageChannels;
              const d = (b + j) * imageChannels;
              for (let k = 0; k < imageChannels; ++k) {
                paddedPixelData[c + k] = pixelData[d + k];
              }
            }
          }
          if (mode === "symmetric") {
            if (center) {
              throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");
            }
            const h1 = imageHeight - 1;
            const w1 = imageWidth - 1;
            for (let i = 0; i < paddedImageHeight; ++i) {
              const a = i * paddedImageWidth;
              const b = calculateReflectOffset(i, h1) * imageWidth;
              for (let j = 0; j < paddedImageWidth; ++j) {
                if (i < imageHeight && j < imageWidth) continue;
                const c = (a + j) * imageChannels;
                const d = (b + calculateReflectOffset(j, w1)) * imageChannels;
                for (let k = 0; k < imageChannels; ++k) {
                  paddedPixelData[c + k] = pixelData[d + k];
                }
              }
            }
          }
          pixelData = paddedPixelData;
          imgDims = [paddedImageHeight, paddedImageWidth, imageChannels];
        }
        return [pixelData, imgDims];
      }
      /**
       * Rescale the image' pixel values by `this.rescale_factor`.
       * @param {Float32Array} pixelData The pixel data to rescale.
       * @returns {void}
       */
      rescale(pixelData) {
        for (let i = 0; i < pixelData.length; ++i) {
          pixelData[i] = this.rescale_factor * pixelData[i];
        }
      }
      /**
       * Find the target (width, height) dimension of the output image after
       * resizing given the input image and the desired size.
       * @param {RawImage} image The image to resize.
       * @param {any} size The size to use for resizing the image. 
       * @returns {[number, number]} The target (width, height) dimension of the output image after resizing.
       */
      get_resize_output_image_size(image, size) {
        const [srcWidth, srcHeight] = image.size;
        let shortest_edge;
        let longest_edge;
        if (this.do_thumbnail) {
          const { height, width } = size;
          shortest_edge = Math.min(height, width);
        } else if (Number.isInteger(size)) {
          shortest_edge = size;
          longest_edge = this.config.max_size ?? shortest_edge;
        } else if (size !== void 0) {
          shortest_edge = size.shortest_edge;
          longest_edge = size.longest_edge;
        }
        if (shortest_edge !== void 0 || longest_edge !== void 0) {
          const shortResizeFactor = shortest_edge === void 0 ? 1 : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);
          const newWidth = srcWidth * shortResizeFactor;
          const newHeight = srcHeight * shortResizeFactor;
          const longResizeFactor = longest_edge === void 0 ? 1 : Math.min(longest_edge / newWidth, longest_edge / newHeight);
          let finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));
          let finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));
          if (this.size_divisibility !== void 0) {
            [finalWidth, finalHeight] = enforce_size_divisibility([finalWidth, finalHeight], this.size_divisibility);
          }
          return [finalWidth, finalHeight];
        } else if (size !== void 0 && size.width !== void 0 && size.height !== void 0) {
          let newWidth = size.width;
          let newHeight = size.height;
          if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {
            let scale_height = newHeight / srcHeight;
            let scale_width = newWidth / srcWidth;
            if (Math.abs(1 - scale_width) < Math.abs(1 - scale_height)) {
              scale_height = scale_width;
            } else {
              scale_width = scale_height;
            }
            newHeight = constraint_to_multiple_of(scale_height * srcHeight, this.config.ensure_multiple_of);
            newWidth = constraint_to_multiple_of(scale_width * srcWidth, this.config.ensure_multiple_of);
          }
          return [newWidth, newHeight];
        } else if (this.size_divisibility !== void 0) {
          return enforce_size_divisibility([srcWidth, srcHeight], this.size_divisibility);
        } else {
          throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(size)}`);
        }
      }
      /**
       * Resizes the image.
       * @param {RawImage} image The image to resize.
       * @returns {Promise<RawImage>} The resized image.
       */
      async resize(image) {
        const [newWidth, newHeight] = this.get_resize_output_image_size(image, this.size);
        return await image.resize(newWidth, newHeight, {
          resample: this.resample
        });
      }
      /**
       * @typedef {object} PreprocessedImage
       * @property {HeightWidth} original_size The original size of the image.
       * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.
       * @property {Tensor} pixel_values The pixel values of the preprocessed image.
       */
      /**
       * Preprocesses the given image.
       *
       * @param {RawImage} image The image to preprocess.
       * @param {Object} overrides The overrides for the preprocessing options.
       * @returns {Promise<PreprocessedImage>} The preprocessed image.
       */
      async preprocess(image, {
        do_normalize = null,
        do_pad = null,
        do_convert_rgb = null,
        do_convert_grayscale = null,
        do_flip_channel_order = null
      } = {}) {
        if (this.do_crop_margin) {
          image = await this.crop_margin(image);
        }
        const [srcWidth, srcHeight] = image.size;
        if (do_convert_rgb ?? this.do_convert_rgb) {
          image = image.rgb();
        } else if (do_convert_grayscale) {
          image = image.grayscale();
        }
        if (this.do_resize) {
          image = await this.resize(image);
        }
        if (this.do_thumbnail) {
          image = await this.thumbnail(image, this.size, this.resample);
        }
        if (this.do_center_crop) {
          let crop_width;
          let crop_height;
          if (Number.isInteger(this.crop_size)) {
            crop_width = this.crop_size;
            crop_height = this.crop_size;
          } else {
            crop_width = this.crop_size.width;
            crop_height = this.crop_size.height;
          }
          image = await image.center_crop(crop_width, crop_height);
        }
        const reshaped_input_size = [image.height, image.width];
        let pixelData = Float32Array.from(image.data);
        let imgDims = [image.height, image.width, image.channels];
        if (this.do_rescale) {
          this.rescale(pixelData);
        }
        if (do_normalize ?? this.do_normalize) {
          let image_mean = this.image_mean;
          if (!Array.isArray(this.image_mean)) {
            image_mean = new Array(image.channels).fill(image_mean);
          }
          let image_std = this.image_std;
          if (!Array.isArray(this.image_std)) {
            image_std = new Array(image.channels).fill(image_mean);
          }
          if (image_mean.length !== image.channels || image_std.length !== image.channels) {
            throw new Error(`When set to arrays, the length of \`image_mean\` (${image_mean.length}) and \`image_std\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);
          }
          for (let i = 0; i < pixelData.length; i += image.channels) {
            for (let j = 0; j < image.channels; ++j) {
              pixelData[i + j] = (pixelData[i + j] - image_mean[j]) / image_std[j];
            }
          }
        }
        if (do_pad ?? this.do_pad) {
          if (this.pad_size) {
            const padded = this.pad_image(pixelData, [image.height, image.width, image.channels], this.pad_size);
            [pixelData, imgDims] = padded;
          } else if (this.size_divisibility) {
            const [paddedWidth, paddedHeight] = enforce_size_divisibility([imgDims[1], imgDims[0]], this.size_divisibility);
            [pixelData, imgDims] = this.pad_image(pixelData, imgDims, { width: paddedWidth, height: paddedHeight });
          }
        }
        if (do_flip_channel_order ?? this.do_flip_channel_order) {
          if (imgDims[2] !== 3) {
            throw new Error("Flipping channel order is only supported for RGB images.");
          }
          for (let i = 0; i < pixelData.length; i += 3) {
            const temp = pixelData[i];
            pixelData[i] = pixelData[i + 2];
            pixelData[i + 2] = temp;
          }
        }
        const pixel_values = new Tensor("float32", pixelData, imgDims).permute(2, 0, 1);
        return {
          original_size: [srcHeight, srcWidth],
          reshaped_input_size,
          pixel_values
        };
      }
      /**
       * Calls the feature extraction process on an array of images,
       * preprocesses each image, and concatenates the resulting
       * features into a single Tensor.
       * @param {RawImage[]} images The image(s) to extract features from.
       * @param {...any} args Additional arguments.
       * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.
       */
      async _call(images, ...args) {
        if (!Array.isArray(images)) {
          images = [images];
        }
        const imageData = await Promise.all(images.map((x) => this.preprocess(x)));
        const pixel_values = stack(imageData.map((x) => x.pixel_values), 0);
        return {
          pixel_values,
          // Original sizes of images
          original_sizes: imageData.map((x) => x.original_size),
          // Reshaped sizes of images, before padding or cropping
          reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)
        };
      }
    };
    SegformerFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "SegformerFeatureExtractor");
      }
      /**
       * Converts the output of `SegformerForSemanticSegmentation` into semantic segmentation maps.
       * @param {*} outputs Raw outputs of the model.
       * @param {number[][]} [target_sizes=null] List of tuples corresponding to the requested final size
       * (height, width) of each prediction. If unset, predictions will not be resized.
       * @returns {{segmentation: Tensor; labels: number[]}[]} The semantic segmentation maps.
       */
      post_process_semantic_segmentation(outputs, target_sizes = null) {
        const logits = outputs.logits;
        const batch_size = logits.dims[0];
        if (target_sizes !== null && target_sizes.length !== batch_size) {
          throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
        }
        const toReturn = [];
        for (let i = 0; i < batch_size; ++i) {
          const target_size = target_sizes !== null ? target_sizes[i] : null;
          let data = logits[i];
          if (target_size !== null) {
            data = interpolate(data, target_size, "bilinear", false);
          }
          const [height, width] = target_size ?? data.dims.slice(-2);
          const segmentation = new Tensor(
            "int32",
            new Int32Array(height * width),
            [height, width]
          );
          const buffer = data[0].data;
          for (let j = 1; j < data.dims[0]; ++j) {
            const row = data[j].data;
            for (let k = 0; k < row.length; ++k) {
              if (row[k] > buffer[k]) {
                buffer[k] = row[k];
                segmentation.data[k] = j;
              }
            }
          }
          const hasLabel = new Array(data.dims[0]);
          const out = segmentation.data;
          for (let j = 0; j < out.length; ++j) {
            const index = out[j];
            hasLabel[index] = index;
          }
          const labels = hasLabel.filter((x) => x !== void 0);
          toReturn.push({ segmentation, labels });
        }
        return toReturn;
      }
    };
    DPTFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "DPTFeatureExtractor");
      }
    };
    DPTImageProcessor = class extends DPTFeatureExtractor {
      static {
        __name(this, "DPTImageProcessor");
      }
    };
    BitImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "BitImageProcessor");
      }
    };
    GLPNFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "GLPNFeatureExtractor");
      }
    };
    CLIPFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "CLIPFeatureExtractor");
      }
    };
    ChineseCLIPFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "ChineseCLIPFeatureExtractor");
      }
    };
    SiglipImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "SiglipImageProcessor");
      }
    };
    ConvNextFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "ConvNextFeatureExtractor");
      }
      constructor(config) {
        super(config);
        this.crop_pct = this.config.crop_pct ?? 224 / 256;
      }
      async resize(image) {
        const shortest_edge = this.size?.shortest_edge;
        if (shortest_edge === void 0) {
          throw new Error(`Size dictionary must contain 'shortest_edge' key.`);
        }
        if (shortest_edge < 384) {
          const resize_shortest_edge = Math.floor(shortest_edge / this.crop_pct);
          const [newWidth, newHeight] = this.get_resize_output_image_size(image, {
            shortest_edge: resize_shortest_edge
          });
          image = await image.resize(newWidth, newHeight, {
            resample: this.resample
          });
          image = await image.center_crop(shortest_edge, shortest_edge);
        } else {
          image = await image.resize(shortest_edge, shortest_edge, {
            resample: this.resample
          });
        }
        return image;
      }
    };
    ConvNextImageProcessor = class extends ConvNextFeatureExtractor {
      static {
        __name(this, "ConvNextImageProcessor");
      }
    };
    ViTFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "ViTFeatureExtractor");
      }
    };
    ViTImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "ViTImageProcessor");
      }
    };
    EfficientNetImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "EfficientNetImageProcessor");
      }
      constructor(config) {
        super(config);
        this.include_top = this.config.include_top ?? true;
        if (this.include_top) {
          this.image_std = this.image_std.map((x) => x * x);
        }
      }
    };
    MobileViTFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "MobileViTFeatureExtractor");
      }
    };
    MobileViTImageProcessor = class extends MobileViTFeatureExtractor {
      static {
        __name(this, "MobileViTImageProcessor");
      }
    };
    OwlViTFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "OwlViTFeatureExtractor");
      }
      /** @type {post_process_object_detection} */
      post_process_object_detection(...args) {
        return post_process_object_detection(...args);
      }
    };
    Owlv2ImageProcessor = class extends OwlViTFeatureExtractor {
      static {
        __name(this, "Owlv2ImageProcessor");
      }
    };
    DeiTFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "DeiTFeatureExtractor");
      }
    };
    BeitFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "BeitFeatureExtractor");
      }
    };
    DonutFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "DonutFeatureExtractor");
      }
      pad_image(pixelData, imgDims, padSize, options = {}) {
        const [imageHeight, imageWidth, imageChannels] = imgDims;
        let image_mean = this.image_mean;
        if (!Array.isArray(this.image_mean)) {
          image_mean = new Array(imageChannels).fill(image_mean);
        }
        let image_std = this.image_std;
        if (!Array.isArray(image_std)) {
          image_std = new Array(imageChannels).fill(image_mean);
        }
        const constant_values = image_mean.map((x, i) => -x / image_std[i]);
        return super.pad_image(pixelData, imgDims, padSize, {
          center: true,
          // Since normalization is done after padding, we need to use certain constant values to ensure the same behaviour is observed.
          // For more information, see https://github.com/huggingface/transformers/blob/main/src/transformers/models/donut/image_processing_donut.py#L433-L451
          constant_values,
          ...options
        });
      }
    };
    NougatImageProcessor = class extends DonutFeatureExtractor {
      static {
        __name(this, "NougatImageProcessor");
      }
    };
    DetrFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "DetrFeatureExtractor");
      }
      /**
       * Calls the feature extraction process on an array of images, preprocesses
       * each image, and concatenates the resulting features into a single Tensor.
       * @param {RawImage[]} images The image(s) to extract features from.
       * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
       */
      async _call(images) {
        const result = await super._call(images);
        const maskSize = [result.pixel_values.dims[0], 64, 64];
        const pixel_mask = new Tensor(
          "int64",
          new BigInt64Array(maskSize.reduce((a, b) => a * b)).fill(1n),
          maskSize
        );
        return { ...result, pixel_mask };
      }
      /**
       * Post-processes the outputs of the model (for object detection).
       * @param {Object} outputs The outputs of the model that must be post-processed
       * @param {Tensor} outputs.logits The logits
       * @param {Tensor} outputs.pred_boxes The predicted boxes.
       * @return {Object[]} An array of objects containing the post-processed outputs.
       */
      /** @type {post_process_object_detection} */
      post_process_object_detection(...args) {
        return post_process_object_detection(...args);
      }
      /**
       * Binarize the given masks using `object_mask_threshold`, it returns the associated values of `masks`, `scores` and `labels`.
       * @param {Tensor} class_logits The class logits.
       * @param {Tensor} mask_logits The mask logits.
       * @param {number} object_mask_threshold A number between 0 and 1 used to binarize the masks.
       * @param {number} num_labels The number of labels.
       * @returns {[Tensor[], number[], number[]]} The binarized masks, the scores, and the labels.
       */
      remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {
        let mask_probs_item = [];
        let pred_scores_item = [];
        let pred_labels_item = [];
        for (let j = 0; j < class_logits.dims[0]; ++j) {
          let cls = class_logits[j];
          let mask = mask_logits[j];
          let pred_label = max(cls.data)[1];
          if (pred_label === num_labels) {
            continue;
          }
          let scores = softmax(cls.data);
          let pred_score = scores[pred_label];
          if (pred_score > object_mask_threshold) {
            mask_probs_item.push(mask);
            pred_scores_item.push(pred_score);
            pred_labels_item.push(pred_label);
          }
        }
        return [mask_probs_item, pred_scores_item, pred_labels_item];
      }
      /**
       * Checks whether the segment is valid or not.
       * @param {Int32Array} mask_labels Labels for each pixel in the mask.
       * @param {Tensor[]} mask_probs Probabilities for each pixel in the masks.
       * @param {number} k The class id of the segment.
       * @param {number} mask_threshold The mask threshold.
       * @param {number} overlap_mask_area_threshold The overlap mask area threshold.
       * @returns {[boolean, number[]]} Whether the segment is valid or not, and the indices of the valid labels.
       */
      check_segment_validity(mask_labels, mask_probs, k, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8) {
        let mask_k = [];
        let mask_k_area = 0;
        let original_area = 0;
        for (let i = 0; i < mask_labels.length; ++i) {
          if (mask_labels[i] === k) {
            mask_k.push(i);
            ++mask_k_area;
          }
          if (mask_probs[k].data[i] >= mask_threshold) {
            ++original_area;
          }
        }
        let mask_exists = mask_k_area > 0 && original_area > 0;
        if (mask_exists) {
          let area_ratio = mask_k_area / original_area;
          mask_exists = area_ratio > overlap_mask_area_threshold;
        }
        return [mask_exists, mask_k];
      }
      /**
       * Computes the segments.
       * @param {Tensor[]} mask_probs The mask probabilities.
       * @param {number[]} pred_scores The predicted scores.
       * @param {number[]} pred_labels The predicted labels.
       * @param {number} mask_threshold The mask threshold.
       * @param {number} overlap_mask_area_threshold The overlap mask area threshold.
       * @param {Set<number>} label_ids_to_fuse The label ids to fuse.
       * @param {number[]} target_size The target size of the image.
       * @returns {[Tensor, Array<{id: number, label_id: number, score: number}>]} The computed segments.
       */
      compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse = null, target_size = null) {
        let [height, width] = target_size ?? mask_probs[0].dims;
        let segmentation = new Tensor(
          "int32",
          new Int32Array(height * width),
          [height, width]
        );
        let segments = [];
        if (target_size !== null) {
          for (let i = 0; i < mask_probs.length; ++i) {
            mask_probs[i] = interpolate(mask_probs[i], target_size, "bilinear", false);
          }
        }
        let mask_labels = new Int32Array(mask_probs[0].data.length);
        let bestScores = new Float32Array(mask_probs[0].data.length);
        for (let i = 0; i < mask_probs.length; ++i) {
          let score = pred_scores[i];
          for (let j = 0; j < mask_probs[i].data.length; ++j) {
            mask_probs[i].data[j] *= score;
            if (mask_probs[i].data[j] > bestScores[j]) {
              mask_labels[j] = i;
              bestScores[j] = mask_probs[i].data[j];
            }
          }
        }
        let current_segment_id = 0;
        for (let k = 0; k < pred_labels.length; ++k) {
          let pred_class = pred_labels[k];
          let [mask_exists, mask_k] = this.check_segment_validity(
            mask_labels,
            mask_probs,
            k,
            mask_threshold,
            overlap_mask_area_threshold
          );
          if (!mask_exists) {
            continue;
          }
          ++current_segment_id;
          for (let index of mask_k) {
            segmentation.data[index] = current_segment_id;
          }
          segments.push({
            id: current_segment_id,
            label_id: pred_class,
            // was_fused: should_fuse, TODO
            score: pred_scores[k]
          });
        }
        return [segmentation, segments];
      }
      /**
       * Post-process the model output to generate the final panoptic segmentation.
       * @param {*} outputs The model output to post process
       * @param {number} [threshold=0.5] The probability score threshold to keep predicted instance masks.
       * @param {number} [mask_threshold=0.5] Threshold to use when turning the predicted masks into binary values.
       * @param {number} [overlap_mask_area_threshold=0.8] The overlap mask area threshold to merge or discard small disconnected parts within each binary instance mask.
       * @param {Set<number>} [label_ids_to_fuse=null] The labels in this state will have all their instances be fused together.
       * @param {number[][]} [target_sizes=null] The target sizes to resize the masks to.
       * @returns {Array<{ segmentation: Tensor, segments_info: Array<{id: number, label_id: number, score: number}>}>}
       */
      post_process_panoptic_segmentation(outputs, threshold = 0.5, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8, label_ids_to_fuse = null, target_sizes = null) {
        if (label_ids_to_fuse === null) {
          console.warn("`label_ids_to_fuse` unset. No instance will be fused.");
          label_ids_to_fuse = /* @__PURE__ */ new Set();
        }
        const class_queries_logits = outputs.logits;
        const masks_queries_logits = outputs.pred_masks;
        const mask_probs = masks_queries_logits.sigmoid();
        let [batch_size, num_queries, num_labels] = class_queries_logits.dims;
        num_labels -= 1;
        if (target_sizes !== null && target_sizes.length !== batch_size) {
          throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
        }
        let toReturn = [];
        for (let i = 0; i < batch_size; ++i) {
          let target_size = target_sizes !== null ? target_sizes[i] : null;
          let class_logits = class_queries_logits[i];
          let mask_logits = mask_probs[i];
          let [mask_probs_item, pred_scores_item, pred_labels_item] = this.remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);
          if (pred_labels_item.length === 0) {
            let [height, width] = target_size ?? mask_logits.dims.slice(-2);
            let segmentation2 = new Tensor(
              "int32",
              new Int32Array(height * width).fill(-1),
              [height, width]
            );
            toReturn.push({
              segmentation: segmentation2,
              segments_info: []
            });
            continue;
          }
          let [segmentation, segments] = this.compute_segments(
            mask_probs_item,
            pred_scores_item,
            pred_labels_item,
            mask_threshold,
            overlap_mask_area_threshold,
            label_ids_to_fuse,
            target_size
          );
          toReturn.push({
            segmentation,
            segments_info: segments
          });
        }
        return toReturn;
      }
      post_process_instance_segmentation() {
        throw Error("Not implemented yet");
      }
    };
    YolosFeatureExtractor = class extends ImageFeatureExtractor {
      static {
        __name(this, "YolosFeatureExtractor");
      }
      /** @type {post_process_object_detection} */
      post_process_object_detection(...args) {
        return post_process_object_detection(...args);
      }
    };
    SamImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "SamImageProcessor");
      }
      /**
       * 
       * @param {any} input_points 
       * @param {HeightWidth[]} original_sizes 
       * @param {HeightWidth[]} reshaped_input_sizes 
       * @returns {Tensor}
       */
      reshape_input_points(input_points, original_sizes, reshaped_input_sizes) {
        input_points = structuredClone(input_points);
        let shape = calculateDimensions(input_points);
        if (shape.length === 3) {
          shape = [1, ...shape];
          input_points = [input_points];
        } else if (shape.length !== 4) {
          throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
        }
        for (let i = 0; i < input_points.length; ++i) {
          let originalImageSize = original_sizes[i];
          let reshapedImageSize = reshaped_input_sizes[i];
          let resizeFactors = [
            reshapedImageSize[0] / originalImageSize[0],
            reshapedImageSize[1] / originalImageSize[1]
          ];
          for (let j = 0; j < input_points[i].length; ++j) {
            for (let k = 0; k < input_points[i][j].length; ++k) {
              for (let w = 0; w < input_points[i][j][k].length; ++w) {
                input_points[i][j][k][w] *= resizeFactors[w];
              }
            }
          }
        }
        return new Tensor(
          "float32",
          Float32Array.from(input_points.flat(Infinity)),
          shape
        );
      }
      /**
       * 
       * @param {any} input_labels 
       * @param {Tensor} input_points 
       * @returns {Tensor}
       */
      add_input_labels(input_labels, input_points) {
        let shape = calculateDimensions(input_labels);
        if (shape.length === 2) {
          shape = [1, ...shape];
          input_labels = [input_labels];
        } else if (shape.length !== 3) {
          throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
        }
        if (shape.some((x, i) => x !== input_points.dims[i])) {
          throw Error(`The first ${shape.length} dimensions of 'input_points' and 'input_labels' must be the same.`);
        }
        return new Tensor(
          "int64",
          input_labels.flat(Infinity).map(BigInt),
          shape
        );
      }
      /**
       * @param {any[]} images The URL(s) of the image(s) to extract features from.
       * @param {any} [input_points] A 3D or 4D array, representing the input points provided by the user.
       * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.
       * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.
       * @param {any} [input_labels] A 2D or 3D array, representing the input labels for the points, used by the prompt encoder to encode the prompt.
       * - 2D: `[point_batch_size, nb_points_per_image]`. In this case, `batch_size` is assumed to be 1.
       * - 3D: `[batch_size, point_batch_size, nb_points_per_image]`.
       * @returns {Promise<SamImageProcessorResult>}
       */
      async _call(images, input_points = null, input_labels = null) {
        const processed = await super._call(images);
        if (input_points) {
          processed.input_points = this.reshape_input_points(
            input_points,
            processed.original_sizes,
            processed.reshaped_input_sizes
          );
        }
        if (input_labels) {
          if (!processed.input_points) {
            throw Error("`input_points` must be provided if `input_labels` are provided.");
          }
          processed.input_labels = this.add_input_labels(input_labels, processed.input_points);
        }
        return processed;
      }
      /**
       * Remove padding and upscale masks to the original image size.
       * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.
       * @param {number[][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.
       * @param {number[][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.
       * @param {Object} options Optional parameters for post-processing.
       * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.
       * @param {boolean} [options.binarize] Whether to binarize the masks.
       * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.
       * @param {number} [options.pad_size.height] The height the images were padded to.
       * @param {number} [options.pad_size.width] The width the images were padded to.
       * @returns {Tensor[]} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.
       */
      post_process_masks(masks, original_sizes, reshaped_input_sizes, {
        mask_threshold = 0,
        binarize = true,
        pad_size = null
      } = {}) {
        const output_masks = [];
        pad_size = pad_size ?? this.pad_size;
        const target_image_size = [pad_size.height, pad_size.width];
        for (let i = 0; i < original_sizes.length; ++i) {
          const original_size = original_sizes[i];
          const reshaped_input_size = reshaped_input_sizes[i];
          const mask = masks[i];
          const interpolated_masks = [];
          for (let j = 0; j < mask.dims[0]; ++j) {
            const m = mask[j];
            let interpolated_mask = interpolate(m, target_image_size, "bilinear", false);
            interpolated_mask = interpolated_mask.slice(null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);
            interpolated_mask = interpolate(interpolated_mask, original_size, "bilinear", false);
            if (binarize) {
              const binarizedMaskData = new Uint8Array(interpolated_mask.data.length);
              for (let i2 = 0; i2 < interpolated_mask.data.length; ++i2) {
                if (interpolated_mask.data[i2] > mask_threshold) {
                  binarizedMaskData[i2] = 1;
                }
              }
              interpolated_mask = new Tensor(
                "bool",
                binarizedMaskData,
                interpolated_mask.dims
              );
            }
            interpolated_masks.push(interpolated_mask);
          }
          output_masks.push(stack(interpolated_masks));
        }
        return output_masks;
      }
    };
    Swin2SRImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "Swin2SRImageProcessor");
      }
      pad_image(pixelData, imgDims, padSize, options = {}) {
        const [imageHeight, imageWidth, imageChannels] = imgDims;
        return super.pad_image(pixelData, imgDims, {
          // NOTE: For Swin2SR models, the original python implementation adds padding even when the image's width/height is already
          // a multiple of `pad_size`. However, this is most likely a bug (PR: https://github.com/mv-lab/swin2sr/pull/19).
          // For this reason, we only add padding when the image's width/height is not a multiple of `pad_size`.
          width: imageWidth + (padSize - imageWidth % padSize) % padSize,
          height: imageHeight + (padSize - imageHeight % padSize) % padSize
        }, {
          mode: "symmetric",
          center: false,
          constant_values: -1,
          ...options
        });
      }
    };
    VitMatteImageProcessor = class extends ImageFeatureExtractor {
      static {
        __name(this, "VitMatteImageProcessor");
      }
      /**
       * Calls the feature extraction process on an array of images, preprocesses
       * each image, and concatenates the resulting features into a single Tensor.
       * @param {RawImage[]} images The image(s) to extract features from.
       * @param {RawImage[]} trimaps The trimaps(s) to extract features from.
       * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
       */
      async _call(images, trimaps) {
        if (!Array.isArray(images)) {
          images = [images];
        }
        if (!Array.isArray(trimaps)) {
          trimaps = [trimaps];
        }
        const imageData = await Promise.all(images.map((x) => this.preprocess(x)));
        const trimapData = await Promise.all(trimaps.map((x) => this.preprocess(x, {
          do_normalize: false,
          do_convert_rgb: false,
          do_convert_grayscale: true
        })));
        const pixel_values = stack(imageData.map(
          // Concatenate images and trimaps
          (x, i) => cat([x.pixel_values, trimapData[i].pixel_values], 0)
        ), 0);
        return {
          pixel_values,
          // Original sizes of images
          original_sizes: imageData.map((x) => x.original_size),
          // Reshaped sizes of images, before padding or cropping
          reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)
        };
      }
    };
    WhisperFeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "WhisperFeatureExtractor");
      }
      constructor(config) {
        super(config);
        this.config.mel_filters ??= mel_filter_bank(
          Math.floor(1 + this.config.n_fft / 2),
          // num_frequency_bins
          this.config.feature_size,
          // num_mel_filters
          0,
          // min_frequency
          8e3,
          // max_frequency
          this.config.sampling_rate,
          // sampling_rate
          "slaney",
          // norm
          "slaney"
          // mel_scale
        );
        this.window = window_function(this.config.n_fft, "hann");
      }
      /**
       * Computes the log-Mel spectrogram of the provided audio waveform.
       * @param {Float32Array|Float64Array} waveform The audio waveform to process.
       * @returns {{data: Float32Array, dims: number[]}} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
       */
      _extract_fbank_features(waveform) {
        const { data, dims } = spectrogram(
          waveform,
          this.window,
          // window
          this.config.n_fft,
          // frame_length
          this.config.hop_length,
          // hop_length
          {
            power: 2,
            mel_filters: this.config.mel_filters,
            log_mel: "log10",
            // Custom
            max_num_frames: this.config.nb_max_frames
            // 3000
          }
        );
        const maxValue = max(data)[0];
        for (let i = 0; i < data.length; ++i) {
          data[i] = (Math.max(data[i], maxValue - 8) + 4) / 4;
        }
        return { data, dims };
      }
      /**
       * Asynchronously extracts features from a given audio using the provided configuration.
       * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
       * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
       */
      async _call(audio) {
        validate_audio_inputs(audio, "WhisperFeatureExtractor");
        let waveform;
        if (audio.length > this.config.n_samples) {
          console.warn(
            "Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."
          );
          waveform = audio.slice(0, this.config.n_samples);
        } else {
          waveform = new Float32Array(this.config.n_samples);
          waveform.set(audio);
        }
        const { data, dims } = this._extract_fbank_features(waveform);
        return {
          input_features: new Tensor(
            "float32",
            data,
            [1, ...dims]
          )
        };
      }
    };
    Wav2Vec2FeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "Wav2Vec2FeatureExtractor");
      }
      /**
       * @param {Float32Array} input_values 
       * @returns {Float32Array} 
       */
      _zero_mean_unit_var_norm(input_values) {
        const sum = input_values.reduce((a, b) => a + b, 0);
        const mean2 = sum / input_values.length;
        const variance = input_values.reduce((a, b) => a + (b - mean2) ** 2, 0) / input_values.length;
        return input_values.map((x) => (x - mean2) / Math.sqrt(variance + 1e-7));
      }
      /**
       * Asynchronously extracts features from a given audio using the provided configuration.
       * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
       * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.
       */
      async _call(audio) {
        validate_audio_inputs(audio, "Wav2Vec2FeatureExtractor");
        if (audio instanceof Float64Array) {
          audio = new Float32Array(audio);
        }
        let input_values = audio;
        if (this.config.do_normalize) {
          input_values = this._zero_mean_unit_var_norm(input_values);
        }
        const shape = [1, input_values.length];
        return {
          input_values: new Tensor("float32", input_values, shape),
          attention_mask: new Tensor("int64", new BigInt64Array(input_values.length).fill(1n), shape)
        };
      }
    };
    SeamlessM4TFeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "SeamlessM4TFeatureExtractor");
      }
      constructor(config) {
        super(config);
        const sampling_rate = this.config.sampling_rate;
        const mel_filters = mel_filter_bank(
          256,
          // num_frequency_bins
          this.config.num_mel_bins,
          // num_mel_filters
          20,
          // min_frequency
          Math.floor(sampling_rate / 2),
          // max_frequency
          sampling_rate,
          // sampling_rate
          null,
          // norm
          "kaldi",
          // mel_scale
          true
          // triangularize_in_mel_space
        );
        for (let i = 0; i < mel_filters.length; ++i) {
          mel_filters[i].push(0);
        }
        this.mel_filters = mel_filters;
        this.window = window_function(400, "povey", {
          periodic: false
        });
      }
      /**
       * Computes the log-Mel spectrogram of the provided audio waveform.
       * @param {Float32Array|Float64Array} waveform The audio waveform to process.
       * @param {number} max_length The maximum number of frames to return.
       * @returns {{data: Float32Array, dims: number[]}} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
       */
      _extract_fbank_features(waveform, max_length) {
        waveform = waveform.map((x) => x * 32768);
        return spectrogram(
          waveform,
          this.window,
          // window
          400,
          // frame_length
          160,
          // hop_length
          {
            fft_length: 512,
            power: 2,
            center: false,
            preemphasis: 0.97,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: 1192092955078125e-22,
            remove_dc_offset: true,
            // Custom
            max_num_frames: max_length,
            transpose: true
          }
        );
      }
      /**
       * Asynchronously extracts features from a given audio using the provided configuration.
       * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
       * @param {Object} options Optional parameters for feature extraction.
       * @param {boolean} [options.padding=true] Whether to pad the sequence to a multiple of `pad_to_multiple_of`.
       * @param {number} [options.pad_to_multiple_of=2] The number to pad the sequence to a multiple of.
       * @param {boolean} [options.do_normalize_per_mel_bins=true] Whether or not to zero-mean unit-variance normalize the input per mel-channel.
       * @param {boolean} [options.return_attention_mask=true] Whether to return the attention mask.
       * @returns {Promise<{ input_features: Tensor, attention_mask?: Tensor }>} A Promise resolving to an object containing the extracted input features and attention masks as Tensors.
       */
      async _call(audio, {
        padding = true,
        pad_to_multiple_of = 2,
        do_normalize_per_mel_bins = true,
        return_attention_mask = true
      } = {}) {
        validate_audio_inputs(audio, "SeamlessM4TFeatureExtractor");
        let features = this._extract_fbank_features(audio, this.config.max_length);
        if (do_normalize_per_mel_bins) {
          const [num_features, feature_size] = features.dims;
          for (let i = 0; i < feature_size; ++i) {
            let sum = 0;
            for (let j = 0; j < num_features; ++j) {
              sum += features.data[j * feature_size + i];
            }
            const mean2 = sum / num_features;
            let variance = 0;
            for (let j = 0; j < num_features; ++j) {
              variance += (features.data[j * feature_size + i] - mean2) ** 2;
            }
            variance /= num_features - 1;
            const std = Math.sqrt(variance + 1e-7);
            for (let j = 0; j < num_features; ++j) {
              const index = j * feature_size + i;
              features.data[index] = (features.data[index] - mean2) / std;
            }
          }
        }
        let padded_attention_mask;
        if (padding) {
          const [num_frames2, num_channels2] = features.dims;
          const pad_size = num_frames2 % pad_to_multiple_of;
          if (pad_size > 0) {
            const padded_data = new Float32Array(num_channels2 * (num_frames2 + pad_size));
            padded_data.set(features.data);
            padded_data.fill(this.config.padding_value, features.data.length);
            const numPaddedFrames = num_frames2 + pad_size;
            features = {
              data: padded_data,
              dims: [numPaddedFrames, num_channels2]
            };
            if (return_attention_mask) {
              padded_attention_mask = new Tensor(
                "int64",
                new BigInt64Array(numPaddedFrames),
                [1, numPaddedFrames]
              );
              padded_attention_mask.data.fill(1n, 0, num_frames2);
            }
          }
        }
        const [num_frames, num_channels] = features.dims;
        const stride = this.config.stride;
        const remainder = num_frames % stride;
        if (remainder !== 0) {
          throw new Error(`The number of frames (${num_frames}) must be a multiple of the stride (${stride}).`);
        }
        const input_features = new Tensor(
          "float32",
          features.data,
          features.dims
        ).view(
          1,
          Math.floor(num_frames / stride),
          num_channels * stride
        );
        const result = { input_features };
        if (return_attention_mask) {
          const reshapedNumFrames = input_features.dims[1];
          const attention_mask = new Tensor(
            "int64",
            new BigInt64Array(reshapedNumFrames),
            [1, reshapedNumFrames]
          );
          if (padded_attention_mask) {
            for (let i = 1, j = 0; i < num_frames; i += stride, ++j) {
              attention_mask.data[j] = padded_attention_mask.data[i];
            }
          } else {
            attention_mask.data.fill(1n);
          }
          result.attention_mask = attention_mask;
        }
        return result;
      }
    };
    ASTFeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "ASTFeatureExtractor");
      }
      constructor(config) {
        super(config);
        const sampling_rate = this.config.sampling_rate;
        const mel_filters = mel_filter_bank(
          256,
          // num_frequency_bins
          this.config.num_mel_bins,
          // num_mel_filters
          20,
          // min_frequency
          Math.floor(sampling_rate / 2),
          // max_frequency
          sampling_rate,
          // sampling_rate
          null,
          // norm
          "kaldi",
          // mel_scale
          true
          // triangularize_in_mel_space
        );
        for (let i = 0; i < mel_filters.length; ++i) {
          mel_filters[i].push(0);
        }
        this.mel_filters = mel_filters;
        this.window = window_function(400, "hann", {
          periodic: false
        });
        this.mean = this.config.mean;
        this.std = this.config.std;
      }
      /**
       * Computes the log-Mel spectrogram of the provided audio waveform.
       * @param {Float32Array|Float64Array} waveform The audio waveform to process.
       * @param {number} max_length The maximum number of frames to return.
       * @returns {{data: Float32Array, dims: number[]}} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
       */
      _extract_fbank_features(waveform, max_length) {
        return spectrogram(
          waveform,
          this.window,
          // window
          400,
          // frame_length
          160,
          // hop_length
          {
            fft_length: 512,
            power: 2,
            center: false,
            preemphasis: 0.97,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: 1192092955078125e-22,
            remove_dc_offset: true,
            // Custom
            max_num_frames: max_length,
            transpose: true
          }
        );
      }
      /**
       * Asynchronously extracts features from a given audio using the provided configuration.
       * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
       * @returns {Promise<{ input_values: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
       */
      async _call(audio) {
        validate_audio_inputs(audio, "ASTFeatureExtractor");
        const features = this._extract_fbank_features(audio, this.config.max_length);
        if (this.config.do_normalize) {
          const denom = this.std * 2;
          for (let i = 0; i < features.data.length; ++i) {
            features.data[i] = (features.data[i] - this.mean) / denom;
          }
        }
        return {
          input_values: new Tensor(
            "float32",
            features.data,
            [1, ...features.dims]
          )
        };
      }
    };
    ClapFeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "ClapFeatureExtractor");
      }
      constructor(config) {
        super(config);
        this.mel_filters = mel_filter_bank(
          this.config.nb_frequency_bins,
          // num_frequency_bins
          this.config.feature_size,
          // num_mel_filters
          this.config.frequency_min,
          // min_frequency
          this.config.frequency_max,
          // max_frequency
          this.config.sampling_rate,
          // sampling_rate
          null,
          // norm
          "htk"
          // mel_scale
        );
        this.mel_filters_slaney = mel_filter_bank(
          this.config.nb_frequency_bins,
          // num_frequency_bins
          this.config.feature_size,
          // num_mel_filters
          this.config.frequency_min,
          // min_frequency
          this.config.frequency_max,
          // max_frequency
          this.config.sampling_rate,
          // sampling_rate
          "slaney",
          // norm
          "slaney"
          // mel_scale
        );
        this.window = window_function(this.config.fft_window_size, "hann");
      }
      /**
       * Extracts the mel spectrogram and prepares it for the mode based on the `truncation` and `padding` arguments.
       * 
       * Four different path are possible:
       *   - `truncation="fusion"` and the length of the waveform is greater than the max length: the mel spectrogram
       *     will be computed on the entire audio. 3 random crops and a dowsampled version of the full mel spectrogram
       *     are then stacked together. They will later be used for `feature_fusion`.
       *   - `truncation="rand_trunc"` and the length of the waveform is smaller than the max length: the audio is
       *     padded based on `padding`.
       *   - `truncation="fusion"` and the length of the waveform is smaller than the max length: the audio is padded
       *     based on `padding`, and is repeated `4` times.
       *   - `truncation="rand_trunc"` and the length of the waveform is greater than the max length: the mel
       *     spectrogram will be computed on a random crop of the waveform.
       * 
       * @param {Float32Array|Float64Array} waveform The input waveform.
       * @param {number} max_length The maximum length of the waveform.
       * @param {string} truncation The truncation strategy to use.
       * @param {string} padding The padding strategy to use.
       * @returns {{ data: Float32Array; dims: number[]; longer: boolean; }} An object containing the mel spectrogram data as a Float32Array, its dimensions as an array of numbers, and a boolean indicating whether the waveform was longer than the max length.
       */
      _get_input_mel(waveform, max_length, truncation, padding) {
        let input_mel;
        let longer = false;
        const diff = waveform.length - max_length;
        if (diff > 0) {
          if (truncation === "rand_trunc") {
            longer = true;
            const idx = Math.floor(Math.random() * (diff + 1));
            waveform = waveform.subarray(idx, idx + max_length);
            input_mel = this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
            input_mel.dims = [1, ...input_mel.dims];
          } else {
            throw new Error(`Truncation strategy "${truncation}" not implemented`);
          }
        } else {
          if (diff < 0) {
            let padded = new Float64Array(max_length);
            padded.set(waveform);
            if (padding === "repeat") {
              for (let i = waveform.length; i < max_length; i += waveform.length) {
                padded.set(waveform.subarray(0, Math.min(waveform.length, max_length - i)), i);
              }
            } else if (padding === "repeatpad") {
              for (let i = waveform.length; i < -diff; i += waveform.length) {
                padded.set(waveform, i);
              }
            }
            waveform = padded;
          }
          if (truncation === "fusion") {
            throw new Error(`Truncation strategy "${truncation}" not implemented`);
          }
          input_mel = this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
          input_mel.dims = [1, ...input_mel.dims];
        }
        return {
          ...input_mel,
          longer
        };
      }
      /**
       * Compute the log-mel spectrogram of the provided `waveform` using the Hann window.
       * In CLAP, two different filter banks are used depending on the truncation pattern:
       *  - `self.mel_filters`: they correspond to the default parameters of `torchaudio` which can be obtained from
       *    calling `torchaudio.transforms.MelSpectrogram().mel_scale.fb`. These filters are used when `truncation`
       *    is set to `"fusion"`.
       *  - `self.mel_filteres_slaney` : they correspond to the default parameters of `librosa` which used
       *    `librosa.filters.mel` when computing the mel spectrogram. These filters were only used in the original
       *    implementation when the truncation mode is not `"fusion"`.
       * 
       * @param {Float32Array|Float64Array} waveform The audio waveform to process.
       * @param {number[][]} mel_filters The mel filters to use.
       * @param {number} [max_length=null] The maximum number of frames to return.
       * @returns {{data: Float32Array, dims: number[]}} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
       */
      _extract_fbank_features(waveform, mel_filters, max_length = null) {
        return spectrogram(
          waveform,
          this.window,
          // window
          this.config.fft_window_size,
          // frame_length
          this.config.hop_length,
          // hop_length
          {
            power: 2,
            mel_filters,
            log_mel: "dB",
            // Custom
            max_num_frames: max_length,
            do_pad: false,
            transpose: true
          }
        );
      }
      /**
       * Asynchronously extracts features from a given audio using the provided configuration.
       * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
       * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
       */
      async _call(audio, {
        max_length = null
      } = {}) {
        validate_audio_inputs(audio, "ClapFeatureExtractor");
        const padded_inputs = this._get_input_mel(
          audio,
          max_length ?? this.config.nb_max_samples,
          this.config.truncation,
          this.config.padding
        );
        return {
          input_features: new Tensor(
            "float32",
            padded_inputs.data,
            [1, ...padded_inputs.dims]
          )
        };
      }
    };
    SpeechT5FeatureExtractor = class extends FeatureExtractor {
      static {
        __name(this, "SpeechT5FeatureExtractor");
      }
    };
    Processor = class extends Callable {
      static {
        __name(this, "Processor");
      }
      /**
       * Creates a new Processor with the given feature extractor.
       * @param {FeatureExtractor} feature_extractor The function used to extract features from the input.
       */
      constructor(feature_extractor) {
        super();
        this.feature_extractor = feature_extractor;
      }
      /**
       * Calls the feature_extractor function with the given input.
       * @param {any} input The input to extract features from.
       * @param {...any} args Additional arguments.
       * @returns {Promise<any>} A Promise that resolves with the extracted features.
       */
      async _call(input, ...args) {
        return await this.feature_extractor(input, ...args);
      }
    };
    SamProcessor = class extends Processor {
      static {
        __name(this, "SamProcessor");
      }
      /**
       * @borrows SamImageProcessor#_call as _call
       */
      async _call(...args) {
        return await this.feature_extractor(...args);
      }
      /**
       * @borrows SamImageProcessor#post_process_masks as post_process_masks
       */
      post_process_masks(...args) {
        return this.feature_extractor.post_process_masks(...args);
      }
      /**
       * @borrows SamImageProcessor#reshape_input_points as reshape_input_points
       */
      reshape_input_points(...args) {
        return this.feature_extractor.reshape_input_points(...args);
      }
    };
    WhisperProcessor = class extends Processor {
      static {
        __name(this, "WhisperProcessor");
      }
      /**
       * Calls the feature_extractor function with the given audio input.
       * @param {any} audio The audio input to extract features from.
       * @returns {Promise<any>} A Promise that resolves with the extracted features.
       */
      async _call(audio) {
        return await this.feature_extractor(audio);
      }
    };
    Wav2Vec2ProcessorWithLM = class extends Processor {
      static {
        __name(this, "Wav2Vec2ProcessorWithLM");
      }
      /**
       * Calls the feature_extractor function with the given audio input.
       * @param {any} audio The audio input to extract features from.
       * @returns {Promise<any>} A Promise that resolves with the extracted features.
       */
      async _call(audio) {
        return await this.feature_extractor(audio);
      }
    };
    SpeechT5Processor = class extends Processor {
      static {
        __name(this, "SpeechT5Processor");
      }
      /**
       * Calls the feature_extractor function with the given input.
       * @param {any} input The input to extract features from.
       * @returns {Promise<any>} A Promise that resolves with the extracted features.
       */
      async _call(input) {
        return await this.feature_extractor(input);
      }
    };
    OwlViTProcessor = class extends Processor {
      static {
        __name(this, "OwlViTProcessor");
      }
    };
    AutoProcessor = class {
      static {
        __name(this, "AutoProcessor");
      }
      static FEATURE_EXTRACTOR_CLASS_MAPPING = {
        ImageFeatureExtractor,
        WhisperFeatureExtractor,
        ViTFeatureExtractor,
        MobileViTFeatureExtractor,
        MobileViTImageProcessor,
        OwlViTFeatureExtractor,
        Owlv2ImageProcessor,
        CLIPFeatureExtractor,
        ChineseCLIPFeatureExtractor,
        SiglipImageProcessor,
        ConvNextFeatureExtractor,
        ConvNextImageProcessor,
        SegformerFeatureExtractor,
        BitImageProcessor,
        DPTImageProcessor,
        DPTFeatureExtractor,
        GLPNFeatureExtractor,
        BeitFeatureExtractor,
        DeiTFeatureExtractor,
        DetrFeatureExtractor,
        YolosFeatureExtractor,
        DonutFeatureExtractor,
        NougatImageProcessor,
        EfficientNetImageProcessor,
        ViTImageProcessor,
        VitMatteImageProcessor,
        SamImageProcessor,
        Swin2SRImageProcessor,
        Wav2Vec2FeatureExtractor,
        SeamlessM4TFeatureExtractor,
        SpeechT5FeatureExtractor,
        ASTFeatureExtractor,
        ClapFeatureExtractor
      };
      static PROCESSOR_CLASS_MAPPING = {
        WhisperProcessor,
        Wav2Vec2ProcessorWithLM,
        SamProcessor,
        SpeechT5Processor,
        OwlViTProcessor
      };
      /**
       * Instantiate one of the processor classes of the library from a pretrained model.
       * 
       * The processor class to instantiate is selected based on the `feature_extractor_type` property of the config object
       * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
       * 
       * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
       * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.
       *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
       *   user or organization name, like `dbmdz/bert-base-german-cased`.
       * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
       * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the processor.
       * 
       * @returns {Promise<Processor>} A new instance of the Processor class.
       */
      static async from_pretrained(pretrained_model_name_or_path, {
        progress_callback = null,
        config = null,
        cache_dir = null,
        local_files_only = false,
        revision = "main"
      } = {}) {
        let preprocessorConfig = config ?? await getModelJSON(pretrained_model_name_or_path, "preprocessor_config.json", true, {
          progress_callback,
          config,
          cache_dir,
          local_files_only,
          revision
        });
        let key = preprocessorConfig.feature_extractor_type ?? preprocessorConfig.image_processor_type;
        let feature_extractor_class = this.FEATURE_EXTRACTOR_CLASS_MAPPING[key];
        if (!feature_extractor_class) {
          if (preprocessorConfig.size !== void 0) {
            console.warn(`Feature extractor type "${key}" not found, assuming ImageFeatureExtractor due to size parameter in config.`);
            feature_extractor_class = ImageFeatureExtractor;
          } else {
            throw new Error(`Unknown Feature Extractor type: ${key}`);
          }
        }
        let processor_class = this.PROCESSOR_CLASS_MAPPING[preprocessorConfig.processor_class] ?? Processor;
        let feature_extractor = new feature_extractor_class(preprocessorConfig);
        return new processor_class(feature_extractor);
      }
    };
  }
});

// node_modules/@xenova/transformers/src/pipelines.js
async function prepareImages(images) {
  if (!Array.isArray(images)) {
    images = [images];
  }
  return await Promise.all(images.map((x) => RawImage.read(x)));
}
async function prepareAudios(audios, sampling_rate) {
  if (!Array.isArray(audios)) {
    audios = [audios];
  }
  return await Promise.all(audios.map((x) => {
    if (typeof x === "string" || x instanceof URL) {
      return read_audio(x, sampling_rate);
    } else if (x instanceof Float64Array) {
      return new Float32Array(x);
    }
    return x;
  }));
}
function get_bounding_box(box, asInteger) {
  if (asInteger) {
    box = box.map((x) => x | 0);
  }
  const [xmin, ymin, xmax, ymax] = box;
  return { xmin, ymin, xmax, ymax };
}
function isChat(x) {
  return Array.isArray(x) && x.every((x2) => "role" in x2 && "content" in x2);
}
async function pipeline(task, model = null, {
  quantized = true,
  progress_callback = null,
  config = null,
  cache_dir = null,
  local_files_only = false,
  revision = "main",
  model_file_name = null
} = {}) {
  task = TASK_ALIASES[task] ?? task;
  const pipelineInfo = SUPPORTED_TASKS[task.split("_", 1)[0]];
  if (!pipelineInfo) {
    throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`);
  }
  if (!model) {
    model = pipelineInfo.default.model;
    console.log(`No model specified. Using default model: "${model}".`);
  }
  const pretrainedOptions = {
    quantized,
    progress_callback,
    config,
    cache_dir,
    local_files_only,
    revision,
    model_file_name
  };
  const classes = /* @__PURE__ */ new Map([
    ["tokenizer", pipelineInfo.tokenizer],
    ["model", pipelineInfo.model],
    ["processor", pipelineInfo.processor]
  ]);
  const results = await loadItems(classes, model, pretrainedOptions);
  results.task = task;
  dispatchCallback(progress_callback, {
    "status": "ready",
    "task": task,
    "model": model
  });
  const pipelineClass = pipelineInfo.pipeline;
  return new pipelineClass(results);
}
async function loadItems(mapping, model, pretrainedOptions) {
  const result = /* @__PURE__ */ Object.create(null);
  const promises = [];
  for (let [name2, cls] of mapping.entries()) {
    if (!cls) continue;
    let promise;
    if (Array.isArray(cls)) {
      promise = new Promise(async (resolve, reject) => {
        let e;
        for (let c of cls) {
          if (c === null) {
            resolve(null);
            return;
          }
          try {
            resolve(await c.from_pretrained(model, pretrainedOptions));
            return;
          } catch (err) {
            e = err;
          }
        }
        reject(e);
      });
    } else {
      promise = cls.from_pretrained(model, pretrainedOptions);
    }
    result[name2] = promise;
    promises.push(promise);
  }
  await Promise.all(promises);
  for (let [name2, promise] of Object.entries(result)) {
    result[name2] = await promise;
  }
  return result;
}
var Pipeline, TextClassificationPipeline, TokenClassificationPipeline, QuestionAnsweringPipeline, FillMaskPipeline, Text2TextGenerationPipeline, SummarizationPipeline, TranslationPipeline, TextGenerationPipeline, ZeroShotClassificationPipeline, FeatureExtractionPipeline, ImageFeatureExtractionPipeline, AudioClassificationPipeline, ZeroShotAudioClassificationPipeline, AutomaticSpeechRecognitionPipeline, ImageToTextPipeline, ImageClassificationPipeline, ImageSegmentationPipeline, ZeroShotImageClassificationPipeline, ObjectDetectionPipeline, ZeroShotObjectDetectionPipeline, DocumentQuestionAnsweringPipeline, TextToAudioPipeline, ImageToImagePipeline, DepthEstimationPipeline, SUPPORTED_TASKS, TASK_ALIASES;
var init_pipelines = __esm({
  "node_modules/@xenova/transformers/src/pipelines.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_tokenizers();
    init_models();
    init_processors();
    init_core();
    init_maths();
    init_audio();
    init_tensor();
    init_image();
    __name(prepareImages, "prepareImages");
    __name(prepareAudios, "prepareAudios");
    __name(get_bounding_box, "get_bounding_box");
    Pipeline = class extends Callable {
      static {
        __name(this, "Pipeline");
      }
      /**
       * Create a new Pipeline.
       * @param {Object} options An object containing the following properties:
       * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.
       * @param {PreTrainedModel} [options.model] The model used by the pipeline.
       * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer used by the pipeline (if any).
       * @param {Processor} [options.processor=null] The processor used by the pipeline (if any).
       */
      constructor({ task, model, tokenizer = null, processor = null }) {
        super();
        this.task = task;
        this.model = model;
        this.tokenizer = tokenizer;
        this.processor = processor;
      }
      /** @type {DisposeType} */
      async dispose() {
        await this.model.dispose();
      }
    };
    TextClassificationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => TextClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "TextClassificationPipeline");
      }
      /**
       * Create a new TextClassificationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {TextClassificationPipelineCallback} */
      async _call(texts, {
        topk = 1
      } = {}) {
        const model_inputs = this.tokenizer(texts, {
          padding: true,
          truncation: true
        });
        const outputs = await this.model(model_inputs);
        const function_to_apply = this.model.config.problem_type === "multi_label_classification" ? (batch) => batch.sigmoid().data : (batch) => softmax(batch.data);
        const id2label = this.model.config.id2label;
        const toReturn = [];
        for (const batch of outputs.logits) {
          const output = function_to_apply(batch);
          const scores = getTopItems(output, topk);
          const vals = scores.map((x) => ({
            label: id2label[x[0]],
            score: x[1]
          }));
          if (topk === 1) {
            toReturn.push(...vals);
          } else {
            toReturn.push(vals);
          }
        }
        return Array.isArray(texts) || topk === 1 ? (
          /** @type {TextClassificationOutput} */
          toReturn
        ) : (
          /** @type {TextClassificationOutput[]} */
          toReturn[0]
        );
      }
    };
    TokenClassificationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => TokenClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "TokenClassificationPipeline");
      }
      /**
       * Create a new TokenClassificationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {TokenClassificationPipelineCallback} */
      async _call(texts, {
        ignore_labels = ["O"]
      } = {}) {
        const isBatched = Array.isArray(texts);
        const model_inputs = this.tokenizer(isBatched ? texts : [texts], {
          padding: true,
          truncation: true
        });
        const outputs = await this.model(model_inputs);
        const logits = outputs.logits;
        const id2label = this.model.config.id2label;
        const toReturn = [];
        for (let i = 0; i < logits.dims[0]; ++i) {
          const ids = model_inputs.input_ids[i];
          const batch = logits[i];
          const tokens = [];
          for (let j = 0; j < batch.dims[0]; ++j) {
            const tokenData = batch[j];
            const topScoreIndex = max(tokenData.data)[1];
            const entity = id2label ? id2label[topScoreIndex] : `LABEL_${topScoreIndex}`;
            if (ignore_labels.includes(entity)) {
              continue;
            }
            const word = this.tokenizer.decode([ids[j].item()], { skip_special_tokens: true });
            if (word === "") {
              continue;
            }
            const scores = softmax(tokenData.data);
            tokens.push({
              entity,
              score: scores[topScoreIndex],
              index: j,
              word,
              // TODO: null for now, but will add
              start: null,
              end: null
            });
          }
          toReturn.push(tokens);
        }
        return isBatched ? toReturn : toReturn[0];
      }
    };
    QuestionAnsweringPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => QuestionAnsweringPipelineType} */
    Pipeline {
      static {
        __name(this, "QuestionAnsweringPipeline");
      }
      /**
       * Create a new QuestionAnsweringPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {QuestionAnsweringPipelineCallback} */
      async _call(question, context, {
        topk = 1
      } = {}) {
        const inputs = this.tokenizer(question, {
          text_pair: context,
          padding: true,
          truncation: true
        });
        const output = await this.model(inputs);
        const toReturn = [];
        for (let j = 0; j < output.start_logits.dims[0]; ++j) {
          const ids = inputs.input_ids[j];
          const sepIndex = ids.indexOf(this.tokenizer.sep_token_id);
          const s1 = Array.from(softmax(output.start_logits[j].data)).map((x, i) => [x, i]).filter((x) => x[1] > sepIndex);
          const e1 = Array.from(softmax(output.end_logits[j].data)).map((x, i) => [x, i]).filter((x) => x[1] > sepIndex);
          const options = product(s1, e1).filter((x) => x[0][1] <= x[1][1]).map((x) => [x[0][1], x[1][1], x[0][0] * x[1][0]]).sort((a, b) => b[2] - a[2]);
          for (let k = 0; k < Math.min(options.length, topk); ++k) {
            const [start, end, score] = options[k];
            const answer_tokens = [...ids].slice(start, end + 1);
            const answer = this.tokenizer.decode(answer_tokens, {
              skip_special_tokens: true
            });
            toReturn.push({
              answer,
              score
            });
          }
        }
        return topk === 1 ? toReturn[0] : toReturn;
      }
    };
    FillMaskPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => FillMaskPipelineType} */
    Pipeline {
      static {
        __name(this, "FillMaskPipeline");
      }
      /**
       * Create a new FillMaskPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {FillMaskPipelineCallback} */
      async _call(texts, {
        topk = 5
      } = {}) {
        const model_inputs = this.tokenizer(texts, {
          padding: true,
          truncation: true
        });
        const outputs = await this.model(model_inputs);
        const toReturn = [];
        for (let i = 0; i < model_inputs.input_ids.dims[0]; ++i) {
          const ids = model_inputs.input_ids[i];
          const mask_token_index = ids.indexOf(this.tokenizer.mask_token_id);
          if (mask_token_index === -1) {
            throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);
          }
          const logits = outputs.logits[i];
          const itemLogits = logits[mask_token_index];
          const scores = getTopItems(softmax(itemLogits.data), topk);
          toReturn.push(scores.map((x) => {
            const sequence = [...ids];
            sequence[mask_token_index] = x[0];
            return {
              score: x[1],
              token: x[0],
              token_str: this.tokenizer.model.vocab[x[0]],
              sequence: this.tokenizer.decode(sequence, { skip_special_tokens: true })
            };
          }));
        }
        return Array.isArray(texts) ? toReturn : toReturn[0];
      }
    };
    Text2TextGenerationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => Text2TextGenerationPipelineType} */
    Pipeline {
      static {
        __name(this, "Text2TextGenerationPipeline");
      }
      /** @type {'generated_text'} */
      _key = "generated_text";
      /**
       * Create a new Text2TextGenerationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {Text2TextGenerationPipelineCallback} */
      async _call(texts, generate_kwargs = {}) {
        if (!Array.isArray(texts)) {
          texts = [texts];
        }
        if (this.model.config.prefix) {
          texts = texts.map((x) => this.model.config.prefix + x);
        }
        const task_specific_params = this.model.config.task_specific_params;
        if (task_specific_params && task_specific_params[this.task]) {
          if (task_specific_params[this.task].prefix) {
            texts = texts.map((x) => task_specific_params[this.task].prefix + x);
          }
        }
        const tokenizer = this.tokenizer;
        const tokenizer_options = {
          padding: true,
          truncation: true
        };
        let input_ids;
        if (this instanceof TranslationPipeline && "_build_translation_inputs" in tokenizer) {
          input_ids = tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs).input_ids;
        } else {
          input_ids = tokenizer(texts, tokenizer_options).input_ids;
        }
        const outputTokenIds = await this.model.generate(input_ids, generate_kwargs);
        return tokenizer.batch_decode(outputTokenIds, {
          skip_special_tokens: true
        }).map((text2) => ({ [this._key]: text2 }));
      }
    };
    SummarizationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => SummarizationPipelineType} */
    /** @type {any} */
    Text2TextGenerationPipeline {
      static {
        __name(this, "SummarizationPipeline");
      }
      /** @type {'summary_text'} */
      _key = "summary_text";
      /**
       * Create a new SummarizationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
    };
    TranslationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => TranslationPipelineType} */
    /** @type {any} */
    Text2TextGenerationPipeline {
      static {
        __name(this, "TranslationPipeline");
      }
      /** @type {'translation_text'} */
      _key = "translation_text";
      /**
       * Create a new TranslationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
    };
    __name(isChat, "isChat");
    TextGenerationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => TextGenerationPipelineType} */
    Pipeline {
      static {
        __name(this, "TextGenerationPipeline");
      }
      /**
       * Create a new TextGenerationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {TextGenerationPipelineCallback} */
      async _call(texts, generate_kwargs = {}) {
        let isBatched = false;
        let isChatInput = false;
        let inputs;
        if (typeof texts === "string") {
          inputs = texts = [texts];
        } else if (Array.isArray(texts) && texts.every((x) => typeof x === "string")) {
          isBatched = true;
          inputs = /** @type {string[]} */
          texts;
        } else {
          if (isChat(texts)) {
            texts = [
              /** @type {Chat} */
              texts
            ];
          } else if (Array.isArray(texts) && texts.every(isChat)) {
            isBatched = true;
          } else {
            throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");
          }
          isChatInput = true;
          inputs = /** @type {string[]} */
          /** @type {Chat[]} */
          texts.map(
            (x) => this.tokenizer.apply_chat_template(x, {
              tokenize: false,
              add_generation_prompt: true
            })
          );
        }
        const add_special_tokens = generate_kwargs.add_special_tokens ?? false;
        const return_full_text = isChatInput ? false : generate_kwargs.return_full_text ?? true;
        this.tokenizer.padding_side = "left";
        const { input_ids, attention_mask } = this.tokenizer(inputs, {
          add_special_tokens,
          padding: true,
          truncation: true
        });
        const outputTokenIds = await this.model.generate(input_ids, generate_kwargs, null, {
          inputs_attention_mask: attention_mask
        });
        let decoded = this.tokenizer.batch_decode(outputTokenIds, {
          skip_special_tokens: true
        });
        let promptLengths;
        if (!return_full_text && input_ids.dims.at(-1) > 0) {
          promptLengths = this.tokenizer.batch_decode(input_ids, {
            skip_special_tokens: true
          }).map((x) => x.length);
        }
        const toReturn = Array.from({ length: texts.length }, (_) => []);
        for (let i = 0; i < decoded.length; ++i) {
          const textIndex = Math.floor(i / outputTokenIds.length * texts.length);
          if (promptLengths) {
            decoded[i] = decoded[i].slice(promptLengths[textIndex]);
          }
          toReturn[textIndex].push({
            generated_text: isChatInput ? [
              .../** @type {Chat[]} */
              texts[textIndex],
              { role: "assistant", content: decoded[i] }
            ] : decoded[i]
          });
        }
        return !isBatched && toReturn.length === 1 ? toReturn[0] : toReturn;
      }
    };
    ZeroShotClassificationPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => ZeroShotClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "ZeroShotClassificationPipeline");
      }
      /**
       * Create a new ZeroShotClassificationPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
        this.label2id = Object.fromEntries(
          Object.entries(
            /** @type {any} */
            this.model.config.label2id
          ).map(
            ([k, v]) => [k.toLowerCase(), v]
          )
        );
        this.entailment_id = this.label2id["entailment"];
        if (this.entailment_id === void 0) {
          console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.");
          this.entailment_id = 2;
        }
        this.contradiction_id = this.label2id["contradiction"] ?? this.label2id["not_entailment"];
        if (this.contradiction_id === void 0) {
          console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.");
          this.contradiction_id = 0;
        }
      }
      /** @type {ZeroShotClassificationPipelineCallback} */
      async _call(texts, candidate_labels, {
        hypothesis_template = "This example is {}.",
        multi_label = false
      } = {}) {
        const isBatched = Array.isArray(texts);
        if (!isBatched) {
          texts = [
            /** @type {string} */
            texts
          ];
        }
        if (!Array.isArray(candidate_labels)) {
          candidate_labels = [candidate_labels];
        }
        const hypotheses = candidate_labels.map(
          (x) => hypothesis_template.replace("{}", x)
        );
        const softmaxEach = multi_label || candidate_labels.length === 1;
        const toReturn = [];
        for (const premise of texts) {
          const entails_logits = [];
          for (const hypothesis of hypotheses) {
            const inputs = this.tokenizer(premise, {
              text_pair: hypothesis,
              padding: true,
              truncation: true
            });
            const outputs = await this.model(inputs);
            if (softmaxEach) {
              entails_logits.push([
                outputs.logits.data[this.contradiction_id],
                outputs.logits.data[this.entailment_id]
              ]);
            } else {
              entails_logits.push(outputs.logits.data[this.entailment_id]);
            }
          }
          const scores = softmaxEach ? entails_logits.map((x) => softmax(x)[1]) : softmax(entails_logits);
          const scores_sorted = scores.map((x, i) => [x, i]).sort((a, b) => b[0] - a[0]);
          toReturn.push({
            sequence: premise,
            labels: scores_sorted.map((x) => candidate_labels[x[1]]),
            scores: scores_sorted.map((x) => x[0])
          });
        }
        return isBatched ? toReturn : toReturn[0];
      }
    };
    FeatureExtractionPipeline = class extends /** @type {new (options: TextPipelineConstructorArgs) => FeatureExtractionPipelineType} */
    Pipeline {
      static {
        __name(this, "FeatureExtractionPipeline");
      }
      /**
       * Create a new FeatureExtractionPipeline.
       * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {FeatureExtractionPipelineCallback} */
      async _call(texts, {
        pooling = (
          /** @type {'none'} */
          "none"
        ),
        normalize = false,
        quantize = false,
        precision = (
          /** @type {'binary'} */
          "binary"
        )
      } = {}) {
        const model_inputs = this.tokenizer(texts, {
          padding: true,
          truncation: true
        });
        const outputs = await this.model(model_inputs);
        let result = outputs.last_hidden_state ?? outputs.logits ?? outputs.token_embeddings;
        if (pooling === "none") {
        } else if (pooling === "mean") {
          result = mean_pooling(result, model_inputs.attention_mask);
        } else if (pooling === "cls") {
          result = result.slice(null, 0);
        } else {
          throw Error(`Pooling method '${pooling}' not supported.`);
        }
        if (normalize) {
          result = result.normalize(2, -1);
        }
        if (quantize) {
          result = quantize_embeddings(result, precision);
        }
        return result;
      }
    };
    ImageFeatureExtractionPipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageFeatureExtractionPipelineType} */
    Pipeline {
      static {
        __name(this, "ImageFeatureExtractionPipeline");
      }
      /**
       * Create a new ImageFeatureExtractionPipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ImageFeatureExtractionPipelineCallback} */
      async _call(images, {
        pool = null
      } = {}) {
        const preparedImages = await prepareImages(images);
        const { pixel_values } = await this.processor(preparedImages);
        const outputs = await this.model({ pixel_values });
        let result;
        if (pool) {
          if (!("pooler_output" in outputs)) {
            throw Error(`No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.`);
          }
          result = outputs.pooler_output;
        } else {
          result = outputs.last_hidden_state ?? outputs.logits ?? outputs.image_embeds;
        }
        return result;
      }
    };
    AudioClassificationPipeline = class extends /** @type {new (options: AudioPipelineConstructorArgs) => AudioClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "AudioClassificationPipeline");
      }
      /**
       * Create a new AudioClassificationPipeline.
       * @param {AudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {AudioClassificationPipelineCallback} */
      async _call(audio, {
        topk = null
      } = {}) {
        const single = !Array.isArray(audio);
        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
        const preparedAudios = await prepareAudios(audio, sampling_rate);
        const id2label = this.model.config.id2label;
        const toReturn = [];
        for (const aud of preparedAudios) {
          const inputs = await this.processor(aud);
          const output = await this.model(inputs);
          const logits = output.logits[0];
          const scores = getTopItems(softmax(logits.data), topk);
          const vals = scores.map((x) => ({
            label: (
              /** @type {string} */
              id2label[x[0]]
            ),
            score: (
              /** @type {number} */
              x[1]
            )
          }));
          if (topk === 1) {
            toReturn.push(...vals);
          } else {
            toReturn.push(vals);
          }
        }
        return !single || topk === 1 ? (
          /** @type {AudioClassificationOutput} */
          toReturn
        ) : (
          /** @type {AudioClassificationOutput[]} */
          toReturn[0]
        );
      }
    };
    ZeroShotAudioClassificationPipeline = class extends /** @type {new (options: TextAudioPipelineConstructorArgs) => ZeroShotAudioClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "ZeroShotAudioClassificationPipeline");
      }
      /**
       * Create a new ZeroShotAudioClassificationPipeline.
       * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ZeroShotAudioClassificationPipelineCallback} */
      async _call(audio, candidate_labels, {
        hypothesis_template = "This is a sound of {}."
      } = {}) {
        const single = !Array.isArray(audio);
        if (single) {
          audio = [
            /** @type {AudioInput} */
            audio
          ];
        }
        const texts = candidate_labels.map(
          (x) => hypothesis_template.replace("{}", x)
        );
        const text_inputs = this.tokenizer(texts, {
          padding: true,
          truncation: true
        });
        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
        const preparedAudios = await prepareAudios(audio, sampling_rate);
        const toReturn = [];
        for (const aud of preparedAudios) {
          const audio_inputs = await this.processor(aud);
          const output = await this.model({ ...text_inputs, ...audio_inputs });
          const probs = softmax(output.logits_per_audio.data);
          toReturn.push([...probs].map((x, i) => ({
            score: x,
            label: candidate_labels[i]
          })));
        }
        return single ? toReturn[0] : toReturn;
      }
    };
    AutomaticSpeechRecognitionPipeline = class extends /** @type {new (options: TextAudioPipelineConstructorArgs) => AutomaticSpeechRecognitionPipelineType} */
    Pipeline {
      static {
        __name(this, "AutomaticSpeechRecognitionPipeline");
      }
      /**
       * Create a new AutomaticSpeechRecognitionPipeline.
       * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {AutomaticSpeechRecognitionPipelineCallback} */
      async _call(audio, kwargs = {}) {
        switch (this.model.config.model_type) {
          case "whisper":
            return this._call_whisper(audio, kwargs);
          case "wav2vec2":
          case "wav2vec2-bert":
          case "unispeech":
          case "unispeech-sat":
          case "hubert":
            return this._call_wav2vec2(audio, kwargs);
          default:
            throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);
        }
      }
      /**
       * @type {AutomaticSpeechRecognitionPipelineCallback}
       * @private
       */
      async _call_wav2vec2(audio, kwargs = {}) {
        if (kwargs.language) {
          console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".');
        }
        if (kwargs.task) {
          console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');
        }
        const single = !Array.isArray(audio);
        if (single) {
          audio = [
            /** @type {AudioInput} */
            audio
          ];
        }
        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
        const preparedAudios = await prepareAudios(audio, sampling_rate);
        const toReturn = [];
        for (const aud of preparedAudios) {
          const inputs = await this.processor(aud);
          const output = await this.model(inputs);
          const logits = output.logits[0];
          const predicted_ids = [];
          for (const item of logits) {
            predicted_ids.push(max(item.data)[1]);
          }
          const predicted_sentences = this.tokenizer.decode(predicted_ids);
          toReturn.push({ text: predicted_sentences });
        }
        return single ? toReturn[0] : toReturn;
      }
      /**
       * @type {AutomaticSpeechRecognitionPipelineCallback}
       * @private
       */
      async _call_whisper(audio, kwargs = {}) {
        const return_timestamps = kwargs.return_timestamps ?? false;
        const chunk_length_s = kwargs.chunk_length_s ?? 0;
        const chunk_callback = kwargs.chunk_callback ?? null;
        const force_full_sequences = kwargs.force_full_sequences ?? false;
        let stride_length_s = kwargs.stride_length_s ?? null;
        if (return_timestamps === "word") {
          kwargs["return_token_timestamps"] = true;
        }
        const language = pop(kwargs, "language", null);
        const task = pop(kwargs, "task", null);
        if (language || task || return_timestamps) {
          if (kwargs.forced_decoder_ids) {
            throw new Error("Cannot specify `language`/`task`/`return_timestamps` and `forced_decoder_ids` at the same time.");
          }
          const decoder_prompt_ids = this.tokenizer.get_decoder_prompt_ids({ language, task, no_timestamps: !return_timestamps });
          if (decoder_prompt_ids.length > 0) {
            kwargs.forced_decoder_ids = decoder_prompt_ids;
          }
        }
        const single = !Array.isArray(audio);
        if (single) {
          audio = [
            /** @type {AudioInput} */
            audio
          ];
        }
        const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;
        const hop_length = this.processor.feature_extractor.config.hop_length;
        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
        const preparedAudios = await prepareAudios(audio, sampling_rate);
        const toReturn = [];
        for (const aud of preparedAudios) {
          let chunks = [];
          if (chunk_length_s > 0) {
            if (stride_length_s === null) {
              stride_length_s = chunk_length_s / 6;
            } else if (chunk_length_s <= stride_length_s) {
              throw Error("`chunk_length_s` must be larger than `stride_length_s`.");
            }
            const window2 = sampling_rate * chunk_length_s;
            const stride = sampling_rate * stride_length_s;
            const jump = window2 - 2 * stride;
            let offset = 0;
            while (offset < aud.length) {
              const subarr = aud.subarray(offset, offset + window2);
              const feature = await this.processor(subarr);
              const isFirst = offset === 0;
              const isLast = offset + jump >= aud.length;
              chunks.push({
                stride: [
                  subarr.length,
                  isFirst ? 0 : stride,
                  isLast ? 0 : stride
                ],
                input_features: feature.input_features,
                is_last: isLast
              });
              offset += jump;
            }
          } else {
            chunks = [{
              stride: [aud.length, 0, 0],
              input_features: (await this.processor(aud)).input_features,
              is_last: true
            }];
          }
          for (const chunk of chunks) {
            kwargs.num_frames = Math.floor(chunk.stride[0] / hop_length);
            const data = await this.model.generate(chunk.input_features, kwargs);
            if (return_timestamps === "word") {
              chunk.tokens = data.sequences[0];
              chunk.token_timestamps = data.token_timestamps.tolist()[0].map(
                (x) => round(x, 2)
              );
            } else {
              chunk.tokens = data[0];
            }
            chunk.stride = chunk.stride.map((x) => x / sampling_rate);
            if (chunk_callback !== null) {
              chunk_callback(chunk);
            }
          }
          const [full_text, optional] = this.tokenizer._decode_asr(chunks, {
            time_precision,
            return_timestamps,
            force_full_sequences
          });
          toReturn.push({ text: full_text, ...optional });
        }
        return single ? toReturn[0] : toReturn;
      }
    };
    ImageToTextPipeline = class extends /** @type {new (options: TextImagePipelineConstructorArgs) => ImageToTextPipelineType} */
    Pipeline {
      static {
        __name(this, "ImageToTextPipeline");
      }
      /**
       * Create a new ImageToTextPipeline.
       * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ImageToTextPipelineCallback} */
      async _call(images, generate_kwargs = {}) {
        const isBatched = Array.isArray(images);
        const preparedImages = await prepareImages(images);
        const { pixel_values } = await this.processor(preparedImages);
        const toReturn = [];
        for (const batch of pixel_values) {
          batch.dims = [1, ...batch.dims];
          const output = await this.model.generate(batch, generate_kwargs);
          const decoded = this.tokenizer.batch_decode(output, {
            skip_special_tokens: true
          }).map((x) => ({ generated_text: x.trim() }));
          toReturn.push(decoded);
        }
        return isBatched ? toReturn : toReturn[0];
      }
    };
    ImageClassificationPipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "ImageClassificationPipeline");
      }
      /**
       * Create a new ImageClassificationPipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ImageClassificationPipelineCallback} */
      async _call(images, {
        topk = 1
      } = {}) {
        const isBatched = Array.isArray(images);
        const preparedImages = await prepareImages(images);
        const { pixel_values } = await this.processor(preparedImages);
        const output = await this.model({ pixel_values });
        const id2label = this.model.config.id2label;
        const toReturn = [];
        for (const batch of output.logits) {
          const scores = getTopItems(softmax(batch.data), topk);
          const vals = scores.map((x) => ({
            label: id2label[x[0]],
            score: x[1]
          }));
          if (topk === 1) {
            toReturn.push(...vals);
          } else {
            toReturn.push(vals);
          }
        }
        return isBatched || topk === 1 ? (
          /** @type {ImageClassificationOutput} */
          toReturn
        ) : (
          /** @type {ImageClassificationOutput[]} */
          toReturn[0]
        );
      }
    };
    ImageSegmentationPipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageSegmentationPipelineType} */
    Pipeline {
      static {
        __name(this, "ImageSegmentationPipeline");
      }
      /**
       * Create a new ImageSegmentationPipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
        this.subtasks_mapping = {
          // Mapping of subtasks to their corresponding post-processing function names.
          panoptic: "post_process_panoptic_segmentation",
          instance: "post_process_instance_segmentation",
          semantic: "post_process_semantic_segmentation"
        };
      }
      /** @type {ImageSegmentationPipelineCallback} */
      async _call(images, {
        threshold = 0.5,
        mask_threshold = 0.5,
        overlap_mask_area_threshold = 0.8,
        label_ids_to_fuse = null,
        target_sizes = null,
        subtask = null
      } = {}) {
        const isBatched = Array.isArray(images);
        if (isBatched && images.length !== 1) {
          throw Error("Image segmentation pipeline currently only supports a batch size of 1.");
        }
        const preparedImages = await prepareImages(images);
        const imageSizes = preparedImages.map((x) => [x.height, x.width]);
        const { pixel_values, pixel_mask } = await this.processor(preparedImages);
        const output = await this.model({ pixel_values, pixel_mask });
        let fn = null;
        if (subtask !== null) {
          fn = this.subtasks_mapping[subtask];
        } else {
          for (let [task, func] of Object.entries(this.subtasks_mapping)) {
            if (func in this.processor.feature_extractor) {
              fn = this.processor.feature_extractor[func].bind(this.processor.feature_extractor);
              subtask = task;
              break;
            }
          }
        }
        const id2label = this.model.config.id2label;
        const annotation = [];
        if (subtask === "panoptic" || subtask === "instance") {
          const processed = fn(
            output,
            threshold,
            mask_threshold,
            overlap_mask_area_threshold,
            label_ids_to_fuse,
            target_sizes ?? imageSizes
            // TODO FIX?
          )[0];
          const segmentation = processed.segmentation;
          for (const segment of processed.segments_info) {
            const maskData = new Uint8ClampedArray(segmentation.data.length);
            for (let i = 0; i < segmentation.data.length; ++i) {
              if (segmentation.data[i] === segment.id) {
                maskData[i] = 255;
              }
            }
            const mask = new RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
            annotation.push({
              score: segment.score,
              label: id2label[segment.label_id],
              mask
            });
          }
        } else if (subtask === "semantic") {
          const { segmentation, labels } = fn(output, target_sizes ?? imageSizes)[0];
          for (const label of labels) {
            const maskData = new Uint8ClampedArray(segmentation.data.length);
            for (let i = 0; i < segmentation.data.length; ++i) {
              if (segmentation.data[i] === label) {
                maskData[i] = 255;
              }
            }
            const mask = new RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
            annotation.push({
              score: null,
              label: id2label[label],
              mask
            });
          }
        } else {
          throw Error(`Subtask ${subtask} not supported.`);
        }
        return annotation;
      }
    };
    ZeroShotImageClassificationPipeline = class extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotImageClassificationPipelineType} */
    Pipeline {
      static {
        __name(this, "ZeroShotImageClassificationPipeline");
      }
      /**
       * Create a new ZeroShotImageClassificationPipeline.
       * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ZeroShotImageClassificationPipelineCallback} */
      async _call(images, candidate_labels, {
        hypothesis_template = "This is a photo of {}"
      } = {}) {
        const isBatched = Array.isArray(images);
        const preparedImages = await prepareImages(images);
        const texts = candidate_labels.map(
          (x) => hypothesis_template.replace("{}", x)
        );
        const text_inputs = this.tokenizer(texts, {
          padding: this.model.config.model_type === "siglip" ? "max_length" : true,
          truncation: true
        });
        const { pixel_values } = await this.processor(preparedImages);
        const output = await this.model({ ...text_inputs, pixel_values });
        const function_to_apply = this.model.config.model_type === "siglip" ? (batch) => batch.sigmoid().data : (batch) => softmax(batch.data);
        const toReturn = [];
        for (const batch of output.logits_per_image) {
          const probs = function_to_apply(batch);
          const result = [...probs].map((x, i) => ({
            score: x,
            label: candidate_labels[i]
          }));
          result.sort((a, b) => b.score - a.score);
          toReturn.push(result);
        }
        return isBatched ? toReturn : toReturn[0];
      }
    };
    ObjectDetectionPipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => ObjectDetectionPipelineType} */
    Pipeline {
      static {
        __name(this, "ObjectDetectionPipeline");
      }
      /**
       * Create a new ObjectDetectionPipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ObjectDetectionPipelineCallback} */
      async _call(images, {
        threshold = 0.9,
        percentage = false
      } = {}) {
        const isBatched = Array.isArray(images);
        if (isBatched && images.length !== 1) {
          throw Error("Object detection pipeline currently only supports a batch size of 1.");
        }
        const preparedImages = await prepareImages(images);
        const imageSizes = percentage ? null : preparedImages.map((x) => [x.height, x.width]);
        const { pixel_values, pixel_mask } = await this.processor(preparedImages);
        const output = await this.model({ pixel_values, pixel_mask });
        const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSizes);
        const id2label = this.model.config.id2label;
        const result = processed.map((batch) => batch.boxes.map((box, i) => ({
          score: batch.scores[i],
          label: id2label[batch.classes[i]],
          box: get_bounding_box(box, !percentage)
        })));
        return isBatched ? result : result[0];
      }
    };
    ZeroShotObjectDetectionPipeline = class extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotObjectDetectionPipelineType} */
    Pipeline {
      static {
        __name(this, "ZeroShotObjectDetectionPipeline");
      }
      /**
       * Create a new ZeroShotObjectDetectionPipeline.
       * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ZeroShotObjectDetectionPipelineCallback} */
      async _call(images, candidate_labels, {
        threshold = 0.1,
        topk = null,
        percentage = false
      } = {}) {
        const isBatched = Array.isArray(images);
        const preparedImages = await prepareImages(images);
        const text_inputs = this.tokenizer(candidate_labels, {
          padding: true,
          truncation: true
        });
        const model_inputs = await this.processor(preparedImages);
        const toReturn = [];
        for (let i = 0; i < preparedImages.length; ++i) {
          const image = preparedImages[i];
          const imageSize = percentage ? null : [[image.height, image.width]];
          const pixel_values = model_inputs.pixel_values[i].unsqueeze_(0);
          const output = await this.model({ ...text_inputs, pixel_values });
          const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSize, true)[0];
          let result = processed.boxes.map((box, i2) => ({
            score: processed.scores[i2],
            label: candidate_labels[processed.classes[i2]],
            box: get_bounding_box(box, !percentage)
          })).sort((a, b) => b.score - a.score);
          if (topk !== null) {
            result = result.slice(0, topk);
          }
          toReturn.push(result);
        }
        return isBatched ? toReturn : toReturn[0];
      }
    };
    DocumentQuestionAnsweringPipeline = class extends /** @type {new (options: TextImagePipelineConstructorArgs) => DocumentQuestionAnsweringPipelineType} */
    Pipeline {
      static {
        __name(this, "DocumentQuestionAnsweringPipeline");
      }
      /**
       * Create a new DocumentQuestionAnsweringPipeline.
       * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {DocumentQuestionAnsweringPipelineCallback} */
      async _call(image, question, generate_kwargs = {}) {
        const preparedImage = (await prepareImages(image))[0];
        const { pixel_values } = await this.processor(preparedImage);
        const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;
        const decoder_input_ids = this.tokenizer(task_prompt, {
          add_special_tokens: false,
          padding: true,
          truncation: true
        }).input_ids;
        const output = await this.model.generate(
          pixel_values,
          {
            ...generate_kwargs,
            decoder_input_ids,
            max_length: this.model.config.decoder.max_position_embeddings
          }
        );
        const decoded = this.tokenizer.batch_decode(output)[0];
        const match2 = decoded.match(/<s_answer>(.*?)<\/s_answer>/);
        let answer = null;
        if (match2 && match2.length >= 2) {
          answer = match2[1].trim();
        }
        return [{ answer }];
      }
    };
    TextToAudioPipeline = class extends /** @type {new (options: TextToAudioPipelineConstructorArgs) => TextToAudioPipelineType} */
    Pipeline {
      static {
        __name(this, "TextToAudioPipeline");
      }
      DEFAULT_VOCODER_ID = "Xenova/speecht5_hifigan";
      /**
       * Create a new TextToAudioPipeline.
       * @param {TextToAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
        this.vocoder = options.vocoder ?? null;
      }
      /** @type {TextToAudioPipelineCallback} */
      async _call(text_inputs, {
        speaker_embeddings = null
      } = {}) {
        if (this.processor) {
          return this._call_text_to_spectrogram(text_inputs, { speaker_embeddings });
        } else {
          return this._call_text_to_waveform(text_inputs);
        }
      }
      async _call_text_to_waveform(text_inputs) {
        const inputs = this.tokenizer(text_inputs, {
          padding: true,
          truncation: true
        });
        const { waveform } = await this.model(inputs);
        const sampling_rate = this.model.config.sampling_rate;
        return {
          audio: waveform.data,
          sampling_rate
        };
      }
      async _call_text_to_spectrogram(text_inputs, { speaker_embeddings }) {
        if (!this.vocoder) {
          console.log("No vocoder specified, using default HifiGan vocoder.");
          this.vocoder = await AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { quantized: false });
        }
        if (typeof speaker_embeddings === "string" || speaker_embeddings instanceof URL) {
          speaker_embeddings = new Float32Array(
            await (await fetch(speaker_embeddings)).arrayBuffer()
          );
        }
        if (speaker_embeddings instanceof Float32Array) {
          speaker_embeddings = new Tensor(
            "float32",
            speaker_embeddings,
            [1, speaker_embeddings.length]
          );
        } else if (!(speaker_embeddings instanceof Tensor)) {
          throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");
        }
        const { input_ids } = this.tokenizer(text_inputs, {
          padding: true,
          truncation: true
        });
        const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });
        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
        return {
          audio: waveform.data,
          sampling_rate
        };
      }
    };
    ImageToImagePipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageToImagePipelineType} */
    Pipeline {
      static {
        __name(this, "ImageToImagePipeline");
      }
      /**
       * Create a new ImageToImagePipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {ImageToImagePipelineCallback} */
      async _call(images) {
        const preparedImages = await prepareImages(images);
        const inputs = await this.processor(preparedImages);
        const outputs = await this.model(inputs);
        const toReturn = [];
        for (const batch of outputs.reconstruction) {
          const output = batch.squeeze().clamp_(0, 1).mul_(255).round_().to("uint8");
          toReturn.push(RawImage.fromTensor(output));
        }
        return toReturn.length > 1 ? toReturn : toReturn[0];
      }
    };
    DepthEstimationPipeline = class extends /** @type {new (options: ImagePipelineConstructorArgs) => DepthEstimationPipelineType} */
    Pipeline {
      static {
        __name(this, "DepthEstimationPipeline");
      }
      /**
       * Create a new DepthEstimationPipeline.
       * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
       */
      constructor(options) {
        super(options);
      }
      /** @type {DepthEstimationPipelineCallback} */
      async _call(images) {
        const preparedImages = await prepareImages(images);
        const inputs = await this.processor(preparedImages);
        const { predicted_depth } = await this.model(inputs);
        const toReturn = [];
        for (let i = 0; i < preparedImages.length; ++i) {
          const prediction = interpolate(predicted_depth[i], preparedImages[i].size.reverse(), "bilinear", false);
          const formatted = prediction.mul_(255 / max(prediction.data)[0]).to("uint8");
          toReturn.push({
            predicted_depth: predicted_depth[i],
            depth: RawImage.fromTensor(formatted)
          });
        }
        return toReturn.length > 1 ? toReturn : toReturn[0];
      }
    };
    SUPPORTED_TASKS = Object.freeze({
      "text-classification": {
        "tokenizer": AutoTokenizer,
        "pipeline": TextClassificationPipeline,
        "model": AutoModelForSequenceClassification,
        "default": {
          // TODO: replace with original
          // "model": "distilbert-base-uncased-finetuned-sst-2-english",
          "model": "Xenova/distilbert-base-uncased-finetuned-sst-2-english"
        },
        "type": "text"
      },
      "token-classification": {
        "tokenizer": AutoTokenizer,
        "pipeline": TokenClassificationPipeline,
        "model": AutoModelForTokenClassification,
        "default": {
          // TODO: replace with original
          // "model": "Davlan/bert-base-multilingual-cased-ner-hrl",
          "model": "Xenova/bert-base-multilingual-cased-ner-hrl"
        },
        "type": "text"
      },
      "question-answering": {
        "tokenizer": AutoTokenizer,
        "pipeline": QuestionAnsweringPipeline,
        "model": AutoModelForQuestionAnswering,
        "default": {
          // TODO: replace with original
          // "model": "distilbert-base-cased-distilled-squad",
          "model": "Xenova/distilbert-base-cased-distilled-squad"
        },
        "type": "text"
      },
      "fill-mask": {
        "tokenizer": AutoTokenizer,
        "pipeline": FillMaskPipeline,
        "model": AutoModelForMaskedLM,
        "default": {
          // TODO: replace with original
          // "model": "bert-base-uncased",
          "model": "Xenova/bert-base-uncased"
        },
        "type": "text"
      },
      "summarization": {
        "tokenizer": AutoTokenizer,
        "pipeline": SummarizationPipeline,
        "model": AutoModelForSeq2SeqLM,
        "default": {
          // TODO: replace with original
          // "model": "sshleifer/distilbart-cnn-6-6",
          "model": "Xenova/distilbart-cnn-6-6"
        },
        "type": "text"
      },
      "translation": {
        "tokenizer": AutoTokenizer,
        "pipeline": TranslationPipeline,
        "model": AutoModelForSeq2SeqLM,
        "default": {
          // TODO: replace with original
          // "model": "t5-small",
          "model": "Xenova/t5-small"
        },
        "type": "text"
      },
      "text2text-generation": {
        "tokenizer": AutoTokenizer,
        "pipeline": Text2TextGenerationPipeline,
        "model": AutoModelForSeq2SeqLM,
        "default": {
          // TODO: replace with original
          // "model": "google/flan-t5-small",
          "model": "Xenova/flan-t5-small"
        },
        "type": "text"
      },
      "text-generation": {
        "tokenizer": AutoTokenizer,
        "pipeline": TextGenerationPipeline,
        "model": AutoModelForCausalLM,
        "default": {
          // TODO: replace with original
          // "model": "gpt2",
          "model": "Xenova/gpt2"
        },
        "type": "text"
      },
      "zero-shot-classification": {
        "tokenizer": AutoTokenizer,
        "pipeline": ZeroShotClassificationPipeline,
        "model": AutoModelForSequenceClassification,
        "default": {
          // TODO: replace with original
          // "model": "typeform/distilbert-base-uncased-mnli",
          "model": "Xenova/distilbert-base-uncased-mnli"
        },
        "type": "text"
      },
      "audio-classification": {
        "pipeline": AudioClassificationPipeline,
        "model": AutoModelForAudioClassification,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "superb/wav2vec2-base-superb-ks",
          "model": "Xenova/wav2vec2-base-superb-ks"
        },
        "type": "audio"
      },
      "zero-shot-audio-classification": {
        "tokenizer": AutoTokenizer,
        "pipeline": ZeroShotAudioClassificationPipeline,
        "model": AutoModel,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "laion/clap-htsat-fused",
          "model": "Xenova/clap-htsat-unfused"
        },
        "type": "multimodal"
      },
      "automatic-speech-recognition": {
        "tokenizer": AutoTokenizer,
        "pipeline": AutomaticSpeechRecognitionPipeline,
        "model": [AutoModelForSpeechSeq2Seq, AutoModelForCTC],
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "openai/whisper-tiny.en",
          "model": "Xenova/whisper-tiny.en"
        },
        "type": "multimodal"
      },
      "text-to-audio": {
        "tokenizer": AutoTokenizer,
        "pipeline": TextToAudioPipeline,
        "model": [AutoModelForTextToWaveform, AutoModelForTextToSpectrogram],
        "processor": [
          AutoProcessor,
          /* Some don't use a processor */
          null
        ],
        "default": {
          // TODO: replace with original
          // "model": "microsoft/speecht5_tts",
          "model": "Xenova/speecht5_tts"
        },
        "type": "text"
      },
      "image-to-text": {
        "tokenizer": AutoTokenizer,
        "pipeline": ImageToTextPipeline,
        "model": AutoModelForVision2Seq,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "nlpconnect/vit-gpt2-image-captioning",
          "model": "Xenova/vit-gpt2-image-captioning"
        },
        "type": "multimodal"
      },
      "image-classification": {
        // no tokenizer
        "pipeline": ImageClassificationPipeline,
        "model": AutoModelForImageClassification,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "google/vit-base-patch16-224",
          "model": "Xenova/vit-base-patch16-224"
        },
        "type": "multimodal"
      },
      "image-segmentation": {
        // no tokenizer
        "pipeline": ImageSegmentationPipeline,
        "model": [AutoModelForImageSegmentation, AutoModelForSemanticSegmentation],
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "facebook/detr-resnet-50-panoptic",
          "model": "Xenova/detr-resnet-50-panoptic"
        },
        "type": "multimodal"
      },
      "zero-shot-image-classification": {
        "tokenizer": AutoTokenizer,
        "pipeline": ZeroShotImageClassificationPipeline,
        "model": AutoModel,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "openai/clip-vit-base-patch32",
          "model": "Xenova/clip-vit-base-patch32"
        },
        "type": "multimodal"
      },
      "object-detection": {
        // no tokenizer
        "pipeline": ObjectDetectionPipeline,
        "model": AutoModelForObjectDetection,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "facebook/detr-resnet-50",
          "model": "Xenova/detr-resnet-50"
        },
        "type": "multimodal"
      },
      "zero-shot-object-detection": {
        "tokenizer": AutoTokenizer,
        "pipeline": ZeroShotObjectDetectionPipeline,
        "model": AutoModelForZeroShotObjectDetection,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "google/owlvit-base-patch32",
          "model": "Xenova/owlvit-base-patch32"
        },
        "type": "multimodal"
      },
      "document-question-answering": {
        "tokenizer": AutoTokenizer,
        "pipeline": DocumentQuestionAnsweringPipeline,
        "model": AutoModelForDocumentQuestionAnswering,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "naver-clova-ix/donut-base-finetuned-docvqa",
          "model": "Xenova/donut-base-finetuned-docvqa"
        },
        "type": "multimodal"
      },
      "image-to-image": {
        // no tokenizer
        "pipeline": ImageToImagePipeline,
        "model": AutoModelForImageToImage,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "caidas/swin2SR-classical-sr-x2-64",
          "model": "Xenova/swin2SR-classical-sr-x2-64"
        },
        "type": "image"
      },
      "depth-estimation": {
        // no tokenizer
        "pipeline": DepthEstimationPipeline,
        "model": AutoModelForDepthEstimation,
        "processor": AutoProcessor,
        "default": {
          // TODO: replace with original
          // "model": "Intel/dpt-large",
          "model": "Xenova/dpt-large"
        },
        "type": "image"
      },
      // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).
      "feature-extraction": {
        "tokenizer": AutoTokenizer,
        "pipeline": FeatureExtractionPipeline,
        "model": AutoModel,
        "default": {
          // TODO: replace with original
          // "model": "sentence-transformers/all-MiniLM-L6-v2",
          "model": "Xenova/all-MiniLM-L6-v2"
        },
        "type": "text"
      },
      "image-feature-extraction": {
        "processor": AutoProcessor,
        "pipeline": ImageFeatureExtractionPipeline,
        "model": [AutoModelForImageFeatureExtraction, AutoModel],
        "default": {
          // TODO: replace with original
          // "model": "google/vit-base-patch16-224",
          "model": "Xenova/vit-base-patch16-224-in21k"
        },
        "type": "image"
      }
    });
    TASK_ALIASES = Object.freeze({
      "sentiment-analysis": "text-classification",
      "ner": "token-classification",
      // "vqa": "visual-question-answering", // TODO: Add
      "asr": "automatic-speech-recognition",
      "text-to-speech": "text-to-audio",
      // Add for backwards compatibility
      "embeddings": "feature-extraction"
    });
    __name(pipeline, "pipeline");
    __name(loadItems, "loadItems");
  }
});

// node_modules/@xenova/transformers/src/transformers.js
var transformers_exports = {};
__export(transformers_exports, {
  ASTFeatureExtractor: () => ASTFeatureExtractor,
  ASTForAudioClassification: () => ASTForAudioClassification,
  ASTModel: () => ASTModel,
  ASTPreTrainedModel: () => ASTPreTrainedModel,
  AlbertForMaskedLM: () => AlbertForMaskedLM,
  AlbertForQuestionAnswering: () => AlbertForQuestionAnswering,
  AlbertForSequenceClassification: () => AlbertForSequenceClassification,
  AlbertModel: () => AlbertModel,
  AlbertPreTrainedModel: () => AlbertPreTrainedModel,
  AlbertTokenizer: () => AlbertTokenizer,
  AudioClassificationPipeline: () => AudioClassificationPipeline,
  AutoConfig: () => AutoConfig,
  AutoModel: () => AutoModel,
  AutoModelForAudioClassification: () => AutoModelForAudioClassification,
  AutoModelForAudioFrameClassification: () => AutoModelForAudioFrameClassification,
  AutoModelForCTC: () => AutoModelForCTC,
  AutoModelForCausalLM: () => AutoModelForCausalLM,
  AutoModelForDepthEstimation: () => AutoModelForDepthEstimation,
  AutoModelForDocumentQuestionAnswering: () => AutoModelForDocumentQuestionAnswering,
  AutoModelForImageClassification: () => AutoModelForImageClassification,
  AutoModelForImageFeatureExtraction: () => AutoModelForImageFeatureExtraction,
  AutoModelForImageMatting: () => AutoModelForImageMatting,
  AutoModelForImageSegmentation: () => AutoModelForImageSegmentation,
  AutoModelForImageToImage: () => AutoModelForImageToImage,
  AutoModelForMaskGeneration: () => AutoModelForMaskGeneration,
  AutoModelForMaskedLM: () => AutoModelForMaskedLM,
  AutoModelForObjectDetection: () => AutoModelForObjectDetection,
  AutoModelForQuestionAnswering: () => AutoModelForQuestionAnswering,
  AutoModelForSemanticSegmentation: () => AutoModelForSemanticSegmentation,
  AutoModelForSeq2SeqLM: () => AutoModelForSeq2SeqLM,
  AutoModelForSequenceClassification: () => AutoModelForSequenceClassification,
  AutoModelForSpeechSeq2Seq: () => AutoModelForSpeechSeq2Seq,
  AutoModelForTextToSpectrogram: () => AutoModelForTextToSpectrogram,
  AutoModelForTextToWaveform: () => AutoModelForTextToWaveform,
  AutoModelForTokenClassification: () => AutoModelForTokenClassification,
  AutoModelForVision2Seq: () => AutoModelForVision2Seq,
  AutoModelForXVector: () => AutoModelForXVector,
  AutoModelForZeroShotObjectDetection: () => AutoModelForZeroShotObjectDetection,
  AutoProcessor: () => AutoProcessor,
  AutoTokenizer: () => AutoTokenizer,
  AutomaticSpeechRecognitionPipeline: () => AutomaticSpeechRecognitionPipeline,
  BartForConditionalGeneration: () => BartForConditionalGeneration,
  BartForSequenceClassification: () => BartForSequenceClassification,
  BartModel: () => BartModel,
  BartPretrainedModel: () => BartPretrainedModel,
  BartTokenizer: () => BartTokenizer,
  BaseModelOutput: () => BaseModelOutput,
  BeitFeatureExtractor: () => BeitFeatureExtractor,
  BeitForImageClassification: () => BeitForImageClassification,
  BeitModel: () => BeitModel,
  BeitPreTrainedModel: () => BeitPreTrainedModel,
  BertForMaskedLM: () => BertForMaskedLM,
  BertForQuestionAnswering: () => BertForQuestionAnswering,
  BertForSequenceClassification: () => BertForSequenceClassification,
  BertForTokenClassification: () => BertForTokenClassification,
  BertModel: () => BertModel,
  BertPreTrainedModel: () => BertPreTrainedModel,
  BertTokenizer: () => BertTokenizer,
  BitImageProcessor: () => BitImageProcessor,
  BlenderbotForConditionalGeneration: () => BlenderbotForConditionalGeneration,
  BlenderbotModel: () => BlenderbotModel,
  BlenderbotPreTrainedModel: () => BlenderbotPreTrainedModel,
  BlenderbotSmallForConditionalGeneration: () => BlenderbotSmallForConditionalGeneration,
  BlenderbotSmallModel: () => BlenderbotSmallModel,
  BlenderbotSmallPreTrainedModel: () => BlenderbotSmallPreTrainedModel,
  BlenderbotSmallTokenizer: () => BlenderbotSmallTokenizer,
  BlenderbotTokenizer: () => BlenderbotTokenizer,
  BloomForCausalLM: () => BloomForCausalLM,
  BloomModel: () => BloomModel,
  BloomPreTrainedModel: () => BloomPreTrainedModel,
  BloomTokenizer: () => BloomTokenizer,
  CLIPFeatureExtractor: () => CLIPFeatureExtractor,
  CLIPModel: () => CLIPModel,
  CLIPPreTrainedModel: () => CLIPPreTrainedModel,
  CLIPSegForImageSegmentation: () => CLIPSegForImageSegmentation,
  CLIPSegModel: () => CLIPSegModel,
  CLIPSegPreTrainedModel: () => CLIPSegPreTrainedModel,
  CLIPTextModelWithProjection: () => CLIPTextModelWithProjection,
  CLIPTokenizer: () => CLIPTokenizer,
  CLIPVisionModelWithProjection: () => CLIPVisionModelWithProjection,
  CamembertForMaskedLM: () => CamembertForMaskedLM,
  CamembertForQuestionAnswering: () => CamembertForQuestionAnswering,
  CamembertForSequenceClassification: () => CamembertForSequenceClassification,
  CamembertForTokenClassification: () => CamembertForTokenClassification,
  CamembertModel: () => CamembertModel,
  CamembertPreTrainedModel: () => CamembertPreTrainedModel,
  CamembertTokenizer: () => CamembertTokenizer,
  CausalLMOutput: () => CausalLMOutput,
  CausalLMOutputWithPast: () => CausalLMOutputWithPast,
  ChineseCLIPFeatureExtractor: () => ChineseCLIPFeatureExtractor,
  ChineseCLIPModel: () => ChineseCLIPModel,
  ChineseCLIPPreTrainedModel: () => ChineseCLIPPreTrainedModel,
  ClapAudioModelWithProjection: () => ClapAudioModelWithProjection,
  ClapFeatureExtractor: () => ClapFeatureExtractor,
  ClapModel: () => ClapModel,
  ClapPreTrainedModel: () => ClapPreTrainedModel,
  ClapTextModelWithProjection: () => ClapTextModelWithProjection,
  CodeGenForCausalLM: () => CodeGenForCausalLM,
  CodeGenModel: () => CodeGenModel,
  CodeGenPreTrainedModel: () => CodeGenPreTrainedModel,
  CodeGenTokenizer: () => CodeGenTokenizer,
  CodeLlamaTokenizer: () => CodeLlamaTokenizer,
  CohereTokenizer: () => CohereTokenizer,
  ConvBertForMaskedLM: () => ConvBertForMaskedLM,
  ConvBertForQuestionAnswering: () => ConvBertForQuestionAnswering,
  ConvBertForSequenceClassification: () => ConvBertForSequenceClassification,
  ConvBertForTokenClassification: () => ConvBertForTokenClassification,
  ConvBertModel: () => ConvBertModel,
  ConvBertPreTrainedModel: () => ConvBertPreTrainedModel,
  ConvBertTokenizer: () => ConvBertTokenizer,
  ConvNextFeatureExtractor: () => ConvNextFeatureExtractor,
  ConvNextForImageClassification: () => ConvNextForImageClassification,
  ConvNextImageProcessor: () => ConvNextImageProcessor,
  ConvNextModel: () => ConvNextModel,
  ConvNextPreTrainedModel: () => ConvNextPreTrainedModel,
  ConvNextV2ForImageClassification: () => ConvNextV2ForImageClassification,
  ConvNextV2Model: () => ConvNextV2Model,
  ConvNextV2PreTrainedModel: () => ConvNextV2PreTrainedModel,
  DPTFeatureExtractor: () => DPTFeatureExtractor,
  DPTForDepthEstimation: () => DPTForDepthEstimation,
  DPTImageProcessor: () => DPTImageProcessor,
  DPTModel: () => DPTModel,
  DPTPreTrainedModel: () => DPTPreTrainedModel,
  DebertaForMaskedLM: () => DebertaForMaskedLM,
  DebertaForQuestionAnswering: () => DebertaForQuestionAnswering,
  DebertaForSequenceClassification: () => DebertaForSequenceClassification,
  DebertaForTokenClassification: () => DebertaForTokenClassification,
  DebertaModel: () => DebertaModel,
  DebertaPreTrainedModel: () => DebertaPreTrainedModel,
  DebertaTokenizer: () => DebertaTokenizer,
  DebertaV2ForMaskedLM: () => DebertaV2ForMaskedLM,
  DebertaV2ForQuestionAnswering: () => DebertaV2ForQuestionAnswering,
  DebertaV2ForSequenceClassification: () => DebertaV2ForSequenceClassification,
  DebertaV2ForTokenClassification: () => DebertaV2ForTokenClassification,
  DebertaV2Model: () => DebertaV2Model,
  DebertaV2PreTrainedModel: () => DebertaV2PreTrainedModel,
  DebertaV2Tokenizer: () => DebertaV2Tokenizer,
  DeiTFeatureExtractor: () => DeiTFeatureExtractor,
  DeiTForImageClassification: () => DeiTForImageClassification,
  DeiTModel: () => DeiTModel,
  DeiTPreTrainedModel: () => DeiTPreTrainedModel,
  DepthAnythingForDepthEstimation: () => DepthAnythingForDepthEstimation,
  DepthAnythingPreTrainedModel: () => DepthAnythingPreTrainedModel,
  DepthEstimationPipeline: () => DepthEstimationPipeline,
  DetrFeatureExtractor: () => DetrFeatureExtractor,
  DetrForObjectDetection: () => DetrForObjectDetection,
  DetrForSegmentation: () => DetrForSegmentation,
  DetrModel: () => DetrModel,
  DetrObjectDetectionOutput: () => DetrObjectDetectionOutput,
  DetrPreTrainedModel: () => DetrPreTrainedModel,
  DetrSegmentationOutput: () => DetrSegmentationOutput,
  Dinov2ForImageClassification: () => Dinov2ForImageClassification,
  Dinov2Model: () => Dinov2Model,
  Dinov2PreTrainedModel: () => Dinov2PreTrainedModel,
  DistilBertForMaskedLM: () => DistilBertForMaskedLM,
  DistilBertForQuestionAnswering: () => DistilBertForQuestionAnswering,
  DistilBertForSequenceClassification: () => DistilBertForSequenceClassification,
  DistilBertForTokenClassification: () => DistilBertForTokenClassification,
  DistilBertModel: () => DistilBertModel,
  DistilBertPreTrainedModel: () => DistilBertPreTrainedModel,
  DistilBertTokenizer: () => DistilBertTokenizer,
  DocumentQuestionAnsweringPipeline: () => DocumentQuestionAnsweringPipeline,
  DonutFeatureExtractor: () => DonutFeatureExtractor,
  DonutSwinModel: () => DonutSwinModel,
  DonutSwinPreTrainedModel: () => DonutSwinPreTrainedModel,
  EfficientNetForImageClassification: () => EfficientNetForImageClassification,
  EfficientNetImageProcessor: () => EfficientNetImageProcessor,
  EfficientNetModel: () => EfficientNetModel,
  EfficientNetPreTrainedModel: () => EfficientNetPreTrainedModel,
  ElectraForMaskedLM: () => ElectraForMaskedLM,
  ElectraForQuestionAnswering: () => ElectraForQuestionAnswering,
  ElectraForSequenceClassification: () => ElectraForSequenceClassification,
  ElectraForTokenClassification: () => ElectraForTokenClassification,
  ElectraModel: () => ElectraModel,
  ElectraPreTrainedModel: () => ElectraPreTrainedModel,
  ElectraTokenizer: () => ElectraTokenizer,
  EsmForMaskedLM: () => EsmForMaskedLM,
  EsmForSequenceClassification: () => EsmForSequenceClassification,
  EsmForTokenClassification: () => EsmForTokenClassification,
  EsmModel: () => EsmModel,
  EsmPreTrainedModel: () => EsmPreTrainedModel,
  EsmTokenizer: () => EsmTokenizer,
  FFT: () => FFT,
  FalconForCausalLM: () => FalconForCausalLM,
  FalconModel: () => FalconModel,
  FalconPreTrainedModel: () => FalconPreTrainedModel,
  FalconTokenizer: () => FalconTokenizer,
  FastViTForImageClassification: () => FastViTForImageClassification,
  FastViTModel: () => FastViTModel,
  FastViTPreTrainedModel: () => FastViTPreTrainedModel,
  FeatureExtractionPipeline: () => FeatureExtractionPipeline,
  FeatureExtractor: () => FeatureExtractor,
  FillMaskPipeline: () => FillMaskPipeline,
  GLPNFeatureExtractor: () => GLPNFeatureExtractor,
  GLPNForDepthEstimation: () => GLPNForDepthEstimation,
  GLPNModel: () => GLPNModel,
  GLPNPreTrainedModel: () => GLPNPreTrainedModel,
  GPT2LMHeadModel: () => GPT2LMHeadModel,
  GPT2Model: () => GPT2Model,
  GPT2PreTrainedModel: () => GPT2PreTrainedModel,
  GPT2Tokenizer: () => GPT2Tokenizer,
  GPTBigCodeForCausalLM: () => GPTBigCodeForCausalLM,
  GPTBigCodeModel: () => GPTBigCodeModel,
  GPTBigCodePreTrainedModel: () => GPTBigCodePreTrainedModel,
  GPTJForCausalLM: () => GPTJForCausalLM,
  GPTJModel: () => GPTJModel,
  GPTJPreTrainedModel: () => GPTJPreTrainedModel,
  GPTNeoForCausalLM: () => GPTNeoForCausalLM,
  GPTNeoModel: () => GPTNeoModel,
  GPTNeoPreTrainedModel: () => GPTNeoPreTrainedModel,
  GPTNeoXForCausalLM: () => GPTNeoXForCausalLM,
  GPTNeoXModel: () => GPTNeoXModel,
  GPTNeoXPreTrainedModel: () => GPTNeoXPreTrainedModel,
  GPTNeoXTokenizer: () => GPTNeoXTokenizer,
  GemmaTokenizer: () => GemmaTokenizer,
  Grok1Tokenizer: () => Grok1Tokenizer,
  HerbertTokenizer: () => HerbertTokenizer,
  HubertForCTC: () => HubertForCTC,
  HubertForSequenceClassification: () => HubertForSequenceClassification,
  HubertModel: () => HubertModel,
  HubertPreTrainedModel: () => HubertPreTrainedModel,
  ImageClassificationPipeline: () => ImageClassificationPipeline,
  ImageFeatureExtractionPipeline: () => ImageFeatureExtractionPipeline,
  ImageFeatureExtractor: () => ImageFeatureExtractor,
  ImageMattingOutput: () => ImageMattingOutput,
  ImageSegmentationPipeline: () => ImageSegmentationPipeline,
  ImageToImagePipeline: () => ImageToImagePipeline,
  ImageToTextPipeline: () => ImageToTextPipeline,
  LlamaForCausalLM: () => LlamaForCausalLM,
  LlamaModel: () => LlamaModel,
  LlamaPreTrainedModel: () => LlamaPreTrainedModel,
  LlamaTokenizer: () => LlamaTokenizer,
  LongT5ForConditionalGeneration: () => LongT5ForConditionalGeneration,
  LongT5Model: () => LongT5Model,
  LongT5PreTrainedModel: () => LongT5PreTrainedModel,
  M2M100ForConditionalGeneration: () => M2M100ForConditionalGeneration,
  M2M100Model: () => M2M100Model,
  M2M100PreTrainedModel: () => M2M100PreTrainedModel,
  M2M100Tokenizer: () => M2M100Tokenizer,
  MBart50Tokenizer: () => MBart50Tokenizer,
  MBartForCausalLM: () => MBartForCausalLM,
  MBartForConditionalGeneration: () => MBartForConditionalGeneration,
  MBartForSequenceClassification: () => MBartForSequenceClassification,
  MBartModel: () => MBartModel,
  MBartPreTrainedModel: () => MBartPreTrainedModel,
  MBartTokenizer: () => MBartTokenizer,
  MPNetForMaskedLM: () => MPNetForMaskedLM,
  MPNetForQuestionAnswering: () => MPNetForQuestionAnswering,
  MPNetForSequenceClassification: () => MPNetForSequenceClassification,
  MPNetForTokenClassification: () => MPNetForTokenClassification,
  MPNetModel: () => MPNetModel,
  MPNetPreTrainedModel: () => MPNetPreTrainedModel,
  MPNetTokenizer: () => MPNetTokenizer,
  MT5ForConditionalGeneration: () => MT5ForConditionalGeneration,
  MT5Model: () => MT5Model,
  MT5PreTrainedModel: () => MT5PreTrainedModel,
  MarianMTModel: () => MarianMTModel,
  MarianModel: () => MarianModel,
  MarianPreTrainedModel: () => MarianPreTrainedModel,
  MarianTokenizer: () => MarianTokenizer,
  MaskedLMOutput: () => MaskedLMOutput,
  MistralForCausalLM: () => MistralForCausalLM,
  MistralModel: () => MistralModel,
  MistralPreTrainedModel: () => MistralPreTrainedModel,
  MobileBertForMaskedLM: () => MobileBertForMaskedLM,
  MobileBertForQuestionAnswering: () => MobileBertForQuestionAnswering,
  MobileBertForSequenceClassification: () => MobileBertForSequenceClassification,
  MobileBertModel: () => MobileBertModel,
  MobileBertPreTrainedModel: () => MobileBertPreTrainedModel,
  MobileBertTokenizer: () => MobileBertTokenizer,
  MobileViTFeatureExtractor: () => MobileViTFeatureExtractor,
  MobileViTForImageClassification: () => MobileViTForImageClassification,
  MobileViTImageProcessor: () => MobileViTImageProcessor,
  MobileViTModel: () => MobileViTModel,
  MobileViTPreTrainedModel: () => MobileViTPreTrainedModel,
  MobileViTV2ForImageClassification: () => MobileViTV2ForImageClassification,
  MobileViTV2Model: () => MobileViTV2Model,
  MobileViTV2PreTrainedModel: () => MobileViTV2PreTrainedModel,
  ModelOutput: () => ModelOutput,
  MptForCausalLM: () => MptForCausalLM,
  MptModel: () => MptModel,
  MptPreTrainedModel: () => MptPreTrainedModel,
  NllbTokenizer: () => NllbTokenizer,
  NomicBertModel: () => NomicBertModel,
  NomicBertPreTrainedModel: () => NomicBertPreTrainedModel,
  NougatImageProcessor: () => NougatImageProcessor,
  NougatTokenizer: () => NougatTokenizer,
  OPTForCausalLM: () => OPTForCausalLM,
  OPTModel: () => OPTModel,
  OPTPreTrainedModel: () => OPTPreTrainedModel,
  ObjectDetectionPipeline: () => ObjectDetectionPipeline,
  OwlViTFeatureExtractor: () => OwlViTFeatureExtractor,
  OwlViTForObjectDetection: () => OwlViTForObjectDetection,
  OwlViTModel: () => OwlViTModel,
  OwlViTPreTrainedModel: () => OwlViTPreTrainedModel,
  OwlViTProcessor: () => OwlViTProcessor,
  Owlv2ForObjectDetection: () => Owlv2ForObjectDetection,
  Owlv2ImageProcessor: () => Owlv2ImageProcessor,
  Owlv2Model: () => Owlv2Model,
  Owlv2PreTrainedModel: () => Owlv2PreTrainedModel,
  PhiForCausalLM: () => PhiForCausalLM,
  PhiModel: () => PhiModel,
  PhiPreTrainedModel: () => PhiPreTrainedModel,
  Pipeline: () => Pipeline,
  PreTrainedModel: () => PreTrainedModel,
  PreTrainedTokenizer: () => PreTrainedTokenizer,
  PretrainedConfig: () => PretrainedConfig,
  PretrainedMixin: () => PretrainedMixin,
  Processor: () => Processor,
  QuestionAnsweringModelOutput: () => QuestionAnsweringModelOutput,
  QuestionAnsweringPipeline: () => QuestionAnsweringPipeline,
  Qwen2ForCausalLM: () => Qwen2ForCausalLM,
  Qwen2Model: () => Qwen2Model,
  Qwen2PreTrainedModel: () => Qwen2PreTrainedModel,
  Qwen2Tokenizer: () => Qwen2Tokenizer,
  RawImage: () => RawImage,
  ResNetForImageClassification: () => ResNetForImageClassification,
  ResNetModel: () => ResNetModel,
  ResNetPreTrainedModel: () => ResNetPreTrainedModel,
  RoFormerForMaskedLM: () => RoFormerForMaskedLM,
  RoFormerForQuestionAnswering: () => RoFormerForQuestionAnswering,
  RoFormerForSequenceClassification: () => RoFormerForSequenceClassification,
  RoFormerForTokenClassification: () => RoFormerForTokenClassification,
  RoFormerModel: () => RoFormerModel,
  RoFormerPreTrainedModel: () => RoFormerPreTrainedModel,
  RoFormerTokenizer: () => RoFormerTokenizer,
  RobertaForMaskedLM: () => RobertaForMaskedLM,
  RobertaForQuestionAnswering: () => RobertaForQuestionAnswering,
  RobertaForSequenceClassification: () => RobertaForSequenceClassification,
  RobertaForTokenClassification: () => RobertaForTokenClassification,
  RobertaModel: () => RobertaModel,
  RobertaPreTrainedModel: () => RobertaPreTrainedModel,
  RobertaTokenizer: () => RobertaTokenizer,
  SamImageProcessor: () => SamImageProcessor,
  SamImageSegmentationOutput: () => SamImageSegmentationOutput,
  SamModel: () => SamModel,
  SamPreTrainedModel: () => SamPreTrainedModel,
  SamProcessor: () => SamProcessor,
  SeamlessM4TFeatureExtractor: () => SeamlessM4TFeatureExtractor,
  SegformerFeatureExtractor: () => SegformerFeatureExtractor,
  SegformerForImageClassification: () => SegformerForImageClassification,
  SegformerForSemanticSegmentation: () => SegformerForSemanticSegmentation,
  SegformerModel: () => SegformerModel,
  SegformerPreTrainedModel: () => SegformerPreTrainedModel,
  Seq2SeqLMOutput: () => Seq2SeqLMOutput,
  SequenceClassifierOutput: () => SequenceClassifierOutput,
  SiglipImageProcessor: () => SiglipImageProcessor,
  SiglipModel: () => SiglipModel,
  SiglipPreTrainedModel: () => SiglipPreTrainedModel,
  SiglipTextModel: () => SiglipTextModel,
  SiglipTokenizer: () => SiglipTokenizer,
  SiglipVisionModel: () => SiglipVisionModel,
  SpeechT5FeatureExtractor: () => SpeechT5FeatureExtractor,
  SpeechT5ForSpeechToText: () => SpeechT5ForSpeechToText,
  SpeechT5ForTextToSpeech: () => SpeechT5ForTextToSpeech,
  SpeechT5HifiGan: () => SpeechT5HifiGan,
  SpeechT5Model: () => SpeechT5Model,
  SpeechT5PreTrainedModel: () => SpeechT5PreTrainedModel,
  SpeechT5Processor: () => SpeechT5Processor,
  SpeechT5Tokenizer: () => SpeechT5Tokenizer,
  SqueezeBertForMaskedLM: () => SqueezeBertForMaskedLM,
  SqueezeBertForQuestionAnswering: () => SqueezeBertForQuestionAnswering,
  SqueezeBertForSequenceClassification: () => SqueezeBertForSequenceClassification,
  SqueezeBertModel: () => SqueezeBertModel,
  SqueezeBertPreTrainedModel: () => SqueezeBertPreTrainedModel,
  SqueezeBertTokenizer: () => SqueezeBertTokenizer,
  StableLmForCausalLM: () => StableLmForCausalLM,
  StableLmModel: () => StableLmModel,
  StableLmPreTrainedModel: () => StableLmPreTrainedModel,
  Starcoder2ForCausalLM: () => Starcoder2ForCausalLM,
  Starcoder2Model: () => Starcoder2Model,
  Starcoder2PreTrainedModel: () => Starcoder2PreTrainedModel,
  SummarizationPipeline: () => SummarizationPipeline,
  Swin2SRForImageSuperResolution: () => Swin2SRForImageSuperResolution,
  Swin2SRImageProcessor: () => Swin2SRImageProcessor,
  Swin2SRModel: () => Swin2SRModel,
  Swin2SRPreTrainedModel: () => Swin2SRPreTrainedModel,
  SwinForImageClassification: () => SwinForImageClassification,
  SwinModel: () => SwinModel,
  SwinPreTrainedModel: () => SwinPreTrainedModel,
  T5ForConditionalGeneration: () => T5ForConditionalGeneration,
  T5Model: () => T5Model,
  T5PreTrainedModel: () => T5PreTrainedModel,
  T5Tokenizer: () => T5Tokenizer,
  TableTransformerForObjectDetection: () => TableTransformerForObjectDetection,
  TableTransformerModel: () => TableTransformerModel,
  TableTransformerObjectDetectionOutput: () => TableTransformerObjectDetectionOutput,
  TableTransformerPreTrainedModel: () => TableTransformerPreTrainedModel,
  Tensor: () => Tensor,
  Text2TextGenerationPipeline: () => Text2TextGenerationPipeline,
  TextClassificationPipeline: () => TextClassificationPipeline,
  TextGenerationPipeline: () => TextGenerationPipeline,
  TextToAudioPipeline: () => TextToAudioPipeline,
  TokenClassificationPipeline: () => TokenClassificationPipeline,
  TokenClassifierOutput: () => TokenClassifierOutput,
  TokenizerModel: () => TokenizerModel,
  TrOCRForCausalLM: () => TrOCRForCausalLM,
  TrOCRPreTrainedModel: () => TrOCRPreTrainedModel,
  TranslationPipeline: () => TranslationPipeline,
  UniSpeechForCTC: () => UniSpeechForCTC,
  UniSpeechForSequenceClassification: () => UniSpeechForSequenceClassification,
  UniSpeechModel: () => UniSpeechModel,
  UniSpeechPreTrainedModel: () => UniSpeechPreTrainedModel,
  UniSpeechSatForAudioFrameClassification: () => UniSpeechSatForAudioFrameClassification,
  UniSpeechSatForCTC: () => UniSpeechSatForCTC,
  UniSpeechSatForSequenceClassification: () => UniSpeechSatForSequenceClassification,
  UniSpeechSatModel: () => UniSpeechSatModel,
  UniSpeechSatPreTrainedModel: () => UniSpeechSatPreTrainedModel,
  ViTFeatureExtractor: () => ViTFeatureExtractor,
  ViTForImageClassification: () => ViTForImageClassification,
  ViTImageProcessor: () => ViTImageProcessor,
  ViTModel: () => ViTModel,
  ViTPreTrainedModel: () => ViTPreTrainedModel,
  VisionEncoderDecoderModel: () => VisionEncoderDecoderModel,
  VitMatteForImageMatting: () => VitMatteForImageMatting,
  VitMatteImageProcessor: () => VitMatteImageProcessor,
  VitMattePreTrainedModel: () => VitMattePreTrainedModel,
  VitsModel: () => VitsModel,
  VitsModelOutput: () => VitsModelOutput,
  VitsPreTrainedModel: () => VitsPreTrainedModel,
  VitsTokenizer: () => VitsTokenizer,
  Wav2Vec2BertForCTC: () => Wav2Vec2BertForCTC,
  Wav2Vec2BertForSequenceClassification: () => Wav2Vec2BertForSequenceClassification,
  Wav2Vec2BertModel: () => Wav2Vec2BertModel,
  Wav2Vec2BertPreTrainedModel: () => Wav2Vec2BertPreTrainedModel,
  Wav2Vec2CTCTokenizer: () => Wav2Vec2CTCTokenizer,
  Wav2Vec2FeatureExtractor: () => Wav2Vec2FeatureExtractor,
  Wav2Vec2ForAudioFrameClassification: () => Wav2Vec2ForAudioFrameClassification,
  Wav2Vec2ForCTC: () => Wav2Vec2ForCTC,
  Wav2Vec2ForSequenceClassification: () => Wav2Vec2ForSequenceClassification,
  Wav2Vec2Model: () => Wav2Vec2Model,
  Wav2Vec2PreTrainedModel: () => Wav2Vec2PreTrainedModel,
  Wav2Vec2ProcessorWithLM: () => Wav2Vec2ProcessorWithLM,
  WavLMForAudioFrameClassification: () => WavLMForAudioFrameClassification,
  WavLMForCTC: () => WavLMForCTC,
  WavLMForSequenceClassification: () => WavLMForSequenceClassification,
  WavLMForXVector: () => WavLMForXVector,
  WavLMModel: () => WavLMModel,
  WavLMPreTrainedModel: () => WavLMPreTrainedModel,
  WhisperFeatureExtractor: () => WhisperFeatureExtractor,
  WhisperForConditionalGeneration: () => WhisperForConditionalGeneration,
  WhisperModel: () => WhisperModel,
  WhisperPreTrainedModel: () => WhisperPreTrainedModel,
  WhisperProcessor: () => WhisperProcessor,
  WhisperTokenizer: () => WhisperTokenizer,
  XLMForQuestionAnswering: () => XLMForQuestionAnswering,
  XLMForSequenceClassification: () => XLMForSequenceClassification,
  XLMForTokenClassification: () => XLMForTokenClassification,
  XLMModel: () => XLMModel,
  XLMPreTrainedModel: () => XLMPreTrainedModel,
  XLMRobertaForMaskedLM: () => XLMRobertaForMaskedLM,
  XLMRobertaForQuestionAnswering: () => XLMRobertaForQuestionAnswering,
  XLMRobertaForSequenceClassification: () => XLMRobertaForSequenceClassification,
  XLMRobertaForTokenClassification: () => XLMRobertaForTokenClassification,
  XLMRobertaModel: () => XLMRobertaModel,
  XLMRobertaPreTrainedModel: () => XLMRobertaPreTrainedModel,
  XLMRobertaTokenizer: () => XLMRobertaTokenizer,
  XLMTokenizer: () => XLMTokenizer,
  XLMWithLMHeadModel: () => XLMWithLMHeadModel,
  XVectorOutput: () => XVectorOutput,
  YolosFeatureExtractor: () => YolosFeatureExtractor,
  YolosForObjectDetection: () => YolosForObjectDetection,
  YolosModel: () => YolosModel,
  YolosObjectDetectionOutput: () => YolosObjectDetectionOutput,
  YolosPreTrainedModel: () => YolosPreTrainedModel,
  ZeroShotAudioClassificationPipeline: () => ZeroShotAudioClassificationPipeline,
  ZeroShotClassificationPipeline: () => ZeroShotClassificationPipeline,
  ZeroShotImageClassificationPipeline: () => ZeroShotImageClassificationPipeline,
  ZeroShotObjectDetectionPipeline: () => ZeroShotObjectDetectionPipeline,
  bankers_round: () => bankers_round,
  cat: () => cat,
  cos_sim: () => cos_sim,
  dot: () => dot,
  dynamicTimeWarping: () => dynamicTimeWarping,
  env: () => env,
  getTopItems: () => getTopItems,
  hanning: () => hanning,
  interpolate: () => interpolate,
  interpolate_data: () => interpolate_data,
  layer_norm: () => layer_norm,
  log_softmax: () => log_softmax,
  magnitude: () => magnitude,
  max: () => max,
  mean: () => mean,
  mean_pooling: () => mean_pooling,
  medianFilter: () => medianFilter,
  mel_filter_bank: () => mel_filter_bank,
  min: () => min,
  ones: () => ones,
  ones_like: () => ones_like,
  permute: () => permute,
  permute_data: () => permute_data,
  pipeline: () => pipeline,
  quantize_embeddings: () => quantize_embeddings,
  read_audio: () => read_audio,
  round: () => round,
  softmax: () => softmax,
  spectrogram: () => spectrogram,
  stack: () => stack,
  std_mean: () => std_mean,
  window_function: () => window_function
});
var init_transformers = __esm({
  "node_modules/@xenova/transformers/src/transformers.js"() {
    init_checked_fetch();
    init_modules_watch_stub();
    init_pipelines();
    init_env();
    init_models();
    init_tokenizers();
    init_processors();
    init_configs();
    init_audio();
    init_image();
    init_tensor();
    init_maths();
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports2, module2) {
    init_checked_fetch();
    init_modules_watch_stub();
    ((e, t) => {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module2 && "undefined" != typeof exports2 ? module2.exports = t() : e.Papa = t();
    })(exports2, /* @__PURE__ */ __name(function r() {
      var n = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== n ? n : {};
      var d, s = !n.document && !!n.postMessage, a = n.IS_PAPA_WORKER || false, o = {}, h = 0, v = {};
      function u(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, function(e2) {
          var t = b(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }.call(this, e), this.parseChunk = function(t, e2) {
          var i2 = parseInt(this._config.skipFirstNLines) || 0;
          if (this.isFirstChunk && 0 < i2) {
            let e3 = this._config.newline;
            e3 || (r2 = this._config.quoteChar || '"', e3 = this._handle.guessLineEndings(t, r2)), t = [...t.split(e3).slice(i2)].join(e3);
          }
          this.isFirstChunk && U(this._config.beforeFirstChunk) && void 0 !== (r2 = this._config.beforeFirstChunk(t)) && (t = r2), this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + t, r2 = (this._partialLine = "", this._handle.parse(i2, this._baseIndex, !this._finished));
          if (!this._handle.paused() && !this._handle.aborted()) {
            t = r2.meta.cursor, i2 = (this._finished || (this._partialLine = i2.substring(t - this._baseIndex), this._baseIndex = t), r2 && r2.data && (this._rowCount += r2.data.length), this._finished || this._config.preview && this._rowCount >= this._config.preview);
            if (a) n.postMessage({ results: r2, workerId: v.WORKER_ID, finished: i2 });
            else if (U(this._config.chunk) && !e2) {
              if (this._config.chunk(r2, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = true);
              this._completeResults = r2 = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(r2.data), this._completeResults.errors = this._completeResults.errors.concat(r2.errors), this._completeResults.meta = r2.meta), this._completed || !i2 || !U(this._config.complete) || r2 && r2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), i2 || r2 && r2.meta.paused || this._nextChunk(), r2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          U(this._config.error) ? this._config.error(e2) : a && this._config.error && n.postMessage({ workerId: v.WORKER_ID, error: e2, finished: false });
        };
      }
      __name(u, "u");
      function f(e) {
        var r2;
        (e = e || {}).chunkSize || (e.chunkSize = v.RemoteChunkSize), u.call(this, e), this._nextChunk = s ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished) this._chunkLoaded();
          else {
            if (r2 = new XMLHttpRequest(), this._config.withCredentials && (r2.withCredentials = this._config.withCredentials), s || (r2.onload = y(this._chunkLoaded, this), r2.onerror = y(this._chunkError, this)), r2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !s), this._config.downloadRequestHeaders) {
              var e2, t = this._config.downloadRequestHeaders;
              for (e2 in t) r2.setRequestHeader(e2, t[e2]);
            }
            var i2;
            this._config.chunkSize && (i2 = this._start + this._config.chunkSize - 1, r2.setRequestHeader("Range", "bytes=" + this._start + "-" + i2));
            try {
              r2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            s && 0 === r2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === r2.readyState && (r2.status < 200 || 400 <= r2.status ? this._chunkError() : (this._start += this._config.chunkSize || r2.responseText.length, this._finished = !this._config.chunkSize || this._start >= ((e2) => null !== (e2 = e2.getResponseHeader("Content-Range")) ? parseInt(e2.substring(e2.lastIndexOf("/") + 1)) : -1)(r2), this.parseChunk(r2.responseText)));
        }, this._chunkError = function(e2) {
          e2 = r2.statusText || e2;
          this._sendError(new Error(e2));
        };
      }
      __name(f, "f");
      function l(e) {
        (e = e || {}).chunkSize || (e.chunkSize = v.LocalChunkSize), u.call(this, e);
        var i2, r2, n2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, r2 = e2.slice || e2.webkitSlice || e2.mozSlice, n2 ? ((i2 = new FileReader()).onload = y(this._chunkLoaded, this), i2.onerror = y(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input, t = (this._config.chunkSize && (t = Math.min(this._start + this._config.chunkSize, this._input.size), e2 = r2.call(e2, this._start, t)), i2.readAsText(e2, this._config.encoding));
          n2 || this._chunkLoaded({ target: { result: t } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      __name(l, "l");
      function c(e) {
        var i2;
        u.call(this, e = e || {}), this.stream = function(e2) {
          return i2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          var e2, t;
          if (!this._finished) return e2 = this._config.chunkSize, i2 = e2 ? (t = i2.substring(0, e2), i2.substring(e2)) : (t = i2, ""), this._finished = !i2, this.parseChunk(t);
        };
      }
      __name(c, "c");
      function p(e) {
        u.call(this, e = e || {});
        var t = [], i2 = true, r2 = false;
        this.pause = function() {
          u.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          u.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          r2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i2 = true;
        }, this._streamData = y(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), i2 && (i2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = y(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = y(function() {
          this._streamCleanUp(), r2 = true, this._streamData("");
        }, this), this._streamCleanUp = y(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      __name(p, "p");
      function i(m2) {
        var n2, s2, a2, t, o2 = Math.pow(2, 53), h2 = -o2, u2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, d2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, i2 = this, r2 = 0, f2 = 0, l2 = false, e = false, c2 = [], p2 = { data: [], errors: [], meta: {} };
        function y2(e2) {
          return "greedy" === m2.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        __name(y2, "y");
        function g2() {
          if (p2 && a2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + v.DefaultDelimiter + "'"), a2 = false), m2.skipEmptyLines && (p2.data = p2.data.filter(function(e3) {
            return !y2(e3);
          })), _2()) {
            let t3 = function(e3, t4) {
              U(m2.transformHeader) && (e3 = m2.transformHeader(e3, t4)), c2.push(e3);
            };
            var t2 = t3;
            __name(t3, "t");
            if (p2) if (Array.isArray(p2.data[0])) {
              for (var e2 = 0; _2() && e2 < p2.data.length; e2++) p2.data[e2].forEach(t3);
              p2.data.splice(0, 1);
            } else p2.data.forEach(t3);
          }
          function i3(e3, t3) {
            for (var i4 = m2.header ? {} : [], r4 = 0; r4 < e3.length; r4++) {
              var n3 = r4, s3 = e3[r4], s3 = ((e4, t4) => ((e5) => (m2.dynamicTypingFunction && void 0 === m2.dynamicTyping[e5] && (m2.dynamicTyping[e5] = m2.dynamicTypingFunction(e5)), true === (m2.dynamicTyping[e5] || m2.dynamicTyping)))(e4) ? "true" === t4 || "TRUE" === t4 || "false" !== t4 && "FALSE" !== t4 && (((e5) => {
                if (u2.test(e5)) {
                  e5 = parseFloat(e5);
                  if (h2 < e5 && e5 < o2) return 1;
                }
              })(t4) ? parseFloat(t4) : d2.test(t4) ? new Date(t4) : "" === t4 ? null : t4) : t4)(n3 = m2.header ? r4 >= c2.length ? "__parsed_extra" : c2[r4] : n3, s3 = m2.transform ? m2.transform(s3, n3) : s3);
              "__parsed_extra" === n3 ? (i4[n3] = i4[n3] || [], i4[n3].push(s3)) : i4[n3] = s3;
            }
            return m2.header && (r4 > c2.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3) : r4 < c2.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3)), i4;
          }
          __name(i3, "i");
          var r3;
          p2 && (m2.header || m2.dynamicTyping || m2.transform) && (r3 = 1, !p2.data.length || Array.isArray(p2.data[0]) ? (p2.data = p2.data.map(i3), r3 = p2.data.length) : p2.data = i3(p2.data, 0), m2.header && p2.meta && (p2.meta.fields = c2), f2 += r3);
        }
        __name(g2, "g");
        function _2() {
          return m2.header && 0 === c2.length;
        }
        __name(_2, "_");
        function k(e2, t2, i3, r3) {
          e2 = { type: e2, code: t2, message: i3 };
          void 0 !== r3 && (e2.row = r3), p2.errors.push(e2);
        }
        __name(k, "k");
        U(m2.step) && (t = m2.step, m2.step = function(e2) {
          p2 = e2, _2() ? g2() : (g2(), 0 !== p2.data.length && (r2 += e2.data.length, m2.preview && r2 > m2.preview ? s2.abort() : (p2.data = p2.data[0], t(p2, i2))));
        }), this.parse = function(e2, t2, i3) {
          var r3 = m2.quoteChar || '"', r3 = (m2.newline || (m2.newline = this.guessLineEndings(e2, r3)), a2 = false, m2.delimiter ? U(m2.delimiter) && (m2.delimiter = m2.delimiter(e2), p2.meta.delimiter = m2.delimiter) : ((r3 = ((e3, t3, i4, r4, n3) => {
            var s3, a3, o3, h3;
            n3 = n3 || [",", "	", "|", ";", v.RECORD_SEP, v.UNIT_SEP];
            for (var u3 = 0; u3 < n3.length; u3++) {
              for (var d3, f3 = n3[u3], l3 = 0, c3 = 0, p3 = 0, g3 = (o3 = void 0, new E({ comments: r4, delimiter: f3, newline: t3, preview: 10 }).parse(e3)), _3 = 0; _3 < g3.data.length; _3++) i4 && y2(g3.data[_3]) ? p3++ : (d3 = g3.data[_3].length, c3 += d3, void 0 === o3 ? o3 = d3 : 0 < d3 && (l3 += Math.abs(d3 - o3), o3 = d3));
              0 < g3.data.length && (c3 /= g3.data.length - p3), (void 0 === a3 || l3 <= a3) && (void 0 === h3 || h3 < c3) && 1.99 < c3 && (a3 = l3, s3 = f3, h3 = c3);
            }
            return { successful: !!(m2.delimiter = s3), bestDelimiter: s3 };
          })(e2, m2.newline, m2.skipEmptyLines, m2.comments, m2.delimitersToGuess)).successful ? m2.delimiter = r3.bestDelimiter : (a2 = true, m2.delimiter = v.DefaultDelimiter), p2.meta.delimiter = m2.delimiter), b(m2));
          return m2.preview && m2.header && r3.preview++, n2 = e2, s2 = new E(r3), p2 = s2.parse(n2, t2, i3), g2(), l2 ? { meta: { paused: true } } : p2 || { meta: { paused: false } };
        }, this.paused = function() {
          return l2;
        }, this.pause = function() {
          l2 = true, s2.abort(), n2 = U(m2.chunk) ? "" : n2.substring(s2.getCharIndex());
        }, this.resume = function() {
          i2.streamer._halted ? (l2 = false, i2.streamer.parseChunk(n2, true)) : setTimeout(i2.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, s2.abort(), p2.meta.aborted = true, U(m2.complete) && m2.complete(p2), n2 = "";
        }, this.guessLineEndings = function(e2, t2) {
          e2 = e2.substring(0, 1048576);
          var t2 = new RegExp(P(t2) + "([^]*?)" + P(t2), "gm"), i3 = (e2 = e2.replace(t2, "")).split("\r"), t2 = e2.split("\n"), e2 = 1 < t2.length && t2[0].length < i3[0].length;
          if (1 === i3.length || e2) return "\n";
          for (var r3 = 0, n3 = 0; n3 < i3.length; n3++) "\n" === i3[n3][0] && r3++;
          return r3 >= i3.length / 2 ? "\r\n" : "\r";
        };
      }
      __name(i, "i");
      function P(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      __name(P, "P");
      function E(C) {
        var S = (C = C || {}).delimiter, O = C.newline, x = C.comments, I = C.step, A = C.preview, T = C.fastMode, D = null, L = false, F = null == C.quoteChar ? '"' : C.quoteChar, j = F;
        if (void 0 !== C.escapeChar && (j = C.escapeChar), ("string" != typeof S || -1 < v.BAD_DELIMITERS.indexOf(S)) && (S = ","), x === S) throw new Error("Comment character same as delimiter");
        true === x ? x = "#" : ("string" != typeof x || -1 < v.BAD_DELIMITERS.indexOf(x)) && (x = false), "\n" !== O && "\r" !== O && "\r\n" !== O && (O = "\n");
        var z = 0, M = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2) throw new Error("Input must be a string");
          var n2 = i2.length, e = S.length, s2 = O.length, a2 = x.length, o2 = U(I), h2 = [], u2 = [], d2 = [], f2 = z = 0;
          if (!i2) return w();
          if (T || false !== T && -1 === i2.indexOf(F)) {
            for (var l2 = i2.split(O), c2 = 0; c2 < l2.length; c2++) {
              if (d2 = l2[c2], z += d2.length, c2 !== l2.length - 1) z += O.length;
              else if (r2) return w();
              if (!x || d2.substring(0, a2) !== x) {
                if (o2) {
                  if (h2 = [], k(d2.split(S)), R(), M) return w();
                } else k(d2.split(S));
                if (A && A <= c2) return h2 = h2.slice(0, A), w(true);
              }
            }
            return w();
          }
          for (var p2 = i2.indexOf(S, z), g2 = i2.indexOf(O, z), _2 = new RegExp(P(j) + P(F), "g"), m2 = i2.indexOf(F, z); ; ) if (i2[z] === F) for (m2 = z, z++; ; ) {
            if (-1 === (m2 = i2.indexOf(F, m2 + 1))) return r2 || u2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: h2.length, index: z }), E2();
            if (m2 === n2 - 1) return E2(i2.substring(z, m2).replace(_2, F));
            if (F === j && i2[m2 + 1] === j) m2++;
            else if (F === j || 0 === m2 || i2[m2 - 1] !== j) {
              -1 !== p2 && p2 < m2 + 1 && (p2 = i2.indexOf(S, m2 + 1));
              var y2 = v2(-1 === (g2 = -1 !== g2 && g2 < m2 + 1 ? i2.indexOf(O, m2 + 1) : g2) ? p2 : Math.min(p2, g2));
              if (i2.substr(m2 + 1 + y2, e) === S) {
                d2.push(i2.substring(z, m2).replace(_2, F)), i2[z = m2 + 1 + y2 + e] !== F && (m2 = i2.indexOf(F, z)), p2 = i2.indexOf(S, z), g2 = i2.indexOf(O, z);
                break;
              }
              y2 = v2(g2);
              if (i2.substring(m2 + 1 + y2, m2 + 1 + y2 + s2) === O) {
                if (d2.push(i2.substring(z, m2).replace(_2, F)), b2(m2 + 1 + y2 + s2), p2 = i2.indexOf(S, z), m2 = i2.indexOf(F, z), o2 && (R(), M)) return w();
                if (A && h2.length >= A) return w(true);
                break;
              }
              u2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: h2.length, index: z }), m2++;
            }
          }
          else if (x && 0 === d2.length && i2.substring(z, z + a2) === x) {
            if (-1 === g2) return w();
            z = g2 + s2, g2 = i2.indexOf(O, z), p2 = i2.indexOf(S, z);
          } else if (-1 !== p2 && (p2 < g2 || -1 === g2)) d2.push(i2.substring(z, p2)), z = p2 + e, p2 = i2.indexOf(S, z);
          else {
            if (-1 === g2) break;
            if (d2.push(i2.substring(z, g2)), b2(g2 + s2), o2 && (R(), M)) return w();
            if (A && h2.length >= A) return w(true);
          }
          return E2();
          function k(e2) {
            h2.push(e2), f2 = z;
          }
          __name(k, "k");
          function v2(e2) {
            var t2 = 0;
            return t2 = -1 !== e2 && (e2 = i2.substring(m2 + 1, e2)) && "" === e2.trim() ? e2.length : t2;
          }
          __name(v2, "v");
          function E2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(z)), d2.push(e2), z = n2, k(d2), o2 && R()), w();
          }
          __name(E2, "E");
          function b2(e2) {
            z = e2, k(d2), d2 = [], g2 = i2.indexOf(O, z);
          }
          __name(b2, "b");
          function w(e2) {
            if (C.header && !t && h2.length && !L) {
              var s3 = h2[0], a3 = /* @__PURE__ */ Object.create(null), o3 = new Set(s3);
              let n3 = false;
              for (let r3 = 0; r3 < s3.length; r3++) {
                let i3 = s3[r3];
                if (a3[i3 = U(C.transformHeader) ? C.transformHeader(i3, r3) : i3]) {
                  let e3, t2 = a3[i3];
                  for (; e3 = i3 + "_" + t2, t2++, o3.has(e3); ) ;
                  o3.add(e3), s3[r3] = e3, a3[i3]++, n3 = true, (D = null === D ? {} : D)[e3] = i3;
                } else a3[i3] = 1, s3[r3] = i3;
                o3.add(i3);
              }
              n3 && console.warn("Duplicate headers found and renamed."), L = true;
            }
            return { data: h2, errors: u2, meta: { delimiter: S, linebreak: O, aborted: M, truncated: !!e2, cursor: f2 + (t || 0), renamedHeaders: D } };
          }
          __name(w, "w");
          function R() {
            I(w()), h2 = [], u2 = [];
          }
          __name(R, "R");
        }, this.abort = function() {
          M = true;
        }, this.getCharIndex = function() {
          return z;
        };
      }
      __name(E, "E");
      function g(e) {
        var t = e.data, i2 = o[t.workerId], r2 = false;
        if (t.error) i2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: /* @__PURE__ */ __name(function() {
            r2 = true, _(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, "abort"), pause: m, resume: m };
          if (U(i2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (i2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !r2); s2++) ;
            delete t.results;
          } else U(i2.userChunk) && (i2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !r2 && _(t.workerId, t.results);
      }
      __name(g, "g");
      function _(e, t) {
        var i2 = o[e];
        U(i2.userComplete) && i2.userComplete(t), i2.terminate(), delete o[e];
      }
      __name(_, "_");
      function m() {
        throw new Error("Not implemented.");
      }
      __name(m, "m");
      function b(e) {
        if ("object" != typeof e || null === e) return e;
        var t, i2 = Array.isArray(e) ? [] : {};
        for (t in e) i2[t] = b(e[t]);
        return i2;
      }
      __name(b, "b");
      function y(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      __name(y, "y");
      function U(e) {
        return "function" == typeof e;
      }
      __name(U, "U");
      return v.parse = function(e, t) {
        var i2 = (t = t || {}).dynamicTyping || false;
        U(i2) && (t.dynamicTypingFunction = i2, i2 = {});
        if (t.dynamicTyping = i2, t.transform = !!U(t.transform) && t.transform, !t.worker || !v.WORKERS_SUPPORTED) return i2 = null, v.NODE_STREAM_INPUT, "string" == typeof e ? (e = ((e2) => 65279 !== e2.charCodeAt(0) ? e2 : e2.slice(1))(e), i2 = new (t.download ? f : c)(t)) : true === e.readable && U(e.read) && U(e.on) ? i2 = new p(t) : (n.File && e instanceof File || e instanceof Object) && (i2 = new l(t)), i2.stream(e);
        (i2 = (() => {
          var e2;
          return !!v.WORKERS_SUPPORTED && (e2 = (() => {
            var e3 = n.URL || n.webkitURL || null, t2 = r.toString();
            return v.BLOB_URL || (v.BLOB_URL = e3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", t2, ")();"], { type: "text/javascript" })));
          })(), (e2 = new n.Worker(e2)).onmessage = g, e2.id = h++, o[e2.id] = e2);
        })()).userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, i2.postMessage({ input: e, config: t, workerId: i2.id });
      }, v.unparse = function(e, t) {
        var n2 = false, _2 = true, m2 = ",", y2 = "\r\n", s2 = '"', a2 = s2 + s2, i2 = false, r2 = null, o2 = false, h2 = ((() => {
          if ("object" == typeof t) {
            if ("string" != typeof t.delimiter || v.BAD_DELIMITERS.filter(function(e2) {
              return -1 !== t.delimiter.indexOf(e2);
            }).length || (m2 = t.delimiter), "boolean" != typeof t.quotes && "function" != typeof t.quotes && !Array.isArray(t.quotes) || (n2 = t.quotes), "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i2 = t.skipEmptyLines), "string" == typeof t.newline && (y2 = t.newline), "string" == typeof t.quoteChar && (s2 = t.quoteChar), "boolean" == typeof t.header && (_2 = t.header), Array.isArray(t.columns)) {
              if (0 === t.columns.length) throw new Error("Option columns is empty");
              r2 = t.columns;
            }
            void 0 !== t.escapeChar && (a2 = t.escapeChar + s2), t.escapeFormulae instanceof RegExp ? o2 = t.escapeFormulae : "boolean" == typeof t.escapeFormulae && t.escapeFormulae && (o2 = /^[=+\-@\t\r].*$/);
          }
        })(), new RegExp(P(s2), "g"));
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0])) return u2(null, e, i2);
          if ("object" == typeof e[0]) return u2(r2 || Object.keys(e[0]), e, i2);
        } else if ("object" == typeof e) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), u2(e.fields || [], e.data || [], i2);
        throw new Error("Unable to serialize unrecognized input");
        function u2(e2, t2, i3) {
          var r3 = "", n3 = ("string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2)), Array.isArray(e2) && 0 < e2.length), s3 = !Array.isArray(t2[0]);
          if (n3 && _2) {
            for (var a3 = 0; a3 < e2.length; a3++) 0 < a3 && (r3 += m2), r3 += k(e2[a3], a3);
            0 < t2.length && (r3 += y2);
          }
          for (var o3 = 0; o3 < t2.length; o3++) {
            var h3 = (n3 ? e2 : t2[o3]).length, u3 = false, d2 = n3 ? 0 === Object.keys(t2[o3]).length : 0 === t2[o3].length;
            if (i3 && !n3 && (u3 = "greedy" === i3 ? "" === t2[o3].join("").trim() : 1 === t2[o3].length && 0 === t2[o3][0].length), "greedy" === i3 && n3) {
              for (var f2 = [], l2 = 0; l2 < h3; l2++) {
                var c2 = s3 ? e2[l2] : l2;
                f2.push(t2[o3][c2]);
              }
              u3 = "" === f2.join("").trim();
            }
            if (!u3) {
              for (var p2 = 0; p2 < h3; p2++) {
                0 < p2 && !d2 && (r3 += m2);
                var g2 = n3 && s3 ? e2[p2] : p2;
                r3 += k(t2[o3][g2], p2);
              }
              o3 < t2.length - 1 && (!i3 || 0 < h3 && !d2) && (r3 += y2);
            }
          }
          return r3;
        }
        __name(u2, "u");
        function k(e2, t2) {
          var i3, r3;
          return null == e2 ? "" : e2.constructor === Date ? JSON.stringify(e2).slice(1, 25) : (r3 = false, o2 && "string" == typeof e2 && o2.test(e2) && (e2 = "'" + e2, r3 = true), i3 = e2.toString().replace(h2, a2), (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || ((e3, t3) => {
            for (var i4 = 0; i4 < t3.length; i4++) if (-1 < e3.indexOf(t3[i4])) return true;
            return false;
          })(i3, v.BAD_DELIMITERS) || -1 < i3.indexOf(m2) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3);
        }
        __name(k, "k");
      }, v.RECORD_SEP = String.fromCharCode(30), v.UNIT_SEP = String.fromCharCode(31), v.BYTE_ORDER_MARK = "\uFEFF", v.BAD_DELIMITERS = ["\r", "\n", '"', v.BYTE_ORDER_MARK], v.WORKERS_SUPPORTED = !s && !!n.Worker, v.NODE_STREAM_INPUT = 1, v.LocalChunkSize = 10485760, v.RemoteChunkSize = 5242880, v.DefaultDelimiter = ",", v.Parser = E, v.ParserHandle = i, v.NetworkStreamer = f, v.FileStreamer = l, v.StringStreamer = c, v.ReadableStreamStreamer = p, n.jQuery && ((d = n.jQuery).fn.parse = function(o2) {
        var i2 = o2.config || {}, h2 = [];
        return this.each(function(e2) {
          if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && n.FileReader) || !this.files || 0 === this.files.length) return true;
          for (var t = 0; t < this.files.length; t++) h2.push({ file: this.files[t], inputElem: this, instanceConfig: d.extend({}, i2) });
        }), e(), this;
        function e() {
          if (0 === h2.length) U(o2.complete) && o2.complete();
          else {
            var e2, t, i3, r2, n2 = h2[0];
            if (U(o2.before)) {
              var s2 = o2.before(n2.file, n2.inputElem);
              if ("object" == typeof s2) {
                if ("abort" === s2.action) return e2 = "AbortError", t = n2.file, i3 = n2.inputElem, r2 = s2.reason, void (U(o2.error) && o2.error({ name: e2 }, t, i3, r2));
                if ("skip" === s2.action) return void u2();
                "object" == typeof s2.config && (n2.instanceConfig = d.extend(n2.instanceConfig, s2.config));
              } else if ("skip" === s2) return void u2();
            }
            var a2 = n2.instanceConfig.complete;
            n2.instanceConfig.complete = function(e3) {
              U(a2) && a2(e3, n2.file, n2.inputElem), u2();
            }, v.parse(n2.file, n2.instanceConfig);
          }
        }
        __name(e, "e");
        function u2() {
          h2.splice(0, 1), e();
        }
        __name(u2, "u");
      }), a && (n.onmessage = function(e) {
        e = e.data;
        void 0 === v.WORKER_ID && e && (v.WORKER_ID = e.workerId);
        "string" == typeof e.input ? n.postMessage({ workerId: v.WORKER_ID, results: v.parse(e.input, e.config), finished: true }) : (n.File && e.input instanceof File || e.input instanceof Object) && (e = v.parse(e.input, e.config)) && n.postMessage({ workerId: v.WORKER_ID, results: e, finished: true });
      }), (f.prototype = Object.create(u.prototype)).constructor = f, (l.prototype = Object.create(u.prototype)).constructor = l, (c.prototype = Object.create(c.prototype)).constructor = c, (p.prototype = Object.create(u.prototype)).constructor = p, v;
    }, "r"));
  }
});

// .wrangler/tmp/bundle-qxbDQe/middleware-loader.entry.ts
init_checked_fetch();
init_modules_watch_stub();

// .wrangler/tmp/bundle-qxbDQe/middleware-insertion-facade.js
init_checked_fetch();
init_modules_watch_stub();

// src/worker.ts
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/index.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/hono.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/hono-base.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/compose.js
init_checked_fetch();
init_modules_watch_stub();
var compose = /* @__PURE__ */ __name((middleware, onError, onNotFound) => {
  return (context, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i) {
      if (i <= index) {
        throw new Error("next() called multiple times");
      }
      index = i;
      let res;
      let isError = false;
      let handler;
      if (middleware[i]) {
        handler = middleware[i][0][0];
        context.req.routeIndex = i;
      } else {
        handler = i === middleware.length && next || void 0;
      }
      if (handler) {
        try {
          res = await handler(context, () => dispatch(i + 1));
        } catch (err) {
          if (err instanceof Error && onError) {
            context.error = err;
            res = await onError(err, context);
            isError = true;
          } else {
            throw err;
          }
        }
      } else {
        if (context.finalized === false && onNotFound) {
          res = await onNotFound(context);
        }
      }
      if (res && (context.finalized === false || isError)) {
        context.res = res;
      }
      return context;
    }
    __name(dispatch, "dispatch");
  };
}, "compose");

// node_modules/hono/dist/context.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/request.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/http-exception.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/request/constants.js
init_checked_fetch();
init_modules_watch_stub();
var GET_MATCH_RESULT = Symbol();

// node_modules/hono/dist/utils/body.js
init_checked_fetch();
init_modules_watch_stub();
var parseBody = /* @__PURE__ */ __name(async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all = false, dot: dot2 = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all, dot: dot2 });
  }
  return {};
}, "parseBody");
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
__name(parseFormData, "parseFormData");
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value;
    } else {
      handleParsingAllValues(form, key, value);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value);
        delete form[key];
      }
    });
  }
  return form;
}
__name(convertFormDataToBodyData, "convertFormDataToBodyData");
var handleParsingAllValues = /* @__PURE__ */ __name((form, key, value) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value);
    } else {
      form[key] = [form[key], value];
    }
  } else {
    if (!key.endsWith("[]")) {
      form[key] = value;
    } else {
      form[key] = [value];
    }
  }
}, "handleParsingAllValues");
var handleParsingNestedValues = /* @__PURE__ */ __name((form, key, value) => {
  let nestedForm = form;
  const keys2 = key.split(".");
  keys2.forEach((key2, index) => {
    if (index === keys2.length - 1) {
      nestedForm[key2] = value;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
}, "handleParsingNestedValues");

// node_modules/hono/dist/utils/url.js
init_checked_fetch();
init_modules_watch_stub();
var splitPath = /* @__PURE__ */ __name((path3) => {
  const paths = path3.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
}, "splitPath");
var splitRoutingPath = /* @__PURE__ */ __name((routePath) => {
  const { groups, path: path3 } = extractGroupsFromPath(routePath);
  const paths = splitPath(path3);
  return replaceGroupMarks(paths, groups);
}, "splitRoutingPath");
var extractGroupsFromPath = /* @__PURE__ */ __name((path3) => {
  const groups = [];
  path3 = path3.replace(/\{[^}]+\}/g, (match2, index) => {
    const mark = `@${index}`;
    groups.push([mark, match2]);
    return mark;
  });
  return { groups, path: path3 };
}, "extractGroupsFromPath");
var replaceGroupMarks = /* @__PURE__ */ __name((paths, groups) => {
  for (let i = groups.length - 1; i >= 0; i--) {
    const [mark] = groups[i];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].includes(mark)) {
        paths[j] = paths[j].replace(mark, groups[i][1]);
        break;
      }
    }
  }
  return paths;
}, "replaceGroupMarks");
var patternCache = {};
var getPattern = /* @__PURE__ */ __name((label, next) => {
  if (label === "*") {
    return "*";
  }
  const match2 = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match2) {
    const cacheKey = `${label}#${next}`;
    if (!patternCache[cacheKey]) {
      if (match2[2]) {
        patternCache[cacheKey] = next && next[0] !== ":" && next[0] !== "*" ? [cacheKey, match2[1], new RegExp(`^${match2[2]}(?=/${next})`)] : [label, match2[1], new RegExp(`^${match2[2]}$`)];
      } else {
        patternCache[cacheKey] = [label, match2[1], true];
      }
    }
    return patternCache[cacheKey];
  }
  return null;
}, "getPattern");
var tryDecode = /* @__PURE__ */ __name((str, decoder) => {
  try {
    return decoder(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match2) => {
      try {
        return decoder(match2);
      } catch {
        return match2;
      }
    });
  }
}, "tryDecode");
var tryDecodeURI = /* @__PURE__ */ __name((str) => tryDecode(str, decodeURI), "tryDecodeURI");
var getPath = /* @__PURE__ */ __name((request) => {
  const url2 = request.url;
  const start = url2.indexOf("/", url2.indexOf(":") + 4);
  let i = start;
  for (; i < url2.length; i++) {
    const charCode = url2.charCodeAt(i);
    if (charCode === 37) {
      const queryIndex = url2.indexOf("?", i);
      const path3 = url2.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path3.includes("%25") ? path3.replace(/%25/g, "%2525") : path3);
    } else if (charCode === 63) {
      break;
    }
  }
  return url2.slice(start, i);
}, "getPath");
var getPathNoStrict = /* @__PURE__ */ __name((request) => {
  const result = getPath(request);
  return result.length > 1 && result.at(-1) === "/" ? result.slice(0, -1) : result;
}, "getPathNoStrict");
var mergePath = /* @__PURE__ */ __name((base, sub, ...rest) => {
  if (rest.length) {
    sub = mergePath(sub, ...rest);
  }
  return `${base?.[0] === "/" ? "" : "/"}${base}${sub === "/" ? "" : `${base?.at(-1) === "/" ? "" : "/"}${sub?.[0] === "/" ? sub.slice(1) : sub}`}`;
}, "mergePath");
var checkOptionalParameter = /* @__PURE__ */ __name((path3) => {
  if (path3.charCodeAt(path3.length - 1) !== 63 || !path3.includes(":")) {
    return null;
  }
  const segments = path3.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v, i, a) => a.indexOf(v) === i);
}, "checkOptionalParameter");
var _decodeURI = /* @__PURE__ */ __name((value) => {
  if (!/[%+]/.test(value)) {
    return value;
  }
  if (value.indexOf("+") !== -1) {
    value = value.replace(/\+/g, " ");
  }
  return value.indexOf("%") !== -1 ? tryDecode(value, decodeURIComponent_) : value;
}, "_decodeURI");
var _getQueryParam = /* @__PURE__ */ __name((url2, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url2.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url2.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url2.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url2.indexOf("&", valueIndex);
        return _decodeURI(url2.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url2.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url2);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url2);
  let keyIndex = url2.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url2.indexOf("&", keyIndex + 1);
    let valueIndex = url2.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name2 = url2.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name2 = _decodeURI(name2);
    }
    keyIndex = nextKeyIndex;
    if (name2 === "") {
      continue;
    }
    let value;
    if (valueIndex === -1) {
      value = "";
    } else {
      value = url2.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value = _decodeURI(value);
      }
    }
    if (multiple) {
      if (!(results[name2] && Array.isArray(results[name2]))) {
        results[name2] = [];
      }
      ;
      results[name2].push(value);
    } else {
      results[name2] ??= value;
    }
  }
  return key ? results[key] : results;
}, "_getQueryParam");
var getQueryParam = _getQueryParam;
var getQueryParams = /* @__PURE__ */ __name((url2, key) => {
  return _getQueryParam(url2, key, true);
}, "getQueryParams");
var decodeURIComponent_ = decodeURIComponent;

// node_modules/hono/dist/request.js
var tryDecodeURIComponent = /* @__PURE__ */ __name((str) => tryDecode(str, decodeURIComponent_), "tryDecodeURIComponent");
var HonoRequest = class {
  static {
    __name(this, "HonoRequest");
  }
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path3 = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path3;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();
  }
  #getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.#getParamValue(paramKey);
    return param && /\%/.test(param) ? tryDecodeURIComponent(param) : param;
  }
  #getAllDecodedParams() {
    const decoded = {};
    const keys2 = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys2) {
      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value !== void 0) {
        decoded[key] = /\%/.test(value) ? tryDecodeURIComponent(value) : value;
      }
    }
    return decoded;
  }
  #getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name2) {
    if (name2) {
      return this.raw.headers.get(name2) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value, key) => {
      headerData[key] = value;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  #cachedBody = /* @__PURE__ */ __name((key) => {
    const { bodyCache, raw: raw2 } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw2[key]();
  }, "#cachedBody");
  json() {
    return this.#cachedBody("text").then((text2) => JSON.parse(text2));
  }
  text() {
    return this.#cachedBody("text");
  }
  arrayBuffer() {
    return this.#cachedBody("arrayBuffer");
  }
  blob() {
    return this.#cachedBody("blob");
  }
  formData() {
    return this.#cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get [GET_MATCH_RESULT]() {
    return this.#matchResult;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
};

// node_modules/hono/dist/utils/html.js
init_checked_fetch();
init_modules_watch_stub();
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = /* @__PURE__ */ __name((value, callbacks) => {
  const escapedString = new String(value);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
}, "raw");
var resolveCallback = /* @__PURE__ */ __name(async (str, phase, preserveCallbacks, context, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
}, "resolveCallback");

// node_modules/hono/dist/context.js
var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setDefaultContentType = /* @__PURE__ */ __name((contentType, headers) => {
  return {
    "Content-Type": contentType,
    ...headers
  };
}, "setDefaultContentType");
var Context = class {
  static {
    __name(this, "Context");
  }
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status;
  #executionCtx;
  #res;
  #layout;
  #renderer;
  #notFoundHandler;
  #preparedHeaders;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    return this.#res ||= new Response(null, {
      headers: this.#preparedHeaders ??= new Headers()
    });
  }
  set res(_res) {
    if (this.#res && _res) {
      _res = new Response(_res.body, _res);
      for (const [k, v] of this.#res.headers.entries()) {
        if (k === "content-type") {
          continue;
        }
        if (k === "set-cookie") {
          const cookies = this.#res.headers.getSetCookie();
          _res.headers.delete("set-cookie");
          for (const cookie of cookies) {
            _res.headers.append("set-cookie", cookie);
          }
        } else {
          _res.headers.set(k, v);
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = /* @__PURE__ */ __name((...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  }, "render");
  setLayout = /* @__PURE__ */ __name((layout) => this.#layout = layout, "setLayout");
  getLayout = /* @__PURE__ */ __name(() => this.#layout, "getLayout");
  setRenderer = /* @__PURE__ */ __name((renderer) => {
    this.#renderer = renderer;
  }, "setRenderer");
  header = /* @__PURE__ */ __name((name2, value, options) => {
    if (this.finalized) {
      this.#res = new Response(this.#res.body, this.#res);
    }
    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();
    if (value === void 0) {
      headers.delete(name2);
    } else if (options?.append) {
      headers.append(name2, value);
    } else {
      headers.set(name2, value);
    }
  }, "header");
  status = /* @__PURE__ */ __name((status) => {
    this.#status = status;
  }, "status");
  set = /* @__PURE__ */ __name((key, value) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value);
  }, "set");
  get = /* @__PURE__ */ __name((key) => {
    return this.#var ? this.#var.get(key) : void 0;
  }, "get");
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  #newResponse(data, arg, headers) {
    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();
    if (typeof arg === "object" && "headers" in arg) {
      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);
      for (const [key, value] of argHeaders) {
        if (key.toLowerCase() === "set-cookie") {
          responseHeaders.append(key, value);
        } else {
          responseHeaders.set(key, value);
        }
      }
    }
    if (headers) {
      for (const [k, v] of Object.entries(headers)) {
        if (typeof v === "string") {
          responseHeaders.set(k, v);
        } else {
          responseHeaders.delete(k);
          for (const v2 of v) {
            responseHeaders.append(k, v2);
          }
        }
      }
    }
    const status = typeof arg === "number" ? arg : arg?.status ?? this.#status;
    return new Response(data, { status, headers: responseHeaders });
  }
  newResponse = /* @__PURE__ */ __name((...args) => this.#newResponse(...args), "newResponse");
  body = /* @__PURE__ */ __name((data, arg, headers) => this.#newResponse(data, arg, headers), "body");
  text = /* @__PURE__ */ __name((text2, arg, headers) => {
    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text2) : this.#newResponse(
      text2,
      arg,
      setDefaultContentType(TEXT_PLAIN, headers)
    );
  }, "text");
  json = /* @__PURE__ */ __name((object, arg, headers) => {
    return this.#newResponse(
      JSON.stringify(object),
      arg,
      setDefaultContentType("application/json", headers)
    );
  }, "json");
  html = /* @__PURE__ */ __name((html, arg, headers) => {
    const res = /* @__PURE__ */ __name((html2) => this.#newResponse(html2, arg, setDefaultContentType("text/html; charset=UTF-8", headers)), "res");
    return typeof html === "object" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);
  }, "html");
  redirect = /* @__PURE__ */ __name((location, status) => {
    const locationString = String(location);
    this.header(
      "Location",
      !/[^\x00-\xFF]/.test(locationString) ? locationString : encodeURI(locationString)
    );
    return this.newResponse(null, status ?? 302);
  }, "redirect");
  notFound = /* @__PURE__ */ __name(() => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  }, "notFound");
};

// node_modules/hono/dist/router.js
init_checked_fetch();
init_modules_watch_stub();
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = class extends Error {
  static {
    __name(this, "UnsupportedPathError");
  }
};

// node_modules/hono/dist/utils/constants.js
init_checked_fetch();
init_modules_watch_stub();
var COMPOSED_HANDLER = "__COMPOSED_HANDLER";

// node_modules/hono/dist/hono-base.js
var notFoundHandler = /* @__PURE__ */ __name((c) => {
  return c.text("404 Not Found", 404);
}, "notFoundHandler");
var errorHandler = /* @__PURE__ */ __name((err, c) => {
  if ("getResponse" in err) {
    const res = err.getResponse();
    return c.newResponse(res.body, res);
  }
  console.error(err);
  return c.text("Internal Server Error", 500);
}, "errorHandler");
var Hono = class {
  static {
    __name(this, "Hono");
  }
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.#addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          this.#addRoute(method, this.#path, handler);
        });
        return this;
      };
    });
    this.on = (method, path3, ...handlers) => {
      for (const p of [path3].flat()) {
        this.#path = p;
        for (const m of [method].flat()) {
          handlers.map((handler) => {
            this.#addRoute(m.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const { strict, ...optionsWithoutStrict } = options;
    Object.assign(this, optionsWithoutStrict);
    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;
  }
  #clone() {
    const clone = new Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.errorHandler = this.errorHandler;
    clone.#notFoundHandler = this.#notFoundHandler;
    clone.routes = this.routes;
    return clone;
  }
  #notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path3, app2) {
    const subApp = this.basePath(path3);
    app2.routes.map((r) => {
      let handler;
      if (app2.errorHandler === errorHandler) {
        handler = r.handler;
      } else {
        handler = /* @__PURE__ */ __name(async (c, next) => (await compose([], app2.errorHandler)(c, () => r.handler(c, next))).res, "handler");
        handler[COMPOSED_HANDLER] = r.handler;
      }
      subApp.#addRoute(r.method, r.path, handler);
    });
    return this;
  }
  basePath(path3) {
    const subApp = this.#clone();
    subApp._basePath = mergePath(this._basePath, path3);
    return subApp;
  }
  onError = /* @__PURE__ */ __name((handler) => {
    this.errorHandler = handler;
    return this;
  }, "onError");
  notFound = /* @__PURE__ */ __name((handler) => {
    this.#notFoundHandler = handler;
    return this;
  }, "notFound");
  mount(path3, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        if (options.replaceRequest === false) {
          replaceRequest = /* @__PURE__ */ __name((request) => request, "replaceRequest");
        } else {
          replaceRequest = options.replaceRequest;
        }
      }
    }
    const getOptions = optionHandler ? (c) => {
      const options2 = optionHandler(c);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c) => {
      let executionContext = void 0;
      try {
        executionContext = c.executionCtx;
      } catch {
      }
      return [c.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path3);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url2 = new URL(request.url);
        url2.pathname = url2.pathname.slice(pathPrefixLength) || "/";
        return new Request(url2, request);
      };
    })();
    const handler = /* @__PURE__ */ __name(async (c, next) => {
      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));
      if (res) {
        return res;
      }
      await next();
    }, "handler");
    this.#addRoute(METHOD_NAME_ALL, mergePath(path3, "*"), handler);
    return this;
  }
  #addRoute(method, path3, handler) {
    method = method.toUpperCase();
    path3 = mergePath(this._basePath, path3);
    const r = { basePath: this._basePath, path: path3, method, handler };
    this.router.add(method, path3, [handler, r]);
    this.routes.push(r);
  }
  #handleError(err, c) {
    if (err instanceof Error) {
      return this.errorHandler(err, c);
    }
    throw err;
  }
  #dispatch(request, executionCtx, env3, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env3, "GET")))();
    }
    const path3 = this.getPath(request, { env: env3 });
    const matchResult = this.router.match(method, path3);
    const c = new Context(request, {
      path: path3,
      matchResult,
      env: env3,
      executionCtx,
      notFoundHandler: this.#notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c, async () => {
          c.res = await this.#notFoundHandler(c);
        });
      } catch (err) {
        return this.#handleError(err, c);
      }
      return res instanceof Promise ? res.then(
        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))
      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);
    return (async () => {
      try {
        const context = await composed(c);
        if (!context.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context.res;
      } catch (err) {
        return this.#handleError(err, c);
      }
    })();
  }
  fetch = /* @__PURE__ */ __name((request, ...rest) => {
    return this.#dispatch(request, rest[1], rest[0], request.method);
  }, "fetch");
  request = /* @__PURE__ */ __name((input, requestInit, Env, executionCtx) => {
    if (input instanceof Request) {
      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);
    }
    input = input.toString();
    return this.fetch(
      new Request(
        /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`,
        requestInit
      ),
      Env,
      executionCtx
    );
  }, "request");
  fire = /* @__PURE__ */ __name(() => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));
    });
  }, "fire");
};

// node_modules/hono/dist/router/reg-exp-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/reg-exp-router/router.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/reg-exp-router/matcher.js
init_checked_fetch();
init_modules_watch_stub();
var emptyParam = [];
function match(method, path3) {
  const matchers = this.buildAllMatchers();
  const match2 = /* @__PURE__ */ __name((method2, path22) => {
    const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
    const staticMatch = matcher[2][path22];
    if (staticMatch) {
      return staticMatch;
    }
    const match3 = path22.match(matcher[0]);
    if (!match3) {
      return [[], emptyParam];
    }
    const index = match3.indexOf("", 1);
    return [matcher[1][index], match3];
  }, "match2");
  this.match = match2;
  return match2(method, path3);
}
__name(match, "match");

// node_modules/hono/dist/router/reg-exp-router/node.js
init_checked_fetch();
init_modules_watch_stub();
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a, b) {
  if (a.length === 1) {
    return b.length === 1 ? a < b ? -1 : 1 : -1;
  }
  if (b.length === 1) {
    return 1;
  }
  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;
}
__name(compareKey, "compareKey");
var Node = class {
  static {
    __name(this, "Node");
  }
  #index;
  #varIndex;
  #children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.#index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.#index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name2 = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name2 && pattern[2]) {
        if (regexpStr === ".*") {
          throw PATH_ERROR;
        }
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.#children[regexpStr];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[regexpStr] = new Node();
        if (name2 !== "") {
          node.#varIndex = context.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name2 !== "") {
        paramMap.push([name2, node.#varIndex]);
      }
    } else {
      node = this.#children[token];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.#children).sort(compareKey);
    const strList = childKeys.map((k) => {
      const c = this.#children[k];
      return (typeof c.#varIndex === "number" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\${k}` : k) + c.buildRegExpStr();
    });
    if (typeof this.#index === "number") {
      strList.unshift(`#${this.#index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
};

// node_modules/hono/dist/router/reg-exp-router/trie.js
init_checked_fetch();
init_modules_watch_stub();
var Trie = class {
  static {
    __name(this, "Trie");
  }
  #context = { varIndex: 0 };
  #root = new Node();
  insert(path3, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i = 0; ; ) {
      let replaced = false;
      path3 = path3.replace(/\{[^}]+\}/g, (m) => {
        const mark = `@\\${i}`;
        groups[i] = [mark, m];
        i++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path3.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i = groups.length - 1; i >= 0; i--) {
      const [mark] = groups[i];
      for (let j = tokens.length - 1; j >= 0; j--) {
        if (tokens[j].indexOf(mark) !== -1) {
          tokens[j] = tokens[j].replace(mark, groups[i][1]);
          break;
        }
      }
    }
    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.#root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_, handlerIndex, paramIndex) => {
      if (handlerIndex !== void 0) {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (paramIndex !== void 0) {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
};

// node_modules/hono/dist/router/reg-exp-router/router.js
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path3) {
  return wildcardRegExpCache[path3] ??= new RegExp(
    path3 === "*" ? "" : `^${path3.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
__name(buildWildcardRegExp, "buildWildcardRegExp");
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
__name(clearWildcardRegExpCache, "clearWildcardRegExpCache");
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {
    const [pathErrorCheckOnly, path3, handlers] = routesWithStaticPathFlag[i];
    if (pathErrorCheckOnly) {
      staticMap[path3] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path3, j, pathErrorCheckOnly);
    } catch (e) {
      throw e === PATH_ERROR ? new UnsupportedPathError(path3) : e;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j] = handlers.map(([h, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value] = paramAssoc[paramCount];
        paramIndexMap[key] = value;
      }
      return [h, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i = 0, len = handlerData.length; i < len; i++) {
    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {
      const map = handlerData[i][j]?.[1];
      if (!map) {
        continue;
      }
      const keys2 = Object.keys(map);
      for (let k = 0, len3 = keys2.length; k < len3; k++) {
        map[keys2[k]] = paramReplacementMap[map[keys2[k]]];
      }
    }
  }
  const handlerMap = [];
  for (const i in indexReplacementMap) {
    handlerMap[i] = handlerData[indexReplacementMap[i]];
  }
  return [regexp, handlerMap, staticMap];
}
__name(buildMatcherFromPreprocessedRoutes, "buildMatcherFromPreprocessedRoutes");
function findMiddleware(middleware, path3) {
  if (!middleware) {
    return void 0;
  }
  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {
    if (buildWildcardRegExp(k).test(path3)) {
      return [...middleware[k]];
    }
  }
  return void 0;
}
__name(findMiddleware, "findMiddleware");
var RegExpRouter = class {
  static {
    __name(this, "RegExpRouter");
  }
  name = "RegExpRouter";
  #middleware;
  #routes;
  constructor() {
    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path3, handler) {
    const middleware = this.#middleware;
    const routes = this.#routes;
    if (!middleware || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware[method]) {
      ;
      [middleware, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {
          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];
        });
      });
    }
    if (path3 === "/*") {
      path3 = "*";
    }
    const paramCount = (path3.match(/\/:/g) || []).length;
    if (/\*$/.test(path3)) {
      const re = buildWildcardRegExp(path3);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware).forEach((m) => {
          middleware[m][path3] ||= findMiddleware(middleware[m], path3) || findMiddleware(middleware[METHOD_NAME_ALL], path3) || [];
        });
      } else {
        middleware[method][path3] ||= findMiddleware(middleware[method], path3) || findMiddleware(middleware[METHOD_NAME_ALL], path3) || [];
      }
      Object.keys(middleware).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(middleware[m]).forEach((p) => {
            re.test(p) && middleware[m][p].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(routes[m]).forEach(
            (p) => re.test(p) && routes[m][p].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path3) || [path3];
    for (let i = 0, len = paths.length; i < len; i++) {
      const path22 = paths[i];
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          routes[m][path22] ||= [
            ...findMiddleware(middleware[m], path22) || findMiddleware(middleware[METHOD_NAME_ALL], path22) || []
          ];
          routes[m][path22].push([handler, paramCount - len + i + 1]);
        }
      });
    }
  }
  match = match;
  buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {
      matchers[method] ||= this.#buildMatcher(method);
    });
    this.#middleware = this.#routes = void 0;
    clearWildcardRegExpCache();
    return matchers;
  }
  #buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.#middleware, this.#routes].forEach((r) => {
      const ownRoute = r[method] ? Object.keys(r[method]).map((path3) => [path3, r[method][path3]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r[METHOD_NAME_ALL]).map((path3) => [path3, r[METHOD_NAME_ALL][path3]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
};

// node_modules/hono/dist/router/reg-exp-router/prepared-router.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/smart-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/smart-router/router.js
init_checked_fetch();
init_modules_watch_stub();
var SmartRouter = class {
  static {
    __name(this, "SmartRouter");
  }
  name = "SmartRouter";
  #routers = [];
  #routes = [];
  constructor(init) {
    this.#routers = init.routers;
  }
  add(method, path3, handler) {
    if (!this.#routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.#routes.push([method, path3, handler]);
  }
  match(method, path3) {
    if (!this.#routes) {
      throw new Error("Fatal error");
    }
    const routers = this.#routers;
    const routes = this.#routes;
    const len = routers.length;
    let i = 0;
    let res;
    for (; i < len; i++) {
      const router = routers[i];
      try {
        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {
          router.add(...routes[i2]);
        }
        res = router.match(method, path3);
      } catch (e) {
        if (e instanceof UnsupportedPathError) {
          continue;
        }
        throw e;
      }
      this.match = router.match.bind(router);
      this.#routers = [router];
      this.#routes = void 0;
      break;
    }
    if (i === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.#routes || this.#routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.#routers[0];
  }
};

// node_modules/hono/dist/router/trie-router/index.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/trie-router/router.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/router/trie-router/node.js
init_checked_fetch();
init_modules_watch_stub();
var emptyParams = /* @__PURE__ */ Object.create(null);
var Node2 = class {
  static {
    __name(this, "Node");
  }
  #methods;
  #children;
  #patterns;
  #order = 0;
  #params = emptyParams;
  constructor(method, handler, children) {
    this.#children = children || /* @__PURE__ */ Object.create(null);
    this.#methods = [];
    if (method && handler) {
      const m = /* @__PURE__ */ Object.create(null);
      m[method] = { handler, possibleKeys: [], score: 0 };
      this.#methods = [m];
    }
    this.#patterns = [];
  }
  insert(method, path3, handler) {
    this.#order = ++this.#order;
    let curNode = this;
    const parts = splitRoutingPath(path3);
    const possibleKeys = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const p = parts[i];
      const nextP = parts[i + 1];
      const pattern = getPattern(p, nextP);
      const key = Array.isArray(pattern) ? pattern[0] : p;
      if (key in curNode.#children) {
        curNode = curNode.#children[key];
        if (pattern) {
          possibleKeys.push(pattern[1]);
        }
        continue;
      }
      curNode.#children[key] = new Node2();
      if (pattern) {
        curNode.#patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.#children[key];
    }
    curNode.#methods.push({
      [method]: {
        handler,
        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),
        score: this.#order
      }
    });
    return curNode;
  }
  #getHandlerSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i = 0, len = node.#methods.length; i < len; i++) {
      const m = node.#methods[i];
      const handlerSet = m[method] || m[METHOD_NAME_ALL];
      const processedSet = {};
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSets.push(handlerSet);
        if (nodeParams !== emptyParams || params && params !== emptyParams) {
          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {
            const key = handlerSet.possibleKeys[i2];
            const processed = processedSet[handlerSet.score];
            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];
            processedSet[handlerSet.score] = true;
          }
        }
      }
    }
    return handlerSets;
  }
  search(method, path3) {
    const handlerSets = [];
    this.#params = emptyParams;
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path3);
    const curNodesQueue = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const part = parts[i];
      const isLast = i === len - 1;
      const tempNodes = [];
      for (let j = 0, len2 = curNodes.length; j < len2; j++) {
        const node = curNodes[j];
        const nextNode = node.#children[part];
        if (nextNode) {
          nextNode.#params = node.#params;
          if (isLast) {
            if (nextNode.#children["*"]) {
              handlerSets.push(
                ...this.#getHandlerSets(nextNode.#children["*"], method, node.#params)
              );
            }
            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {
          const pattern = node.#patterns[k];
          const params = node.#params === emptyParams ? {} : { ...node.#params };
          if (pattern === "*") {
            const astNode = node.#children["*"];
            if (astNode) {
              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));
              astNode.#params = params;
              tempNodes.push(astNode);
            }
            continue;
          }
          const [key, name2, matcher] = pattern;
          if (!part && !(matcher instanceof RegExp)) {
            continue;
          }
          const child = node.#children[key];
          const restPathString = parts.slice(i).join("/");
          if (matcher instanceof RegExp) {
            const m = matcher.exec(restPathString);
            if (m) {
              params[name2] = m[0];
              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));
              if (Object.keys(child.#children).length) {
                child.#params = params;
                const componentCount = m[0].match(/\//)?.length ?? 0;
                const targetCurNodes = curNodesQueue[componentCount] ||= [];
                targetCurNodes.push(child);
              }
              continue;
            }
          }
          if (matcher === true || matcher.test(part)) {
            params[name2] = part;
            if (isLast) {
              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));
              if (child.#children["*"]) {
                handlerSets.push(
                  ...this.#getHandlerSets(child.#children["*"], method, params, node.#params)
                );
              }
            } else {
              child.#params = params;
              tempNodes.push(child);
            }
          }
        }
      }
      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);
    }
    if (handlerSets.length > 1) {
      handlerSets.sort((a, b) => {
        return a.score - b.score;
      });
    }
    return [handlerSets.map(({ handler, params }) => [handler, params])];
  }
};

// node_modules/hono/dist/router/trie-router/router.js
var TrieRouter = class {
  static {
    __name(this, "TrieRouter");
  }
  name = "TrieRouter";
  #node;
  constructor() {
    this.#node = new Node2();
  }
  add(method, path3, handler) {
    const results = checkOptionalParameter(path3);
    if (results) {
      for (let i = 0, len = results.length; i < len; i++) {
        this.#node.insert(method, results[i], handler);
      }
      return;
    }
    this.#node.insert(method, path3, handler);
  }
  match(method, path3) {
    return this.#node.search(method, path3);
  }
};

// node_modules/hono/dist/hono.js
var Hono2 = class extends Hono {
  static {
    __name(this, "Hono");
  }
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
};

// node_modules/hono/dist/middleware/cors/index.js
init_checked_fetch();
init_modules_watch_stub();
var cors = /* @__PURE__ */ __name((options) => {
  const defaults = {
    origin: "*",
    allowMethods: ["GET", "HEAD", "PUT", "POST", "DELETE", "PATCH"],
    allowHeaders: [],
    exposeHeaders: []
  };
  const opts = {
    ...defaults,
    ...options
  };
  const findAllowOrigin = ((optsOrigin) => {
    if (typeof optsOrigin === "string") {
      if (optsOrigin === "*") {
        return () => optsOrigin;
      } else {
        return (origin) => optsOrigin === origin ? origin : null;
      }
    } else if (typeof optsOrigin === "function") {
      return optsOrigin;
    } else {
      return (origin) => optsOrigin.includes(origin) ? origin : null;
    }
  })(opts.origin);
  const findAllowMethods = ((optsAllowMethods) => {
    if (typeof optsAllowMethods === "function") {
      return optsAllowMethods;
    } else if (Array.isArray(optsAllowMethods)) {
      return () => optsAllowMethods;
    } else {
      return () => [];
    }
  })(opts.allowMethods);
  return /* @__PURE__ */ __name(async function cors2(c, next) {
    function set(key, value) {
      c.res.headers.set(key, value);
    }
    __name(set, "set");
    const allowOrigin = await findAllowOrigin(c.req.header("origin") || "", c);
    if (allowOrigin) {
      set("Access-Control-Allow-Origin", allowOrigin);
    }
    if (opts.credentials) {
      set("Access-Control-Allow-Credentials", "true");
    }
    if (opts.exposeHeaders?.length) {
      set("Access-Control-Expose-Headers", opts.exposeHeaders.join(","));
    }
    if (c.req.method === "OPTIONS") {
      if (opts.origin !== "*") {
        set("Vary", "Origin");
      }
      if (opts.maxAge != null) {
        set("Access-Control-Max-Age", opts.maxAge.toString());
      }
      const allowMethods = await findAllowMethods(c.req.header("origin") || "", c);
      if (allowMethods.length) {
        set("Access-Control-Allow-Methods", allowMethods.join(","));
      }
      let headers = opts.allowHeaders;
      if (!headers?.length) {
        const requestHeaders = c.req.header("Access-Control-Request-Headers");
        if (requestHeaders) {
          headers = requestHeaders.split(/\s*,\s*/);
        }
      }
      if (headers?.length) {
        set("Access-Control-Allow-Headers", headers.join(","));
        c.res.headers.append("Vary", "Access-Control-Request-Headers");
      }
      c.res.headers.delete("Content-Length");
      c.res.headers.delete("Content-Type");
      return new Response(null, {
        headers: c.res.headers,
        status: 204,
        statusText: "No Content"
      });
    }
    await next();
    if (opts.origin !== "*") {
      c.header("Vary", "Origin", { append: true });
    }
  }, "cors2");
}, "cors");

// node_modules/hono/dist/middleware/logger/index.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/hono/dist/utils/color.js
init_checked_fetch();
init_modules_watch_stub();
function getColorEnabled() {
  const { process: process2, Deno: Deno2 } = globalThis;
  const isNoColor = typeof Deno2?.noColor === "boolean" ? Deno2.noColor : process2 !== void 0 ? "NO_COLOR" in process2?.env : false;
  return !isNoColor;
}
__name(getColorEnabled, "getColorEnabled");
async function getColorEnabledAsync() {
  const { navigator: navigator2 } = globalThis;
  const cfWorkers = "cloudflare:workers";
  const isNoColor = navigator2 !== void 0 && navigator2.userAgent === "Cloudflare-Workers" ? await (async () => {
    try {
      return "NO_COLOR" in ((await import(cfWorkers)).env ?? {});
    } catch {
      return false;
    }
  })() : !getColorEnabled();
  return !isNoColor;
}
__name(getColorEnabledAsync, "getColorEnabledAsync");

// node_modules/hono/dist/middleware/logger/index.js
var humanize = /* @__PURE__ */ __name((times) => {
  const [delimiter, separator] = [",", "."];
  const orderTimes = times.map((v) => v.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + delimiter));
  return orderTimes.join(separator);
}, "humanize");
var time = /* @__PURE__ */ __name((start) => {
  const delta = Date.now() - start;
  return humanize([delta < 1e3 ? delta + "ms" : Math.round(delta / 1e3) + "s"]);
}, "time");
var colorStatus = /* @__PURE__ */ __name(async (status) => {
  const colorEnabled = await getColorEnabledAsync();
  if (colorEnabled) {
    switch (status / 100 | 0) {
      case 5:
        return `\x1B[31m${status}\x1B[0m`;
      case 4:
        return `\x1B[33m${status}\x1B[0m`;
      case 3:
        return `\x1B[36m${status}\x1B[0m`;
      case 2:
        return `\x1B[32m${status}\x1B[0m`;
    }
  }
  return `${status}`;
}, "colorStatus");
async function log(fn, prefix, method, path3, status = 0, elapsed) {
  const out = prefix === "<--" ? `${prefix} ${method} ${path3}` : `${prefix} ${method} ${path3} ${await colorStatus(status)} ${elapsed}`;
  fn(out);
}
__name(log, "log");
var logger = /* @__PURE__ */ __name((fn = console.log) => {
  return /* @__PURE__ */ __name(async function logger2(c, next) {
    const { method, url: url2 } = c.req;
    const path3 = url2.slice(url2.indexOf("/", 8));
    await log(fn, "<--", method, path3);
    const start = Date.now();
    await next();
    await log(fn, "-->", method, path3, c.res.status, time(start));
  }, "logger2");
}, "logger");

// src/lib/db/client.ts
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/d1/driver.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/entity.js
init_checked_fetch();
init_modules_watch_stub();
var entityKind = Symbol.for("drizzle:entityKind");
var hasOwnEntityKind = Symbol.for("drizzle:hasOwnEntityKind");
function is(value, type) {
  if (!value || typeof value !== "object") {
    return false;
  }
  if (value instanceof type) {
    return true;
  }
  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {
    throw new Error(
      `Class "${type.name ?? "<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`
    );
  }
  let cls = Object.getPrototypeOf(value).constructor;
  if (cls) {
    while (cls) {
      if (entityKind in cls && cls[entityKind] === type[entityKind]) {
        return true;
      }
      cls = Object.getPrototypeOf(cls);
    }
  }
  return false;
}
__name(is, "is");

// node_modules/drizzle-orm/logger.js
init_checked_fetch();
init_modules_watch_stub();
var ConsoleLogWriter = class {
  static {
    __name(this, "ConsoleLogWriter");
  }
  static [entityKind] = "ConsoleLogWriter";
  write(message) {
    console.log(message);
  }
};
var DefaultLogger = class {
  static {
    __name(this, "DefaultLogger");
  }
  static [entityKind] = "DefaultLogger";
  writer;
  constructor(config) {
    this.writer = config?.writer ?? new ConsoleLogWriter();
  }
  logQuery(query, params) {
    const stringifiedParams = params.map((p) => {
      try {
        return JSON.stringify(p);
      } catch {
        return String(p);
      }
    });
    const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(", ")}]` : "";
    this.writer.write(`Query: ${query}${paramsStr}`);
  }
};
var NoopLogger = class {
  static {
    __name(this, "NoopLogger");
  }
  static [entityKind] = "NoopLogger";
  logQuery() {
  }
};

// node_modules/drizzle-orm/relations.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/table.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/table.utils.js
init_checked_fetch();
init_modules_watch_stub();
var TableName = Symbol.for("drizzle:Name");

// node_modules/drizzle-orm/table.js
var Schema = Symbol.for("drizzle:Schema");
var Columns = Symbol.for("drizzle:Columns");
var ExtraConfigColumns = Symbol.for("drizzle:ExtraConfigColumns");
var OriginalName = Symbol.for("drizzle:OriginalName");
var BaseName = Symbol.for("drizzle:BaseName");
var IsAlias = Symbol.for("drizzle:IsAlias");
var ExtraConfigBuilder = Symbol.for("drizzle:ExtraConfigBuilder");
var IsDrizzleTable = Symbol.for("drizzle:IsDrizzleTable");
var Table = class {
  static {
    __name(this, "Table");
  }
  static [entityKind] = "Table";
  /** @internal */
  static Symbol = {
    Name: TableName,
    Schema,
    OriginalName,
    Columns,
    ExtraConfigColumns,
    BaseName,
    IsAlias,
    ExtraConfigBuilder
  };
  /**
   * @internal
   * Can be changed if the table is aliased.
   */
  [TableName];
  /**
   * @internal
   * Used to store the original name of the table, before any aliasing.
   */
  [OriginalName];
  /** @internal */
  [Schema];
  /** @internal */
  [Columns];
  /** @internal */
  [ExtraConfigColumns];
  /**
   *  @internal
   * Used to store the table name before the transformation via the `tableCreator` functions.
   */
  [BaseName];
  /** @internal */
  [IsAlias] = false;
  /** @internal */
  [IsDrizzleTable] = true;
  /** @internal */
  [ExtraConfigBuilder] = void 0;
  constructor(name2, schema, baseName) {
    this[TableName] = this[OriginalName] = name2;
    this[Schema] = schema;
    this[BaseName] = baseName;
  }
};
function getTableName(table) {
  return table[TableName];
}
__name(getTableName, "getTableName");
function getTableUniqueName(table) {
  return `${table[Schema] ?? "public"}.${table[TableName]}`;
}
__name(getTableUniqueName, "getTableUniqueName");

// node_modules/drizzle-orm/column.js
init_checked_fetch();
init_modules_watch_stub();
var Column = class {
  static {
    __name(this, "Column");
  }
  constructor(table, config) {
    this.table = table;
    this.config = config;
    this.name = config.name;
    this.keyAsName = config.keyAsName;
    this.notNull = config.notNull;
    this.default = config.default;
    this.defaultFn = config.defaultFn;
    this.onUpdateFn = config.onUpdateFn;
    this.hasDefault = config.hasDefault;
    this.primary = config.primaryKey;
    this.isUnique = config.isUnique;
    this.uniqueName = config.uniqueName;
    this.uniqueType = config.uniqueType;
    this.dataType = config.dataType;
    this.columnType = config.columnType;
    this.generated = config.generated;
    this.generatedIdentity = config.generatedIdentity;
  }
  static [entityKind] = "Column";
  name;
  keyAsName;
  primary;
  notNull;
  default;
  defaultFn;
  onUpdateFn;
  hasDefault;
  isUnique;
  uniqueName;
  uniqueType;
  dataType;
  columnType;
  enumValues = void 0;
  generated = void 0;
  generatedIdentity = void 0;
  config;
  mapFromDriverValue(value) {
    return value;
  }
  mapToDriverValue(value) {
    return value;
  }
  // ** @internal */
  shouldDisableInsert() {
    return this.config.generated !== void 0 && this.config.generated.type !== "byDefault";
  }
};

// node_modules/drizzle-orm/pg-core/primary-keys.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/pg-core/table.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/utils.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sql/sql.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/pg-core/columns/enum.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/pg-core/columns/common.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/column-builder.js
init_checked_fetch();
init_modules_watch_stub();
var ColumnBuilder = class {
  static {
    __name(this, "ColumnBuilder");
  }
  static [entityKind] = "ColumnBuilder";
  config;
  constructor(name2, dataType, columnType) {
    this.config = {
      name: name2,
      keyAsName: name2 === "",
      notNull: false,
      default: void 0,
      hasDefault: false,
      primaryKey: false,
      isUnique: false,
      uniqueName: void 0,
      uniqueType: void 0,
      dataType,
      columnType,
      generated: void 0
    };
  }
  /**
   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.
   *
   * @example
   * ```ts
   * const users = pgTable('users', {
   * 	id: integer('id').$type<UserId>().primaryKey(),
   * 	details: json('details').$type<UserDetails>().notNull(),
   * });
   * ```
   */
  $type() {
    return this;
  }
  /**
   * Adds a `not null` clause to the column definition.
   *
   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.
   */
  notNull() {
    this.config.notNull = true;
    return this;
  }
  /**
   * Adds a `default <value>` clause to the column definition.
   *
   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.
   *
   * If you need to set a dynamic default value, use {@link $defaultFn} instead.
   */
  default(value) {
    this.config.default = value;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Adds a dynamic default value to the column.
   * The function will be called when the row is inserted, and the returned value will be used as the column value.
   *
   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
   */
  $defaultFn(fn) {
    this.config.defaultFn = fn;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Alias for {@link $defaultFn}.
   */
  $default = this.$defaultFn;
  /**
   * Adds a dynamic update value to the column.
   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.
   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.
   *
   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
   */
  $onUpdateFn(fn) {
    this.config.onUpdateFn = fn;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Alias for {@link $onUpdateFn}.
   */
  $onUpdate = this.$onUpdateFn;
  /**
   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.
   *
   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.
   */
  primaryKey() {
    this.config.primaryKey = true;
    this.config.notNull = true;
    return this;
  }
  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */
  setName(name2) {
    if (this.config.name !== "")
      return;
    this.config.name = name2;
  }
};

// node_modules/drizzle-orm/pg-core/foreign-keys.js
init_checked_fetch();
init_modules_watch_stub();
var ForeignKeyBuilder = class {
  static {
    __name(this, "ForeignKeyBuilder");
  }
  static [entityKind] = "PgForeignKeyBuilder";
  /** @internal */
  reference;
  /** @internal */
  _onUpdate = "no action";
  /** @internal */
  _onDelete = "no action";
  constructor(config, actions) {
    this.reference = () => {
      const { name: name2, columns, foreignColumns } = config();
      return { name: name2, columns, foreignTable: foreignColumns[0].table, foreignColumns };
    };
    if (actions) {
      this._onUpdate = actions.onUpdate;
      this._onDelete = actions.onDelete;
    }
  }
  onUpdate(action) {
    this._onUpdate = action === void 0 ? "no action" : action;
    return this;
  }
  onDelete(action) {
    this._onDelete = action === void 0 ? "no action" : action;
    return this;
  }
  /** @internal */
  build(table) {
    return new ForeignKey(table, this);
  }
};
var ForeignKey = class {
  static {
    __name(this, "ForeignKey");
  }
  constructor(table, builder) {
    this.table = table;
    this.reference = builder.reference;
    this.onUpdate = builder._onUpdate;
    this.onDelete = builder._onDelete;
  }
  static [entityKind] = "PgForeignKey";
  reference;
  onUpdate;
  onDelete;
  getName() {
    const { name: name2, columns, foreignColumns } = this.reference();
    const columnNames = columns.map((column) => column.name);
    const foreignColumnNames = foreignColumns.map((column) => column.name);
    const chunks = [
      this.table[TableName],
      ...columnNames,
      foreignColumns[0].table[TableName],
      ...foreignColumnNames
    ];
    return name2 ?? `${chunks.join("_")}_fk`;
  }
};

// node_modules/drizzle-orm/tracing-utils.js
init_checked_fetch();
init_modules_watch_stub();
function iife(fn, ...args) {
  return fn(...args);
}
__name(iife, "iife");

// node_modules/drizzle-orm/pg-core/unique-constraint.js
init_checked_fetch();
init_modules_watch_stub();
function uniqueKeyName(table, columns) {
  return `${table[TableName]}_${columns.join("_")}_unique`;
}
__name(uniqueKeyName, "uniqueKeyName");
var UniqueConstraintBuilder = class {
  static {
    __name(this, "UniqueConstraintBuilder");
  }
  constructor(columns, name2) {
    this.name = name2;
    this.columns = columns;
  }
  static [entityKind] = "PgUniqueConstraintBuilder";
  /** @internal */
  columns;
  /** @internal */
  nullsNotDistinctConfig = false;
  nullsNotDistinct() {
    this.nullsNotDistinctConfig = true;
    return this;
  }
  /** @internal */
  build(table) {
    return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);
  }
};
var UniqueOnConstraintBuilder = class {
  static {
    __name(this, "UniqueOnConstraintBuilder");
  }
  static [entityKind] = "PgUniqueOnConstraintBuilder";
  /** @internal */
  name;
  constructor(name2) {
    this.name = name2;
  }
  on(...columns) {
    return new UniqueConstraintBuilder(columns, this.name);
  }
};
var UniqueConstraint = class {
  static {
    __name(this, "UniqueConstraint");
  }
  constructor(table, columns, nullsNotDistinct, name2) {
    this.table = table;
    this.columns = columns;
    this.name = name2 ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));
    this.nullsNotDistinct = nullsNotDistinct;
  }
  static [entityKind] = "PgUniqueConstraint";
  columns;
  name;
  nullsNotDistinct = false;
  getName() {
    return this.name;
  }
};

// node_modules/drizzle-orm/pg-core/utils/array.js
init_checked_fetch();
init_modules_watch_stub();
function parsePgArrayValue(arrayString, startFrom, inQuotes) {
  for (let i = startFrom; i < arrayString.length; i++) {
    const char = arrayString[i];
    if (char === "\\") {
      i++;
      continue;
    }
    if (char === '"') {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i + 1];
    }
    if (inQuotes) {
      continue;
    }
    if (char === "," || char === "}") {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i];
    }
  }
  return [arrayString.slice(startFrom).replace(/\\/g, ""), arrayString.length];
}
__name(parsePgArrayValue, "parsePgArrayValue");
function parsePgNestedArray(arrayString, startFrom = 0) {
  const result = [];
  let i = startFrom;
  let lastCharIsComma = false;
  while (i < arrayString.length) {
    const char = arrayString[i];
    if (char === ",") {
      if (lastCharIsComma || i === startFrom) {
        result.push("");
      }
      lastCharIsComma = true;
      i++;
      continue;
    }
    lastCharIsComma = false;
    if (char === "\\") {
      i += 2;
      continue;
    }
    if (char === '"') {
      const [value2, startFrom2] = parsePgArrayValue(arrayString, i + 1, true);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    if (char === "}") {
      return [result, i + 1];
    }
    if (char === "{") {
      const [value2, startFrom2] = parsePgNestedArray(arrayString, i + 1);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);
    result.push(value);
    i = newStartFrom;
  }
  return [result, i];
}
__name(parsePgNestedArray, "parsePgNestedArray");
function parsePgArray(arrayString) {
  const [result] = parsePgNestedArray(arrayString, 1);
  return result;
}
__name(parsePgArray, "parsePgArray");
function makePgArray(array) {
  return `{${array.map((item) => {
    if (Array.isArray(item)) {
      return makePgArray(item);
    }
    if (typeof item === "string") {
      return `"${item.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"`;
    }
    return `${item}`;
  }).join(",")}}`;
}
__name(makePgArray, "makePgArray");

// node_modules/drizzle-orm/pg-core/columns/common.js
var PgColumnBuilder = class extends ColumnBuilder {
  static {
    __name(this, "PgColumnBuilder");
  }
  foreignKeyConfigs = [];
  static [entityKind] = "PgColumnBuilder";
  array(size) {
    return new PgArrayBuilder(this.config.name, this, size);
  }
  references(ref, actions = {}) {
    this.foreignKeyConfigs.push({ ref, actions });
    return this;
  }
  unique(name2, config) {
    this.config.isUnique = true;
    this.config.uniqueName = name2;
    this.config.uniqueType = config?.nulls;
    return this;
  }
  generatedAlwaysAs(as) {
    this.config.generated = {
      as,
      type: "always",
      mode: "stored"
    };
    return this;
  }
  /** @internal */
  buildForeignKeys(column, table) {
    return this.foreignKeyConfigs.map(({ ref, actions }) => {
      return iife(
        (ref2, actions2) => {
          const builder = new ForeignKeyBuilder(() => {
            const foreignColumn = ref2();
            return { columns: [column], foreignColumns: [foreignColumn] };
          });
          if (actions2.onUpdate) {
            builder.onUpdate(actions2.onUpdate);
          }
          if (actions2.onDelete) {
            builder.onDelete(actions2.onDelete);
          }
          return builder.build(table);
        },
        ref,
        actions
      );
    });
  }
  /** @internal */
  buildExtraConfigColumn(table) {
    return new ExtraConfigColumn(table, this.config);
  }
};
var PgColumn = class extends Column {
  static {
    __name(this, "PgColumn");
  }
  constructor(table, config) {
    if (!config.uniqueName) {
      config.uniqueName = uniqueKeyName(table, [config.name]);
    }
    super(table, config);
    this.table = table;
  }
  static [entityKind] = "PgColumn";
};
var ExtraConfigColumn = class extends PgColumn {
  static {
    __name(this, "ExtraConfigColumn");
  }
  static [entityKind] = "ExtraConfigColumn";
  getSQLType() {
    return this.getSQLType();
  }
  indexConfig = {
    order: this.config.order ?? "asc",
    nulls: this.config.nulls ?? "last",
    opClass: this.config.opClass
  };
  defaultConfig = {
    order: "asc",
    nulls: "last",
    opClass: void 0
  };
  asc() {
    this.indexConfig.order = "asc";
    return this;
  }
  desc() {
    this.indexConfig.order = "desc";
    return this;
  }
  nullsFirst() {
    this.indexConfig.nulls = "first";
    return this;
  }
  nullsLast() {
    this.indexConfig.nulls = "last";
    return this;
  }
  /**
   * ### PostgreSQL documentation quote
   *
   * > An operator class with optional parameters can be specified for each column of an index.
   * The operator class identifies the operators to be used by the index for that column.
   * For example, a B-tree index on four-byte integers would use the int4_ops class;
   * this operator class includes comparison functions for four-byte integers.
   * In practice the default operator class for the column's data type is usually sufficient.
   * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.
   * For example, we might want to sort a complex-number data type either by absolute value or by real part.
   * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.
   * More information about operator classes check:
   *
   * ### Useful links
   * https://www.postgresql.org/docs/current/sql-createindex.html
   *
   * https://www.postgresql.org/docs/current/indexes-opclass.html
   *
   * https://www.postgresql.org/docs/current/xindex.html
   *
   * ### Additional types
   * If you have the `pg_vector` extension installed in your database, you can use the
   * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.
   *
   * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**
   *
   * @param opClass
   * @returns
   */
  op(opClass) {
    this.indexConfig.opClass = opClass;
    return this;
  }
};
var IndexedColumn = class {
  static {
    __name(this, "IndexedColumn");
  }
  static [entityKind] = "IndexedColumn";
  constructor(name2, keyAsName, type, indexConfig) {
    this.name = name2;
    this.keyAsName = keyAsName;
    this.type = type;
    this.indexConfig = indexConfig;
  }
  name;
  keyAsName;
  type;
  indexConfig;
};
var PgArrayBuilder = class extends PgColumnBuilder {
  static {
    __name(this, "PgArrayBuilder");
  }
  static [entityKind] = "PgArrayBuilder";
  constructor(name2, baseBuilder, size) {
    super(name2, "array", "PgArray");
    this.config.baseBuilder = baseBuilder;
    this.config.size = size;
  }
  /** @internal */
  build(table) {
    const baseColumn = this.config.baseBuilder.build(table);
    return new PgArray(
      table,
      this.config,
      baseColumn
    );
  }
};
var PgArray = class _PgArray extends PgColumn {
  static {
    __name(this, "PgArray");
  }
  constructor(table, config, baseColumn, range2) {
    super(table, config);
    this.baseColumn = baseColumn;
    this.range = range2;
    this.size = config.size;
  }
  size;
  static [entityKind] = "PgArray";
  getSQLType() {
    return `${this.baseColumn.getSQLType()}[${typeof this.size === "number" ? this.size : ""}]`;
  }
  mapFromDriverValue(value) {
    if (typeof value === "string") {
      value = parsePgArray(value);
    }
    return value.map((v) => this.baseColumn.mapFromDriverValue(v));
  }
  mapToDriverValue(value, isNestedArray = false) {
    const a = value.map(
      (v) => v === null ? null : is(this.baseColumn, _PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)
    );
    if (isNestedArray)
      return a;
    return makePgArray(a);
  }
};

// node_modules/drizzle-orm/pg-core/columns/enum.js
var isPgEnumSym = Symbol.for("drizzle:isPgEnum");
function isPgEnum(obj) {
  return !!obj && typeof obj === "function" && isPgEnumSym in obj && obj[isPgEnumSym] === true;
}
__name(isPgEnum, "isPgEnum");
var PgEnumColumnBuilder = class extends PgColumnBuilder {
  static {
    __name(this, "PgEnumColumnBuilder");
  }
  static [entityKind] = "PgEnumColumnBuilder";
  constructor(name2, enumInstance) {
    super(name2, "string", "PgEnumColumn");
    this.config.enum = enumInstance;
  }
  /** @internal */
  build(table) {
    return new PgEnumColumn(
      table,
      this.config
    );
  }
};
var PgEnumColumn = class extends PgColumn {
  static {
    __name(this, "PgEnumColumn");
  }
  static [entityKind] = "PgEnumColumn";
  enum = this.config.enum;
  enumValues = this.config.enum.enumValues;
  constructor(table, config) {
    super(table, config);
    this.enum = config.enum;
  }
  getSQLType() {
    return this.enum.enumName;
  }
};

// node_modules/drizzle-orm/subquery.js
init_checked_fetch();
init_modules_watch_stub();
var Subquery = class {
  static {
    __name(this, "Subquery");
  }
  static [entityKind] = "Subquery";
  constructor(sql2, selection, alias, isWith = false) {
    this._ = {
      brand: "Subquery",
      sql: sql2,
      selectedFields: selection,
      alias,
      isWith
    };
  }
  // getSQL(): SQL<unknown> {
  // 	return new SQL([this]);
  // }
};
var WithSubquery = class extends Subquery {
  static {
    __name(this, "WithSubquery");
  }
  static [entityKind] = "WithSubquery";
};

// node_modules/drizzle-orm/tracing.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/version.js
init_checked_fetch();
init_modules_watch_stub();
var version = "0.36.4";

// node_modules/drizzle-orm/tracing.js
var otel;
var rawTracer;
var tracer = {
  startActiveSpan(name2, fn) {
    if (!otel) {
      return fn();
    }
    if (!rawTracer) {
      rawTracer = otel.trace.getTracer("drizzle-orm", version);
    }
    return iife(
      (otel2, rawTracer2) => rawTracer2.startActiveSpan(
        name2,
        (span) => {
          try {
            return fn(span);
          } catch (e) {
            span.setStatus({
              code: otel2.SpanStatusCode.ERROR,
              message: e instanceof Error ? e.message : "Unknown error"
              // eslint-disable-line no-instanceof/no-instanceof
            });
            throw e;
          } finally {
            span.end();
          }
        }
      ),
      otel,
      rawTracer
    );
  }
};

// node_modules/drizzle-orm/view-common.js
init_checked_fetch();
init_modules_watch_stub();
var ViewBaseConfig = Symbol.for("drizzle:ViewBaseConfig");

// node_modules/drizzle-orm/sql/sql.js
var FakePrimitiveParam = class {
  static {
    __name(this, "FakePrimitiveParam");
  }
  static [entityKind] = "FakePrimitiveParam";
};
function isSQLWrapper(value) {
  return value !== null && value !== void 0 && typeof value.getSQL === "function";
}
__name(isSQLWrapper, "isSQLWrapper");
function mergeQueries(queries) {
  const result = { sql: "", params: [] };
  for (const query of queries) {
    result.sql += query.sql;
    result.params.push(...query.params);
    if (query.typings?.length) {
      if (!result.typings) {
        result.typings = [];
      }
      result.typings.push(...query.typings);
    }
  }
  return result;
}
__name(mergeQueries, "mergeQueries");
var StringChunk = class {
  static {
    __name(this, "StringChunk");
  }
  static [entityKind] = "StringChunk";
  value;
  constructor(value) {
    this.value = Array.isArray(value) ? value : [value];
  }
  getSQL() {
    return new SQL([this]);
  }
};
var SQL = class _SQL {
  static {
    __name(this, "SQL");
  }
  constructor(queryChunks) {
    this.queryChunks = queryChunks;
  }
  static [entityKind] = "SQL";
  /** @internal */
  decoder = noopDecoder;
  shouldInlineParams = false;
  append(query) {
    this.queryChunks.push(...query.queryChunks);
    return this;
  }
  toQuery(config) {
    return tracer.startActiveSpan("drizzle.buildSQL", (span) => {
      const query = this.buildQueryFromSourceParams(this.queryChunks, config);
      span?.setAttributes({
        "drizzle.query.text": query.sql,
        "drizzle.query.params": JSON.stringify(query.params)
      });
      return query;
    });
  }
  buildQueryFromSourceParams(chunks, _config) {
    const config = Object.assign({}, _config, {
      inlineParams: _config.inlineParams || this.shouldInlineParams,
      paramStartIndex: _config.paramStartIndex || { value: 0 }
    });
    const {
      casing,
      escapeName,
      escapeParam,
      prepareTyping,
      inlineParams,
      paramStartIndex
    } = config;
    return mergeQueries(chunks.map((chunk) => {
      if (is(chunk, StringChunk)) {
        return { sql: chunk.value.join(""), params: [] };
      }
      if (is(chunk, Name)) {
        return { sql: escapeName(chunk.value), params: [] };
      }
      if (chunk === void 0) {
        return { sql: "", params: [] };
      }
      if (Array.isArray(chunk)) {
        const result = [new StringChunk("(")];
        for (const [i, p] of chunk.entries()) {
          result.push(p);
          if (i < chunk.length - 1) {
            result.push(new StringChunk(", "));
          }
        }
        result.push(new StringChunk(")"));
        return this.buildQueryFromSourceParams(result, config);
      }
      if (is(chunk, _SQL)) {
        return this.buildQueryFromSourceParams(chunk.queryChunks, {
          ...config,
          inlineParams: inlineParams || chunk.shouldInlineParams
        });
      }
      if (is(chunk, Table)) {
        const schemaName = chunk[Table.Symbol.Schema];
        const tableName = chunk[Table.Symbol.Name];
        return {
          sql: schemaName === void 0 ? escapeName(tableName) : escapeName(schemaName) + "." + escapeName(tableName),
          params: []
        };
      }
      if (is(chunk, Column)) {
        const columnName = casing.getColumnCasing(chunk);
        if (_config.invokeSource === "indexes") {
          return { sql: escapeName(columnName), params: [] };
        }
        const schemaName = chunk.table[Table.Symbol.Schema];
        return {
          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(columnName) : escapeName(schemaName) + "." + escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(columnName),
          params: []
        };
      }
      if (is(chunk, View)) {
        const schemaName = chunk[ViewBaseConfig].schema;
        const viewName = chunk[ViewBaseConfig].name;
        return {
          sql: schemaName === void 0 ? escapeName(viewName) : escapeName(schemaName) + "." + escapeName(viewName),
          params: []
        };
      }
      if (is(chunk, Param)) {
        if (is(chunk.value, Placeholder)) {
          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
        }
        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);
        if (is(mappedValue, _SQL)) {
          return this.buildQueryFromSourceParams([mappedValue], config);
        }
        if (inlineParams) {
          return { sql: this.mapInlineParam(mappedValue, config), params: [] };
        }
        let typings = ["none"];
        if (prepareTyping) {
          typings = [prepareTyping(chunk.encoder)];
        }
        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };
      }
      if (is(chunk, Placeholder)) {
        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
      }
      if (is(chunk, _SQL.Aliased) && chunk.fieldAlias !== void 0) {
        return { sql: escapeName(chunk.fieldAlias), params: [] };
      }
      if (is(chunk, Subquery)) {
        if (chunk._.isWith) {
          return { sql: escapeName(chunk._.alias), params: [] };
        }
        return this.buildQueryFromSourceParams([
          new StringChunk("("),
          chunk._.sql,
          new StringChunk(") "),
          new Name(chunk._.alias)
        ], config);
      }
      if (isPgEnum(chunk)) {
        if (chunk.schema) {
          return { sql: escapeName(chunk.schema) + "." + escapeName(chunk.enumName), params: [] };
        }
        return { sql: escapeName(chunk.enumName), params: [] };
      }
      if (isSQLWrapper(chunk)) {
        if (chunk.shouldOmitSQLParens?.()) {
          return this.buildQueryFromSourceParams([chunk.getSQL()], config);
        }
        return this.buildQueryFromSourceParams([
          new StringChunk("("),
          chunk.getSQL(),
          new StringChunk(")")
        ], config);
      }
      if (inlineParams) {
        return { sql: this.mapInlineParam(chunk, config), params: [] };
      }
      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
    }));
  }
  mapInlineParam(chunk, { escapeString }) {
    if (chunk === null) {
      return "null";
    }
    if (typeof chunk === "number" || typeof chunk === "boolean") {
      return chunk.toString();
    }
    if (typeof chunk === "string") {
      return escapeString(chunk);
    }
    if (typeof chunk === "object") {
      const mappedValueAsString = chunk.toString();
      if (mappedValueAsString === "[object Object]") {
        return escapeString(JSON.stringify(chunk));
      }
      return escapeString(mappedValueAsString);
    }
    throw new Error("Unexpected param value: " + chunk);
  }
  getSQL() {
    return this;
  }
  as(alias) {
    if (alias === void 0) {
      return this;
    }
    return new _SQL.Aliased(this, alias);
  }
  mapWith(decoder) {
    this.decoder = typeof decoder === "function" ? { mapFromDriverValue: decoder } : decoder;
    return this;
  }
  inlineParams() {
    this.shouldInlineParams = true;
    return this;
  }
  /**
   * This method is used to conditionally include a part of the query.
   *
   * @param condition - Condition to check
   * @returns itself if the condition is `true`, otherwise `undefined`
   */
  if(condition) {
    return condition ? this : void 0;
  }
};
var Name = class {
  static {
    __name(this, "Name");
  }
  constructor(value) {
    this.value = value;
  }
  static [entityKind] = "Name";
  brand;
  getSQL() {
    return new SQL([this]);
  }
};
function isDriverValueEncoder(value) {
  return typeof value === "object" && value !== null && "mapToDriverValue" in value && typeof value.mapToDriverValue === "function";
}
__name(isDriverValueEncoder, "isDriverValueEncoder");
var noopDecoder = {
  mapFromDriverValue: /* @__PURE__ */ __name((value) => value, "mapFromDriverValue")
};
var noopEncoder = {
  mapToDriverValue: /* @__PURE__ */ __name((value) => value, "mapToDriverValue")
};
var noopMapper = {
  ...noopDecoder,
  ...noopEncoder
};
var Param = class {
  static {
    __name(this, "Param");
  }
  /**
   * @param value - Parameter value
   * @param encoder - Encoder to convert the value to a driver parameter
   */
  constructor(value, encoder = noopEncoder) {
    this.value = value;
    this.encoder = encoder;
  }
  static [entityKind] = "Param";
  brand;
  getSQL() {
    return new SQL([this]);
  }
};
function sql(strings, ...params) {
  const queryChunks = [];
  if (params.length > 0 || strings.length > 0 && strings[0] !== "") {
    queryChunks.push(new StringChunk(strings[0]));
  }
  for (const [paramIndex, param2] of params.entries()) {
    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));
  }
  return new SQL(queryChunks);
}
__name(sql, "sql");
((sql2) => {
  function empty() {
    return new SQL([]);
  }
  __name(empty, "empty");
  sql2.empty = empty;
  function fromList(list) {
    return new SQL(list);
  }
  __name(fromList, "fromList");
  sql2.fromList = fromList;
  function raw2(str) {
    return new SQL([new StringChunk(str)]);
  }
  __name(raw2, "raw");
  sql2.raw = raw2;
  function join(chunks, separator) {
    const result = [];
    for (const [i, chunk] of chunks.entries()) {
      if (i > 0 && separator !== void 0) {
        result.push(separator);
      }
      result.push(chunk);
    }
    return new SQL(result);
  }
  __name(join, "join");
  sql2.join = join;
  function identifier(value) {
    return new Name(value);
  }
  __name(identifier, "identifier");
  sql2.identifier = identifier;
  function placeholder2(name2) {
    return new Placeholder(name2);
  }
  __name(placeholder2, "placeholder2");
  sql2.placeholder = placeholder2;
  function param2(value, encoder) {
    return new Param(value, encoder);
  }
  __name(param2, "param2");
  sql2.param = param2;
})(sql || (sql = {}));
((SQL2) => {
  class Aliased {
    static {
      __name(this, "Aliased");
    }
    constructor(sql2, fieldAlias) {
      this.sql = sql2;
      this.fieldAlias = fieldAlias;
    }
    static [entityKind] = "SQL.Aliased";
    /** @internal */
    isSelectionField = false;
    getSQL() {
      return this.sql;
    }
    /** @internal */
    clone() {
      return new Aliased(this.sql, this.fieldAlias);
    }
  }
  SQL2.Aliased = Aliased;
})(SQL || (SQL = {}));
var Placeholder = class {
  static {
    __name(this, "Placeholder");
  }
  constructor(name2) {
    this.name = name2;
  }
  static [entityKind] = "Placeholder";
  getSQL() {
    return new SQL([this]);
  }
};
function fillPlaceholders(params, values) {
  return params.map((p) => {
    if (is(p, Placeholder)) {
      if (!(p.name in values)) {
        throw new Error(`No value for placeholder "${p.name}" was provided`);
      }
      return values[p.name];
    }
    if (is(p, Param) && is(p.value, Placeholder)) {
      if (!(p.value.name in values)) {
        throw new Error(`No value for placeholder "${p.value.name}" was provided`);
      }
      return p.encoder.mapToDriverValue(values[p.value.name]);
    }
    return p;
  });
}
__name(fillPlaceholders, "fillPlaceholders");
var View = class {
  static {
    __name(this, "View");
  }
  static [entityKind] = "View";
  /** @internal */
  [ViewBaseConfig];
  constructor({ name: name2, schema, selectedFields, query }) {
    this[ViewBaseConfig] = {
      name: name2,
      originalName: name2,
      schema,
      selectedFields,
      query,
      isExisting: !query,
      isAlias: false
    };
  }
  getSQL() {
    return new SQL([this]);
  }
};
Column.prototype.getSQL = function() {
  return new SQL([this]);
};
Table.prototype.getSQL = function() {
  return new SQL([this]);
};
Subquery.prototype.getSQL = function() {
  return new SQL([this]);
};

// node_modules/drizzle-orm/utils.js
function mapResultRow(columns, row, joinsNotNullableMap) {
  const nullifyMap = {};
  const result = columns.reduce(
    (result2, { path: path3, field }, columnIndex) => {
      let decoder;
      if (is(field, Column)) {
        decoder = field;
      } else if (is(field, SQL)) {
        decoder = field.decoder;
      } else {
        decoder = field.sql.decoder;
      }
      let node = result2;
      for (const [pathChunkIndex, pathChunk] of path3.entries()) {
        if (pathChunkIndex < path3.length - 1) {
          if (!(pathChunk in node)) {
            node[pathChunk] = {};
          }
          node = node[pathChunk];
        } else {
          const rawValue = row[columnIndex];
          const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);
          if (joinsNotNullableMap && is(field, Column) && path3.length === 2) {
            const objectName = path3[0];
            if (!(objectName in nullifyMap)) {
              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;
            } else if (typeof nullifyMap[objectName] === "string" && nullifyMap[objectName] !== getTableName(field.table)) {
              nullifyMap[objectName] = false;
            }
          }
        }
      }
      return result2;
    },
    {}
  );
  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {
    for (const [objectName, tableName] of Object.entries(nullifyMap)) {
      if (typeof tableName === "string" && !joinsNotNullableMap[tableName]) {
        result[objectName] = null;
      }
    }
  }
  return result;
}
__name(mapResultRow, "mapResultRow");
function orderSelectedFields(fields, pathPrefix) {
  return Object.entries(fields).reduce((result, [name2, field]) => {
    if (typeof name2 !== "string") {
      return result;
    }
    const newPath = pathPrefix ? [...pathPrefix, name2] : [name2];
    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {
      result.push({ path: newPath, field });
    } else if (is(field, Table)) {
      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));
    } else {
      result.push(...orderSelectedFields(field, newPath));
    }
    return result;
  }, []);
}
__name(orderSelectedFields, "orderSelectedFields");
function haveSameKeys(left, right) {
  const leftKeys = Object.keys(left);
  const rightKeys = Object.keys(right);
  if (leftKeys.length !== rightKeys.length) {
    return false;
  }
  for (const [index, key] of leftKeys.entries()) {
    if (key !== rightKeys[index]) {
      return false;
    }
  }
  return true;
}
__name(haveSameKeys, "haveSameKeys");
function mapUpdateSet(table, values) {
  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {
    if (is(value, SQL) || is(value, Column)) {
      return [key, value];
    } else {
      return [key, new Param(value, table[Table.Symbol.Columns][key])];
    }
  });
  if (entries.length === 0) {
    throw new Error("No values to set");
  }
  return Object.fromEntries(entries);
}
__name(mapUpdateSet, "mapUpdateSet");
function applyMixins(baseClass, extendedClasses) {
  for (const extendedClass of extendedClasses) {
    for (const name2 of Object.getOwnPropertyNames(extendedClass.prototype)) {
      if (name2 === "constructor")
        continue;
      Object.defineProperty(
        baseClass.prototype,
        name2,
        Object.getOwnPropertyDescriptor(extendedClass.prototype, name2) || /* @__PURE__ */ Object.create(null)
      );
    }
  }
}
__name(applyMixins, "applyMixins");
function getTableColumns(table) {
  return table[Table.Symbol.Columns];
}
__name(getTableColumns, "getTableColumns");
function getTableLikeName(table) {
  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];
}
__name(getTableLikeName, "getTableLikeName");
function getColumnNameAndConfig(a, b) {
  return {
    name: typeof a === "string" && a.length > 0 ? a : "",
    config: typeof a === "object" ? a : b
  };
}
__name(getColumnNameAndConfig, "getColumnNameAndConfig");

// node_modules/drizzle-orm/pg-core/table.js
var InlineForeignKeys = Symbol.for("drizzle:PgInlineForeignKeys");
var EnableRLS = Symbol.for("drizzle:EnableRLS");
var PgTable = class extends Table {
  static {
    __name(this, "PgTable");
  }
  static [entityKind] = "PgTable";
  /** @internal */
  static Symbol = Object.assign({}, Table.Symbol, {
    InlineForeignKeys,
    EnableRLS
  });
  /**@internal */
  [InlineForeignKeys] = [];
  /** @internal */
  [EnableRLS] = false;
  /** @internal */
  [Table.Symbol.ExtraConfigBuilder] = void 0;
};

// node_modules/drizzle-orm/pg-core/primary-keys.js
var PrimaryKeyBuilder = class {
  static {
    __name(this, "PrimaryKeyBuilder");
  }
  static [entityKind] = "PgPrimaryKeyBuilder";
  /** @internal */
  columns;
  /** @internal */
  name;
  constructor(columns, name2) {
    this.columns = columns;
    this.name = name2;
  }
  /** @internal */
  build(table) {
    return new PrimaryKey(table, this.columns, this.name);
  }
};
var PrimaryKey = class {
  static {
    __name(this, "PrimaryKey");
  }
  constructor(table, columns, name2) {
    this.table = table;
    this.columns = columns;
    this.name = name2;
  }
  static [entityKind] = "PgPrimaryKey";
  columns;
  name;
  getName() {
    return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join("_")}_pk`;
  }
};

// node_modules/drizzle-orm/sql/expressions/conditions.js
init_checked_fetch();
init_modules_watch_stub();
function bindIfParam(value, column) {
  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {
    return new Param(value, column);
  }
  return value;
}
__name(bindIfParam, "bindIfParam");
var eq = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} = ${bindIfParam(right, left)}`;
}, "eq");
var ne = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} <> ${bindIfParam(right, left)}`;
}, "ne");
function and(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" and ")),
    new StringChunk(")")
  ]);
}
__name(and, "and");
function or(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" or ")),
    new StringChunk(")")
  ]);
}
__name(or, "or");
function not(condition) {
  return sql`not ${condition}`;
}
__name(not, "not");
var gt = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} > ${bindIfParam(right, left)}`;
}, "gt");
var gte = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} >= ${bindIfParam(right, left)}`;
}, "gte");
var lt = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} < ${bindIfParam(right, left)}`;
}, "lt");
var lte = /* @__PURE__ */ __name((left, right) => {
  return sql`${left} <= ${bindIfParam(right, left)}`;
}, "lte");
function inArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      return sql`false`;
    }
    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} in ${bindIfParam(values, column)}`;
}
__name(inArray, "inArray");
function notInArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      return sql`true`;
    }
    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} not in ${bindIfParam(values, column)}`;
}
__name(notInArray, "notInArray");
function isNull(value) {
  return sql`${value} is null`;
}
__name(isNull, "isNull");
function isNotNull(value) {
  return sql`${value} is not null`;
}
__name(isNotNull, "isNotNull");
function exists(subquery) {
  return sql`exists ${subquery}`;
}
__name(exists, "exists");
function notExists(subquery) {
  return sql`not exists ${subquery}`;
}
__name(notExists, "notExists");
function between(column, min2, max2) {
  return sql`${column} between ${bindIfParam(min2, column)} and ${bindIfParam(
    max2,
    column
  )}`;
}
__name(between, "between");
function notBetween(column, min2, max2) {
  return sql`${column} not between ${bindIfParam(
    min2,
    column
  )} and ${bindIfParam(max2, column)}`;
}
__name(notBetween, "notBetween");
function like(column, value) {
  return sql`${column} like ${value}`;
}
__name(like, "like");
function notLike(column, value) {
  return sql`${column} not like ${value}`;
}
__name(notLike, "notLike");
function ilike(column, value) {
  return sql`${column} ilike ${value}`;
}
__name(ilike, "ilike");
function notIlike(column, value) {
  return sql`${column} not ilike ${value}`;
}
__name(notIlike, "notIlike");

// node_modules/drizzle-orm/sql/expressions/select.js
init_checked_fetch();
init_modules_watch_stub();
function asc(column) {
  return sql`${column} asc`;
}
__name(asc, "asc");
function desc(column) {
  return sql`${column} desc`;
}
__name(desc, "desc");

// node_modules/drizzle-orm/relations.js
var Relation = class {
  static {
    __name(this, "Relation");
  }
  constructor(sourceTable, referencedTable, relationName) {
    this.sourceTable = sourceTable;
    this.referencedTable = referencedTable;
    this.relationName = relationName;
    this.referencedTableName = referencedTable[Table.Symbol.Name];
  }
  static [entityKind] = "Relation";
  referencedTableName;
  fieldName;
};
var Relations = class {
  static {
    __name(this, "Relations");
  }
  constructor(table, config) {
    this.table = table;
    this.config = config;
  }
  static [entityKind] = "Relations";
};
var One = class _One extends Relation {
  static {
    __name(this, "One");
  }
  constructor(sourceTable, referencedTable, config, isNullable) {
    super(sourceTable, referencedTable, config?.relationName);
    this.config = config;
    this.isNullable = isNullable;
  }
  static [entityKind] = "One";
  withFieldName(fieldName) {
    const relation = new _One(
      this.sourceTable,
      this.referencedTable,
      this.config,
      this.isNullable
    );
    relation.fieldName = fieldName;
    return relation;
  }
};
var Many = class _Many extends Relation {
  static {
    __name(this, "Many");
  }
  constructor(sourceTable, referencedTable, config) {
    super(sourceTable, referencedTable, config?.relationName);
    this.config = config;
  }
  static [entityKind] = "Many";
  withFieldName(fieldName) {
    const relation = new _Many(
      this.sourceTable,
      this.referencedTable,
      this.config
    );
    relation.fieldName = fieldName;
    return relation;
  }
};
function getOperators() {
  return {
    and,
    between,
    eq,
    exists,
    gt,
    gte,
    ilike,
    inArray,
    isNull,
    isNotNull,
    like,
    lt,
    lte,
    ne,
    not,
    notBetween,
    notExists,
    notLike,
    notIlike,
    notInArray,
    or,
    sql
  };
}
__name(getOperators, "getOperators");
function getOrderByOperators() {
  return {
    sql,
    asc,
    desc
  };
}
__name(getOrderByOperators, "getOrderByOperators");
function extractTablesRelationalConfig(schema, configHelpers) {
  if (Object.keys(schema).length === 1 && "default" in schema && !is(schema["default"], Table)) {
    schema = schema["default"];
  }
  const tableNamesMap = {};
  const relationsBuffer = {};
  const tablesConfig = {};
  for (const [key, value] of Object.entries(schema)) {
    if (is(value, Table)) {
      const dbName = getTableUniqueName(value);
      const bufferedRelations = relationsBuffer[dbName];
      tableNamesMap[dbName] = key;
      tablesConfig[key] = {
        tsName: key,
        dbName: value[Table.Symbol.Name],
        schema: value[Table.Symbol.Schema],
        columns: value[Table.Symbol.Columns],
        relations: bufferedRelations?.relations ?? {},
        primaryKey: bufferedRelations?.primaryKey ?? []
      };
      for (const column of Object.values(
        value[Table.Symbol.Columns]
      )) {
        if (column.primary) {
          tablesConfig[key].primaryKey.push(column);
        }
      }
      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value[Table.Symbol.ExtraConfigColumns]);
      if (extraConfig) {
        for (const configEntry of Object.values(extraConfig)) {
          if (is(configEntry, PrimaryKeyBuilder)) {
            tablesConfig[key].primaryKey.push(...configEntry.columns);
          }
        }
      }
    } else if (is(value, Relations)) {
      const dbName = getTableUniqueName(value.table);
      const tableName = tableNamesMap[dbName];
      const relations2 = value.config(
        configHelpers(value.table)
      );
      let primaryKey;
      for (const [relationName, relation] of Object.entries(relations2)) {
        if (tableName) {
          const tableConfig = tablesConfig[tableName];
          tableConfig.relations[relationName] = relation;
          if (primaryKey) {
            tableConfig.primaryKey.push(...primaryKey);
          }
        } else {
          if (!(dbName in relationsBuffer)) {
            relationsBuffer[dbName] = {
              relations: {},
              primaryKey
            };
          }
          relationsBuffer[dbName].relations[relationName] = relation;
        }
      }
    }
  }
  return { tables: tablesConfig, tableNamesMap };
}
__name(extractTablesRelationalConfig, "extractTablesRelationalConfig");
function createOne(sourceTable) {
  return /* @__PURE__ */ __name(function one(table, config) {
    return new One(
      sourceTable,
      table,
      config,
      config?.fields.reduce((res, f) => res && f.notNull, true) ?? false
    );
  }, "one");
}
__name(createOne, "createOne");
function createMany(sourceTable) {
  return /* @__PURE__ */ __name(function many(referencedTable, config) {
    return new Many(sourceTable, referencedTable, config);
  }, "many");
}
__name(createMany, "createMany");
function normalizeRelation(schema, tableNamesMap, relation) {
  if (is(relation, One) && relation.config) {
    return {
      fields: relation.config.fields,
      references: relation.config.references
    };
  }
  const referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];
  if (!referencedTableTsName) {
    throw new Error(
      `Table "${relation.referencedTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const referencedTableConfig = schema[referencedTableTsName];
  if (!referencedTableConfig) {
    throw new Error(`Table "${referencedTableTsName}" not found in schema`);
  }
  const sourceTable = relation.sourceTable;
  const sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];
  if (!sourceTableTsName) {
    throw new Error(
      `Table "${sourceTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const reverseRelations = [];
  for (const referencedTableRelation of Object.values(
    referencedTableConfig.relations
  )) {
    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {
      reverseRelations.push(referencedTableRelation);
    }
  }
  if (reverseRelations.length > 1) {
    throw relation.relationName ? new Error(
      `There are multiple relations with name "${relation.relationName}" in table "${referencedTableTsName}"`
    ) : new Error(
      `There are multiple relations between "${referencedTableTsName}" and "${relation.sourceTable[Table.Symbol.Name]}". Please specify relation name`
    );
  }
  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {
    return {
      fields: reverseRelations[0].config.references,
      references: reverseRelations[0].config.fields
    };
  }
  throw new Error(
    `There is not enough information to infer relation "${sourceTableTsName}.${relation.fieldName}"`
  );
}
__name(normalizeRelation, "normalizeRelation");
function createTableRelationsHelpers(sourceTable) {
  return {
    one: createOne(sourceTable),
    many: createMany(sourceTable)
  };
}
__name(createTableRelationsHelpers, "createTableRelationsHelpers");
function mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {
  const result = {};
  for (const [
    selectionItemIndex,
    selectionItem
  ] of buildQueryResultSelection.entries()) {
    if (selectionItem.isJson) {
      const relation = tableConfig.relations[selectionItem.tsKey];
      const rawSubRows = row[selectionItemIndex];
      const subRows = typeof rawSubRows === "string" ? JSON.parse(rawSubRows) : rawSubRows;
      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(
        tablesConfig,
        tablesConfig[selectionItem.relationTableTsKey],
        subRows,
        selectionItem.selection,
        mapColumnValue
      ) : subRows.map(
        (subRow) => mapRelationalRow(
          tablesConfig,
          tablesConfig[selectionItem.relationTableTsKey],
          subRow,
          selectionItem.selection,
          mapColumnValue
        )
      );
    } else {
      const value = mapColumnValue(row[selectionItemIndex]);
      const field = selectionItem.field;
      let decoder;
      if (is(field, Column)) {
        decoder = field;
      } else if (is(field, SQL)) {
        decoder = field.decoder;
      } else {
        decoder = field.sql.decoder;
      }
      result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);
    }
  }
  return result;
}
__name(mapRelationalRow, "mapRelationalRow");

// node_modules/drizzle-orm/sqlite-core/db.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/selection-proxy.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/alias.js
init_checked_fetch();
init_modules_watch_stub();
var ColumnAliasProxyHandler = class {
  static {
    __name(this, "ColumnAliasProxyHandler");
  }
  constructor(table) {
    this.table = table;
  }
  static [entityKind] = "ColumnAliasProxyHandler";
  get(columnObj, prop) {
    if (prop === "table") {
      return this.table;
    }
    return columnObj[prop];
  }
};
var TableAliasProxyHandler = class {
  static {
    __name(this, "TableAliasProxyHandler");
  }
  constructor(alias, replaceOriginalName) {
    this.alias = alias;
    this.replaceOriginalName = replaceOriginalName;
  }
  static [entityKind] = "TableAliasProxyHandler";
  get(target, prop) {
    if (prop === Table.Symbol.IsAlias) {
      return true;
    }
    if (prop === Table.Symbol.Name) {
      return this.alias;
    }
    if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {
      return this.alias;
    }
    if (prop === ViewBaseConfig) {
      return {
        ...target[ViewBaseConfig],
        name: this.alias,
        isAlias: true
      };
    }
    if (prop === Table.Symbol.Columns) {
      const columns = target[Table.Symbol.Columns];
      if (!columns) {
        return columns;
      }
      const proxiedColumns = {};
      Object.keys(columns).map((key) => {
        proxiedColumns[key] = new Proxy(
          columns[key],
          new ColumnAliasProxyHandler(new Proxy(target, this))
        );
      });
      return proxiedColumns;
    }
    const value = target[prop];
    if (is(value, Column)) {
      return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));
    }
    return value;
  }
};
var RelationTableAliasProxyHandler = class {
  static {
    __name(this, "RelationTableAliasProxyHandler");
  }
  constructor(alias) {
    this.alias = alias;
  }
  static [entityKind] = "RelationTableAliasProxyHandler";
  get(target, prop) {
    if (prop === "sourceTable") {
      return aliasedTable(target.sourceTable, this.alias);
    }
    return target[prop];
  }
};
function aliasedTable(table, tableAlias) {
  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));
}
__name(aliasedTable, "aliasedTable");
function aliasedTableColumn(column, tableAlias) {
  return new Proxy(
    column,
    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))
  );
}
__name(aliasedTableColumn, "aliasedTableColumn");
function mapColumnsInAliasedSQLToAlias(query, alias) {
  return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);
}
__name(mapColumnsInAliasedSQLToAlias, "mapColumnsInAliasedSQLToAlias");
function mapColumnsInSQLToAlias(query, alias) {
  return sql.join(query.queryChunks.map((c) => {
    if (is(c, Column)) {
      return aliasedTableColumn(c, alias);
    }
    if (is(c, SQL)) {
      return mapColumnsInSQLToAlias(c, alias);
    }
    if (is(c, SQL.Aliased)) {
      return mapColumnsInAliasedSQLToAlias(c, alias);
    }
    return c;
  }));
}
__name(mapColumnsInSQLToAlias, "mapColumnsInSQLToAlias");

// node_modules/drizzle-orm/selection-proxy.js
var SelectionProxyHandler = class _SelectionProxyHandler {
  static {
    __name(this, "SelectionProxyHandler");
  }
  static [entityKind] = "SelectionProxyHandler";
  config;
  constructor(config) {
    this.config = { ...config };
  }
  get(subquery, prop) {
    if (prop === "_") {
      return {
        ...subquery["_"],
        selectedFields: new Proxy(
          subquery._.selectedFields,
          this
        )
      };
    }
    if (prop === ViewBaseConfig) {
      return {
        ...subquery[ViewBaseConfig],
        selectedFields: new Proxy(
          subquery[ViewBaseConfig].selectedFields,
          this
        )
      };
    }
    if (typeof prop === "symbol") {
      return subquery[prop];
    }
    const columns = is(subquery, Subquery) ? subquery._.selectedFields : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;
    const value = columns[prop];
    if (is(value, SQL.Aliased)) {
      if (this.config.sqlAliasedBehavior === "sql" && !value.isSelectionField) {
        return value.sql;
      }
      const newValue = value.clone();
      newValue.isSelectionField = true;
      return newValue;
    }
    if (is(value, SQL)) {
      if (this.config.sqlBehavior === "sql") {
        return value;
      }
      throw new Error(
        `You tried to reference "${prop}" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using ".as('alias')" method.`
      );
    }
    if (is(value, Column)) {
      if (this.config.alias) {
        return new Proxy(
          value,
          new ColumnAliasProxyHandler(
            new Proxy(
              value.table,
              new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)
            )
          )
        );
      }
      return value;
    }
    if (typeof value !== "object" || value === null) {
      return value;
    }
    return new Proxy(value, new _SelectionProxyHandler(this.config));
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/delete.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/query-promise.js
init_checked_fetch();
init_modules_watch_stub();
var QueryPromise = class {
  static {
    __name(this, "QueryPromise");
  }
  static [entityKind] = "QueryPromise";
  [Symbol.toStringTag] = "QueryPromise";
  catch(onRejected) {
    return this.then(void 0, onRejected);
  }
  finally(onFinally) {
    return this.then(
      (value) => {
        onFinally?.();
        return value;
      },
      (reason) => {
        onFinally?.();
        throw reason;
      }
    );
  }
  then(onFulfilled, onRejected) {
    return this.execute().then(onFulfilled, onRejected);
  }
};

// node_modules/drizzle-orm/sqlite-core/table.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/columns/all.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/columns/blob.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/columns/common.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/foreign-keys.js
init_checked_fetch();
init_modules_watch_stub();
var ForeignKeyBuilder2 = class {
  static {
    __name(this, "ForeignKeyBuilder");
  }
  static [entityKind] = "SQLiteForeignKeyBuilder";
  /** @internal */
  reference;
  /** @internal */
  _onUpdate;
  /** @internal */
  _onDelete;
  constructor(config, actions) {
    this.reference = () => {
      const { name: name2, columns, foreignColumns } = config();
      return { name: name2, columns, foreignTable: foreignColumns[0].table, foreignColumns };
    };
    if (actions) {
      this._onUpdate = actions.onUpdate;
      this._onDelete = actions.onDelete;
    }
  }
  onUpdate(action) {
    this._onUpdate = action;
    return this;
  }
  onDelete(action) {
    this._onDelete = action;
    return this;
  }
  /** @internal */
  build(table) {
    return new ForeignKey2(table, this);
  }
};
var ForeignKey2 = class {
  static {
    __name(this, "ForeignKey");
  }
  constructor(table, builder) {
    this.table = table;
    this.reference = builder.reference;
    this.onUpdate = builder._onUpdate;
    this.onDelete = builder._onDelete;
  }
  static [entityKind] = "SQLiteForeignKey";
  reference;
  onUpdate;
  onDelete;
  getName() {
    const { name: name2, columns, foreignColumns } = this.reference();
    const columnNames = columns.map((column) => column.name);
    const foreignColumnNames = foreignColumns.map((column) => column.name);
    const chunks = [
      this.table[TableName],
      ...columnNames,
      foreignColumns[0].table[TableName],
      ...foreignColumnNames
    ];
    return name2 ?? `${chunks.join("_")}_fk`;
  }
};

// node_modules/drizzle-orm/sqlite-core/unique-constraint.js
init_checked_fetch();
init_modules_watch_stub();
function uniqueKeyName2(table, columns) {
  return `${table[TableName]}_${columns.join("_")}_unique`;
}
__name(uniqueKeyName2, "uniqueKeyName");
var UniqueConstraintBuilder2 = class {
  static {
    __name(this, "UniqueConstraintBuilder");
  }
  constructor(columns, name2) {
    this.name = name2;
    this.columns = columns;
  }
  static [entityKind] = "SQLiteUniqueConstraintBuilder";
  /** @internal */
  columns;
  /** @internal */
  build(table) {
    return new UniqueConstraint2(table, this.columns, this.name);
  }
};
var UniqueOnConstraintBuilder2 = class {
  static {
    __name(this, "UniqueOnConstraintBuilder");
  }
  static [entityKind] = "SQLiteUniqueOnConstraintBuilder";
  /** @internal */
  name;
  constructor(name2) {
    this.name = name2;
  }
  on(...columns) {
    return new UniqueConstraintBuilder2(columns, this.name);
  }
};
var UniqueConstraint2 = class {
  static {
    __name(this, "UniqueConstraint");
  }
  constructor(table, columns, name2) {
    this.table = table;
    this.columns = columns;
    this.name = name2 ?? uniqueKeyName2(this.table, this.columns.map((column) => column.name));
  }
  static [entityKind] = "SQLiteUniqueConstraint";
  columns;
  name;
  getName() {
    return this.name;
  }
};

// node_modules/drizzle-orm/sqlite-core/columns/common.js
var SQLiteColumnBuilder = class extends ColumnBuilder {
  static {
    __name(this, "SQLiteColumnBuilder");
  }
  static [entityKind] = "SQLiteColumnBuilder";
  foreignKeyConfigs = [];
  references(ref, actions = {}) {
    this.foreignKeyConfigs.push({ ref, actions });
    return this;
  }
  unique(name2) {
    this.config.isUnique = true;
    this.config.uniqueName = name2;
    return this;
  }
  generatedAlwaysAs(as, config) {
    this.config.generated = {
      as,
      type: "always",
      mode: config?.mode ?? "virtual"
    };
    return this;
  }
  /** @internal */
  buildForeignKeys(column, table) {
    return this.foreignKeyConfigs.map(({ ref, actions }) => {
      return ((ref2, actions2) => {
        const builder = new ForeignKeyBuilder2(() => {
          const foreignColumn = ref2();
          return { columns: [column], foreignColumns: [foreignColumn] };
        });
        if (actions2.onUpdate) {
          builder.onUpdate(actions2.onUpdate);
        }
        if (actions2.onDelete) {
          builder.onDelete(actions2.onDelete);
        }
        return builder.build(table);
      })(ref, actions);
    });
  }
};
var SQLiteColumn = class extends Column {
  static {
    __name(this, "SQLiteColumn");
  }
  constructor(table, config) {
    if (!config.uniqueName) {
      config.uniqueName = uniqueKeyName2(table, [config.name]);
    }
    super(table, config);
    this.table = table;
  }
  static [entityKind] = "SQLiteColumn";
};

// node_modules/drizzle-orm/sqlite-core/columns/blob.js
var SQLiteBigIntBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteBigIntBuilder");
  }
  static [entityKind] = "SQLiteBigIntBuilder";
  constructor(name2) {
    super(name2, "bigint", "SQLiteBigInt");
  }
  /** @internal */
  build(table) {
    return new SQLiteBigInt(table, this.config);
  }
};
var SQLiteBigInt = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteBigInt");
  }
  static [entityKind] = "SQLiteBigInt";
  getSQLType() {
    return "blob";
  }
  mapFromDriverValue(value) {
    return BigInt(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));
  }
  mapToDriverValue(value) {
    return Buffer.from(value.toString());
  }
};
var SQLiteBlobJsonBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteBlobJsonBuilder");
  }
  static [entityKind] = "SQLiteBlobJsonBuilder";
  constructor(name2) {
    super(name2, "json", "SQLiteBlobJson");
  }
  /** @internal */
  build(table) {
    return new SQLiteBlobJson(
      table,
      this.config
    );
  }
};
var SQLiteBlobJson = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteBlobJson");
  }
  static [entityKind] = "SQLiteBlobJson";
  getSQLType() {
    return "blob";
  }
  mapFromDriverValue(value) {
    return JSON.parse(Buffer.isBuffer(value) ? value.toString() : String.fromCodePoint(...value));
  }
  mapToDriverValue(value) {
    return Buffer.from(JSON.stringify(value));
  }
};
var SQLiteBlobBufferBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteBlobBufferBuilder");
  }
  static [entityKind] = "SQLiteBlobBufferBuilder";
  constructor(name2) {
    super(name2, "buffer", "SQLiteBlobBuffer");
  }
  /** @internal */
  build(table) {
    return new SQLiteBlobBuffer(table, this.config);
  }
};
var SQLiteBlobBuffer = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteBlobBuffer");
  }
  static [entityKind] = "SQLiteBlobBuffer";
  getSQLType() {
    return "blob";
  }
};
function blob(a, b) {
  const { name: name2, config } = getColumnNameAndConfig(a, b);
  if (config?.mode === "json") {
    return new SQLiteBlobJsonBuilder(name2);
  }
  if (config?.mode === "bigint") {
    return new SQLiteBigIntBuilder(name2);
  }
  return new SQLiteBlobBufferBuilder(name2);
}
__name(blob, "blob");

// node_modules/drizzle-orm/sqlite-core/columns/custom.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteCustomColumnBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteCustomColumnBuilder");
  }
  static [entityKind] = "SQLiteCustomColumnBuilder";
  constructor(name2, fieldConfig, customTypeParams) {
    super(name2, "custom", "SQLiteCustomColumn");
    this.config.fieldConfig = fieldConfig;
    this.config.customTypeParams = customTypeParams;
  }
  /** @internal */
  build(table) {
    return new SQLiteCustomColumn(
      table,
      this.config
    );
  }
};
var SQLiteCustomColumn = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteCustomColumn");
  }
  static [entityKind] = "SQLiteCustomColumn";
  sqlName;
  mapTo;
  mapFrom;
  constructor(table, config) {
    super(table, config);
    this.sqlName = config.customTypeParams.dataType(config.fieldConfig);
    this.mapTo = config.customTypeParams.toDriver;
    this.mapFrom = config.customTypeParams.fromDriver;
  }
  getSQLType() {
    return this.sqlName;
  }
  mapFromDriverValue(value) {
    return typeof this.mapFrom === "function" ? this.mapFrom(value) : value;
  }
  mapToDriverValue(value) {
    return typeof this.mapTo === "function" ? this.mapTo(value) : value;
  }
};
function customType(customTypeParams) {
  return (a, b) => {
    const { name: name2, config } = getColumnNameAndConfig(a, b);
    return new SQLiteCustomColumnBuilder(
      name2,
      config,
      customTypeParams
    );
  };
}
__name(customType, "customType");

// node_modules/drizzle-orm/sqlite-core/columns/integer.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteBaseIntegerBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteBaseIntegerBuilder");
  }
  static [entityKind] = "SQLiteBaseIntegerBuilder";
  constructor(name2, dataType, columnType) {
    super(name2, dataType, columnType);
    this.config.autoIncrement = false;
  }
  primaryKey(config) {
    if (config?.autoIncrement) {
      this.config.autoIncrement = true;
    }
    this.config.hasDefault = true;
    return super.primaryKey();
  }
};
var SQLiteBaseInteger = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteBaseInteger");
  }
  static [entityKind] = "SQLiteBaseInteger";
  autoIncrement = this.config.autoIncrement;
  getSQLType() {
    return "integer";
  }
};
var SQLiteIntegerBuilder = class extends SQLiteBaseIntegerBuilder {
  static {
    __name(this, "SQLiteIntegerBuilder");
  }
  static [entityKind] = "SQLiteIntegerBuilder";
  constructor(name2) {
    super(name2, "number", "SQLiteInteger");
  }
  build(table) {
    return new SQLiteInteger(
      table,
      this.config
    );
  }
};
var SQLiteInteger = class extends SQLiteBaseInteger {
  static {
    __name(this, "SQLiteInteger");
  }
  static [entityKind] = "SQLiteInteger";
};
var SQLiteTimestampBuilder = class extends SQLiteBaseIntegerBuilder {
  static {
    __name(this, "SQLiteTimestampBuilder");
  }
  static [entityKind] = "SQLiteTimestampBuilder";
  constructor(name2, mode) {
    super(name2, "date", "SQLiteTimestamp");
    this.config.mode = mode;
  }
  /**
   * @deprecated Use `default()` with your own expression instead.
   *
   * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.
   */
  defaultNow() {
    return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);
  }
  build(table) {
    return new SQLiteTimestamp(
      table,
      this.config
    );
  }
};
var SQLiteTimestamp = class extends SQLiteBaseInteger {
  static {
    __name(this, "SQLiteTimestamp");
  }
  static [entityKind] = "SQLiteTimestamp";
  mode = this.config.mode;
  mapFromDriverValue(value) {
    if (this.config.mode === "timestamp") {
      return new Date(value * 1e3);
    }
    return new Date(value);
  }
  mapToDriverValue(value) {
    const unix = value.getTime();
    if (this.config.mode === "timestamp") {
      return Math.floor(unix / 1e3);
    }
    return unix;
  }
};
var SQLiteBooleanBuilder = class extends SQLiteBaseIntegerBuilder {
  static {
    __name(this, "SQLiteBooleanBuilder");
  }
  static [entityKind] = "SQLiteBooleanBuilder";
  constructor(name2, mode) {
    super(name2, "boolean", "SQLiteBoolean");
    this.config.mode = mode;
  }
  build(table) {
    return new SQLiteBoolean(
      table,
      this.config
    );
  }
};
var SQLiteBoolean = class extends SQLiteBaseInteger {
  static {
    __name(this, "SQLiteBoolean");
  }
  static [entityKind] = "SQLiteBoolean";
  mode = this.config.mode;
  mapFromDriverValue(value) {
    return Number(value) === 1;
  }
  mapToDriverValue(value) {
    return value ? 1 : 0;
  }
};
function integer(a, b) {
  const { name: name2, config } = getColumnNameAndConfig(a, b);
  if (config?.mode === "timestamp" || config?.mode === "timestamp_ms") {
    return new SQLiteTimestampBuilder(name2, config.mode);
  }
  if (config?.mode === "boolean") {
    return new SQLiteBooleanBuilder(name2, config.mode);
  }
  return new SQLiteIntegerBuilder(name2);
}
__name(integer, "integer");

// node_modules/drizzle-orm/sqlite-core/columns/numeric.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteNumericBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteNumericBuilder");
  }
  static [entityKind] = "SQLiteNumericBuilder";
  constructor(name2) {
    super(name2, "string", "SQLiteNumeric");
  }
  /** @internal */
  build(table) {
    return new SQLiteNumeric(
      table,
      this.config
    );
  }
};
var SQLiteNumeric = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteNumeric");
  }
  static [entityKind] = "SQLiteNumeric";
  getSQLType() {
    return "numeric";
  }
};
function numeric(name2) {
  return new SQLiteNumericBuilder(name2 ?? "");
}
__name(numeric, "numeric");

// node_modules/drizzle-orm/sqlite-core/columns/real.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteRealBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteRealBuilder");
  }
  static [entityKind] = "SQLiteRealBuilder";
  constructor(name2) {
    super(name2, "number", "SQLiteReal");
  }
  /** @internal */
  build(table) {
    return new SQLiteReal(table, this.config);
  }
};
var SQLiteReal = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteReal");
  }
  static [entityKind] = "SQLiteReal";
  getSQLType() {
    return "real";
  }
};
function real(name2) {
  return new SQLiteRealBuilder(name2 ?? "");
}
__name(real, "real");

// node_modules/drizzle-orm/sqlite-core/columns/text.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteTextBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteTextBuilder");
  }
  static [entityKind] = "SQLiteTextBuilder";
  constructor(name2, config) {
    super(name2, "string", "SQLiteText");
    this.config.enumValues = config.enum;
    this.config.length = config.length;
  }
  /** @internal */
  build(table) {
    return new SQLiteText(table, this.config);
  }
};
var SQLiteText = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteText");
  }
  static [entityKind] = "SQLiteText";
  enumValues = this.config.enumValues;
  length = this.config.length;
  constructor(table, config) {
    super(table, config);
  }
  getSQLType() {
    return `text${this.config.length ? `(${this.config.length})` : ""}`;
  }
};
var SQLiteTextJsonBuilder = class extends SQLiteColumnBuilder {
  static {
    __name(this, "SQLiteTextJsonBuilder");
  }
  static [entityKind] = "SQLiteTextJsonBuilder";
  constructor(name2) {
    super(name2, "json", "SQLiteTextJson");
  }
  /** @internal */
  build(table) {
    return new SQLiteTextJson(
      table,
      this.config
    );
  }
};
var SQLiteTextJson = class extends SQLiteColumn {
  static {
    __name(this, "SQLiteTextJson");
  }
  static [entityKind] = "SQLiteTextJson";
  getSQLType() {
    return "text";
  }
  mapFromDriverValue(value) {
    return JSON.parse(value);
  }
  mapToDriverValue(value) {
    return JSON.stringify(value);
  }
};
function text(a, b = {}) {
  const { name: name2, config } = getColumnNameAndConfig(a, b);
  if (config.mode === "json") {
    return new SQLiteTextJsonBuilder(name2);
  }
  return new SQLiteTextBuilder(name2, config);
}
__name(text, "text");

// node_modules/drizzle-orm/sqlite-core/columns/all.js
function getSQLiteColumnBuilders() {
  return {
    blob,
    customType,
    integer,
    numeric,
    real,
    text
  };
}
__name(getSQLiteColumnBuilders, "getSQLiteColumnBuilders");

// node_modules/drizzle-orm/sqlite-core/table.js
var InlineForeignKeys2 = Symbol.for("drizzle:SQLiteInlineForeignKeys");
var SQLiteTable = class extends Table {
  static {
    __name(this, "SQLiteTable");
  }
  static [entityKind] = "SQLiteTable";
  /** @internal */
  static Symbol = Object.assign({}, Table.Symbol, {
    InlineForeignKeys: InlineForeignKeys2
  });
  /** @internal */
  [Table.Symbol.Columns];
  /** @internal */
  [InlineForeignKeys2] = [];
  /** @internal */
  [Table.Symbol.ExtraConfigBuilder] = void 0;
};
function sqliteTableBase(name2, columns, extraConfig, schema, baseName = name2) {
  const rawTable = new SQLiteTable(name2, schema, baseName);
  const parsedColumns = typeof columns === "function" ? columns(getSQLiteColumnBuilders()) : columns;
  const builtColumns = Object.fromEntries(
    Object.entries(parsedColumns).map(([name22, colBuilderBase]) => {
      const colBuilder = colBuilderBase;
      colBuilder.setName(name22);
      const column = colBuilder.build(rawTable);
      rawTable[InlineForeignKeys2].push(...colBuilder.buildForeignKeys(column, rawTable));
      return [name22, column];
    })
  );
  const table = Object.assign(rawTable, builtColumns);
  table[Table.Symbol.Columns] = builtColumns;
  table[Table.Symbol.ExtraConfigColumns] = builtColumns;
  if (extraConfig) {
    table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;
  }
  return table;
}
__name(sqliteTableBase, "sqliteTableBase");
var sqliteTable = /* @__PURE__ */ __name((name2, columns, extraConfig) => {
  return sqliteTableBase(name2, columns, extraConfig);
}, "sqliteTable");

// node_modules/drizzle-orm/sqlite-core/query-builders/delete.js
var SQLiteDeleteBase = class extends QueryPromise {
  static {
    __name(this, "SQLiteDeleteBase");
  }
  constructor(table, session, dialect, withList) {
    super();
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.config = { table, withList };
  }
  static [entityKind] = "SQLiteDelete";
  /** @internal */
  config;
  /**
   * Adds a `where` clause to the query.
   *
   * Calling this method will delete only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/delete}
   *
   * @param where the `where` clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be deleted.
   *
   * ```ts
   * // Delete all cars with green color
   * db.delete(cars).where(eq(cars.color, 'green'));
   * // or
   * db.delete(cars).where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Delete all BMW cars with a green color
   * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Delete all cars with the green or blue color
   * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    this.config.where = where;
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.table[Table.Symbol.Columns],
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      this.config.orderBy = orderByArray;
    } else {
      const orderByArray = columns;
      this.config.orderBy = orderByArray;
    }
    return this;
  }
  limit(limit) {
    this.config.limit = limit;
    return this;
  }
  returning(fields = this.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildDeleteQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().run(placeholderValues);
  }, "run");
  all = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().all(placeholderValues);
  }, "all");
  get = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().get(placeholderValues);
  }, "get");
  values = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().values(placeholderValues);
  }, "values");
  async execute(placeholderValues) {
    return this._prepare().execute(placeholderValues);
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/insert.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/query-builders/query-builder.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/dialect.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/casing.js
init_checked_fetch();
init_modules_watch_stub();
function toSnakeCase(input) {
  const words = input.replace(/['\u2019]/g, "").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? [];
  return words.map((word) => word.toLowerCase()).join("_");
}
__name(toSnakeCase, "toSnakeCase");
function toCamelCase(input) {
  const words = input.replace(/['\u2019]/g, "").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? [];
  return words.reduce((acc, word, i) => {
    const formattedWord = i === 0 ? word.toLowerCase() : `${word[0].toUpperCase()}${word.slice(1)}`;
    return acc + formattedWord;
  }, "");
}
__name(toCamelCase, "toCamelCase");
function noopCase(input) {
  return input;
}
__name(noopCase, "noopCase");
var CasingCache = class {
  static {
    __name(this, "CasingCache");
  }
  static [entityKind] = "CasingCache";
  /** @internal */
  cache = {};
  cachedTables = {};
  convert;
  constructor(casing) {
    this.convert = casing === "snake_case" ? toSnakeCase : casing === "camelCase" ? toCamelCase : noopCase;
  }
  getColumnCasing(column) {
    if (!column.keyAsName)
      return column.name;
    const schema = column.table[Table.Symbol.Schema] ?? "public";
    const tableName = column.table[Table.Symbol.OriginalName];
    const key = `${schema}.${tableName}.${column.name}`;
    if (!this.cache[key]) {
      this.cacheTable(column.table);
    }
    return this.cache[key];
  }
  cacheTable(table) {
    const schema = table[Table.Symbol.Schema] ?? "public";
    const tableName = table[Table.Symbol.OriginalName];
    const tableKey = `${schema}.${tableName}`;
    if (!this.cachedTables[tableKey]) {
      for (const column of Object.values(table[Table.Symbol.Columns])) {
        const columnKey = `${tableKey}.${column.name}`;
        this.cache[columnKey] = this.convert(column.name);
      }
      this.cachedTables[tableKey] = true;
    }
  }
  clearCache() {
    this.cache = {};
    this.cachedTables = {};
  }
};

// node_modules/drizzle-orm/errors.js
init_checked_fetch();
init_modules_watch_stub();
var DrizzleError = class extends Error {
  static {
    __name(this, "DrizzleError");
  }
  static [entityKind] = "DrizzleError";
  constructor({ message, cause }) {
    super(message);
    this.name = "DrizzleError";
    this.cause = cause;
  }
};
var TransactionRollbackError = class extends DrizzleError {
  static {
    __name(this, "TransactionRollbackError");
  }
  static [entityKind] = "TransactionRollbackError";
  constructor() {
    super({ message: "Rollback" });
  }
};

// node_modules/drizzle-orm/sqlite-core/view-base.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteViewBase = class extends View {
  static {
    __name(this, "SQLiteViewBase");
  }
  static [entityKind] = "SQLiteViewBase";
};

// node_modules/drizzle-orm/sqlite-core/dialect.js
var SQLiteDialect = class {
  static {
    __name(this, "SQLiteDialect");
  }
  static [entityKind] = "SQLiteDialect";
  /** @internal */
  casing;
  constructor(config) {
    this.casing = new CasingCache(config?.casing);
  }
  escapeName(name2) {
    return `"${name2}"`;
  }
  escapeParam(_num) {
    return "?";
  }
  escapeString(str) {
    return `'${str.replace(/'/g, "''")}'`;
  }
  buildWithCTE(queries) {
    if (!queries?.length)
      return void 0;
    const withSqlChunks = [sql`with `];
    for (const [i, w] of queries.entries()) {
      withSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);
      if (i < queries.length - 1) {
        withSqlChunks.push(sql`, `);
      }
    }
    withSqlChunks.push(sql` `);
    return sql.join(withSqlChunks);
  }
  buildDeleteQuery({ table, where, returning, withList, limit, orderBy }) {
    const withSql = this.buildWithCTE(withList);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const whereSql = where ? sql` where ${where}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    return sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;
  }
  buildUpdateSet(table, set) {
    const tableColumns = table[Table.Symbol.Columns];
    const columnNames = Object.keys(tableColumns).filter(
      (colName) => set[colName] !== void 0 || tableColumns[colName]?.onUpdateFn !== void 0
    );
    const setSize = columnNames.length;
    return sql.join(columnNames.flatMap((colName, i) => {
      const col = tableColumns[colName];
      const value = set[colName] ?? sql.param(col.onUpdateFn(), col);
      const res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;
      if (i < setSize - 1) {
        return [res, sql.raw(", ")];
      }
      return [res];
    }));
  }
  buildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }) {
    const withSql = this.buildWithCTE(withList);
    const setSql = this.buildUpdateSet(table, set);
    const fromSql = from && sql.join([sql.raw(" from "), this.buildFromTable(from)]);
    const joinsSql = this.buildJoins(joins);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const whereSql = where ? sql` where ${where}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    return sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;
  }
  /**
   * Builds selection SQL with provided fields/expressions
   *
   * Examples:
   *
   * `select <selection> from`
   *
   * `insert ... returning <selection>`
   *
   * If `isSingleTable` is true, then columns won't be prefixed with table name
   */
  buildSelection(fields, { isSingleTable = false } = {}) {
    const columnsLen = fields.length;
    const chunks = fields.flatMap(({ field }, i) => {
      const chunk = [];
      if (is(field, SQL.Aliased) && field.isSelectionField) {
        chunk.push(sql.identifier(field.fieldAlias));
      } else if (is(field, SQL.Aliased) || is(field, SQL)) {
        const query = is(field, SQL.Aliased) ? field.sql : field;
        if (isSingleTable) {
          chunk.push(
            new SQL(
              query.queryChunks.map((c) => {
                if (is(c, Column)) {
                  return sql.identifier(this.casing.getColumnCasing(c));
                }
                return c;
              })
            )
          );
        } else {
          chunk.push(query);
        }
        if (is(field, SQL.Aliased)) {
          chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);
        }
      } else if (is(field, Column)) {
        const tableName = field.table[Table.Symbol.Name];
        if (isSingleTable) {
          chunk.push(sql.identifier(this.casing.getColumnCasing(field)));
        } else {
          chunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);
        }
      }
      if (i < columnsLen - 1) {
        chunk.push(sql`, `);
      }
      return chunk;
    });
    return sql.join(chunks);
  }
  buildJoins(joins) {
    if (!joins || joins.length === 0) {
      return void 0;
    }
    const joinsArray = [];
    if (joins) {
      for (const [index, joinMeta] of joins.entries()) {
        if (index === 0) {
          joinsArray.push(sql` `);
        }
        const table = joinMeta.table;
        if (is(table, SQLiteTable)) {
          const tableName = table[SQLiteTable.Symbol.Name];
          const tableSchema = table[SQLiteTable.Symbol.Schema];
          const origTableName = table[SQLiteTable.Symbol.OriginalName];
          const alias = tableName === origTableName ? void 0 : joinMeta.alias;
          joinsArray.push(
            sql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`
          );
        } else {
          joinsArray.push(
            sql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`
          );
        }
        if (index < joins.length - 1) {
          joinsArray.push(sql` `);
        }
      }
    }
    return sql.join(joinsArray);
  }
  buildLimit(limit) {
    return typeof limit === "object" || typeof limit === "number" && limit >= 0 ? sql` limit ${limit}` : void 0;
  }
  buildOrderBy(orderBy) {
    const orderByList = [];
    if (orderBy) {
      for (const [index, orderByValue] of orderBy.entries()) {
        orderByList.push(orderByValue);
        if (index < orderBy.length - 1) {
          orderByList.push(sql`, `);
        }
      }
    }
    return orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : void 0;
  }
  buildFromTable(table) {
    if (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {
      return sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;
    }
    return table;
  }
  buildSelectQuery({
    withList,
    fields,
    fieldsFlat,
    where,
    having,
    table,
    joins,
    orderBy,
    groupBy,
    limit,
    offset,
    distinct,
    setOperators
  }) {
    const fieldsList = fieldsFlat ?? orderSelectedFields(fields);
    for (const f of fieldsList) {
      if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table._.alias : is(table, SQLiteViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(
        ({ alias }) => alias === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])
      ))(f.field.table)) {
        const tableName = getTableName(f.field.table);
        throw new Error(
          `Your "${f.path.join("->")}" field references a column "${tableName}"."${f.field.name}", but the table "${tableName}" is not part of the query! Did you forget to join it?`
        );
      }
    }
    const isSingleTable = !joins || joins.length === 0;
    const withSql = this.buildWithCTE(withList);
    const distinctSql = distinct ? sql` distinct` : void 0;
    const selection = this.buildSelection(fieldsList, { isSingleTable });
    const tableSql = this.buildFromTable(table);
    const joinsSql = this.buildJoins(joins);
    const whereSql = where ? sql` where ${where}` : void 0;
    const havingSql = having ? sql` having ${having}` : void 0;
    const groupByList = [];
    if (groupBy) {
      for (const [index, groupByValue] of groupBy.entries()) {
        groupByList.push(groupByValue);
        if (index < groupBy.length - 1) {
          groupByList.push(sql`, `);
        }
      }
    }
    const groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    const offsetSql = offset ? sql` offset ${offset}` : void 0;
    const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;
    if (setOperators.length > 0) {
      return this.buildSetOperations(finalQuery, setOperators);
    }
    return finalQuery;
  }
  buildSetOperations(leftSelect, setOperators) {
    const [setOperator, ...rest] = setOperators;
    if (!setOperator) {
      throw new Error("Cannot pass undefined values to any set operator");
    }
    if (rest.length === 0) {
      return this.buildSetOperationQuery({ leftSelect, setOperator });
    }
    return this.buildSetOperations(
      this.buildSetOperationQuery({ leftSelect, setOperator }),
      rest
    );
  }
  buildSetOperationQuery({
    leftSelect,
    setOperator: { type, isAll, rightSelect, limit, orderBy, offset }
  }) {
    const leftChunk = sql`${leftSelect.getSQL()} `;
    const rightChunk = sql`${rightSelect.getSQL()}`;
    let orderBySql;
    if (orderBy && orderBy.length > 0) {
      const orderByValues = [];
      for (const singleOrderBy of orderBy) {
        if (is(singleOrderBy, SQLiteColumn)) {
          orderByValues.push(sql.identifier(singleOrderBy.name));
        } else if (is(singleOrderBy, SQL)) {
          for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {
            const chunk = singleOrderBy.queryChunks[i];
            if (is(chunk, SQLiteColumn)) {
              singleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));
            }
          }
          orderByValues.push(sql`${singleOrderBy}`);
        } else {
          orderByValues.push(sql`${singleOrderBy}`);
        }
      }
      orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;
    }
    const limitSql = typeof limit === "object" || typeof limit === "number" && limit >= 0 ? sql` limit ${limit}` : void 0;
    const operatorChunk = sql.raw(`${type} ${isAll ? "all " : ""}`);
    const offsetSql = offset ? sql` offset ${offset}` : void 0;
    return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;
  }
  buildInsertQuery({ table, values: valuesOrSelect, onConflict, returning, withList, select }) {
    const valuesSqlList = [];
    const columns = table[Table.Symbol.Columns];
    const colEntries = Object.entries(columns).filter(
      ([_, col]) => !col.shouldDisableInsert()
    );
    const insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));
    if (select) {
      const select2 = valuesOrSelect;
      if (is(select2, SQL)) {
        valuesSqlList.push(select2);
      } else {
        valuesSqlList.push(select2.getSQL());
      }
    } else {
      const values = valuesOrSelect;
      valuesSqlList.push(sql.raw("values "));
      for (const [valueIndex, value] of values.entries()) {
        const valueList = [];
        for (const [fieldName, col] of colEntries) {
          const colValue = value[fieldName];
          if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {
            let defaultValue;
            if (col.default !== null && col.default !== void 0) {
              defaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);
            } else if (col.defaultFn !== void 0) {
              const defaultFnResult = col.defaultFn();
              defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);
            } else if (!col.default && col.onUpdateFn !== void 0) {
              const onUpdateFnResult = col.onUpdateFn();
              defaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);
            } else {
              defaultValue = sql`null`;
            }
            valueList.push(defaultValue);
          } else {
            valueList.push(colValue);
          }
        }
        valuesSqlList.push(valueList);
        if (valueIndex < values.length - 1) {
          valuesSqlList.push(sql`, `);
        }
      }
    }
    const withSql = this.buildWithCTE(withList);
    const valuesSql = sql.join(valuesSqlList);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const onConflictSql = onConflict ? sql` on conflict ${onConflict}` : void 0;
    return sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;
  }
  sqlToQuery(sql2, invokeSource) {
    return sql2.toQuery({
      casing: this.casing,
      escapeName: this.escapeName,
      escapeParam: this.escapeParam,
      escapeString: this.escapeString,
      invokeSource
    });
  }
  buildRelationalQuery({
    fullSchema,
    schema,
    tableNamesMap,
    table,
    tableConfig,
    queryConfig: config,
    tableAlias,
    nestedQueryRelation,
    joinOn
  }) {
    let selection = [];
    let limit, offset, orderBy = [], where;
    const joins = [];
    if (config === true) {
      const selectionEntries = Object.entries(tableConfig.columns);
      selection = selectionEntries.map(([key, value]) => ({
        dbKey: value.name,
        tsKey: key,
        field: aliasedTableColumn(value, tableAlias),
        relationTableTsKey: void 0,
        isJson: false,
        selection: []
      }));
    } else {
      const aliasedColumns = Object.fromEntries(
        Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])
      );
      if (config.where) {
        const whereSql = typeof config.where === "function" ? config.where(aliasedColumns, getOperators()) : config.where;
        where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);
      }
      const fieldsSelection = [];
      let selectedColumns = [];
      if (config.columns) {
        let isIncludeMode = false;
        for (const [field, value] of Object.entries(config.columns)) {
          if (value === void 0) {
            continue;
          }
          if (field in tableConfig.columns) {
            if (!isIncludeMode && value === true) {
              isIncludeMode = true;
            }
            selectedColumns.push(field);
          }
        }
        if (selectedColumns.length > 0) {
          selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));
        }
      } else {
        selectedColumns = Object.keys(tableConfig.columns);
      }
      for (const field of selectedColumns) {
        const column = tableConfig.columns[field];
        fieldsSelection.push({ tsKey: field, value: column });
      }
      let selectedRelations = [];
      if (config.with) {
        selectedRelations = Object.entries(config.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));
      }
      let extras;
      if (config.extras) {
        extras = typeof config.extras === "function" ? config.extras(aliasedColumns, { sql }) : config.extras;
        for (const [tsKey, value] of Object.entries(extras)) {
          fieldsSelection.push({
            tsKey,
            value: mapColumnsInAliasedSQLToAlias(value, tableAlias)
          });
        }
      }
      for (const { tsKey, value } of fieldsSelection) {
        selection.push({
          dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,
          tsKey,
          field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,
          relationTableTsKey: void 0,
          isJson: false,
          selection: []
        });
      }
      let orderByOrig = typeof config.orderBy === "function" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];
      if (!Array.isArray(orderByOrig)) {
        orderByOrig = [orderByOrig];
      }
      orderBy = orderByOrig.map((orderByValue) => {
        if (is(orderByValue, Column)) {
          return aliasedTableColumn(orderByValue, tableAlias);
        }
        return mapColumnsInSQLToAlias(orderByValue, tableAlias);
      });
      limit = config.limit;
      offset = config.offset;
      for (const {
        tsKey: selectedRelationTsKey,
        queryConfig: selectedRelationConfigValue,
        relation
      } of selectedRelations) {
        const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
        const relationTableName = getTableUniqueName(relation.referencedTable);
        const relationTableTsName = tableNamesMap[relationTableName];
        const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
        const joinOn2 = and(
          ...normalizedRelation.fields.map(
            (field2, i) => eq(
              aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),
              aliasedTableColumn(field2, tableAlias)
            )
          )
        );
        const builtRelation = this.buildRelationalQuery({
          fullSchema,
          schema,
          tableNamesMap,
          table: fullSchema[relationTableTsName],
          tableConfig: schema[relationTableTsName],
          queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,
          tableAlias: relationTableAlias,
          joinOn: joinOn2,
          nestedQueryRelation: relation
        });
        const field = sql`(${builtRelation.sql})`.as(selectedRelationTsKey);
        selection.push({
          dbKey: selectedRelationTsKey,
          tsKey: selectedRelationTsKey,
          field,
          relationTableTsKey: relationTableTsName,
          isJson: true,
          selection: builtRelation.selection
        });
      }
    }
    if (selection.length === 0) {
      throw new DrizzleError({
        message: `No fields selected for table "${tableConfig.tsName}" ("${tableAlias}"). You need to have at least one item in "columns", "with" or "extras". If you need to select all columns, omit the "columns" key or set it to undefined.`
      });
    }
    let result;
    where = and(joinOn, where);
    if (nestedQueryRelation) {
      let field = sql`json_array(${sql.join(
        selection.map(
          ({ field: field2 }) => is(field2, SQLiteColumn) ? sql.identifier(this.casing.getColumnCasing(field2)) : is(field2, SQL.Aliased) ? field2.sql : field2
        ),
        sql`, `
      )})`;
      if (is(nestedQueryRelation, Many)) {
        field = sql`coalesce(json_group_array(${field}), json_array())`;
      }
      const nestedSelection = [{
        dbKey: "data",
        tsKey: "data",
        field: field.as("data"),
        isJson: true,
        relationTableTsKey: tableConfig.tsName,
        selection
      }];
      const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;
      if (needsSubquery) {
        result = this.buildSelectQuery({
          table: aliasedTable(table, tableAlias),
          fields: {},
          fieldsFlat: [
            {
              path: [],
              field: sql.raw("*")
            }
          ],
          where,
          limit,
          offset,
          orderBy,
          setOperators: []
        });
        where = void 0;
        limit = void 0;
        offset = void 0;
        orderBy = void 0;
      } else {
        result = aliasedTable(table, tableAlias);
      }
      result = this.buildSelectQuery({
        table: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),
        fields: {},
        fieldsFlat: nestedSelection.map(({ field: field2 }) => ({
          path: [],
          field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2
        })),
        joins,
        where,
        limit,
        offset,
        orderBy,
        setOperators: []
      });
    } else {
      result = this.buildSelectQuery({
        table: aliasedTable(table, tableAlias),
        fields: {},
        fieldsFlat: selection.map(({ field }) => ({
          path: [],
          field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field
        })),
        joins,
        where,
        limit,
        offset,
        orderBy,
        setOperators: []
      });
    }
    return {
      tableTsKey: tableConfig.tsName,
      sql: result,
      selection
    };
  }
};
var SQLiteSyncDialect = class extends SQLiteDialect {
  static {
    __name(this, "SQLiteSyncDialect");
  }
  static [entityKind] = "SQLiteSyncDialect";
  migrate(migrations, session, config) {
    const migrationsTable = config === void 0 ? "__drizzle_migrations" : typeof config === "string" ? "__drizzle_migrations" : config.migrationsTable ?? "__drizzle_migrations";
    const migrationTableCreate = sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;
    session.run(migrationTableCreate);
    const dbMigrations = session.values(
      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`
    );
    const lastDbMigration = dbMigrations[0] ?? void 0;
    session.run(sql`BEGIN`);
    try {
      for (const migration of migrations) {
        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {
          for (const stmt of migration.sql) {
            session.run(sql.raw(stmt));
          }
          session.run(
            sql`INSERT INTO ${sql.identifier(migrationsTable)} ("hash", "created_at") VALUES(${migration.hash}, ${migration.folderMillis})`
          );
        }
      }
      session.run(sql`COMMIT`);
    } catch (e) {
      session.run(sql`ROLLBACK`);
      throw e;
    }
  }
};
var SQLiteAsyncDialect = class extends SQLiteDialect {
  static {
    __name(this, "SQLiteAsyncDialect");
  }
  static [entityKind] = "SQLiteAsyncDialect";
  async migrate(migrations, session, config) {
    const migrationsTable = config === void 0 ? "__drizzle_migrations" : typeof config === "string" ? "__drizzle_migrations" : config.migrationsTable ?? "__drizzle_migrations";
    const migrationTableCreate = sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;
    await session.run(migrationTableCreate);
    const dbMigrations = await session.values(
      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`
    );
    const lastDbMigration = dbMigrations[0] ?? void 0;
    await session.transaction(async (tx) => {
      for (const migration of migrations) {
        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {
          for (const stmt of migration.sql) {
            await tx.run(sql.raw(stmt));
          }
          await tx.run(
            sql`INSERT INTO ${sql.identifier(migrationsTable)} ("hash", "created_at") VALUES(${migration.hash}, ${migration.folderMillis})`
          );
        }
      }
    });
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/select.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/query-builders/query-builder.js
init_checked_fetch();
init_modules_watch_stub();
var TypedQueryBuilder = class {
  static {
    __name(this, "TypedQueryBuilder");
  }
  static [entityKind] = "TypedQueryBuilder";
  /** @internal */
  getSelectedFields() {
    return this._.selectedFields;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/select.js
var SQLiteSelectBuilder = class {
  static {
    __name(this, "SQLiteSelectBuilder");
  }
  static [entityKind] = "SQLiteSelectBuilder";
  fields;
  session;
  dialect;
  withList;
  distinct;
  constructor(config) {
    this.fields = config.fields;
    this.session = config.session;
    this.dialect = config.dialect;
    this.withList = config.withList;
    this.distinct = config.distinct;
  }
  from(source) {
    const isPartialSelect = !!this.fields;
    let fields;
    if (this.fields) {
      fields = this.fields;
    } else if (is(source, Subquery)) {
      fields = Object.fromEntries(
        Object.keys(source._.selectedFields).map((key) => [key, source[key]])
      );
    } else if (is(source, SQLiteViewBase)) {
      fields = source[ViewBaseConfig].selectedFields;
    } else if (is(source, SQL)) {
      fields = {};
    } else {
      fields = getTableColumns(source);
    }
    return new SQLiteSelectBase({
      table: source,
      fields,
      isPartialSelect,
      session: this.session,
      dialect: this.dialect,
      withList: this.withList,
      distinct: this.distinct
    });
  }
};
var SQLiteSelectQueryBuilderBase = class extends TypedQueryBuilder {
  static {
    __name(this, "SQLiteSelectQueryBuilderBase");
  }
  static [entityKind] = "SQLiteSelectQueryBuilder";
  _;
  /** @internal */
  config;
  joinsNotNullableMap;
  tableName;
  isPartialSelect;
  session;
  dialect;
  constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {
    super();
    this.config = {
      withList,
      table,
      fields: { ...fields },
      distinct,
      setOperators: []
    };
    this.isPartialSelect = isPartialSelect;
    this.session = session;
    this.dialect = dialect;
    this._ = {
      selectedFields: fields
    };
    this.tableName = getTableLikeName(table);
    this.joinsNotNullableMap = typeof this.tableName === "string" ? { [this.tableName]: true } : {};
  }
  createJoin(joinType) {
    return (table, on) => {
      const baseTableName = this.tableName;
      const tableName = getTableLikeName(table);
      if (typeof tableName === "string" && this.config.joins?.some((join) => join.alias === tableName)) {
        throw new Error(`Alias "${tableName}" is already used in this query`);
      }
      if (!this.isPartialSelect) {
        if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === "string") {
          this.config.fields = {
            [baseTableName]: this.config.fields
          };
        }
        if (typeof tableName === "string" && !is(table, SQL)) {
          const selection = is(table, Subquery) ? table._.selectedFields : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];
          this.config.fields[tableName] = selection;
        }
      }
      if (typeof on === "function") {
        on = on(
          new Proxy(
            this.config.fields,
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          )
        );
      }
      if (!this.config.joins) {
        this.config.joins = [];
      }
      this.config.joins.push({ on, table, joinType, alias: tableName });
      if (typeof tableName === "string") {
        switch (joinType) {
          case "left": {
            this.joinsNotNullableMap[tableName] = false;
            break;
          }
          case "right": {
            this.joinsNotNullableMap = Object.fromEntries(
              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
            );
            this.joinsNotNullableMap[tableName] = true;
            break;
          }
          case "inner": {
            this.joinsNotNullableMap[tableName] = true;
            break;
          }
          case "full": {
            this.joinsNotNullableMap = Object.fromEntries(
              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
            );
            this.joinsNotNullableMap[tableName] = false;
            break;
          }
        }
      }
      return this;
    };
  }
  /**
   * Executes a `left join` operation by adding another table to the current query.
   *
   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()
   *   .from(users)
   *   .leftJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .leftJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  leftJoin = this.createJoin("left");
  /**
   * Executes a `right join` operation by adding another table to the current query.
   *
   * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()
   *   .from(users)
   *   .rightJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .rightJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  rightJoin = this.createJoin("right");
  /**
   * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.
   *
   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User; pets: Pet }[] = await db.select()
   *   .from(users)
   *   .innerJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .innerJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  innerJoin = this.createJoin("inner");
  /**
   * Executes a `full join` operation by combining rows from two tables into a new table.
   *
   * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()
   *   .from(users)
   *   .fullJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .fullJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  fullJoin = this.createJoin("full");
  createSetOperator(type, isAll) {
    return (rightSelection) => {
      const rightSelect = typeof rightSelection === "function" ? rightSelection(getSQLiteSetOperators()) : rightSelection;
      if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {
        throw new Error(
          "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
        );
      }
      this.config.setOperators.push({ type, isAll, rightSelect });
      return this;
    };
  }
  /**
   * Adds `union` set operator to the query.
   *
   * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}
   *
   * @example
   *
   * ```ts
   * // Select all unique names from customers and users tables
   * await db.select({ name: users.name })
   *   .from(users)
   *   .union(
   *     db.select({ name: customers.name }).from(customers)
   *   );
   * // or
   * import { union } from 'drizzle-orm/sqlite-core'
   *
   * await union(
   *   db.select({ name: users.name }).from(users),
   *   db.select({ name: customers.name }).from(customers)
   * );
   * ```
   */
  union = this.createSetOperator("union", false);
  /**
   * Adds `union all` set operator to the query.
   *
   * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}
   *
   * @example
   *
   * ```ts
   * // Select all transaction ids from both online and in-store sales
   * await db.select({ transaction: onlineSales.transactionId })
   *   .from(onlineSales)
   *   .unionAll(
   *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
   *   );
   * // or
   * import { unionAll } from 'drizzle-orm/sqlite-core'
   *
   * await unionAll(
   *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),
   *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
   * );
   * ```
   */
  unionAll = this.createSetOperator("union", true);
  /**
   * Adds `intersect` set operator to the query.
   *
   * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}
   *
   * @example
   *
   * ```ts
   * // Select course names that are offered in both departments A and B
   * await db.select({ courseName: depA.courseName })
   *   .from(depA)
   *   .intersect(
   *     db.select({ courseName: depB.courseName }).from(depB)
   *   );
   * // or
   * import { intersect } from 'drizzle-orm/sqlite-core'
   *
   * await intersect(
   *   db.select({ courseName: depA.courseName }).from(depA),
   *   db.select({ courseName: depB.courseName }).from(depB)
   * );
   * ```
   */
  intersect = this.createSetOperator("intersect", false);
  /**
   * Adds `except` set operator to the query.
   *
   * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}
   *
   * @example
   *
   * ```ts
   * // Select all courses offered in department A but not in department B
   * await db.select({ courseName: depA.courseName })
   *   .from(depA)
   *   .except(
   *     db.select({ courseName: depB.courseName }).from(depB)
   *   );
   * // or
   * import { except } from 'drizzle-orm/sqlite-core'
   *
   * await except(
   *   db.select({ courseName: depA.courseName }).from(depA),
   *   db.select({ courseName: depB.courseName }).from(depB)
   * );
   * ```
   */
  except = this.createSetOperator("except", false);
  /** @internal */
  addSetOperators(setOperators) {
    this.config.setOperators.push(...setOperators);
    return this;
  }
  /**
   * Adds a `where` clause to the query.
   *
   * Calling this method will select only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#filtering}
   *
   * @param where the `where` clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be selected.
   *
   * ```ts
   * // Select all cars with green color
   * await db.select().from(cars).where(eq(cars.color, 'green'));
   * // or
   * await db.select().from(cars).where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Select all BMW cars with a green color
   * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Select all cars with the green or blue color
   * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    if (typeof where === "function") {
      where = where(
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
        )
      );
    }
    this.config.where = where;
    return this;
  }
  /**
   * Adds a `having` clause to the query.
   *
   * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}
   *
   * @param having the `having` clause.
   *
   * @example
   *
   * ```ts
   * // Select all brands with more than one car
   * await db.select({
   * 	brand: cars.brand,
   * 	count: sql<number>`cast(count(${cars.id}) as int)`,
   * })
   *   .from(cars)
   *   .groupBy(cars.brand)
   *   .having(({ count }) => gt(count, 1));
   * ```
   */
  having(having) {
    if (typeof having === "function") {
      having = having(
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
        )
      );
    }
    this.config.having = having;
    return this;
  }
  groupBy(...columns) {
    if (typeof columns[0] === "function") {
      const groupBy = columns[0](
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];
    } else {
      this.config.groupBy = columns;
    }
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      if (this.config.setOperators.length > 0) {
        this.config.setOperators.at(-1).orderBy = orderByArray;
      } else {
        this.config.orderBy = orderByArray;
      }
    } else {
      const orderByArray = columns;
      if (this.config.setOperators.length > 0) {
        this.config.setOperators.at(-1).orderBy = orderByArray;
      } else {
        this.config.orderBy = orderByArray;
      }
    }
    return this;
  }
  /**
   * Adds a `limit` clause to the query.
   *
   * Calling this method will set the maximum number of rows that will be returned by this query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
   *
   * @param limit the `limit` clause.
   *
   * @example
   *
   * ```ts
   * // Get the first 10 people from this query.
   * await db.select().from(people).limit(10);
   * ```
   */
  limit(limit) {
    if (this.config.setOperators.length > 0) {
      this.config.setOperators.at(-1).limit = limit;
    } else {
      this.config.limit = limit;
    }
    return this;
  }
  /**
   * Adds an `offset` clause to the query.
   *
   * Calling this method will skip a number of rows when returning results from this query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
   *
   * @param offset the `offset` clause.
   *
   * @example
   *
   * ```ts
   * // Get the 10th-20th people from this query.
   * await db.select().from(people).offset(10).limit(10);
   * ```
   */
  offset(offset) {
    if (this.config.setOperators.length > 0) {
      this.config.setOperators.at(-1).offset = offset;
    } else {
      this.config.offset = offset;
    }
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildSelectQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  as(alias) {
    return new Proxy(
      new Subquery(this.getSQL(), this.config.fields, alias),
      new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
    );
  }
  /** @internal */
  getSelectedFields() {
    return new Proxy(
      this.config.fields,
      new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
    );
  }
  $dynamic() {
    return this;
  }
};
var SQLiteSelectBase = class extends SQLiteSelectQueryBuilderBase {
  static {
    __name(this, "SQLiteSelectBase");
  }
  static [entityKind] = "SQLiteSelect";
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    if (!this.session) {
      throw new Error("Cannot execute a query on a query builder. Please use a database instance instead.");
    }
    const fieldsList = orderSelectedFields(this.config.fields);
    const query = this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      fieldsList,
      "all",
      true
    );
    query.joinsNotNullableMap = this.joinsNotNullableMap;
    return query;
  }
  prepare() {
    return this._prepare(false);
  }
  run = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().run(placeholderValues);
  }, "run");
  all = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().all(placeholderValues);
  }, "all");
  get = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().get(placeholderValues);
  }, "get");
  values = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().values(placeholderValues);
  }, "values");
  async execute() {
    return this.all();
  }
};
applyMixins(SQLiteSelectBase, [QueryPromise]);
function createSetOperator(type, isAll) {
  return (leftSelect, rightSelect, ...restSelects) => {
    const setOperators = [rightSelect, ...restSelects].map((select) => ({
      type,
      isAll,
      rightSelect: select
    }));
    for (const setOperator of setOperators) {
      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {
        throw new Error(
          "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
        );
      }
    }
    return leftSelect.addSetOperators(setOperators);
  };
}
__name(createSetOperator, "createSetOperator");
var getSQLiteSetOperators = /* @__PURE__ */ __name(() => ({
  union,
  unionAll,
  intersect,
  except
}), "getSQLiteSetOperators");
var union = createSetOperator("union", false);
var unionAll = createSetOperator("union", true);
var intersect = createSetOperator("intersect", false);
var except = createSetOperator("except", false);

// node_modules/drizzle-orm/sqlite-core/query-builders/query-builder.js
var QueryBuilder = class {
  static {
    __name(this, "QueryBuilder");
  }
  static [entityKind] = "SQLiteQueryBuilder";
  dialect;
  dialectConfig;
  constructor(dialect) {
    this.dialect = is(dialect, SQLiteDialect) ? dialect : void 0;
    this.dialectConfig = is(dialect, SQLiteDialect) ? void 0 : dialect;
  }
  $with(alias) {
    const queryBuilder = this;
    return {
      as(qb) {
        if (typeof qb === "function") {
          qb = qb(queryBuilder);
        }
        return new Proxy(
          new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true),
          new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
        );
      }
    };
  }
  with(...queries) {
    const self2 = this;
    function select(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: void 0,
        dialect: self2.getDialect(),
        withList: queries
      });
    }
    __name(select, "select");
    function selectDistinct(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: void 0,
        dialect: self2.getDialect(),
        withList: queries,
        distinct: true
      });
    }
    __name(selectDistinct, "selectDistinct");
    return { select, selectDistinct };
  }
  select(fields) {
    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: void 0, dialect: this.getDialect() });
  }
  selectDistinct(fields) {
    return new SQLiteSelectBuilder({
      fields: fields ?? void 0,
      session: void 0,
      dialect: this.getDialect(),
      distinct: true
    });
  }
  // Lazy load dialect to avoid circular dependency
  getDialect() {
    if (!this.dialect) {
      this.dialect = new SQLiteSyncDialect(this.dialectConfig);
    }
    return this.dialect;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/insert.js
var SQLiteInsertBuilder = class {
  static {
    __name(this, "SQLiteInsertBuilder");
  }
  constructor(table, session, dialect, withList) {
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.withList = withList;
  }
  static [entityKind] = "SQLiteInsertBuilder";
  values(values) {
    values = Array.isArray(values) ? values : [values];
    if (values.length === 0) {
      throw new Error("values() must be called with at least one value");
    }
    const mappedValues = values.map((entry) => {
      const result = {};
      const cols = this.table[Table.Symbol.Columns];
      for (const colKey of Object.keys(entry)) {
        const colValue = entry[colKey];
        result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);
      }
      return result;
    });
    return new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);
  }
  select(selectQuery) {
    const select = typeof selectQuery === "function" ? selectQuery(new QueryBuilder()) : selectQuery;
    if (!is(select, SQL) && !haveSameKeys(this.table[Columns], select._.selectedFields)) {
      throw new Error(
        "Insert select error: selected fields are not the same or are in a different order compared to the table definition"
      );
    }
    return new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);
  }
};
var SQLiteInsertBase = class extends QueryPromise {
  static {
    __name(this, "SQLiteInsertBase");
  }
  constructor(table, values, session, dialect, withList, select) {
    super();
    this.session = session;
    this.dialect = dialect;
    this.config = { table, values, withList, select };
  }
  static [entityKind] = "SQLiteInsert";
  /** @internal */
  config;
  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /**
   * Adds an `on conflict do nothing` clause to the query.
   *
   * Calling this method simply avoids inserting a row as its alternative action.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}
   *
   * @param config The `target` and `where` clauses.
   *
   * @example
   * ```ts
   * // Insert one row and cancel the insert if there's a conflict
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoNothing();
   *
   * // Explicitly specify conflict target
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoNothing({ target: cars.id });
   * ```
   */
  onConflictDoNothing(config = {}) {
    if (config.target === void 0) {
      this.config.onConflict = sql`do nothing`;
    } else {
      const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;
      const whereSql = config.where ? sql` where ${config.where}` : sql``;
      this.config.onConflict = sql`${targetSql} do nothing${whereSql}`;
    }
    return this;
  }
  /**
   * Adds an `on conflict do update` clause to the query.
   *
   * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}
   *
   * @param config The `target`, `set` and `where` clauses.
   *
   * @example
   * ```ts
   * // Update the row if there's a conflict
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoUpdate({
   *     target: cars.id,
   *     set: { brand: 'Porsche' }
   *   });
   *
   * // Upsert with 'where' clause
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoUpdate({
   *     target: cars.id,
   *     set: { brand: 'newBMW' },
   *     where: sql`${cars.createdAt} > '2023-01-01'::date`,
   *   });
   * ```
   */
  onConflictDoUpdate(config) {
    if (config.where && (config.targetWhere || config.setWhere)) {
      throw new Error(
        'You cannot use both "where" and "targetWhere"/"setWhere" at the same time - "where" is deprecated, use "targetWhere" or "setWhere" instead.'
      );
    }
    const whereSql = config.where ? sql` where ${config.where}` : void 0;
    const targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : void 0;
    const setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : void 0;
    const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;
    const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));
    this.config.onConflict = sql`${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildInsertQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().run(placeholderValues);
  }, "run");
  all = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().all(placeholderValues);
  }, "all");
  get = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().get(placeholderValues);
  }, "get");
  values = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().values(placeholderValues);
  }, "values");
  async execute() {
    return this.config.returning ? this.all() : this.run();
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/update.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteUpdateBuilder = class {
  static {
    __name(this, "SQLiteUpdateBuilder");
  }
  constructor(table, session, dialect, withList) {
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.withList = withList;
  }
  static [entityKind] = "SQLiteUpdateBuilder";
  set(values) {
    return new SQLiteUpdateBase(
      this.table,
      mapUpdateSet(this.table, values),
      this.session,
      this.dialect,
      this.withList
    );
  }
};
var SQLiteUpdateBase = class extends QueryPromise {
  static {
    __name(this, "SQLiteUpdateBase");
  }
  constructor(table, set, session, dialect, withList) {
    super();
    this.session = session;
    this.dialect = dialect;
    this.config = { set, table, withList, joins: [] };
  }
  static [entityKind] = "SQLiteUpdate";
  /** @internal */
  config;
  from(source) {
    this.config.from = source;
    return this;
  }
  createJoin(joinType) {
    return (table, on) => {
      const tableName = getTableLikeName(table);
      if (typeof tableName === "string" && this.config.joins.some((join) => join.alias === tableName)) {
        throw new Error(`Alias "${tableName}" is already used in this query`);
      }
      if (typeof on === "function") {
        const from = this.config.from ? is(table, SQLiteTable) ? table[Table.Symbol.Columns] : is(table, Subquery) ? table._.selectedFields : is(table, SQLiteViewBase) ? table[ViewBaseConfig].selectedFields : void 0 : void 0;
        on = on(
          new Proxy(
            this.config.table[Table.Symbol.Columns],
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          ),
          from && new Proxy(
            from,
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          )
        );
      }
      this.config.joins.push({ on, table, joinType, alias: tableName });
      return this;
    };
  }
  leftJoin = this.createJoin("left");
  rightJoin = this.createJoin("right");
  innerJoin = this.createJoin("inner");
  fullJoin = this.createJoin("full");
  /**
   * Adds a 'where' clause to the query.
   *
   * Calling this method will update only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/update}
   *
   * @param where the 'where' clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be updated.
   *
   * ```ts
   * // Update all cars with green color
   * db.update(cars).set({ color: 'red' })
   *   .where(eq(cars.color, 'green'));
   * // or
   * db.update(cars).set({ color: 'red' })
   *   .where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Update all BMW cars with a green color
   * db.update(cars).set({ color: 'red' })
   *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Update all cars with the green or blue color
   * db.update(cars).set({ color: 'red' })
   *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    this.config.where = where;
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.table[Table.Symbol.Columns],
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      this.config.orderBy = orderByArray;
    } else {
      const orderByArray = columns;
      this.config.orderBy = orderByArray;
    }
    return this;
  }
  limit(limit) {
    this.config.limit = limit;
    return this;
  }
  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildUpdateQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().run(placeholderValues);
  }, "run");
  all = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().all(placeholderValues);
  }, "all");
  get = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().get(placeholderValues);
  }, "get");
  values = /* @__PURE__ */ __name((placeholderValues) => {
    return this._prepare().values(placeholderValues);
  }, "values");
  async execute() {
    return this.config.returning ? this.all() : this.run();
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/count.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteCountBuilder = class _SQLiteCountBuilder extends SQL {
  static {
    __name(this, "SQLiteCountBuilder");
  }
  constructor(params) {
    super(_SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);
    this.params = params;
    this.session = params.session;
    this.sql = _SQLiteCountBuilder.buildCount(
      params.source,
      params.filters
    );
  }
  sql;
  static [entityKind] = "SQLiteCountBuilderAsync";
  [Symbol.toStringTag] = "SQLiteCountBuilderAsync";
  session;
  static buildEmbeddedCount(source, filters) {
    return sql`(select count(*) from ${source}${sql.raw(" where ").if(filters)}${filters})`;
  }
  static buildCount(source, filters) {
    return sql`select count(*) from ${source}${sql.raw(" where ").if(filters)}${filters}`;
  }
  then(onfulfilled, onrejected) {
    return Promise.resolve(this.session.count(this.sql)).then(
      onfulfilled,
      onrejected
    );
  }
  catch(onRejected) {
    return this.then(void 0, onRejected);
  }
  finally(onFinally) {
    return this.then(
      (value) => {
        onFinally?.();
        return value;
      },
      (reason) => {
        onFinally?.();
        throw reason;
      }
    );
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/query.js
init_checked_fetch();
init_modules_watch_stub();
var RelationalQueryBuilder = class {
  static {
    __name(this, "RelationalQueryBuilder");
  }
  constructor(mode, fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {
    this.mode = mode;
    this.fullSchema = fullSchema;
    this.schema = schema;
    this.tableNamesMap = tableNamesMap;
    this.table = table;
    this.tableConfig = tableConfig;
    this.dialect = dialect;
    this.session = session;
  }
  static [entityKind] = "SQLiteAsyncRelationalQueryBuilder";
  findMany(config) {
    return this.mode === "sync" ? new SQLiteSyncRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config ? config : {},
      "many"
    ) : new SQLiteRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config ? config : {},
      "many"
    );
  }
  findFirst(config) {
    return this.mode === "sync" ? new SQLiteSyncRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config ? { ...config, limit: 1 } : { limit: 1 },
      "first"
    ) : new SQLiteRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config ? { ...config, limit: 1 } : { limit: 1 },
      "first"
    );
  }
};
var SQLiteRelationalQuery = class extends QueryPromise {
  static {
    __name(this, "SQLiteRelationalQuery");
  }
  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode) {
    super();
    this.fullSchema = fullSchema;
    this.schema = schema;
    this.tableNamesMap = tableNamesMap;
    this.table = table;
    this.tableConfig = tableConfig;
    this.dialect = dialect;
    this.session = session;
    this.config = config;
    this.mode = mode;
  }
  static [entityKind] = "SQLiteAsyncRelationalQuery";
  /** @internal */
  mode;
  /** @internal */
  getSQL() {
    return this.dialect.buildRelationalQuery({
      fullSchema: this.fullSchema,
      schema: this.schema,
      tableNamesMap: this.tableNamesMap,
      table: this.table,
      tableConfig: this.tableConfig,
      queryConfig: this.config,
      tableAlias: this.tableConfig.tsName
    }).sql;
  }
  /** @internal */
  _prepare(isOneTimeQuery = false) {
    const { query, builtQuery } = this._toSQL();
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      builtQuery,
      void 0,
      this.mode === "first" ? "get" : "all",
      true,
      (rawRows, mapColumnValue) => {
        const rows = rawRows.map(
          (row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)
        );
        if (this.mode === "first") {
          return rows[0];
        }
        return rows;
      }
    );
  }
  prepare() {
    return this._prepare(false);
  }
  _toSQL() {
    const query = this.dialect.buildRelationalQuery({
      fullSchema: this.fullSchema,
      schema: this.schema,
      tableNamesMap: this.tableNamesMap,
      table: this.table,
      tableConfig: this.tableConfig,
      queryConfig: this.config,
      tableAlias: this.tableConfig.tsName
    });
    const builtQuery = this.dialect.sqlToQuery(query.sql);
    return { query, builtQuery };
  }
  toSQL() {
    return this._toSQL().builtQuery;
  }
  /** @internal */
  executeRaw() {
    if (this.mode === "first") {
      return this._prepare(false).get();
    }
    return this._prepare(false).all();
  }
  async execute() {
    return this.executeRaw();
  }
};
var SQLiteSyncRelationalQuery = class extends SQLiteRelationalQuery {
  static {
    __name(this, "SQLiteSyncRelationalQuery");
  }
  static [entityKind] = "SQLiteSyncRelationalQuery";
  sync() {
    return this.executeRaw();
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/raw.js
init_checked_fetch();
init_modules_watch_stub();
var SQLiteRaw = class extends QueryPromise {
  static {
    __name(this, "SQLiteRaw");
  }
  constructor(execute, getSQL, action, dialect, mapBatchResult) {
    super();
    this.execute = execute;
    this.getSQL = getSQL;
    this.dialect = dialect;
    this.mapBatchResult = mapBatchResult;
    this.config = { action };
  }
  static [entityKind] = "SQLiteRaw";
  /** @internal */
  config;
  getQuery() {
    return { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };
  }
  mapResult(result, isFromBatch) {
    return isFromBatch ? this.mapBatchResult(result) : result;
  }
  _prepare() {
    return this;
  }
  /** @internal */
  isResponseInArrayMode() {
    return false;
  }
};

// node_modules/drizzle-orm/sqlite-core/db.js
var BaseSQLiteDatabase = class {
  static {
    __name(this, "BaseSQLiteDatabase");
  }
  constructor(resultKind, dialect, session, schema) {
    this.resultKind = resultKind;
    this.dialect = dialect;
    this.session = session;
    this._ = schema ? {
      schema: schema.schema,
      fullSchema: schema.fullSchema,
      tableNamesMap: schema.tableNamesMap
    } : {
      schema: void 0,
      fullSchema: {},
      tableNamesMap: {}
    };
    this.query = {};
    const query = this.query;
    if (this._.schema) {
      for (const [tableName, columns] of Object.entries(this._.schema)) {
        query[tableName] = new RelationalQueryBuilder(
          resultKind,
          schema.fullSchema,
          this._.schema,
          this._.tableNamesMap,
          schema.fullSchema[tableName],
          columns,
          dialect,
          session
        );
      }
    }
  }
  static [entityKind] = "BaseSQLiteDatabase";
  query;
  /**
   * Creates a subquery that defines a temporary named result set as a CTE.
   *
   * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
   *
   * @param alias The alias for the subquery.
   *
   * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.
   *
   * @example
   *
   * ```ts
   * // Create a subquery with alias 'sq' and use it in the select query
   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
   *
   * const result = await db.with(sq).select().from(sq);
   * ```
   *
   * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:
   *
   * ```ts
   * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query
   * const sq = db.$with('sq').as(db.select({
   *   name: sql<string>`upper(${users.name})`.as('name'),
   * })
   * .from(users));
   *
   * const result = await db.with(sq).select({ name: sq.name }).from(sq);
   * ```
   */
  $with(alias) {
    const self2 = this;
    return {
      as(qb) {
        if (typeof qb === "function") {
          qb = qb(new QueryBuilder(self2.dialect));
        }
        return new Proxy(
          new WithSubquery(qb.getSQL(), qb.getSelectedFields(), alias, true),
          new SelectionProxyHandler({ alias, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
        );
      }
    };
  }
  $count(source, filters) {
    return new SQLiteCountBuilder({ source, filters, session: this.session });
  }
  /**
   * Incorporates a previously defined CTE (using `$with`) into the main query.
   *
   * This method allows the main query to reference a temporary named result set.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
   *
   * @param queries The CTEs to incorporate into the main query.
   *
   * @example
   *
   * ```ts
   * // Define a subquery 'sq' as a CTE using $with
   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
   *
   * // Incorporate the CTE 'sq' into the main query and select from it
   * const result = await db.with(sq).select().from(sq);
   * ```
   */
  with(...queries) {
    const self2 = this;
    function select(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: self2.session,
        dialect: self2.dialect,
        withList: queries
      });
    }
    __name(select, "select");
    function selectDistinct(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: self2.session,
        dialect: self2.dialect,
        withList: queries,
        distinct: true
      });
    }
    __name(selectDistinct, "selectDistinct");
    function update(table) {
      return new SQLiteUpdateBuilder(table, self2.session, self2.dialect, queries);
    }
    __name(update, "update");
    function insert(into) {
      return new SQLiteInsertBuilder(into, self2.session, self2.dialect, queries);
    }
    __name(insert, "insert");
    function delete_(from) {
      return new SQLiteDeleteBase(from, self2.session, self2.dialect, queries);
    }
    __name(delete_, "delete_");
    return { select, selectDistinct, update, insert, delete: delete_ };
  }
  select(fields) {
    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: this.session, dialect: this.dialect });
  }
  selectDistinct(fields) {
    return new SQLiteSelectBuilder({
      fields: fields ?? void 0,
      session: this.session,
      dialect: this.dialect,
      distinct: true
    });
  }
  /**
   * Creates an update query.
   *
   * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.
   *
   * Use `.set()` method to specify which values to update.
   *
   * See docs: {@link https://orm.drizzle.team/docs/update}
   *
   * @param table The table to update.
   *
   * @example
   *
   * ```ts
   * // Update all rows in the 'cars' table
   * await db.update(cars).set({ color: 'red' });
   *
   * // Update rows with filters and conditions
   * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));
   *
   * // Update with returning clause
   * const updatedCar: Car[] = await db.update(cars)
   *   .set({ color: 'red' })
   *   .where(eq(cars.id, 1))
   *   .returning();
   * ```
   */
  update(table) {
    return new SQLiteUpdateBuilder(table, this.session, this.dialect);
  }
  /**
   * Creates an insert query.
   *
   * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert}
   *
   * @param table The table to insert into.
   *
   * @example
   *
   * ```ts
   * // Insert one row
   * await db.insert(cars).values({ brand: 'BMW' });
   *
   * // Insert multiple rows
   * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);
   *
   * // Insert with returning clause
   * const insertedCar: Car[] = await db.insert(cars)
   *   .values({ brand: 'BMW' })
   *   .returning();
   * ```
   */
  insert(into) {
    return new SQLiteInsertBuilder(into, this.session, this.dialect);
  }
  /**
   * Creates a delete query.
   *
   * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.
   *
   * See docs: {@link https://orm.drizzle.team/docs/delete}
   *
   * @param table The table to delete from.
   *
   * @example
   *
   * ```ts
   * // Delete all rows in the 'cars' table
   * await db.delete(cars);
   *
   * // Delete rows with filters and conditions
   * await db.delete(cars).where(eq(cars.color, 'green'));
   *
   * // Delete with returning clause
   * const deletedCar: Car[] = await db.delete(cars)
   *   .where(eq(cars.id, 1))
   *   .returning();
   * ```
   */
  delete(from) {
    return new SQLiteDeleteBase(from, this.session, this.dialect);
  }
  run(query) {
    const sequel = typeof query === "string" ? sql.raw(query) : query.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.run(sequel),
        () => sequel,
        "run",
        this.dialect,
        this.session.extractRawRunValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.run(sequel);
  }
  all(query) {
    const sequel = typeof query === "string" ? sql.raw(query) : query.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.all(sequel),
        () => sequel,
        "all",
        this.dialect,
        this.session.extractRawAllValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.all(sequel);
  }
  get(query) {
    const sequel = typeof query === "string" ? sql.raw(query) : query.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.get(sequel),
        () => sequel,
        "get",
        this.dialect,
        this.session.extractRawGetValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.get(sequel);
  }
  values(query) {
    const sequel = typeof query === "string" ? sql.raw(query) : query.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.values(sequel),
        () => sequel,
        "values",
        this.dialect,
        this.session.extractRawValuesValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.values(sequel);
  }
  transaction(transaction, config) {
    return this.session.transaction(transaction, config);
  }
};

// node_modules/drizzle-orm/d1/session.js
init_checked_fetch();
init_modules_watch_stub();

// node_modules/drizzle-orm/sqlite-core/session.js
init_checked_fetch();
init_modules_watch_stub();
var ExecuteResultSync = class extends QueryPromise {
  static {
    __name(this, "ExecuteResultSync");
  }
  constructor(resultCb) {
    super();
    this.resultCb = resultCb;
  }
  static [entityKind] = "ExecuteResultSync";
  async execute() {
    return this.resultCb();
  }
  sync() {
    return this.resultCb();
  }
};
var SQLitePreparedQuery = class {
  static {
    __name(this, "SQLitePreparedQuery");
  }
  constructor(mode, executeMethod, query) {
    this.mode = mode;
    this.executeMethod = executeMethod;
    this.query = query;
  }
  static [entityKind] = "PreparedQuery";
  /** @internal */
  joinsNotNullableMap;
  getQuery() {
    return this.query;
  }
  mapRunResult(result, _isFromBatch) {
    return result;
  }
  mapAllResult(_result, _isFromBatch) {
    throw new Error("Not implemented");
  }
  mapGetResult(_result, _isFromBatch) {
    throw new Error("Not implemented");
  }
  execute(placeholderValues) {
    if (this.mode === "async") {
      return this[this.executeMethod](placeholderValues);
    }
    return new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));
  }
  mapResult(response, isFromBatch) {
    switch (this.executeMethod) {
      case "run": {
        return this.mapRunResult(response, isFromBatch);
      }
      case "all": {
        return this.mapAllResult(response, isFromBatch);
      }
      case "get": {
        return this.mapGetResult(response, isFromBatch);
      }
    }
  }
};
var SQLiteSession = class {
  static {
    __name(this, "SQLiteSession");
  }
  constructor(dialect) {
    this.dialect = dialect;
  }
  static [entityKind] = "SQLiteSession";
  prepareOneTimeQuery(query, fields, executeMethod, isResponseInArrayMode) {
    return this.prepareQuery(query, fields, executeMethod, isResponseInArrayMode);
  }
  run(query) {
    const staticQuery = this.dialect.sqlToQuery(query);
    try {
      return this.prepareOneTimeQuery(staticQuery, void 0, "run", false).run();
    } catch (err) {
      throw new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });
    }
  }
  /** @internal */
  extractRawRunValueFromBatchResult(result) {
    return result;
  }
  all(query) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, "run", false).all();
  }
  /** @internal */
  extractRawAllValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
  get(query) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, "run", false).get();
  }
  /** @internal */
  extractRawGetValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
  values(query) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, "run", false).values();
  }
  async count(sql2) {
    const result = await this.values(sql2);
    return result[0][0];
  }
  /** @internal */
  extractRawValuesValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
};
var SQLiteTransaction = class extends BaseSQLiteDatabase {
  static {
    __name(this, "SQLiteTransaction");
  }
  constructor(resultType, dialect, session, schema, nestedIndex = 0) {
    super(resultType, dialect, session, schema);
    this.schema = schema;
    this.nestedIndex = nestedIndex;
  }
  static [entityKind] = "SQLiteTransaction";
  rollback() {
    throw new TransactionRollbackError();
  }
};

// node_modules/drizzle-orm/d1/session.js
var SQLiteD1Session = class extends SQLiteSession {
  static {
    __name(this, "SQLiteD1Session");
  }
  constructor(client, dialect, schema, options = {}) {
    super(dialect);
    this.client = client;
    this.schema = schema;
    this.options = options;
    this.logger = options.logger ?? new NoopLogger();
  }
  static [entityKind] = "SQLiteD1Session";
  logger;
  prepareQuery(query, fields, executeMethod, isResponseInArrayMode, customResultMapper) {
    const stmt = this.client.prepare(query.sql);
    return new D1PreparedQuery(
      stmt,
      query,
      this.logger,
      fields,
      executeMethod,
      isResponseInArrayMode,
      customResultMapper
    );
  }
  async batch(queries) {
    const preparedQueries = [];
    const builtQueries = [];
    for (const query of queries) {
      const preparedQuery = query._prepare();
      const builtQuery = preparedQuery.getQuery();
      preparedQueries.push(preparedQuery);
      if (builtQuery.params.length > 0) {
        builtQueries.push(preparedQuery.stmt.bind(...builtQuery.params));
      } else {
        const builtQuery2 = preparedQuery.getQuery();
        builtQueries.push(
          this.client.prepare(builtQuery2.sql).bind(...builtQuery2.params)
        );
      }
    }
    const batchResults = await this.client.batch(builtQueries);
    return batchResults.map((result, i) => preparedQueries[i].mapResult(result, true));
  }
  extractRawAllValueFromBatchResult(result) {
    return result.results;
  }
  extractRawGetValueFromBatchResult(result) {
    return result.results[0];
  }
  extractRawValuesValueFromBatchResult(result) {
    return d1ToRawMapping(result.results);
  }
  async transaction(transaction, config) {
    const tx = new D1Transaction("async", this.dialect, this, this.schema);
    await this.run(sql.raw(`begin${config?.behavior ? " " + config.behavior : ""}`));
    try {
      const result = await transaction(tx);
      await this.run(sql`commit`);
      return result;
    } catch (err) {
      await this.run(sql`rollback`);
      throw err;
    }
  }
};
var D1Transaction = class _D1Transaction extends SQLiteTransaction {
  static {
    __name(this, "D1Transaction");
  }
  static [entityKind] = "D1Transaction";
  async transaction(transaction) {
    const savepointName = `sp${this.nestedIndex}`;
    const tx = new _D1Transaction("async", this.dialect, this.session, this.schema, this.nestedIndex + 1);
    await this.session.run(sql.raw(`savepoint ${savepointName}`));
    try {
      const result = await transaction(tx);
      await this.session.run(sql.raw(`release savepoint ${savepointName}`));
      return result;
    } catch (err) {
      await this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));
      throw err;
    }
  }
};
function d1ToRawMapping(results) {
  const rows = [];
  for (const row of results) {
    const entry = Object.keys(row).map((k) => row[k]);
    rows.push(entry);
  }
  return rows;
}
__name(d1ToRawMapping, "d1ToRawMapping");
var D1PreparedQuery = class extends SQLitePreparedQuery {
  static {
    __name(this, "D1PreparedQuery");
  }
  constructor(stmt, query, logger2, fields, executeMethod, _isResponseInArrayMode, customResultMapper) {
    super("async", executeMethod, query);
    this.logger = logger2;
    this._isResponseInArrayMode = _isResponseInArrayMode;
    this.customResultMapper = customResultMapper;
    this.fields = fields;
    this.stmt = stmt;
  }
  static [entityKind] = "D1PreparedQuery";
  /** @internal */
  customResultMapper;
  /** @internal */
  fields;
  /** @internal */
  stmt;
  run(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    return this.stmt.bind(...params).run();
  }
  async all(placeholderValues) {
    const { fields, query, logger: logger2, stmt, customResultMapper } = this;
    if (!fields && !customResultMapper) {
      const params = fillPlaceholders(query.params, placeholderValues ?? {});
      logger2.logQuery(query.sql, params);
      return stmt.bind(...params).all().then(({ results }) => this.mapAllResult(results));
    }
    const rows = await this.values(placeholderValues);
    return this.mapAllResult(rows);
  }
  mapAllResult(rows, isFromBatch) {
    if (isFromBatch) {
      rows = d1ToRawMapping(rows.results);
    }
    if (!this.fields && !this.customResultMapper) {
      return rows;
    }
    if (this.customResultMapper) {
      return this.customResultMapper(rows);
    }
    return rows.map((row) => mapResultRow(this.fields, row, this.joinsNotNullableMap));
  }
  async get(placeholderValues) {
    const { fields, joinsNotNullableMap, query, logger: logger2, stmt, customResultMapper } = this;
    if (!fields && !customResultMapper) {
      const params = fillPlaceholders(query.params, placeholderValues ?? {});
      logger2.logQuery(query.sql, params);
      return stmt.bind(...params).all().then(({ results }) => results[0]);
    }
    const rows = await this.values(placeholderValues);
    if (!rows[0]) {
      return void 0;
    }
    if (customResultMapper) {
      return customResultMapper(rows);
    }
    return mapResultRow(fields, rows[0], joinsNotNullableMap);
  }
  mapGetResult(result, isFromBatch) {
    if (isFromBatch) {
      result = d1ToRawMapping(result.results)[0];
    }
    if (!this.fields && !this.customResultMapper) {
      return result;
    }
    if (this.customResultMapper) {
      return this.customResultMapper([result]);
    }
    return mapResultRow(this.fields, result, this.joinsNotNullableMap);
  }
  values(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    return this.stmt.bind(...params).raw();
  }
  /** @internal */
  isResponseInArrayMode() {
    return this._isResponseInArrayMode;
  }
};

// node_modules/drizzle-orm/d1/driver.js
var DrizzleD1Database = class extends BaseSQLiteDatabase {
  static {
    __name(this, "DrizzleD1Database");
  }
  static [entityKind] = "D1Database";
  async batch(batch) {
    return this.session.batch(batch);
  }
};
function drizzle(client, config = {}) {
  const dialect = new SQLiteAsyncDialect({ casing: config.casing });
  let logger2;
  if (config.logger === true) {
    logger2 = new DefaultLogger();
  } else if (config.logger !== false) {
    logger2 = config.logger;
  }
  let schema;
  if (config.schema) {
    const tablesConfig = extractTablesRelationalConfig(
      config.schema,
      createTableRelationsHelpers
    );
    schema = {
      fullSchema: config.schema,
      schema: tablesConfig.tables,
      tableNamesMap: tablesConfig.tableNamesMap
    };
  }
  const session = new SQLiteD1Session(client, dialect, schema, { logger: logger2 });
  const db = new DrizzleD1Database("async", dialect, session, schema);
  db.$client = client;
  return db;
}
__name(drizzle, "drizzle");

// src/lib/db/schema.ts
var schema_exports = {};
__export(schema_exports, {
  chatMessages: () => chatMessages,
  insights: () => insights,
  sessions: () => sessions,
  transactions: () => transactions,
  uploads: () => uploads,
  users: () => users
});
init_checked_fetch();
init_modules_watch_stub();
var users = sqliteTable("users", {
  id: text("id").primaryKey(),
  email: text("email").notNull().unique(),
  created_at: text("created_at").notNull().default("CURRENT_TIMESTAMP")
});
var sessions = sqliteTable("sessions", {
  id: text("id").primaryKey(),
  user_id: text("user_id").notNull().references(() => users.id),
  created_at: text("created_at").notNull().default("CURRENT_TIMESTAMP")
});
var uploads = sqliteTable("uploads", {
  id: text("id").primaryKey(),
  user_id: text("user_id").notNull().references(() => users.id),
  filename: text("filename").notNull(),
  file_type: text("file_type", { enum: ["csv", "excel", "pdf"] }).notNull(),
  upload_date: text("upload_date").notNull().default("CURRENT_TIMESTAMP"),
  status: text("status", { enum: ["processing", "analyzed", "error"] }).notNull().default("processing"),
  transaction_count: integer("transaction_count")
});
var transactions = sqliteTable("transactions", {
  id: text("id").primaryKey(),
  upload_id: text("upload_id").notNull().references(() => uploads.id),
  date: text("date").notNull(),
  description: text("description").notNull(),
  amount: real("amount").notNull(),
  category: text("category").notNull(),
  merchant: text("merchant"),
  account_type: text("account_type", { enum: ["checking", "savings", "credit"] })
});
var insights = sqliteTable("insights", {
  id: text("id").primaryKey(),
  session_id: text("session_id").notNull().references(() => sessions.id),
  agent_type: text("agent_type", {
    enum: ["data_extraction", "spending_analysis", "savings_insight", "risk_assessment", "uncle_personality"]
  }).notNull(),
  insight_data: text("insight_data", { mode: "json" }).notNull(),
  created_at: text("created_at").notNull().default("CURRENT_TIMESTAMP"),
  sentiment: text("sentiment", { enum: ["positive", "neutral", "negative"] }).notNull().default("neutral")
});
var chatMessages = sqliteTable("chat_messages", {
  id: text("id").primaryKey(),
  session_id: text("session_id").notNull().references(() => sessions.id),
  role: text("role", { enum: ["user", "assistant"] }).notNull(),
  content: text("content").notNull(),
  created_at: text("created_at").notNull().default("CURRENT_TIMESTAMP"),
  related_insights: text("related_insights", { mode: "json" })
});

// src/lib/db/client.ts
function createDbClient(d1Database) {
  return drizzle(d1Database, { schema: schema_exports });
}
__name(createDbClient, "createDbClient");
var DatabaseService = class {
  static {
    __name(this, "DatabaseService");
  }
  db;
  constructor(d1Database) {
    this.db = createDbClient(d1Database);
  }
  // User operations
  async createUser(user) {
    return await this.db.insert(users).values(user).returning();
  }
  async getUserById(id) {
    return await this.db.select().from(users).where(eq(users.id, id)).get();
  }
  async getUserByEmail(email) {
    return await this.db.select().from(users).where(eq(users.email, email)).get();
  }
  // Session operations
  async createSession(session) {
    try {
      return await this.db.insert(sessions).values(session).returning();
    } catch (error) {
      if (error.message && error.message.includes("no column named upload_id")) {
        console.log("Creating session without upload_id (fallback)");
        const { upload_id, ...sessionWithoutUploadId } = session;
        return await this.db.insert(sessions).values(sessionWithoutUploadId).returning();
      }
      console.log("Session creation error:", error.message);
      console.log("Error details:", error);
      console.log("Session object:", session);
      console.log("Error type:", typeof error);
      console.log("Error constructor:", error.constructor.name);
      console.log("Error stack:", error.stack);
      throw error;
    }
  }
  async getSessionById(id) {
    return await this.db.select().from(sessions).where(eq(sessions.id, id)).get();
  }
  // Upload operations
  async createUpload(upload) {
    try {
      return await this.db.insert(uploads).values(upload).returning();
    } catch (error) {
      if (error.message && error.message.includes("session_id")) {
        console.log("Creating upload without session_id (fallback)");
        const { session_id, ...uploadWithoutSessionId } = upload;
        return await this.db.insert(uploads).values(uploadWithoutSessionId).returning();
      }
      throw error;
    }
  }
  async getUploadsByUserId(userId) {
    return await this.db.select().from(uploads).where(eq(uploads.user_id, userId)).all();
  }
  async updateUploadStatus(id, status, transactionCount) {
    const updateData = { status };
    if (transactionCount !== void 0) {
      updateData.transaction_count = transactionCount;
    }
    return await this.db.update(uploads).set(updateData).where(eq(uploads.id, id)).returning();
  }
  // Transaction operations
  async createTransactions(transactions2) {
    const batchSize = 10;
    const results = [];
    for (let i = 0; i < transactions2.length; i += batchSize) {
      const batch = transactions2.slice(i, i + batchSize);
      const batchResult = await this.db.insert(transactions).values(batch).returning();
      results.push(...batchResult);
    }
    return results;
  }
  async getTransactionsByUploadId(uploadId) {
    return await this.db.select().from(transactions).where(eq(transactions.upload_id, uploadId)).all();
  }
  async getTransactionsBySessionId(sessionId) {
    try {
      return await this.db.select().from(transactions).where(eq(transactions.upload_id, sessionId)).all();
    } catch (error) {
      console.log("Error getting transactions by session:", error);
      return [];
    }
  }
  // Insight operations
  async createInsight(insight) {
    return await this.db.insert(insights).values(insight).returning();
  }
  async getInsightsBySessionId(sessionId) {
    return await this.db.select().from(insights).where(eq(insights.session_id, sessionId)).all();
  }
  async getInsightsByAgentType(sessionId, agentType) {
    return await this.db.select().from(insights).where(and(eq(insights.session_id, sessionId), eq(insights.agent_type, agentType))).all();
  }
  // Chat message operations
  async createChatMessage(message) {
    return await this.db.insert(chatMessages).values(message).returning();
  }
  async getChatMessagesBySessionId(sessionId) {
    return await this.db.select().from(chatMessages).where(eq(chatMessages.session_id, sessionId)).orderBy(asc(chatMessages.created_at)).all();
  }
  // Utility functions
  async getSessionWithData(sessionId) {
    const session = await this.getSessionById(sessionId);
    if (!session) return null;
    const transactions2 = await this.getTransactionsBySessionId(sessionId);
    const insights2 = await this.getInsightsBySessionId(sessionId);
    const chatMessages2 = await this.getChatMessagesBySessionId(sessionId);
    return {
      session,
      transactions: transactions2,
      insights: insights2,
      chatMessages: chatMessages2
    };
  }
};

// src/lib/orchestrator/agent-orchestrator.ts
init_checked_fetch();
init_modules_watch_stub();

// src/lib/agents/data-extraction.ts
init_checked_fetch();
init_modules_watch_stub();

// src/lib/agents/base-agent.ts
init_checked_fetch();
init_modules_watch_stub();

// src/lib/huggingface/client.ts
init_checked_fetch();
init_modules_watch_stub();
var HuggingFaceClient = class {
  static {
    __name(this, "HuggingFaceClient");
  }
  apiKey;
  baseUrl = "https://api-inference.huggingface.co/models";
  transformersUrl = "https://huggingface.co/api/models";
  logs = [];
  constructor(apiKey) {
    this.apiKey = apiKey;
  }
  log(level, message, details) {
    const logEntry = {
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      level,
      message,
      details
    };
    this.logs.push(logEntry);
    console.log(`[HuggingFace] ${level.toUpperCase()}: ${message}`, details || "");
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = [];
  }
  async generateText(model, prompt, options = {}) {
    try {
      return await this.generateTextInference(model, prompt, options);
    } catch (error) {
      console.warn("Inference API failed, trying fallback:", error);
      return await this.generateTextFallback(prompt, options);
    }
  }
  async generateTextInference(model, prompt, options = {}) {
    const request = {
      inputs: prompt,
      parameters: {
        max_new_tokens: options.maxTokens || 500,
        temperature: options.temperature || 0.7,
        top_p: options.topP || 0.9,
        do_sample: true
      }
    };
    const response = await fetch(`${this.baseUrl}/${model}`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${this.apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(request)
    });
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HuggingFace API error: ${response.status} ${response.statusText} - ${errorText}`);
    }
    const data = await response.json();
    if (Array.isArray(data) && data.length > 0) {
      return data[0].generated_text || data[0].text || "";
    }
    if (data.error) {
      throw new Error(`HuggingFace API error: ${data.error}`);
    }
    return data.generated_text || data.text || data.output || "";
  }
  async generateTextFallback(prompt, options = {}) {
    const maxLength = Math.min(options.maxTokens || 500, 200);
    if (prompt.toLowerCase().includes("transaction") || prompt.toLowerCase().includes("spending")) {
      return `Based on the transaction data provided, I can see several patterns emerging. The spending appears to be distributed across multiple categories, with some areas showing higher activity than others. I recommend reviewing the larger transactions and considering budget adjustments for categories with significant spending.`;
    }
    if (prompt.toLowerCase().includes("savings") || prompt.toLowerCase().includes("budget")) {
      return `Looking at your financial patterns, there are several opportunities to optimize your savings. Consider setting up automatic transfers to a savings account and reviewing recurring subscriptions. Small changes can lead to significant long-term benefits.`;
    }
    if (prompt.toLowerCase().includes("risk") || prompt.toLowerCase().includes("unusual")) {
      return `I've analyzed your transaction patterns and identified a few areas that warrant attention. While most transactions appear normal, there are some patterns that suggest reviewing your account security and spending habits.`;
    }
    if (prompt.toLowerCase().includes("uncle") || prompt.toLowerCase().includes("personality")) {
      return `Hey there, champ! Your UncleSense here, and I've got some solid advice for you. You're doing great by taking control of your finances - that's the first step to financial freedom! Keep up the good work, and remember, every dollar saved is a dollar earned. \u{1F60A}`;
    }
    return `I've analyzed the provided information and generated insights based on the data. The analysis shows various patterns and trends that can help inform your financial decisions. Consider reviewing the detailed breakdown for specific recommendations.`;
  }
  async generateStream(model, prompt, options = {}) {
    try {
      const request = {
        inputs: prompt,
        parameters: {
          max_new_tokens: options.maxTokens || 500,
          temperature: options.temperature || 0.7,
          do_sample: true
        }
      };
      const response = await fetch(`${this.baseUrl}/${model}`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.apiKey}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(request)
      });
      if (!response.ok) {
        throw new Error(`HuggingFace API error: ${response.status} ${response.statusText}`);
      }
      return response.body;
    } catch (error) {
      console.warn("HuggingFace streaming failed, using fallback:", error);
      return this.generateStreamFallback(prompt, options);
    }
  }
  async generateStreamFallback(prompt, options = {}) {
    const text2 = await this.generateTextFallback(prompt, options);
    return new ReadableStream({
      start(controller) {
        const encoder = new TextEncoder();
        controller.enqueue(encoder.encode(text2));
        controller.close();
      }
    });
  }
  // Specialized methods for financial analysis
  async generateFinancialInsight(prompt, options = {}) {
    const financialPrompt = `As a financial advisor, analyze the following and provide actionable insights:

${prompt}

Provide specific, actionable financial advice:`;
    return await this.generateText(MODELS.FLAN_T5_SMALL, financialPrompt, options);
  }
  async generateFinancialRecommendations(prompt, options = {}) {
    const recommendationPrompt = `Based on this financial data, provide specific recommendations:

${prompt}

Recommendations should be practical and achievable:`;
    return await this.generateText(MODELS.FLAN_T5_SMALL, recommendationPrompt, options);
  }
  async analyzeFinancialData(prompt, options = {}) {
    const analysisPrompt = `Analyze this financial data and identify patterns, trends, and insights:

${prompt}

Focus on actionable insights:`;
    return await this.generateText(MODELS.FLAN_T5_SMALL, analysisPrompt, options);
  }
  async generateUnclePersonalityResponse(prompt, options = {}) {
    return await this.generateTextFallback(prompt, {
      ...options,
      temperature: Math.max(0.7, options.temperature || 0.8)
      // Higher temperature for more personality
    });
  }
  // Sentiment analysis method for financial texts
  async analyzeSentiment(text2, retries = 3) {
    this.log("info", "Starting sentiment analysis", { text: text2.substring(0, 100) + "...", retries });
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        this.log("info", `Calling Hugging Face API (attempt ${attempt}/${retries})`, {
          model: "soleimanian/financial-roberta-large-sentiment",
          url: `${this.baseUrl}/soleimanian/financial-roberta-large-sentiment`
        });
        const response = await fetch(`${this.baseUrl}/soleimanian/financial-roberta-large-sentiment`, {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${this.apiKey}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            inputs: text2
          })
        });
        this.log("info", "Received API response", {
          status: response.status,
          ok: response.ok,
          attempt
        });
        if (!response.ok) {
          if (response.status === 429) {
            this.log("warning", "Rate limited, waiting before retry", { attempt, status: response.status });
            if (attempt < retries) {
              await this.delay(2e3 * attempt);
              continue;
            }
          }
          if (response.status === 503) {
            this.log("warning", "Model is loading (cold start), waiting before retry", { attempt, status: response.status });
            if (attempt < retries) {
              await this.delay(5e3 * attempt);
              continue;
            }
          }
          throw new Error(`Sentiment analysis failed: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        this.log("info", "Parsed API response", { dataType: typeof data, isArray: Array.isArray(data), attempt });
        if (Array.isArray(data) && data.length > 0) {
          const results = Array.isArray(data[0]) ? data[0] : data;
          if (results.length > 0) {
            const result2 = {
              label: results[0].label,
              confidence: results[0].score,
              allScores: results
            };
            this.log("success", "Sentiment analysis completed", { ...result2, attempt });
            return result2;
          }
        }
        throw new Error("Unexpected response format");
      } catch (error) {
        this.log("error", `Sentiment analysis attempt ${attempt} failed`, { error: error.message, attempt });
        if (attempt === retries) {
          this.log("error", "All retry attempts failed, using fallback", { error: error.message });
          break;
        }
        await this.delay(1e3 * attempt);
      }
    }
    this.log("warning", "Using fallback sentiment analysis after all retries failed");
    const textLower = text2.toLowerCase();
    let result;
    if (textLower.includes("exceeded") || textLower.includes("growth") || textLower.includes("positive")) {
      result = { label: "positive", confidence: 0.8, allScores: [] };
    } else if (textLower.includes("declined") || textLower.includes("negative") || textLower.includes("plummeted")) {
      result = { label: "negative", confidence: 0.8, allScores: [] };
    } else {
      result = { label: "neutral", confidence: 0.7, allScores: [] };
    }
    this.log("warning", "Using fallback sentiment analysis", result);
    return result;
  }
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  formatFinancialPrompt(systemContext, financialData, analysisType) {
    const contextMap = {
      spending: "Analyze spending patterns and identify opportunities for optimization.",
      patterns: "Identify recurring patterns and unusual behaviors in financial data.",
      recommendations: "Provide specific, actionable financial recommendations.",
      health: "Assess overall financial health and provide improvement suggestions."
    };
    return `${systemContext}

${contextMap[analysisType]}

Financial Data:
${JSON.stringify(financialData, null, 2)}

Analysis:`;
  }
  // Batch processing for multiple insights
  async generateBatchInsights(prompts, options = {}) {
    const promises = prompts.map(
      (prompt) => this.generateFinancialInsight(prompt, options)
    );
    try {
      return await Promise.all(promises);
    } catch (error) {
      console.error("Batch insight generation failed:", error);
      return prompts.map(() => "Analysis temporarily unavailable. Please try again later.");
    }
  }
};
var MODELS = {
  MISTRAL_7B: "mistralai/Mistral-7B-Instruct-v0.2",
  LLAMA_3_8B: "meta-llama/Llama-3-8B-Instruct",
  CODELLAMA_7B: "codellama/CodeLlama-7b-Instruct-hf",
  MICROSOFT_DIALOGPT: "microsoft/DialoGPT-medium",
  DISTILBERT: "distilbert-base-uncased",
  GPT2: "gpt2",
  BLOOM_560M: "bigscience/bloom-560m",
  // Smaller, more reliable model
  FLAN_T5_SMALL: "google/flan-t5-small",
  // Good for instruction following
  // Financial-specific models for data extraction agent
  FINANCIAL_ROBERTA: "soleimanian/financial-roberta-large-sentiment",
  // For transaction categorization
  FINANCIAL_SETFIT: "nickmuchi/setfit-finetuned-financial-text",
  // For merchant normalization
  FINMA_7B: "TheFinAI/finma-7b-full",
  // Finance-aware LLM for pattern analysis
  // Enhanced financial models for better insights
  FINANCIAL_BERT: "yiyanghkust/finbert-tone",
  // Financial sentiment analysis
  FINANCIAL_LLAMA: "TheFinAI/finma-7b-full",
  // Financial reasoning
  BLOOM_3B: "bigscience/bloom-3b",
  // More capable than 560M
  FLAN_T5_BASE: "google/flan-t5-base",
  // Better instruction following
  // Specialized models for different tasks
  ANALYSIS_MODEL: "google/flan-t5-base",
  // For financial analysis
  RECOMMENDATION_MODEL: "bigscience/bloom-3b",
  // For generating recommendations
  INSIGHT_MODEL: "google/flan-t5-base"
  // For generating insights
};
var DEFAULT_MODEL = MODELS.FLAN_T5_BASE;

// src/lib/agents/base-agent.ts
var BaseAgent = class {
  static {
    __name(this, "BaseAgent");
  }
  huggingFaceClient;
  model;
  constructor(apiKey, model = DEFAULT_MODEL) {
    const finalApiKey = apiKey || process.env.HUGGINGFACE_API_KEY || "";
    this.huggingFaceClient = new HuggingFaceClient(finalApiKey);
    this.model = model;
  }
  async generateResponse(prompt, options) {
    try {
      return await this.huggingFaceClient.generateText(this.model, prompt, options);
    } catch (error) {
      console.error(`Error in ${this.constructor.name}:`, error);
      throw new Error(`Failed to generate response: ${error}`);
    }
  }
  async generateFinancialInsight(prompt, options) {
    try {
      return await this.huggingFaceClient.generateFinancialInsight(prompt, options);
    } catch (error) {
      console.error(`Financial insight generation error in ${this.constructor.name}:`, error);
      throw new Error(`Failed to generate financial insight: ${error}`);
    }
  }
  async generateFinancialRecommendations(prompt, options) {
    try {
      return await this.huggingFaceClient.generateFinancialRecommendations(prompt, options);
    } catch (error) {
      console.error(`Financial recommendations generation error in ${this.constructor.name}:`, error);
      throw new Error(`Failed to generate financial recommendations: ${error}`);
    }
  }
  async analyzeFinancialData(prompt, options) {
    try {
      return await this.huggingFaceClient.analyzeFinancialData(prompt, options);
    } catch (error) {
      console.error(`Financial data analysis error in ${this.constructor.name}:`, error);
      throw new Error(`Failed to analyze financial data: ${error}`);
    }
  }
  formatFinancialPrompt(systemContext, financialData, analysisType) {
    return this.huggingFaceClient.formatFinancialPrompt(systemContext, financialData, analysisType);
  }
  formatPrompt(systemPrompt, userInput) {
    return `${systemPrompt}

User Input: ${userInput}

Response:`;
  }
  createInsight(title, description, sentiment = "neutral", keyNumbers, recommendations, visualData) {
    return {
      title,
      description,
      key_numbers: keyNumbers,
      recommendations,
      visual_data: visualData
    };
  }
  async retryOperation(operation, maxRetries = 3, delayMs = 1e3) {
    let lastError;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        console.warn(`Attempt ${attempt} failed:`, error);
        if (attempt < maxRetries) {
          await new Promise((resolve) => setTimeout(resolve, delayMs * attempt));
        }
      }
    }
    throw lastError;
  }
};

// src/lib/huggingface/financial-models.ts
init_checked_fetch();
init_modules_watch_stub();
var pipeline2 = null;
var Pipeline2 = null;
async function initializeTransformers() {
  if (pipeline2 && Pipeline2) return;
  try {
    if (typeof window !== "undefined") {
      try {
        const transformers = await Promise.resolve().then(() => (init_transformers(), transformers_exports));
        pipeline2 = transformers.pipeline;
        Pipeline2 = transformers.Pipeline;
        console.log("Transformers library loaded successfully");
      } catch (importError) {
        console.warn("Failed to import transformers library:", importError);
        pipeline2 = null;
        Pipeline2 = null;
      }
    } else {
      console.log("Running in server environment, using fallback categorization methods");
      pipeline2 = null;
      Pipeline2 = null;
    }
  } catch (error) {
    console.warn("Transformers library not available, using fallback methods:", error);
    pipeline2 = null;
    Pipeline2 = null;
  }
}
__name(initializeTransformers, "initializeTransformers");
var FinancialModelsClient = class {
  static {
    __name(this, "FinancialModelsClient");
  }
  classificationPipeline = null;
  embeddingPipeline = null;
  initialized = false;
  useModels = false;
  async initialize() {
    if (this.initialized) return;
    try {
      await initializeTransformers();
      if (pipeline2 && typeof window !== "undefined") {
        try {
          this.classificationPipeline = await pipeline2(
            "text-classification",
            "soleimanian/financial-roberta-large-sentiment",
            { quantized: true }
          );
          this.embeddingPipeline = await pipeline2(
            "feature-extraction",
            "nickmuchi/setfit-finetuned-financial-text",
            { quantized: true }
          );
          this.useModels = true;
          console.log("Financial models initialized successfully");
        } catch (modelError) {
          console.warn("Failed to load models, using fallback methods:", modelError);
          this.useModels = false;
        }
      } else {
        console.log("Using fallback categorization methods");
        this.useModels = false;
      }
      this.initialized = true;
    } catch (error) {
      console.error("Failed to initialize financial models:", error);
      this.useModels = false;
      this.initialized = true;
    }
  }
  async categorizeTransaction(description, amount) {
    if (!this.initialized) {
      await this.initialize();
    }
    try {
      if (this.useModels && this.classificationPipeline) {
        const enhancedDescription = amount ? `${description} Amount: $${amount}` : description;
        const result = await this.classificationPipeline(enhancedDescription);
        const category = this.mapSentimentToCategory(result[0].label, description, amount);
        return {
          category,
          confidence: result[0].score
        };
      } else {
        return this.fallbackCategorization(description, amount);
      }
    } catch (error) {
      console.error("Transaction categorization failed:", error);
      return this.fallbackCategorization(description, amount);
    }
  }
  async generateMerchantEmbedding(merchantName) {
    if (!this.initialized) {
      await this.initialize();
    }
    try {
      if (this.useModels && this.embeddingPipeline) {
        const result = await this.embeddingPipeline(merchantName);
        return result.data;
      } else {
        return this.generateFallbackEmbedding(merchantName);
      }
    } catch (error) {
      console.error("Merchant embedding generation failed:", error);
      return this.generateFallbackEmbedding(merchantName);
    }
  }
  async normalizeMerchantNames(merchantNames) {
    const embeddings = [];
    const normalizationMap = /* @__PURE__ */ new Map();
    for (const merchant of merchantNames) {
      const embedding = await this.generateMerchantEmbedding(merchant);
      embeddings.push({ merchant, embedding });
    }
    const clusters = this.clusterMerchants(embeddings);
    for (const cluster of clusters) {
      const canonicalName = this.selectCanonicalName(cluster);
      for (const merchant of cluster) {
        normalizationMap.set(merchant, canonicalName);
      }
    }
    return normalizationMap;
  }
  async detectRecurringPattern(merchantName, amounts, dates) {
    try {
      const amountPattern = this.analyzeAmountPattern(amounts);
      const datePattern = this.analyzeDatePattern(dates);
      const isRecurring = amountPattern.isConsistent && datePattern.isRegular;
      const confidence = (amountPattern.confidence + datePattern.confidence) / 2;
      return {
        isRecurring,
        frequency: datePattern.frequency,
        confidence,
        pattern: `${amountPattern.description} ${datePattern.description}`
      };
    } catch (error) {
      console.error("Pattern detection failed:", error);
      return {
        isRecurring: false,
        confidence: 0,
        pattern: "Unable to detect pattern"
      };
    }
  }
  mapSentimentToCategory(sentiment, description, amount) {
    const desc3 = description.toLowerCase();
    if (desc3.includes("grocery") || desc3.includes("food") || desc3.includes("supermarket") || desc3.includes("whole foods") || desc3.includes("trader joe") || desc3.includes("kroger") || desc3.includes("safeway") || desc3.includes("publix") || desc3.includes("market")) {
      return "Groceries & Food";
    }
    if (desc3.includes("restaurant") || desc3.includes("cafe") || desc3.includes("dining") || desc3.includes("mcdonald") || desc3.includes("starbucks") || desc3.includes("subway") || desc3.includes("pizza") || desc3.includes("burger") || desc3.includes("food")) {
      return "Dining & Restaurants";
    }
    if (desc3.includes("gas") || desc3.includes("fuel") || desc3.includes("shell") || desc3.includes("exxon") || desc3.includes("chevron") || desc3.includes("bp") || desc3.includes("uber") || desc3.includes("lyft") || desc3.includes("taxi") || desc3.includes("transportation") || desc3.includes("metro") || desc3.includes("bus")) {
      return "Transportation";
    }
    if (desc3.includes("electric") || desc3.includes("water") || desc3.includes("internet") || desc3.includes("phone") || desc3.includes("cable") || desc3.includes("utility") || desc3.includes("at&t") || desc3.includes("verizon") || desc3.includes("comcast")) {
      return "Utilities & Bills";
    }
    if (desc3.includes("netflix") || desc3.includes("spotify") || desc3.includes("subscription") || desc3.includes("hulu") || desc3.includes("disney") || desc3.includes("prime") || desc3.includes("apple music") || desc3.includes("youtube") || desc3.includes("adobe")) {
      return "Subscriptions & Services";
    }
    if (desc3.includes("amazon") || desc3.includes("target") || desc3.includes("walmart") || desc3.includes("costco") || desc3.includes("best buy") || desc3.includes("home depot") || desc3.includes("amzn") || desc3.includes("retail") || desc3.includes("store")) {
      return "Shopping & Retail";
    }
    if (desc3.includes("medical") || desc3.includes("doctor") || desc3.includes("pharmacy") || desc3.includes("hospital") || desc3.includes("clinic") || desc3.includes("cvs") || desc3.includes("walgreens") || desc3.includes("health")) {
      return "Healthcare & Medical";
    }
    if (desc3.includes("hotel") || desc3.includes("travel") || desc3.includes("flight") || desc3.includes("airline") || desc3.includes("booking") || desc3.includes("expedia") || desc3.includes("airbnb") || desc3.includes("marriott") || desc3.includes("hilton")) {
      return "Travel & Hotels";
    }
    if (desc3.includes("salary") || desc3.includes("deposit") || desc3.includes("income") || desc3.includes("payroll") || desc3.includes("direct deposit") || desc3.includes("refund") || desc3.includes("cashback") || desc3.includes("interest")) {
      return "Income & Deposits";
    }
    if (desc3.includes("insurance") || desc3.includes("premium") || desc3.includes("coverage")) {
      return "Insurance";
    }
    if (desc3.includes("school") || desc3.includes("university") || desc3.includes("education") || desc3.includes("tuition") || desc3.includes("student") || desc3.includes("course")) {
      return "Education";
    }
    if (desc3.includes("investment") || desc3.includes("savings") || desc3.includes("retirement") || desc3.includes("401k") || desc3.includes("ira") || desc3.includes("mutual fund") || desc3.includes("stock") || desc3.includes("bond")) {
      return "Investments & Savings";
    }
    if (desc3.includes("transfer") || desc3.includes("payment") || desc3.includes("venmo") || desc3.includes("paypal") || desc3.includes("zelle") || desc3.includes("cash app")) {
      return "Transfers";
    }
    if (amount && amount < 0) {
      return "Other";
    }
    if (amount && amount > 0) {
      return "Income & Deposits";
    }
    return "Other";
  }
  fallbackCategorization(description, amount) {
    const category = this.mapSentimentToCategory("neutral", description, amount);
    return {
      category,
      confidence: 0.7
      // Higher confidence for rule-based categorization
    };
  }
  generateFallbackEmbedding(merchantName) {
    const hash = this.simpleHash(merchantName);
    const embedding = new Array(384).fill(0);
    for (let i = 0; i < Math.min(hash.length, 384); i++) {
      embedding[i] = hash.charCodeAt(i) % 100 / 100;
    }
    return embedding;
  }
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString();
  }
  clusterMerchants(embeddings) {
    const clusters = [];
    const threshold = 0.8;
    for (const embedding of embeddings) {
      let addedToCluster = false;
      for (const cluster of clusters) {
        const clusterEmbedding = embeddings.find((e) => e.merchant === cluster[0]);
        if (clusterEmbedding && this.cosineSimilarity(embedding.embedding, clusterEmbedding.embedding) > threshold) {
          cluster.push(embedding.merchant);
          addedToCluster = true;
          break;
        }
      }
      if (!addedToCluster) {
        clusters.push([embedding.merchant]);
      }
    }
    return clusters;
  }
  cosineSimilarity(a, b) {
    const dotProduct = a.reduce((sum, val, i) => sum + val * b[i], 0);
    const magnitudeA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));
    const magnitudeB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));
    return dotProduct / (magnitudeA * magnitudeB);
  }
  selectCanonicalName(cluster) {
    return cluster.reduce(
      (shortest, current) => current.length < shortest.length ? current : shortest
    );
  }
  analyzeAmountPattern(amounts) {
    if (amounts.length < 2) {
      return { isConsistent: false, confidence: 0, description: "Insufficient data" };
    }
    const mean2 = amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length;
    const variance = amounts.reduce((sum, amount) => sum + Math.pow(amount - mean2, 2), 0) / amounts.length;
    const stdDev = Math.sqrt(variance);
    const coefficientOfVariation = stdDev / Math.abs(mean2);
    const isConsistent = coefficientOfVariation < 0.1;
    const confidence = Math.max(0, 1 - coefficientOfVariation);
    return {
      isConsistent,
      confidence,
      description: isConsistent ? "Consistent amounts" : "Variable amounts"
    };
  }
  analyzeDatePattern(dates) {
    if (dates.length < 3) {
      return { isRegular: false, confidence: 0, description: "Insufficient data" };
    }
    const sortedDates = dates.map((d) => new Date(d)).sort((a, b) => a.getTime() - b.getTime());
    const intervals = [];
    for (let i = 1; i < sortedDates.length; i++) {
      intervals.push(sortedDates[i].getTime() - sortedDates[i - 1].getTime());
    }
    const meanInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;
    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - meanInterval, 2), 0) / intervals.length;
    const stdDev = Math.sqrt(variance);
    const coefficientOfVariation = stdDev / meanInterval;
    const isRegular = coefficientOfVariation < 0.2;
    const confidence = Math.max(0, 1 - coefficientOfVariation);
    let frequency;
    const daysInterval = meanInterval / (1e3 * 60 * 60 * 24);
    if (daysInterval >= 28 && daysInterval <= 31) frequency = "Monthly";
    else if (daysInterval >= 6 && daysInterval <= 8) frequency = "Weekly";
    else if (daysInterval >= 1 && daysInterval <= 2) frequency = "Daily";
    else if (daysInterval >= 89 && daysInterval <= 92) frequency = "Quarterly";
    else if (daysInterval >= 364 && daysInterval <= 366) frequency = "Yearly";
    return {
      isRegular,
      confidence,
      frequency,
      description: isRegular ? `Regular ${frequency || "pattern"}` : "Irregular pattern"
    };
  }
};

// src/lib/agents/data-extraction.ts
var DataExtractionAgent = class extends BaseAgent {
  static {
    __name(this, "DataExtractionAgent");
  }
  financialModels;
  constructor(apiKey) {
    super(apiKey);
    this.financialModels = new FinancialModelsClient();
  }
  async execute(transactions2) {
    console.log(`[DataExtraction] Starting analysis of ${transactions2.length} transactions`);
    const CHUNK_SIZE = 50;
    const chunks = [];
    for (let i = 0; i < transactions2.length; i += CHUNK_SIZE) {
      chunks.push(transactions2.slice(i, i + CHUNK_SIZE));
    }
    console.log(`[DataExtraction] Processing ${chunks.length} chunks of up to ${CHUNK_SIZE} transactions each`);
    const allCategorizedTransactions = [];
    const categories = /* @__PURE__ */ new Set();
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      console.log(`[DataExtraction] Processing chunk ${i + 1}/${chunks.length} (${chunk.length} transactions)`);
      const categorizedChunk = chunk.map((transaction) => {
        const description = transaction.description?.toLowerCase() || "";
        let category = "Other";
        if (description.includes("amazon") || description.includes("amzn")) {
          category = "Shopping & Retail";
        } else if (description.includes("starbucks") || description.includes("coffee")) {
          category = "Food & Dining";
        } else if (description.includes("gas") || description.includes("fuel")) {
          category = "Transportation";
        } else if (description.includes("grocery") || description.includes("food")) {
          category = "Food & Dining";
        } else if (description.includes("rent") || description.includes("mortgage")) {
          category = "Housing";
        } else if (description.includes("utility") || description.includes("electric")) {
          category = "Utilities";
        } else if (description.includes("netflix") || description.includes("spotify")) {
          category = "Entertainment";
        } else if (description.includes("salary") || description.includes("deposit")) {
          category = "Income";
        } else if (description.includes("uber") || description.includes("lyft")) {
          category = "Transportation";
        }
        categories.add(category);
        return {
          id: transaction.id,
          date: transaction.date,
          description: transaction.description,
          amount: transaction.amount,
          category,
          confidence: 0.8,
          merchant: transaction.description,
          notes: "Categorized using rule-based method",
          sentiment: "neutral"
        };
      });
      allCategorizedTransactions.push(...categorizedChunk);
      if (i < chunks.length - 1) {
        await new Promise((resolve) => setTimeout(resolve, 100));
      }
    }
    const insights2 = [
      {
        title: "Transaction Categorization Complete",
        description: `Successfully categorized ${transactions2.length} transactions using rule-based analysis.`,
        confidence: 0.8,
        metadata: {
          method: "rule-based",
          chunksProcessed: chunks.length,
          chunkSize: CHUNK_SIZE
        }
      },
      {
        title: "Spending Categories Identified",
        description: `Found transactions in ${categories.size} categories: ${Array.from(categories).join(", ")}`,
        confidence: 0.9,
        metadata: {
          categories: Array.from(categories),
          categoryCount: categories.size
        }
      },
      {
        title: "Transaction Summary",
        description: `Processed ${allCategorizedTransactions.length} transactions across ${chunks.length} chunks.`,
        confidence: 0.95,
        metadata: {
          totalTransactions: allCategorizedTransactions.length,
          chunksProcessed: chunks.length
        }
      }
    ];
    console.log(`[DataExtraction] Analysis completed successfully - ${allCategorizedTransactions.length} transactions categorized`);
    return {
      agent_type: "data_extraction",
      insights: insights2,
      metadata: {
        categorized_transactions: allCategorizedTransactions,
        summary: {
          total_transactions: allCategorizedTransactions.length,
          categories_found: Array.from(categories),
          chunks_processed: chunks.length,
          data_quality_score: 0.8
        }
      }
    };
  }
  async categorizeTransactions(transactions2) {
    const categorizedTransactions = [];
    console.log(`[DataExtraction] Starting categorization of ${transactions2.length} transactions`);
    for (let i = 0; i < transactions2.length; i++) {
      const transaction = transactions2[i];
      try {
        console.log(`[DataExtraction] Processing transaction ${i + 1}/${transactions2.length}: ${transaction.description}`);
        const sentimentResult = await Promise.race([
          this.huggingFaceClient.analyzeSentiment(
            `${transaction.description} ${transaction.amount}`
          ),
          new Promise(
            (_, reject) => setTimeout(() => reject(new Error("API call timeout")), 5e3)
          )
        ]);
        console.log(`[DataExtraction] Sentiment analysis result:`, sentimentResult);
        const category = this.mapSentimentToCategory(sentimentResult, transaction.amount);
        categorizedTransactions.push({
          id: transaction.id,
          date: transaction.date,
          description: transaction.description,
          amount: transaction.amount,
          category,
          confidence: sentimentResult.confidence,
          merchant: transaction.description,
          // Will be normalized later
          notes: this.generateTransactionNotes(transaction, { category, confidence: sentimentResult.confidence }),
          sentiment: sentimentResult.label
        });
        console.log(`[DataExtraction] Successfully categorized transaction ${i + 1}/${transactions2.length}`);
        if (i < transactions2.length - 1) {
          console.log(`[DataExtraction] Waiting 500ms before next API call...`);
          await new Promise((resolve) => setTimeout(resolve, 500));
        }
      } catch (error) {
        console.error(`[DataExtraction] Failed to categorize transaction ${transaction.id}:`, error);
        categorizedTransactions.push({
          id: transaction.id,
          date: transaction.date,
          description: transaction.description,
          amount: transaction.amount,
          category: "Other",
          confidence: 0.5,
          merchant: transaction.description,
          notes: "Categorized using fallback method",
          sentiment: "neutral"
        });
      }
    }
    console.log(`[DataExtraction] Completed categorization of ${categorizedTransactions.length} transactions`);
    return categorizedTransactions;
  }
  mapSentimentToCategory(sentimentResult, amount) {
    const { label, confidence } = sentimentResult;
    if (amount > 0) {
      return "Income & Deposits";
    }
    if (label === "positive" && confidence > 0.7) {
      return "Investments & Savings";
    } else if (label === "negative" && confidence > 0.7) {
      return "Bills & Utilities";
    } else {
      if (Math.abs(amount) < 20) {
        return "Food & Dining";
      } else if (Math.abs(amount) < 100) {
        return "Shopping & Retail";
      } else {
        return "Major Expenses";
      }
    }
  }
  async normalizeMerchants(transactions2) {
    const merchantNames = transactions2.map((t) => t.description);
    return await this.financialModels.normalizeMerchantNames(merchantNames);
  }
  async detectPatterns(transactions2) {
    const recurringTransactions = [];
    const unusualTransactions = [];
    const merchantSummary = {};
    const merchantGroups = this.groupTransactionsByMerchant(transactions2);
    for (const [merchant, merchantTransactions] of merchantGroups) {
      if (merchantTransactions.length >= 2) {
        try {
          const amounts = merchantTransactions.map((t) => t.amount);
          const dates = merchantTransactions.map((t) => t.date);
          const patternResult = await this.financialModels.detectRecurringPattern(
            merchant,
            amounts,
            dates
          );
          if (patternResult.isRecurring && patternResult.confidence > 0.7) {
            recurringTransactions.push({
              merchant,
              frequency: patternResult.frequency,
              confidence: patternResult.confidence,
              pattern: patternResult.pattern,
              transaction_count: merchantTransactions.length,
              average_amount: amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length
            });
          }
          const unusual = this.detectUnusualTransactions(merchantTransactions, patternResult);
          unusualTransactions.push(...unusual);
          merchantSummary[merchant] = {
            transaction_count: merchantTransactions.length,
            total_amount: amounts.reduce((sum, amount) => sum + amount, 0),
            average_amount: amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length,
            is_recurring: patternResult.isRecurring,
            frequency: patternResult.frequency
          };
        } catch (error) {
          console.error(`Failed to analyze patterns for merchant ${merchant}:`, error);
        }
      }
    }
    return {
      recurring_transactions: recurringTransactions,
      unusual_transactions: unusualTransactions,
      merchant_summary: merchantSummary
    };
  }
  groupTransactionsByMerchant(transactions2) {
    const groups = /* @__PURE__ */ new Map();
    for (const transaction of transactions2) {
      const merchant = this.extractMerchantName(transaction.description);
      if (!groups.has(merchant)) {
        groups.set(merchant, []);
      }
      groups.get(merchant).push(transaction);
    }
    return groups;
  }
  extractMerchantName(description) {
    return description.replace(/^\d+\s*/, "").replace(/\s+\d+$/, "").replace(/\*.*$/, "").trim().substring(0, 50);
  }
  detectUnusualTransactions(transactions2, pattern) {
    const unusual = [];
    const amounts = transactions2.map((t) => t.amount);
    const mean2 = amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length;
    const stdDev = Math.sqrt(
      amounts.reduce((sum, amount) => sum + Math.pow(amount - mean2, 2), 0) / amounts.length
    );
    for (const transaction of transactions2) {
      const zScore = Math.abs((transaction.amount - mean2) / stdDev);
      if (zScore > 2) {
        unusual.push({
          transaction_id: transaction.id,
          merchant: this.extractMerchantName(transaction.description),
          amount: transaction.amount,
          date: transaction.date,
          reason: "Amount significantly different from typical pattern",
          z_score: zScore,
          confidence: Math.min(0.95, zScore / 3)
          // Cap confidence at 0.95
        });
      }
    }
    return unusual;
  }
  calculateDataQualityScore(categorizedTransactions) {
    if (categorizedTransactions.length === 0) return 0;
    const totalTransactions = categorizedTransactions.length;
    const highConfidenceTransactions = categorizedTransactions.filter((t) => t.confidence > 0.8).length;
    const categorizedTransactionsCount = categorizedTransactions.filter((t) => t.category !== "Other").length;
    const confidenceScore = highConfidenceTransactions / totalTransactions;
    const categorizationScore = categorizedTransactionsCount / totalTransactions;
    return (confidenceScore + categorizationScore) / 2;
  }
  generateTransactionNotes(transaction, categoryResult) {
    const notes = [];
    if (categoryResult.confidence < 0.7) {
      notes.push("Low confidence categorization");
    }
    if (Math.abs(transaction.amount) > 1e3) {
      notes.push("Large transaction amount");
    }
    if (transaction.description.length < 5) {
      notes.push("Short description may affect accuracy");
    }
    return notes.join("; ") || "No special notes";
  }
  async generateInsights(categorizedTransactions, patterns, dataQualityScore) {
    const insights2 = [];
    insights2.push(
      this.createInsight(
        "Transaction Analysis Complete",
        `Successfully categorized ${categorizedTransactions.length} transactions with ${Math.round(dataQualityScore * 100)}% data quality score.`,
        "positive",
        {
          "Total Transactions": categorizedTransactions.length,
          "Categories Found": [...new Set(categorizedTransactions.map((t) => t.category))].length,
          "Data Quality Score": Math.round(dataQualityScore * 100),
          "High Confidence": categorizedTransactions.filter((t) => t.confidence > 0.8).length
        }
      )
    );
    if (patterns.recurring_transactions.length > 0) {
      insights2.push(
        this.createInsight(
          "Recurring Patterns Detected",
          `Found ${patterns.recurring_transactions.length} recurring transaction patterns.`,
          "info",
          {
            "Recurring Merchants": patterns.recurring_transactions.length,
            "Most Common Frequency": this.getMostCommonFrequency(patterns.recurring_transactions),
            "Average Confidence": Math.round(
              patterns.recurring_transactions.reduce((sum, p) => sum + p.confidence, 0) / patterns.recurring_transactions.length * 100
            )
          }
        )
      );
    }
    if (patterns.unusual_transactions.length > 0) {
      insights2.push(
        this.createInsight(
          "Unusual Transactions Found",
          `Detected ${patterns.unusual_transactions.length} unusual transactions that may require attention.`,
          "warning",
          {
            "Unusual Transactions": patterns.unusual_transactions.length,
            "Highest Z-Score": Math.round(
              Math.max(...patterns.unusual_transactions.map((t) => t.z_score)) * 100
            ) / 100
          }
        )
      );
    }
    try {
      const llmInsights = await this.generateLLMInsights(categorizedTransactions, patterns, dataQualityScore);
      insights2.push(...llmInsights);
    } catch (error) {
      console.error("LLM insight generation failed:", error);
      insights2.push(
        this.createInsight(
          "AI Analysis Temporarily Unavailable",
          "Using traditional analysis methods. AI-powered insights will be available shortly.",
          "neutral"
        )
      );
    }
    return insights2;
  }
  async generateLLMInsights(categorizedTransactions, patterns, dataQualityScore) {
    const insights2 = [];
    const categorizationInsight = await this.generateCategorizationInsight(categorizedTransactions, dataQualityScore);
    if (categorizationInsight) insights2.push(categorizationInsight);
    const patternInsight = await this.generatePatternAnalysisInsight(patterns);
    if (patternInsight) insights2.push(patternInsight);
    const qualityInsight = await this.generateDataQualityInsight(categorizedTransactions, dataQualityScore);
    if (qualityInsight) insights2.push(qualityInsight);
    const merchantInsight = await this.generateMerchantAnalysisInsight(categorizedTransactions);
    if (merchantInsight) insights2.push(merchantInsight);
    return insights2;
  }
  async generateCategorizationInsight(categorizedTransactions, dataQualityScore) {
    const categoryDistribution = this.calculateCategoryDistribution(categorizedTransactions);
    const lowConfidenceTransactions = categorizedTransactions.filter((t) => t.confidence < 0.7);
    const prompt = `Analyze this transaction categorization data and provide insights:

Categorization Summary:
- Total Transactions: ${categorizedTransactions.length}
- Data Quality Score: ${Math.round(dataQualityScore * 100)}%
- Categories Found: ${Object.keys(categoryDistribution).length}
- Low Confidence Transactions: ${lowConfidenceTransactions.length}

Category Distribution:
${Object.entries(categoryDistribution).sort(([, a], [, b]) => b.count - a.count).map(
      ([cat2, data]) => `- ${cat2}: ${data.count} transactions (${data.percentage.toFixed(1)}%) - $${data.total.toFixed(2)}`
    ).join("\n")}

Low Confidence Transactions Sample:
${lowConfidenceTransactions.slice(0, 5).map(
      (t) => `- ${t.description}: ${t.category} (${Math.round(t.confidence * 100)}%)`
    ).join("\n")}

Provide insights about:
1. Categorization accuracy and patterns
2. Categories that might need review
3. Suggestions for improving categorization
4. Notable spending patterns by category

Keep response concise and actionable.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 400,
        temperature: 0.6
      });
      return this.createInsight(
        "AI Transaction Categorization Analysis",
        response,
        dataQualityScore > 0.8 ? "positive" : dataQualityScore > 0.6 ? "neutral" : "negative",
        {
          "Quality Score": `${Math.round(dataQualityScore * 100)}%`,
          "Categories": Object.keys(categoryDistribution).length,
          "Low Confidence": lowConfidenceTransactions.length
        }
      );
    } catch (error) {
      console.error("Categorization insight generation failed:", error);
      return null;
    }
  }
  async generatePatternAnalysisInsight(patterns) {
    const prompt = `Analyze these transaction patterns and provide insights:

Pattern Analysis:
- Recurring Transactions: ${patterns.recurring_transactions.length}
- Unusual Transactions: ${patterns.unusual_transactions.length}
- Merchants Analyzed: ${Object.keys(patterns.merchant_summary).length}

Recurring Patterns:
${patterns.recurring_transactions.map(
      (p) => `- ${p.merchant}: ${p.frequency} (${Math.round(p.confidence * 100)}% confidence)`
    ).join("\n")}

Unusual Transactions:
${patterns.unusual_transactions.slice(0, 5).map(
      (t) => `- ${t.merchant}: $${t.amount} (Z-score: ${t.z_score.toFixed(2)})`
    ).join("\n")}

Merchant Summary (Top 5):
${Object.entries(patterns.merchant_summary).sort(([, a], [, b]) => b.transaction_count - a.transaction_count).slice(0, 5).map(
      ([merchant, data]) => `- ${merchant}: ${data.transaction_count} transactions, $${data.total_amount.toFixed(2)} total`
    ).join("\n")}

Provide insights about:
1. Spending patterns and habits
2. Subscription and recurring payment analysis
3. Unusual spending that needs attention
4. Merchant relationship patterns
5. Recommendations for budget optimization

Keep response practical and actionable.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 450,
        temperature: 0.7
      });
      return this.createInsight(
        "AI Pattern Analysis Insights",
        response,
        "info",
        {
          "Recurring Patterns": patterns.recurring_transactions.length,
          "Unusual Transactions": patterns.unusual_transactions.length,
          "Merchants": Object.keys(patterns.merchant_summary).length
        }
      );
    } catch (error) {
      console.error("Pattern analysis insight generation failed:", error);
      return null;
    }
  }
  async generateDataQualityInsight(categorizedTransactions, dataQualityScore) {
    const highConfidenceTransactions = categorizedTransactions.filter((t) => t.confidence > 0.8);
    const mediumConfidenceTransactions = categorizedTransactions.filter((t) => t.confidence >= 0.6 && t.confidence <= 0.8);
    const lowConfidenceTransactions = categorizedTransactions.filter((t) => t.confidence < 0.6);
    const prompt = `Assess the data quality of this transaction analysis:

Data Quality Metrics:
- Overall Quality Score: ${Math.round(dataQualityScore * 100)}%
- High Confidence (>80%): ${highConfidenceTransactions.length} transactions
- Medium Confidence (60-80%): ${mediumConfidenceTransactions.length} transactions
- Low Confidence (<60%): ${lowConfidenceTransactions.length} transactions

Low Confidence Transactions Sample:
${lowConfidenceTransactions.slice(0, 5).map(
      (t) => `- ${t.description}: ${t.category} (${Math.round(t.confidence * 100)}%)`
    ).join("\n")}

Transaction Description Quality:
- Average Description Length: ${Math.round(categorizedTransactions.reduce((sum, t) => sum + t.description.length, 0) / categorizedTransactions.length)}
- Short Descriptions (<10 chars): ${categorizedTransactions.filter((t) => t.description.length < 10).length}
- Very Short Descriptions (<5 chars): ${categorizedTransactions.filter((t) => t.description.length < 5).length}

Provide insights about:
1. Overall data quality assessment
2. Factors affecting categorization accuracy
3. Recommendations for improving data quality
4. Which transactions might need manual review
5. Suggestions for better transaction descriptions

Be specific about what affects quality and how to improve it.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 350,
        temperature: 0.5
      });
      return this.createInsight(
        "AI Data Quality Assessment",
        response,
        dataQualityScore > 0.8 ? "positive" : dataQualityScore > 0.6 ? "neutral" : "negative",
        {
          "Quality Score": `${Math.round(dataQualityScore * 100)}%`,
          "High Confidence": highConfidenceTransactions.length,
          "Needs Review": lowConfidenceTransactions.length
        }
      );
    } catch (error) {
      console.error("Data quality insight generation failed:", error);
      return null;
    }
  }
  async generateMerchantAnalysisInsight(categorizedTransactions) {
    const merchantAnalysis = this.analyzeMerchantPatterns(categorizedTransactions);
    const prompt = `Analyze these merchant patterns and provide insights:

Merchant Analysis:
- Unique Merchants: ${merchantAnalysis.uniqueMerchants}
- Top Merchant by Transactions: ${merchantAnalysis.topMerchantByCount}
- Top Merchant by Amount: ${merchantAnalysis.topMerchantByAmount}
- Average Transactions per Merchant: ${merchantAnalysis.avgTransactionsPerMerchant.toFixed(1)}

Top Merchants by Transaction Count:
${merchantAnalysis.topMerchantsByCount.slice(0, 5).map(
      (m) => `- ${m.merchant}: ${m.count} transactions, $${m.total.toFixed(2)}`
    ).join("\n")}

Top Merchants by Amount:
${merchantAnalysis.topMerchantsByAmount.slice(0, 5).map(
      (m) => `- ${m.merchant}: $${m.total.toFixed(2)} across ${m.count} transactions`
    ).join("\n")}

Merchant Categories:
${Object.entries(merchantAnalysis.categoryDistribution).sort(([, a], [, b]) => b.count - a.count).map(
      ([cat2, data]) => `- ${cat2}: ${data.count} merchants, ${data.transactions} transactions`
    ).join("\n")}

Provide insights about:
1. Spending concentration and diversification
2. Merchant relationship patterns
3. Potential subscription services
4. Shopping habits and preferences
5. Recommendations for merchant optimization

Focus on actionable insights for financial management.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 400,
        temperature: 0.6
      });
      return this.createInsight(
        "AI Merchant Analysis",
        response,
        "info",
        {
          "Unique Merchants": merchantAnalysis.uniqueMerchants,
          "Top Merchant": merchantAnalysis.topMerchantByCount,
          "Avg per Merchant": merchantAnalysis.avgTransactionsPerMerchant.toFixed(1)
        }
      );
    } catch (error) {
      console.error("Merchant analysis insight generation failed:", error);
      return null;
    }
  }
  calculateCategoryDistribution(categorizedTransactions) {
    const distribution = {};
    categorizedTransactions.forEach((transaction) => {
      const category = transaction.category;
      if (!distribution[category]) {
        distribution[category] = { count: 0, total: 0, percentage: 0 };
      }
      distribution[category].count++;
      distribution[category].total += Math.abs(transaction.amount);
    });
    const totalTransactions = categorizedTransactions.length;
    Object.values(distribution).forEach((data) => {
      data.percentage = data.count / totalTransactions * 100;
    });
    return distribution;
  }
  analyzeMerchantPatterns(categorizedTransactions) {
    const merchantMap = /* @__PURE__ */ new Map();
    categorizedTransactions.forEach((transaction) => {
      const merchant = this.extractMerchantName(transaction.description);
      if (!merchantMap.has(merchant)) {
        merchantMap.set(merchant, { count: 0, total: 0, category: transaction.category });
      }
      const data = merchantMap.get(merchant);
      data.count++;
      data.total += Math.abs(transaction.amount);
    });
    const merchants = Array.from(merchantMap.entries()).map(([merchant, data]) => ({
      merchant,
      ...data
    }));
    const topMerchantsByCount = merchants.sort((a, b) => b.count - a.count);
    const topMerchantsByAmount = merchants.sort((a, b) => b.total - a.total);
    const categoryDistribution = {};
    merchants.forEach((merchant) => {
      const category = merchant.category;
      if (!categoryDistribution[category]) {
        categoryDistribution[category] = { count: 0, transactions: 0 };
      }
      categoryDistribution[category].count++;
      categoryDistribution[category].transactions += merchant.count;
    });
    return {
      uniqueMerchants: merchants.length,
      topMerchantByCount: topMerchantsByCount[0]?.merchant || "None",
      topMerchantByAmount: topMerchantsByAmount[0]?.merchant || "None",
      avgTransactionsPerMerchant: merchants.reduce((sum, m) => sum + m.count, 0) / merchants.length,
      topMerchantsByCount: topMerchantsByCount.slice(0, 10),
      topMerchantsByAmount: topMerchantsByAmount.slice(0, 10),
      categoryDistribution
    };
  }
  getMostCommonFrequency(recurringTransactions) {
    const frequencies = recurringTransactions.map((t) => t.frequency).filter((f) => f);
    if (frequencies.length === 0) return "Unknown";
    const frequencyCounts = frequencies.reduce((acc, freq) => {
      acc[freq] = (acc[freq] || 0) + 1;
      return acc;
    }, {});
    return Object.entries(frequencyCounts).reduce(
      (a, b) => frequencyCounts[a[0]] > frequencyCounts[b[0]] ? a : b
    )[0];
  }
};

// src/lib/agents/spending-analysis.ts
init_checked_fetch();
init_modules_watch_stub();
var SpendingAnalysisAgent = class extends BaseAgent {
  static {
    __name(this, "SpendingAnalysisAgent");
  }
  constructor(apiKey) {
    super(apiKey);
  }
  async execute(transactions2) {
    try {
      const analysis = this.analyzeSpendingPatterns(transactions2);
      const llmInsights = await this.generateLLMInsights(transactions2, analysis);
      const insights2 = [
        this.createInsight(
          "Spending Analysis Complete",
          `Analyzed $${Math.abs(analysis.summary.total_spent).toFixed(2)} in spending across ${analysis.summary.category_count} categories.`,
          "positive",
          {
            "Total Spent": `$${Math.abs(analysis.summary.total_spent).toFixed(2)}`,
            "Daily Average": `$${analysis.summary.average_daily_spending.toFixed(2)}`,
            "Top Category": analysis.insights.highest_spending_category
          }
        ),
        ...llmInsights
      ];
      return {
        agent_type: "spending_analysis",
        insights: insights2,
        metadata: {
          ...analysis,
          llm_generated_insights: llmInsights.length,
          analysis_method: "hybrid_rule_based_and_llm"
        }
      };
    } catch (error) {
      console.error("Spending Analysis Agent error:", error);
      return {
        agent_type: "spending_analysis",
        insights: [
          this.createInsight(
            "Spending Analysis Failed",
            "Unable to analyze spending patterns due to processing error.",
            "negative"
          )
        ],
        metadata: { error: error instanceof Error ? error.message : "Unknown error" }
      };
    }
  }
  analyzeSpendingPatterns(transactions2) {
    const spendingByCategory = {};
    let totalSpent = 0;
    let totalIncome = 0;
    transactions2.forEach((t) => {
      if (t.amount < 0) {
        totalSpent += Math.abs(t.amount);
        const category = t.category || "Other";
        if (!spendingByCategory[category]) {
          spendingByCategory[category] = { total: 0, count: 0 };
        }
        spendingByCategory[category].total += Math.abs(t.amount);
        spendingByCategory[category].count += 1;
      } else {
        totalIncome += t.amount;
      }
    });
    const highestSpendingCategory = Object.entries(spendingByCategory).sort(([, a], [, b]) => b.total - a.total)[0]?.[0] || "None";
    const averageDailySpending = totalSpent / 30;
    const categoryBreakdown = {};
    Object.entries(spendingByCategory).forEach(([category, data]) => {
      categoryBreakdown[category] = {
        total_amount: data.total,
        transaction_count: data.count,
        average_transaction: data.total / data.count,
        percentage_of_total: data.total / totalSpent * 100
      };
    });
    return {
      spending_by_category: categoryBreakdown,
      trends: {
        monthly_spending: [totalSpent],
        // Simplified for now
        weekly_patterns: {},
        spending_growth_rate: 0
      },
      insights: {
        highest_spending_category: highestSpendingCategory,
        most_frequent_transaction: Object.entries(spendingByCategory).sort(([, a], [, b]) => b.count - a.count)[0]?.[0] || "None",
        unusual_spending: [],
        budget_recommendations: [
          `Consider reducing ${highestSpendingCategory} spending`,
          "Track daily expenses more closely"
        ]
      },
      summary: {
        total_spent: totalSpent,
        total_income: totalIncome,
        average_daily_spending: averageDailySpending,
        category_count: Object.keys(spendingByCategory).length,
        spending_efficiency_score: totalIncome > 0 ? (totalIncome - totalSpent) / totalIncome : 0
      }
    };
  }
  async generateLLMInsights(transactions2, analysis) {
    const insights2 = [];
    try {
      const patternInsight = await this.generateSpendingPatternInsight(transactions2, analysis);
      if (patternInsight) insights2.push(patternInsight);
      const budgetInsight = await this.generateBudgetOptimizationInsight(analysis);
      if (budgetInsight) insights2.push(budgetInsight);
      const healthInsight = await this.generateFinancialHealthInsight(analysis);
      if (healthInsight) insights2.push(healthInsight);
      const recommendationInsight = await this.generatePersonalizedRecommendations(transactions2, analysis);
      if (recommendationInsight) insights2.push(recommendationInsight);
    } catch (error) {
      console.error("LLM insight generation failed:", error);
      insights2.push(
        this.createInsight(
          "AI Analysis Temporarily Unavailable",
          "Using traditional analysis methods. AI-powered insights will be available shortly.",
          "neutral"
        )
      );
    }
    return insights2;
  }
  async generateSpendingPatternInsight(transactions2, analysis) {
    const prompt = `Analyze the following spending patterns and provide insights:

Spending Summary:
- Total Spent: $${Math.abs(analysis.summary.total_spent).toFixed(2)}
- Daily Average: $${analysis.summary.average_daily_spending.toFixed(2)}
- Top Spending Category: ${analysis.insights.highest_spending_category}
- Categories: ${Object.keys(analysis.spending_by_category).join(", ")}

Category Breakdown:
${Object.entries(analysis.spending_by_category).map(
      ([cat2, data]) => `- ${cat2}: $${data.total_amount.toFixed(2)} (${data.percentage_of_total.toFixed(1)}%)`
    ).join("\n")}

Recent Transactions Sample:
${transactions2.slice(0, 10).map(
      (t) => `- ${t.date}: ${t.description} - $${Math.abs(t.amount).toFixed(2)}`
    ).join("\n")}

Provide insights about:
1. Spending patterns and trends
2. Areas of concern or opportunity
3. Comparison to typical spending patterns
4. Seasonal or temporal patterns if any

Keep response concise and actionable.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 400,
        temperature: 0.7
      });
      return this.createInsight(
        "AI Spending Pattern Analysis",
        response,
        "info",
        {
          "Analysis Method": "LLM-Powered",
          "Categories Analyzed": Object.keys(analysis.spending_by_category).length,
          "Transactions Reviewed": transactions2.length
        }
      );
    } catch (error) {
      console.error("Spending pattern insight generation failed:", error);
      return null;
    }
  }
  async generateBudgetOptimizationInsight(analysis) {
    const prompt = `Based on this spending analysis, provide budget optimization recommendations:

Financial Overview:
- Total Spent: $${Math.abs(analysis.summary.total_spent).toFixed(2)}
- Total Income: $${analysis.summary.total_income.toFixed(2)}
- Spending Efficiency Score: ${(analysis.summary.spending_efficiency_score * 100).toFixed(1)}%
- Daily Average Spending: $${analysis.summary.average_daily_spending.toFixed(2)}

Top Spending Categories:
${Object.entries(analysis.spending_by_category).sort(([, a], [, b]) => b.total_amount - a.total_amount).slice(0, 5).map(
      ([cat2, data]) => `- ${cat2}: $${data.total_amount.toFixed(2)} (${data.percentage_of_total.toFixed(1)}%)`
    ).join("\n")}

Provide specific, actionable budget optimization recommendations:
1. Which categories to focus on for savings
2. Realistic spending reduction targets
3. Budget allocation suggestions
4. Emergency fund considerations

Keep recommendations practical and achievable.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 350,
        temperature: 0.6
      });
      return this.createInsight(
        "AI Budget Optimization Recommendations",
        response,
        "positive",
        {
          "Savings Potential": `${(analysis.summary.spending_efficiency_score * 100).toFixed(1)}%`,
          "Top Category": analysis.insights.highest_spending_category,
          "Daily Target": `$${(analysis.summary.average_daily_spending * 0.9).toFixed(2)}`
        },
        [
          "Review top spending categories",
          "Set realistic reduction targets",
          "Track progress weekly"
        ]
      );
    } catch (error) {
      console.error("Budget optimization insight generation failed:", error);
      return null;
    }
  }
  async generateFinancialHealthInsight(analysis) {
    const prompt = `Assess the financial health based on this spending analysis:

Financial Metrics:
- Total Spent: $${Math.abs(analysis.summary.total_spent).toFixed(2)}
- Total Income: $${analysis.summary.total_income.toFixed(2)}
- Spending Efficiency: ${(analysis.summary.spending_efficiency_score * 100).toFixed(1)}%
- Daily Average: $${analysis.summary.average_daily_spending.toFixed(2)}

Spending Distribution:
${Object.entries(analysis.spending_by_category).sort(([, a], [, b]) => b.total_amount - a.total_amount).map(
      ([cat2, data]) => `${cat2}: ${data.percentage_of_total.toFixed(1)}%`
    ).join(", ")}

Provide a financial health assessment covering:
1. Overall financial health score (1-10)
2. Strengths in current spending habits
3. Areas needing improvement
4. Risk factors to watch
5. Positive trends to maintain

Be encouraging but honest about areas for improvement.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 300,
        temperature: 0.5
      });
      const healthScore = Math.min(10, Math.max(1, Math.round(analysis.summary.spending_efficiency_score * 10)));
      return this.createInsight(
        "AI Financial Health Assessment",
        response,
        healthScore >= 7 ? "positive" : healthScore >= 5 ? "neutral" : "negative",
        {
          "Health Score": `${healthScore}/10`,
          "Efficiency": `${(analysis.summary.spending_efficiency_score * 100).toFixed(1)}%`,
          "Income vs Spending": analysis.summary.total_income > 0 ? "Positive" : "Needs Review"
        }
      );
    } catch (error) {
      console.error("Financial health insight generation failed:", error);
      return null;
    }
  }
  async generatePersonalizedRecommendations(transactions2, analysis) {
    const prompt = `Generate personalized financial recommendations based on this spending data:

Spending Profile:
- Total Transactions: ${transactions2.length}
- Spending Period: ${this.calculateSpendingPeriod(transactions2)} days
- Average Transaction: $${(Math.abs(analysis.summary.total_spent) / transactions2.length).toFixed(2)}
- Most Frequent Category: ${analysis.insights.most_frequent_transaction}

Transaction Patterns:
${this.analyzeTransactionPatterns(transactions2)}

Spending Categories:
${Object.entries(analysis.spending_by_category).map(
      ([cat2, data]) => `${cat2}: ${data.transaction_count} transactions, avg $${(data.total_amount / data.transaction_count).toFixed(2)}`
    ).join("\n")}

Provide personalized recommendations for:
1. Immediate actions (next 30 days)
2. Medium-term goals (3-6 months)
3. Long-term financial habits
4. Specific tools or strategies
5. Warning signs to watch for

Make recommendations specific to this spending pattern and lifestyle.`;
    try {
      const response = await this.generateResponse(prompt, {
        maxTokens: 400,
        temperature: 0.7
      });
      return this.createInsight(
        "AI Personalized Financial Recommendations",
        response,
        "positive",
        {
          "Recommendations": "AI-Generated",
          "Based On": `${transactions2.length} transactions`,
          "Timeframe": `${this.calculateSpendingPeriod(transactions2)} days`
        },
        [
          "Review recommendations weekly",
          "Track implementation progress",
          "Adjust based on results"
        ]
      );
    } catch (error) {
      console.error("Personalized recommendations generation failed:", error);
      return null;
    }
  }
  calculateSpendingPeriod(transactions2) {
    if (transactions2.length < 2) return 1;
    const dates = transactions2.map((t) => new Date(t.date)).sort((a, b) => a.getTime() - b.getTime());
    const firstDate = dates[0];
    const lastDate = dates[dates.length - 1];
    return Math.ceil((lastDate.getTime() - firstDate.getTime()) / (1e3 * 60 * 60 * 24));
  }
  analyzeTransactionPatterns(transactions2) {
    const patterns = [];
    const dailyTransactions = transactions2.length / this.calculateSpendingPeriod(transactions2);
    if (dailyTransactions > 3) patterns.push("High frequency spending");
    else if (dailyTransactions < 0.5) patterns.push("Low frequency spending");
    else patterns.push("Moderate frequency spending");
    const amounts = transactions2.map((t) => Math.abs(t.amount));
    const avgAmount = amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length;
    const largeTransactions = amounts.filter((amount) => amount > avgAmount * 2).length;
    if (largeTransactions > amounts.length * 0.2) patterns.push("Many large transactions");
    else patterns.push("Consistent transaction sizes");
    return patterns.join(", ");
  }
};

// src/lib/agents/savings-insight.ts
init_checked_fetch();
init_modules_watch_stub();
var SavingsInsightAgent = class extends BaseAgent {
  static {
    __name(this, "SavingsInsightAgent");
  }
  constructor(apiKey) {
    super(apiKey);
  }
  async execute(transactions2) {
    try {
      const analysis = this.analyzeSavingsOpportunities(transactions2);
      return {
        agent_type: "savings_insight",
        insights: [
          this.createInsight(
            "Savings Analysis Complete",
            `Found ${analysis.summary.potential_savings_count} saving opportunities worth $${analysis.summary.potential_monthly_savings.toFixed(2)} per month.`,
            "positive",
            {
              "Potential Monthly Savings": `$${analysis.summary.potential_monthly_savings.toFixed(2)}`,
              "Saving Opportunities": analysis.summary.potential_savings_count,
              "Current Savings Rate": `${analysis.summary.savings_rate.toFixed(1)}%`
            }
          )
        ],
        metadata: analysis
      };
    } catch (error) {
      console.error("Savings Insight Agent error:", error);
      return {
        agent_type: "savings_insight",
        insights: [
          this.createInsight(
            "Savings Analysis Failed",
            "Unable to analyze saving opportunities due to processing error.",
            "negative"
          )
        ],
        metadata: { error: error instanceof Error ? error.message : "Unknown error" }
      };
    }
  }
  analyzeSavingsOpportunities(transactions2) {
    let totalIncome = 0;
    let totalExpenses = 0;
    const subscriptions = [];
    const diningExpenses = [];
    const entertainmentExpenses = [];
    transactions2.forEach((t) => {
      if (t.amount > 0) {
        totalIncome += t.amount;
      } else {
        totalExpenses += Math.abs(t.amount);
        const desc3 = t.description.toLowerCase();
        if (desc3.includes("subscription") || desc3.includes("netflix") || desc3.includes("spotify")) {
          subscriptions.push(t);
        }
        if (desc3.includes("restaurant") || desc3.includes("coffee") || desc3.includes("dining")) {
          diningExpenses.push(t);
        }
        if (desc3.includes("entertainment") || desc3.includes("movie") || desc3.includes("gym")) {
          entertainmentExpenses.push(t);
        }
      }
    });
    const subscriptionSavings = subscriptions.reduce((sum, t) => sum + Math.abs(t.amount), 0);
    const diningSavings = diningExpenses.reduce((sum, t) => sum + Math.abs(t.amount), 0) * 0.3;
    const entertainmentSavings = entertainmentExpenses.reduce((sum, t) => sum + Math.abs(t.amount), 0) * 0.2;
    const potentialMonthlySavings = subscriptionSavings + diningSavings + entertainmentSavings;
    const savingsRate = totalIncome > 0 ? (totalIncome - totalExpenses) / totalIncome * 100 : 0;
    const recommendations = [];
    if (subscriptions.length > 0) {
      recommendations.push(`Review ${subscriptions.length} subscriptions - potential savings: $${subscriptionSavings.toFixed(2)}/month`);
    }
    if (diningExpenses.length > 0) {
      recommendations.push(`Reduce dining out by 30% - potential savings: $${diningSavings.toFixed(2)}/month`);
    }
    if (entertainmentExpenses.length > 0) {
      recommendations.push(`Optimize entertainment spending - potential savings: $${entertainmentSavings.toFixed(2)}/month`);
    }
    return {
      potential_savings: {
        subscriptions: {
          amount: subscriptionSavings,
          count: subscriptions.length,
          recommendations: subscriptions.map((s) => `Review ${s.description}`)
        },
        dining: {
          amount: diningSavings,
          count: diningExpenses.length,
          recommendations: ["Cook more meals at home", "Use grocery store meal prep"]
        },
        entertainment: {
          amount: entertainmentSavings,
          count: entertainmentExpenses.length,
          recommendations: ["Look for free entertainment options", "Bundle services for discounts"]
        }
      },
      positive_behaviors: [
        savingsRate > 20 ? "Excellent savings rate!" : savingsRate > 10 ? "Good savings rate" : "Room for improvement",
        totalIncome > totalExpenses ? "Living within your means" : "Spending exceeds income"
      ],
      recommendations,
      summary: {
        total_income: totalIncome,
        total_expenses: totalExpenses,
        current_savings: totalIncome - totalExpenses,
        savings_rate: savingsRate,
        potential_monthly_savings: potentialMonthlySavings,
        potential_savings_count: recommendations.length,
        financial_health_score: Math.min(100, Math.max(0, savingsRate * 2))
      }
    };
  }
};

// src/lib/agents/risk-assessment.ts
init_checked_fetch();
init_modules_watch_stub();
var RiskAssessmentAgent = class extends BaseAgent {
  static {
    __name(this, "RiskAssessmentAgent");
  }
  constructor(apiKey) {
    super(apiKey);
  }
  async execute(transactions2) {
    try {
      const analysis = this.assessFinancialRisks(transactions2);
      return {
        agent_type: "risk_assessment",
        insights: [
          this.createInsight(
            "Risk Assessment Complete",
            `Identified ${analysis.summary.risk_count} potential risks with ${analysis.summary.high_risk_count} high-priority items.`,
            analysis.summary.high_risk_count > 0 ? "negative" : "positive",
            {
              "Risk Level": analysis.summary.overall_risk_level,
              "High Priority Risks": analysis.summary.high_risk_count,
              "Total Risks": analysis.summary.risk_count
            }
          )
        ],
        metadata: analysis
      };
    } catch (error) {
      console.error("Risk Assessment Agent error:", error);
      return {
        agent_type: "risk_assessment",
        insights: [
          this.createInsight(
            "Risk Assessment Failed",
            "Unable to assess financial risks due to processing error.",
            "negative"
          )
        ],
        metadata: { error: error instanceof Error ? error.message : "Unknown error" }
      };
    }
  }
  assessFinancialRisks(transactions2) {
    const risks = [];
    let totalIncome = 0;
    let totalExpenses = 0;
    const largeTransactions = [];
    const duplicateAmounts = {};
    transactions2.forEach((t) => {
      if (t.amount > 0) {
        totalIncome += t.amount;
      } else {
        totalExpenses += Math.abs(t.amount);
        if (Math.abs(t.amount) > 200) {
          largeTransactions.push(t);
        }
        const amount = Math.abs(t.amount);
        if (!duplicateAmounts[amount]) {
          duplicateAmounts[amount] = [];
        }
        duplicateAmounts[amount].push(t);
      }
    });
    if (totalExpenses > totalIncome) {
      risks.push({
        type: "overspending",
        severity: "high",
        title: "Spending Exceeds Income",
        description: `Monthly expenses ($${totalExpenses.toFixed(2)}) exceed income ($${totalIncome.toFixed(2)})`,
        recommendation: "Create a budget and reduce expenses immediately"
      });
    }
    if (largeTransactions.length > 0) {
      risks.push({
        type: "large_transactions",
        severity: "medium",
        title: "Large Transactions Detected",
        description: `Found ${largeTransactions.length} transactions over $200`,
        recommendation: "Review large purchases for necessity and budget impact"
      });
    }
    Object.entries(duplicateAmounts).forEach(([amount, txs]) => {
      if (txs.length > 2) {
        risks.push({
          type: "duplicate_charges",
          severity: "high",
          title: "Potential Duplicate Charges",
          description: `Found ${txs.length} transactions with identical amount $${amount}`,
          recommendation: "Review transactions for duplicate charges"
        });
      }
    });
    const avgTransaction = totalExpenses / transactions2.filter((t) => t.amount < 0).length;
    const unusualTransactions = transactions2.filter(
      (t) => t.amount < 0 && Math.abs(t.amount) > avgTransaction * 3
    );
    if (unusualTransactions.length > 0) {
      risks.push({
        type: "unusual_spending",
        severity: "medium",
        title: "Unusual Spending Patterns",
        description: `Found ${unusualTransactions.length} transactions significantly above average`,
        recommendation: "Review unusual transactions for accuracy"
      });
    }
    const highRiskCount = risks.filter((r) => r.severity === "high").length;
    const overallRiskLevel = highRiskCount > 0 ? "High" : risks.length > 2 ? "Medium" : "Low";
    return {
      risks,
      risk_summary: {
        overall_risk_level: overallRiskLevel,
        high_risk_count: highRiskCount,
        medium_risk_count: risks.filter((r) => r.severity === "medium").length,
        low_risk_count: risks.filter((r) => r.severity === "low").length
      },
      recommendations: risks.map((r) => r.recommendation),
      summary: {
        total_income: totalIncome,
        total_expenses: totalExpenses,
        risk_count: risks.length,
        high_risk_count: highRiskCount,
        overall_risk_level: overallRiskLevel,
        financial_stability_score: Math.max(0, 100 - risks.length * 10 - highRiskCount * 20)
      }
    };
  }
};

// src/lib/agents/uncle-personality.ts
init_checked_fetch();
init_modules_watch_stub();
var UnclePersonalityAgent = class extends BaseAgent {
  static {
    __name(this, "UnclePersonalityAgent");
  }
  constructor(apiKey) {
    super(apiKey);
  }
  async execute(agentResponses) {
    const systemPrompt = `You are Uncle Sense - a wise, funny, slightly quirky uncle who gives financial advice. You have decades of experience with money, and you're here to help your favorite niece/nephew with their finances.

Your personality traits:
- Warm and encouraging, never judgmental
- Uses humor and dad jokes appropriately
- Gives practical, actionable advice
- References personal experiences and stories
- Uses casual, conversational language
- Occasionally uses financial metaphors and analogies
- Celebrates wins and gently addresses concerns
- Maintains a positive, supportive tone

Your response style:
- Start with a warm greeting or acknowledgment
- Use "kid", "buddy", "sport", or similar terms of endearment
- Include relevant personal anecdotes or analogies
- End with encouragement and next steps
- Keep responses conversational and easy to understand

Transform the technical financial insights into your unique uncle voice. Make it feel like a conversation over coffee, not a financial report.

Respond with a JSON object containing:
{
  "uncle_summary": "Your main response as Uncle Sense",
  "key_takeaways": [
    "Main point 1",
    "Main point 2",
    "Main point 3"
  ],
  "encouragement": "Specific words of encouragement",
  "next_steps": [
    "Actionable next step 1",
    "Actionable next step 2"
  ],
  "uncle_wisdom": "A piece of financial wisdom or life advice",
  "tone": "celebratory" | "concerned" | "encouraging" | "practical"
}`;
    const allInsights = agentResponses.flatMap((response) => response.insights);
    const insightsSummary = allInsights.map((insight) => ({
      title: insight.title,
      description: insight.description,
      sentiment: insight.sentiment,
      key_numbers: insight.key_numbers,
      recommendations: insight.recommendations
    }));
    const prompt = this.formatPrompt(systemPrompt, JSON.stringify({
      insights: insightsSummary,
      agent_count: agentResponses.length,
      total_insights: allInsights.length
    }));
    try {
      const response = await this.huggingFaceClient.generateUnclePersonalityResponse(prompt, {
        maxTokens: 1e3,
        temperature: 0.8
        // Higher temperature for more creative responses
      });
      const parsedResponse = JSON.parse(response);
      return {
        agent_type: "uncle_personality",
        insights: [
          this.createInsight(
            "Uncle's Financial Wisdom",
            parsedResponse.uncle_summary,
            parsedResponse.tone === "celebratory" ? "positive" : parsedResponse.tone === "concerned" ? "negative" : "neutral",
            void 0,
            parsedResponse.next_steps,
            {
              type: "text",
              data: {
                key_takeaways: parsedResponse.key_takeaways,
                encouragement: parsedResponse.encouragement,
                uncle_wisdom: parsedResponse.uncle_wisdom,
                tone: parsedResponse.tone
              }
            }
          )
        ],
        metadata: parsedResponse
      };
    } catch (error) {
      console.error("Uncle Personality Agent error:", error);
      const fallbackResponse = `Hey there, sport! Looks like I'm having a bit of trouble processing all this financial data right now. Don't worry though - even the best uncles have their off days! 

The important thing is that you're taking control of your finances, and that's something to be proud of. Keep up the good work, and I'll be back to give you some solid advice once I get my act together! \u{1F604}

In the meantime, remember: slow and steady wins the race when it comes to money management.`;
      return {
        agent_type: "uncle_personality",
        insights: [
          this.createInsight(
            "Uncle's Temporary Confusion",
            fallbackResponse,
            "neutral",
            void 0,
            ["Try uploading your statements again", "Check back in a few minutes"]
          )
        ],
        metadata: { error: error instanceof Error ? error.message : "Unknown error" }
      };
    }
  }
};

// src/lib/orchestrator/agent-orchestrator.ts
var AgentOrchestrator = class {
  static {
    __name(this, "AgentOrchestrator");
  }
  dataExtractionAgent;
  spendingAnalysisAgent;
  savingsInsightAgent;
  riskAssessmentAgent;
  unclePersonalityAgent;
  constructor(apiKey) {
    this.dataExtractionAgent = new DataExtractionAgent(apiKey);
    this.spendingAnalysisAgent = new SpendingAnalysisAgent(apiKey);
    this.savingsInsightAgent = new SavingsInsightAgent(apiKey);
    this.riskAssessmentAgent = new RiskAssessmentAgent(apiKey);
    this.unclePersonalityAgent = new UnclePersonalityAgent(apiKey);
  }
  async executeAnalysis(sessionId, transactions2) {
    const state = {
      session_id: sessionId,
      current_step: "data_extraction"
    };
    try {
      console.log("Starting analysis without timeout...");
      return await this.performAnalysis(sessionId, transactions2, state);
    } catch (error) {
      console.error("Agent orchestration error:", error);
      state.current_step = "error";
      state.error = error instanceof Error ? error.message : "Unknown error";
      state.uncle_response = "Hey there, sport! Looks like I'm having a bit of trouble processing all this financial data right now. Don't worry though - even the best uncles have their off days! \n\nThe important thing is that you're taking control of your finances, and that's something to be proud of. Keep up the good work, and I'll be back to give you some solid advice once I get my act together! \u{1F604}\n\nIn the meantime, remember: slow and steady wins the race when it comes to money management.";
      return state;
    }
  }
  async performAnalysis(sessionId, transactions2, state) {
    try {
      console.log("Starting performAnalysis...");
      console.log(`Processing ${transactions2.length} transactions`);
      console.log("Starting data extraction...");
      let dataExtractionResponse;
      try {
        dataExtractionResponse = await this.dataExtractionAgent.execute(transactions2);
        console.log("Data extraction completed successfully");
        state.extracted_data = transactions2;
        state.current_step = "analysis";
      } catch (dataExtractionError) {
        console.error("Data extraction failed:", dataExtractionError);
        dataExtractionResponse = {
          agent_type: "data_extraction",
          insights: [{
            title: "Transaction Analysis Failed",
            description: "Unable to categorize transactions due to processing error.",
            confidence: 0.5,
            metadata: { error: dataExtractionError instanceof Error ? dataExtractionError.message : "Unknown error" }
          }]
        };
        state.extracted_data = transactions2;
        state.current_step = "analysis";
      }
      console.log("Data extraction step completed");
      console.log("Running analysis agents in parallel...");
      const [spendingResponse, savingsResponse, riskResponse] = await Promise.all([
        this.spendingAnalysisAgent.execute(transactions2),
        this.savingsInsightAgent.execute(transactions2),
        this.riskAssessmentAgent.execute(transactions2)
      ]);
      console.log("Analysis agents completed");
      state.agent_responses = [
        dataExtractionResponse,
        spendingResponse,
        savingsResponse,
        riskResponse
      ];
      console.log("Generating Uncle's response...");
      state.current_step = "personality_transform";
      const uncleResponse = await this.unclePersonalityAgent.execute(state.agent_responses);
      state.agent_responses.push(uncleResponse);
      state.uncle_response = uncleResponse.insights[0]?.description || "Uncle is processing...";
      state.current_step = "complete";
      console.log("Analysis complete!");
      return state;
    } catch (error) {
      console.error("Agent orchestration error:", error);
      state.current_step = "complete";
      state.uncle_response = `Hey there, sport! I ran into a bit of trouble analyzing your finances. Don't worry though - even the best uncles have their off days! 

The good news is that you're taking control of your money, and that's what matters most. Try uploading your statements again, and I'll do my best to give you some solid advice! \u{1F604}`;
      return state;
    }
  }
  async executeChatResponse(sessionId, userMessage, previousInsights) {
    const systemPrompt = `You are Uncle Sense - a wise, funny, slightly quirky uncle who gives financial advice. 

A user is asking you a follow-up question about their finances. Use the previous insights and analysis to provide a helpful, encouraging response in your characteristic uncle voice.

Previous insights context:
${JSON.stringify(previousInsights, null, 2)}

User's question: "${userMessage}"

Respond as Uncle Sense with:
- Warm, encouraging tone
- Practical advice based on the insights
- Appropriate humor or analogies
- Clear next steps if applicable
- Keep it conversational and easy to understand

Don't repeat the same advice from the insights - provide new, relevant guidance based on their question.`;
    try {
      const response = await this.unclePersonalityAgent.generateResponse(systemPrompt, {
        maxTokens: 500,
        temperature: 0.8
      });
      return response;
    } catch (error) {
      console.error("Chat response error:", error);
      return `Hey there, buddy! I'm having a bit of trouble processing your question right now. But don't worry - the fact that you're asking questions about your finances shows you're on the right track! 

Try asking me again in a moment, and I'll do my best to help you out! \u{1F604}`;
    }
  }
  getAgentStatus() {
    return {
      data_extraction: "Ready",
      spending_analysis: "Ready",
      savings_insight: "Ready",
      risk_assessment: "Ready",
      uncle_personality: "Ready"
    };
  }
};

// src/lib/parsers/file-parser.ts
init_checked_fetch();
init_modules_watch_stub();
var import_papaparse = __toESM(require_papaparse_min(), 1);

// node_modules/xlsx/xlsx.mjs
init_checked_fetch();
init_modules_watch_stub();
var XLSX = {};
XLSX.version = "0.18.5";
var current_codepage = 1200;
var current_ansi = 1252;
var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4];
var CS2CP = {
  /*::[*/
  0: 1252,
  /* ANSI */
  /*::[*/
  1: 65001,
  /* DEFAULT */
  /*::[*/
  2: 65001,
  /* SYMBOL */
  /*::[*/
  77: 1e4,
  /* MAC */
  /*::[*/
  128: 932,
  /* SHIFTJIS */
  /*::[*/
  129: 949,
  /* HANGUL */
  /*::[*/
  130: 1361,
  /* JOHAB */
  /*::[*/
  134: 936,
  /* GB2312 */
  /*::[*/
  136: 950,
  /* CHINESEBIG5 */
  /*::[*/
  161: 1253,
  /* GREEK */
  /*::[*/
  162: 1254,
  /* TURKISH */
  /*::[*/
  163: 1258,
  /* VIETNAMESE */
  /*::[*/
  177: 1255,
  /* HEBREW */
  /*::[*/
  178: 1256,
  /* ARABIC */
  /*::[*/
  186: 1257,
  /* BALTIC */
  /*::[*/
  204: 1251,
  /* RUSSIAN */
  /*::[*/
  222: 874,
  /* THAI */
  /*::[*/
  238: 1250,
  /* EASTEUROPE */
  /*::[*/
  255: 1252,
  /* OEM */
  /*::[*/
  69: 6969
  /* MISC */
};
var set_ansi = /* @__PURE__ */ __name(function(cp) {
  if (VALID_ANSI.indexOf(cp) == -1) return;
  current_ansi = CS2CP[0] = cp;
}, "set_ansi");
function reset_ansi() {
  set_ansi(1252);
}
__name(reset_ansi, "reset_ansi");
var set_cp = /* @__PURE__ */ __name(function(cp) {
  current_codepage = cp;
  set_ansi(cp);
}, "set_cp");
function reset_cp() {
  set_cp(1200);
  reset_ansi();
}
__name(reset_cp, "reset_cp");
function char_codes(data) {
  var o = [];
  for (var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i);
  return o;
}
__name(char_codes, "char_codes");
function utf16leread(data) {
  var o = [];
  for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));
  return o.join("");
}
__name(utf16leread, "utf16leread");
function utf16beread(data) {
  var o = [];
  for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));
  return o.join("");
}
__name(utf16beread, "utf16beread");
var debom = /* @__PURE__ */ __name(function(data) {
  var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
  if (c1 == 255 && c2 == 254) return utf16leread(data.slice(2));
  if (c1 == 254 && c2 == 255) return utf16beread(data.slice(2));
  if (c1 == 65279) return data.slice(1);
  return data;
}, "debom");
var _getchar = /* @__PURE__ */ __name(function _gc1(x) {
  return String.fromCharCode(x);
}, "_gc1");
var _getansi = /* @__PURE__ */ __name(function _ga1(x) {
  return String.fromCharCode(x);
}, "_ga1");
var $cptable;
var DENSE = null;
var DIF_XL = true;
var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
function Base64_encode(input) {
  var o = "";
  var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
  for (var i = 0; i < input.length; ) {
    c1 = input.charCodeAt(i++);
    e1 = c1 >> 2;
    c2 = input.charCodeAt(i++);
    e2 = (c1 & 3) << 4 | c2 >> 4;
    c3 = input.charCodeAt(i++);
    e3 = (c2 & 15) << 2 | c3 >> 6;
    e4 = c3 & 63;
    if (isNaN(c2)) {
      e3 = e4 = 64;
    } else if (isNaN(c3)) {
      e4 = 64;
    }
    o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
  }
  return o;
}
__name(Base64_encode, "Base64_encode");
function Base64_decode(input) {
  var o = "";
  var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
  input = input.replace(/[^\w\+\/\=]/g, "");
  for (var i = 0; i < input.length; ) {
    e1 = Base64_map.indexOf(input.charAt(i++));
    e2 = Base64_map.indexOf(input.charAt(i++));
    c1 = e1 << 2 | e2 >> 4;
    o += String.fromCharCode(c1);
    e3 = Base64_map.indexOf(input.charAt(i++));
    c2 = (e2 & 15) << 4 | e3 >> 2;
    if (e3 !== 64) {
      o += String.fromCharCode(c2);
    }
    e4 = Base64_map.indexOf(input.charAt(i++));
    c3 = (e3 & 3) << 6 | e4;
    if (e4 !== 64) {
      o += String.fromCharCode(c3);
    }
  }
  return o;
}
__name(Base64_decode, "Base64_decode");
var has_buf = /* @__PURE__ */ function() {
  return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
}();
var Buffer_from = /* @__PURE__ */ function() {
  if (typeof Buffer !== "undefined") {
    var nbfs = !Buffer.from;
    if (!nbfs) try {
      Buffer.from("foo", "utf8");
    } catch (e) {
      nbfs = true;
    }
    return nbfs ? function(buf, enc) {
      return enc ? new Buffer(buf, enc) : new Buffer(buf);
    } : Buffer.from.bind(Buffer);
  }
  return function() {
  };
}();
function new_raw_buf(len) {
  if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
  return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
}
__name(new_raw_buf, "new_raw_buf");
function new_unsafe_buf(len) {
  if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
  return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
}
__name(new_unsafe_buf, "new_unsafe_buf");
var s2a = /* @__PURE__ */ __name(function s2a2(s) {
  if (has_buf) return Buffer_from(s, "binary");
  return s.split("").map(function(x) {
    return x.charCodeAt(0) & 255;
  });
}, "s2a");
function a2s(data) {
  if (Array.isArray(data)) return data.map(function(c) {
    return String.fromCharCode(c);
  }).join("");
  var o = [];
  for (var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]);
  return o.join("");
}
__name(a2s, "a2s");
function ab2a(data) {
  if (typeof ArrayBuffer == "undefined") throw new Error("Unsupported");
  if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
  var o = new Array(data.length);
  for (var i = 0; i < data.length; ++i) o[i] = data[i];
  return o;
}
__name(ab2a, "ab2a");
var bconcat = has_buf ? function(bufs) {
  return Buffer.concat(bufs.map(function(buf) {
    return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
  }));
} : function(bufs) {
  if (typeof Uint8Array !== "undefined") {
    var i = 0, maxlen = 0;
    for (i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;
    var o = new Uint8Array(maxlen);
    var len = 0;
    for (i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {
      len = bufs[i].length;
      if (bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
      else if (typeof bufs[i] == "string") {
        throw "wtf";
      } else o.set(new Uint8Array(bufs[i]), maxlen);
    }
    return o;
  }
  return [].concat.apply([], bufs.map(function(buf) {
    return Array.isArray(buf) ? buf : [].slice.call(buf);
  }));
};
function utf8decode(content) {
  var out = [], widx = 0, L = content.length + 250;
  var o = new_raw_buf(content.length + 255);
  for (var ridx = 0; ridx < content.length; ++ridx) {
    var c = content.charCodeAt(ridx);
    if (c < 128) o[widx++] = c;
    else if (c < 2048) {
      o[widx++] = 192 | c >> 6 & 31;
      o[widx++] = 128 | c & 63;
    } else if (c >= 55296 && c < 57344) {
      c = (c & 1023) + 64;
      var d = content.charCodeAt(++ridx) & 1023;
      o[widx++] = 240 | c >> 8 & 7;
      o[widx++] = 128 | c >> 2 & 63;
      o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;
      o[widx++] = 128 | d & 63;
    } else {
      o[widx++] = 224 | c >> 12 & 15;
      o[widx++] = 128 | c >> 6 & 63;
      o[widx++] = 128 | c & 63;
    }
    if (widx > L) {
      out.push(o.slice(0, widx));
      widx = 0;
      o = new_raw_buf(65535);
      L = 65530;
    }
  }
  out.push(o.slice(0, widx));
  return bconcat(out);
}
__name(utf8decode, "utf8decode");
var chr0 = /\u0000/g;
var chr1 = /[\u0001-\u0006]/g;
function _strrev(x) {
  var o = "", i = x.length - 1;
  while (i >= 0) o += x.charAt(i--);
  return o;
}
__name(_strrev, "_strrev");
function pad0(v, d) {
  var t = "" + v;
  return t.length >= d ? t : fill("0", d - t.length) + t;
}
__name(pad0, "pad0");
function pad_(v, d) {
  var t = "" + v;
  return t.length >= d ? t : fill(" ", d - t.length) + t;
}
__name(pad_, "pad_");
function rpad_(v, d) {
  var t = "" + v;
  return t.length >= d ? t : t + fill(" ", d - t.length);
}
__name(rpad_, "rpad_");
function pad0r1(v, d) {
  var t = "" + Math.round(v);
  return t.length >= d ? t : fill("0", d - t.length) + t;
}
__name(pad0r1, "pad0r1");
function pad0r2(v, d) {
  var t = "" + v;
  return t.length >= d ? t : fill("0", d - t.length) + t;
}
__name(pad0r2, "pad0r2");
var p2_32 = /* @__PURE__ */ Math.pow(2, 32);
function pad0r(v, d) {
  if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
  var i = Math.round(v);
  return pad0r2(i, d);
}
__name(pad0r, "pad0r");
function SSF_isgeneral(s, i) {
  i = i || 0;
  return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
}
__name(SSF_isgeneral, "SSF_isgeneral");
var days = [
  ["Sun", "Sunday"],
  ["Mon", "Monday"],
  ["Tue", "Tuesday"],
  ["Wed", "Wednesday"],
  ["Thu", "Thursday"],
  ["Fri", "Friday"],
  ["Sat", "Saturday"]
];
var months = [
  ["J", "Jan", "January"],
  ["F", "Feb", "February"],
  ["M", "Mar", "March"],
  ["A", "Apr", "April"],
  ["M", "May", "May"],
  ["J", "Jun", "June"],
  ["J", "Jul", "July"],
  ["A", "Aug", "August"],
  ["S", "Sep", "September"],
  ["O", "Oct", "October"],
  ["N", "Nov", "November"],
  ["D", "Dec", "December"]
];
function SSF_init_table(t) {
  if (!t) t = {};
  t[0] = "General";
  t[1] = "0";
  t[2] = "0.00";
  t[3] = "#,##0";
  t[4] = "#,##0.00";
  t[9] = "0%";
  t[10] = "0.00%";
  t[11] = "0.00E+00";
  t[12] = "# ?/?";
  t[13] = "# ??/??";
  t[14] = "m/d/yy";
  t[15] = "d-mmm-yy";
  t[16] = "d-mmm";
  t[17] = "mmm-yy";
  t[18] = "h:mm AM/PM";
  t[19] = "h:mm:ss AM/PM";
  t[20] = "h:mm";
  t[21] = "h:mm:ss";
  t[22] = "m/d/yy h:mm";
  t[37] = "#,##0 ;(#,##0)";
  t[38] = "#,##0 ;[Red](#,##0)";
  t[39] = "#,##0.00;(#,##0.00)";
  t[40] = "#,##0.00;[Red](#,##0.00)";
  t[45] = "mm:ss";
  t[46] = "[h]:mm:ss";
  t[47] = "mmss.0";
  t[48] = "##0.0E+0";
  t[49] = "@";
  t[56] = '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "';
  return t;
}
__name(SSF_init_table, "SSF_init_table");
var table_fmt = {
  0: "General",
  1: "0",
  2: "0.00",
  3: "#,##0",
  4: "#,##0.00",
  9: "0%",
  10: "0.00%",
  11: "0.00E+00",
  12: "# ?/?",
  13: "# ??/??",
  14: "m/d/yy",
  15: "d-mmm-yy",
  16: "d-mmm",
  17: "mmm-yy",
  18: "h:mm AM/PM",
  19: "h:mm:ss AM/PM",
  20: "h:mm",
  21: "h:mm:ss",
  22: "m/d/yy h:mm",
  37: "#,##0 ;(#,##0)",
  38: "#,##0 ;[Red](#,##0)",
  39: "#,##0.00;(#,##0.00)",
  40: "#,##0.00;[Red](#,##0.00)",
  45: "mm:ss",
  46: "[h]:mm:ss",
  47: "mmss.0",
  48: "##0.0E+0",
  49: "@",
  56: '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "'
};
var SSF_default_map = {
  5: 37,
  6: 38,
  7: 39,
  8: 40,
  //  5 -> 37 ...  8 -> 40
  23: 0,
  24: 0,
  25: 0,
  26: 0,
  // 23 ->  0 ... 26 ->  0
  27: 14,
  28: 14,
  29: 14,
  30: 14,
  31: 14,
  // 27 -> 14 ... 31 -> 14
  50: 14,
  51: 14,
  52: 14,
  53: 14,
  54: 14,
  // 50 -> 14 ... 58 -> 14
  55: 14,
  56: 14,
  57: 14,
  58: 14,
  59: 1,
  60: 2,
  61: 3,
  62: 4,
  // 59 ->  1 ... 62 ->  4
  67: 9,
  68: 10,
  // 67 ->  9 ... 68 -> 10
  69: 12,
  70: 13,
  71: 14,
  // 69 -> 12 ... 71 -> 14
  72: 14,
  73: 15,
  74: 16,
  75: 17,
  // 72 -> 14 ... 75 -> 17
  76: 20,
  77: 21,
  78: 22,
  // 76 -> 20 ... 78 -> 22
  79: 45,
  80: 46,
  81: 47,
  // 79 -> 45 ... 81 -> 47
  82: 0
  // 82 ->  0 ... 65536 -> 0 (omitted)
};
var SSF_default_str = {
  //  5 -- Currency,   0 decimal, black negative
  5: '"$"#,##0_);\\("$"#,##0\\)',
  63: '"$"#,##0_);\\("$"#,##0\\)',
  //  6 -- Currency,   0 decimal, red   negative
  6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
  64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
  //  7 -- Currency,   2 decimal, black negative
  7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
  65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
  //  8 -- Currency,   2 decimal, red   negative
  8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
  66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
  // 41 -- Accounting, 0 decimal, No Symbol
  41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
  // 42 -- Accounting, 0 decimal, $  Symbol
  42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
  // 43 -- Accounting, 2 decimal, No Symbol
  43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
  // 44 -- Accounting, 2 decimal, $  Symbol
  44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
};
function SSF_frac(x, D, mixed) {
  var sgn = x < 0 ? -1 : 1;
  var B = x * sgn;
  var P_2 = 0, P_1 = 1, P = 0;
  var Q_2 = 1, Q_1 = 0, Q = 0;
  var A = Math.floor(B);
  while (Q_1 < D) {
    A = Math.floor(B);
    P = A * P_1 + P_2;
    Q = A * Q_1 + Q_2;
    if (B - A < 5e-8) break;
    B = 1 / (B - A);
    P_2 = P_1;
    P_1 = P;
    Q_2 = Q_1;
    Q_1 = Q;
  }
  if (Q > D) {
    if (Q_1 > D) {
      Q = Q_2;
      P = P_2;
    } else {
      Q = Q_1;
      P = P_1;
    }
  }
  if (!mixed) return [0, sgn * P, Q];
  var q = Math.floor(sgn * P / Q);
  return [q, sgn * P - q * Q, Q];
}
__name(SSF_frac, "SSF_frac");
function SSF_parse_date_code(v, opts, b2) {
  if (v > 2958465 || v < 0) return null;
  var date = v | 0, time2 = Math.floor(86400 * (v - date)), dow = 0;
  var dout = [];
  var out = { D: date, T: time2, u: 86400 * (v - date) - time2, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
  if (Math.abs(out.u) < 1e-6) out.u = 0;
  if (opts && opts.date1904) date += 1462;
  if (out.u > 0.9999) {
    out.u = 0;
    if (++time2 == 86400) {
      out.T = time2 = 0;
      ++date;
      ++out.D;
    }
  }
  if (date === 60) {
    dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
    dow = 3;
  } else if (date === 0) {
    dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
    dow = 6;
  } else {
    if (date > 60) --date;
    var d = new Date(1900, 0, 1);
    d.setDate(d.getDate() + date - 1);
    dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
    dow = d.getDay();
    if (date < 60) dow = (dow + 6) % 7;
    if (b2) dow = SSF_fix_hijri(d, dout);
  }
  out.y = dout[0];
  out.m = dout[1];
  out.d = dout[2];
  out.S = time2 % 60;
  time2 = Math.floor(time2 / 60);
  out.M = time2 % 60;
  time2 = Math.floor(time2 / 60);
  out.H = time2;
  out.q = dow;
  return out;
}
__name(SSF_parse_date_code, "SSF_parse_date_code");
var SSFbasedate = /* @__PURE__ */ new Date(1899, 11, 31, 0, 0, 0);
var SSFdnthresh = /* @__PURE__ */ SSFbasedate.getTime();
var SSFbase1904 = /* @__PURE__ */ new Date(1900, 2, 1, 0, 0, 0);
function datenum_local(v, date1904) {
  var epoch = /* @__PURE__ */ v.getTime();
  if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1e3;
  else if (v >= SSFbase1904) epoch += 24 * 60 * 60 * 1e3;
  return (epoch - (SSFdnthresh + (/* @__PURE__ */ v.getTimezoneOffset() - /* @__PURE__ */ SSFbasedate.getTimezoneOffset()) * 6e4)) / (24 * 60 * 60 * 1e3);
}
__name(datenum_local, "datenum_local");
function SSF_strip_decimal(o) {
  return o.indexOf(".") == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
}
__name(SSF_strip_decimal, "SSF_strip_decimal");
function SSF_normalize_exp(o) {
  if (o.indexOf("E") == -1) return o;
  return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
}
__name(SSF_normalize_exp, "SSF_normalize_exp");
function SSF_small_exp(v) {
  var w = v < 0 ? 12 : 11;
  var o = SSF_strip_decimal(v.toFixed(12));
  if (o.length <= w) return o;
  o = v.toPrecision(10);
  if (o.length <= w) return o;
  return v.toExponential(5);
}
__name(SSF_small_exp, "SSF_small_exp");
function SSF_large_exp(v) {
  var o = SSF_strip_decimal(v.toFixed(11));
  return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
}
__name(SSF_large_exp, "SSF_large_exp");
function SSF_general_num(v) {
  var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
  if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);
  else if (Math.abs(V) <= 9) o = SSF_small_exp(v);
  else if (V === 10) o = v.toFixed(10).substr(0, 12);
  else o = SSF_large_exp(v);
  return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
}
__name(SSF_general_num, "SSF_general_num");
function SSF_general(v, opts) {
  switch (typeof v) {
    case "string":
      return v;
    case "boolean":
      return v ? "TRUE" : "FALSE";
    case "number":
      return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
    case "undefined":
      return "";
    case "object":
      if (v == null) return "";
      if (v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
  }
  throw new Error("unsupported value in General format: " + v);
}
__name(SSF_general, "SSF_general");
function SSF_fix_hijri(date, o) {
  o[0] -= 581;
  var dow = date.getDay();
  if (date < 60) dow = (dow + 6) % 7;
  return dow;
}
__name(SSF_fix_hijri, "SSF_fix_hijri");
function SSF_write_date(type, fmt, val, ss0) {
  var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
  switch (type) {
    case 98:
      y = val.y + 543;
    /* falls through */
    case 121:
      switch (fmt.length) {
        case 1:
        case 2:
          out = y % 100;
          outl = 2;
          break;
        default:
          out = y % 1e4;
          outl = 4;
          break;
      }
      break;
    case 109:
      switch (fmt.length) {
        case 1:
        case 2:
          out = val.m;
          outl = fmt.length;
          break;
        case 3:
          return months[val.m - 1][1];
        case 5:
          return months[val.m - 1][0];
        default:
          return months[val.m - 1][2];
      }
      break;
    case 100:
      switch (fmt.length) {
        case 1:
        case 2:
          out = val.d;
          outl = fmt.length;
          break;
        case 3:
          return days[val.q][0];
        default:
          return days[val.q][1];
      }
      break;
    case 104:
      switch (fmt.length) {
        case 1:
        case 2:
          out = 1 + (val.H + 11) % 12;
          outl = fmt.length;
          break;
        default:
          throw "bad hour format: " + fmt;
      }
      break;
    case 72:
      switch (fmt.length) {
        case 1:
        case 2:
          out = val.H;
          outl = fmt.length;
          break;
        default:
          throw "bad hour format: " + fmt;
      }
      break;
    case 77:
      switch (fmt.length) {
        case 1:
        case 2:
          out = val.M;
          outl = fmt.length;
          break;
        default:
          throw "bad minute format: " + fmt;
      }
      break;
    case 115:
      if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000") throw "bad second format: " + fmt;
      if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
      if (ss0 >= 2) tt = ss0 === 3 ? 1e3 : 100;
      else tt = ss0 === 1 ? 10 : 1;
      ss = Math.round(tt * (val.S + val.u));
      if (ss >= 60 * tt) ss = 0;
      if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt;
      o = pad0(ss, 2 + ss0);
      if (fmt === "ss") return o.substr(0, 2);
      return "." + o.substr(2, fmt.length - 1);
    case 90:
      switch (fmt) {
        case "[h]":
        case "[hh]":
          out = val.D * 24 + val.H;
          break;
        case "[m]":
        case "[mm]":
          out = (val.D * 24 + val.H) * 60 + val.M;
          break;
        case "[s]":
        case "[ss]":
          out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
          break;
        default:
          throw "bad abstime format: " + fmt;
      }
      outl = fmt.length === 3 ? 1 : 2;
      break;
    case 101:
      out = y;
      outl = 1;
      break;
  }
  var outstr = outl > 0 ? pad0(out, outl) : "";
  return outstr;
}
__name(SSF_write_date, "SSF_write_date");
function commaify(s) {
  var w = 3;
  if (s.length <= w) return s;
  var j = s.length % w, o = s.substr(0, j);
  for (; j != s.length; j += w) o += (o.length > 0 ? "," : "") + s.substr(j, w);
  return o;
}
__name(commaify, "commaify");
var pct1 = /%/g;
function write_num_pct(type, fmt, val) {
  var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
  return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
__name(write_num_pct, "write_num_pct");
function write_num_cm(type, fmt, val) {
  var idx = fmt.length - 1;
  while (fmt.charCodeAt(idx - 1) === 44) --idx;
  return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
__name(write_num_cm, "write_num_cm");
function write_num_exp(fmt, val) {
  var o;
  var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
  if (fmt.match(/^#+0.0E\+0$/)) {
    if (val == 0) return "0.0E+0";
    else if (val < 0) return "-" + write_num_exp(fmt, -val);
    var period = fmt.indexOf(".");
    if (period === -1) period = fmt.indexOf("E");
    var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
    if (ee < 0) ee += period;
    o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
    if (o.indexOf("e") === -1) {
      var fakee = Math.floor(Math.log(val) * Math.LOG10E);
      if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
      else o += "E+" + (fakee - ee);
      while (o.substr(0, 2) === "0.") {
        o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
        o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
      }
      o = o.replace(/\+-/, "-");
    }
    o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
      return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
    });
  } else o = val.toExponential(idx);
  if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
  if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
  return o.replace("e", "E");
}
__name(write_num_exp, "write_num_exp");
var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
function write_num_f1(r, aval, sign) {
  var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
  var myn = rr - base * den, myd = den;
  return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
}
__name(write_num_f1, "write_num_f1");
function write_num_f2(r, aval, sign) {
  return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
}
__name(write_num_f2, "write_num_f2");
var dec1 = /^#*0*\.([0#]+)/;
var closeparen = /\).*[0#]/;
var phone = /\(###\) ###\\?-####/;
function hashq(str) {
  var o = "", cc;
  for (var i = 0; i != str.length; ++i) switch (cc = str.charCodeAt(i)) {
    case 35:
      break;
    case 63:
      o += " ";
      break;
    case 48:
      o += "0";
      break;
    default:
      o += String.fromCharCode(cc);
  }
  return o;
}
__name(hashq, "hashq");
function rnd(val, d) {
  var dd = Math.pow(10, d);
  return "" + Math.round(val * dd) / dd;
}
__name(rnd, "rnd");
function dec(val, d) {
  var _frac = val - Math.floor(val), dd = Math.pow(10, d);
  if (d < ("" + Math.round(_frac * dd)).length) return 0;
  return Math.round(_frac * dd);
}
__name(dec, "dec");
function carry(val, d) {
  if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {
    return 1;
  }
  return 0;
}
__name(carry, "carry");
function flr(val) {
  if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
  return "" + Math.floor(val);
}
__name(flr, "flr");
function write_num_flt(type, fmt, val) {
  if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
    if (val >= 0) return write_num_flt("n", ffmt, val);
    return "(" + write_num_flt("n", ffmt, -val) + ")";
  }
  if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
  if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val);
  if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val);
  if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
  var o;
  var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
  if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
  if (fmt.match(/^[#?]+$/)) {
    o = pad0r(val, 0);
    if (o === "0") o = "";
    return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
  }
  if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign);
  if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
  if (r = fmt.match(dec1)) {
    o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function($$, $1) {
      return "." + $1 + fill("0", hashq(
        /*::(*/
        r[1]
      ).length - $1.length);
    });
    return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
  }
  fmt = fmt.replace(/^#+([0.])/, "$1");
  if (r = fmt.match(/^(0*)\.(#*)$/)) {
    return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
  }
  if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));
  if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
    return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
  }
  if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
  if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
    o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
    ri = 0;
    return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
      return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
    }));
  }
  if (fmt.match(phone)) {
    o = write_num_flt(type, "##########", val);
    return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
  }
  var oa = "";
  if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
    ri = Math.min(
      /*::String(*/
      r[4].length,
      7
    );
    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
    o = "" + sign;
    oa = write_num(
      "n",
      /*::String(*/
      r[1],
      ff[1]
    );
    if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
    o += oa + /*::String(*/
    r[2] + "/" + /*::String(*/
    r[3];
    oa = rpad_(ff[2], ri);
    if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
    o += oa;
    return o;
  }
  if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
    ri = Math.min(Math.max(r[1].length, r[4].length), 7);
    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
    return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
  }
  if (r = fmt.match(/^[#0?]+$/)) {
    o = pad0r(val, 0);
    if (fmt.length <= o.length) return o;
    return hashq(fmt.substr(0, fmt.length - o.length)) + o;
  }
  if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
    o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
    ri = o.indexOf(".");
    var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
  }
  if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
    ri = dec(val, r[1].length);
    return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
      return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
    }) + "." + pad0(ri, r[1].length);
  }
  switch (fmt) {
    case "###,##0.00":
      return write_num_flt(type, "#,##0.00", val);
    case "###,###":
    case "##,###":
    case "#,###":
      var x = commaify(pad0r(aval, 0));
      return x !== "0" ? sign + x : "";
    case "###,###.00":
      return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
    case "#,###.00":
      return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
    default:
  }
  throw new Error("unsupported format |" + fmt + "|");
}
__name(write_num_flt, "write_num_flt");
function write_num_cm2(type, fmt, val) {
  var idx = fmt.length - 1;
  while (fmt.charCodeAt(idx - 1) === 44) --idx;
  return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
}
__name(write_num_cm2, "write_num_cm2");
function write_num_pct2(type, fmt, val) {
  var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
  return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
}
__name(write_num_pct2, "write_num_pct2");
function write_num_exp2(fmt, val) {
  var o;
  var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
  if (fmt.match(/^#+0.0E\+0$/)) {
    if (val == 0) return "0.0E+0";
    else if (val < 0) return "-" + write_num_exp2(fmt, -val);
    var period = fmt.indexOf(".");
    if (period === -1) period = fmt.indexOf("E");
    var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
    if (ee < 0) ee += period;
    o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
    if (!o.match(/[Ee]/)) {
      var fakee = Math.floor(Math.log(val) * Math.LOG10E);
      if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
      else o += "E+" + (fakee - ee);
      o = o.replace(/\+-/, "-");
    }
    o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
      return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
    });
  } else o = val.toExponential(idx);
  if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
  if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e");
  return o.replace("e", "E");
}
__name(write_num_exp2, "write_num_exp2");
function write_num_int(type, fmt, val) {
  if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
    if (val >= 0) return write_num_int("n", ffmt, val);
    return "(" + write_num_int("n", ffmt, -val) + ")";
  }
  if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
  if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val);
  if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val);
  if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
  var o;
  var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
  if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
  if (fmt.match(/^[#?]+$/)) {
    o = "" + val;
    if (val === 0) o = "";
    return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
  }
  if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign);
  if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
  if (r = fmt.match(dec1)) {
    o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
    o = o.replace(/\.(\d*)$/, function($$, $1) {
      return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
    });
    return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
  }
  fmt = fmt.replace(/^#+([0.])/, "$1");
  if (r = fmt.match(/^(0*)\.(#*)$/)) {
    return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
  }
  if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);
  if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
    return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length);
  }
  if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
  if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
    o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
    ri = 0;
    return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
      return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
    }));
  }
  if (fmt.match(phone)) {
    o = write_num_int(type, "##########", val);
    return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
  }
  var oa = "";
  if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
    ri = Math.min(
      /*::String(*/
      r[4].length,
      7
    );
    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
    o = "" + sign;
    oa = write_num(
      "n",
      /*::String(*/
      r[1],
      ff[1]
    );
    if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0";
    o += oa + /*::String(*/
    r[2] + "/" + /*::String(*/
    r[3];
    oa = rpad_(ff[2], ri);
    if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
    o += oa;
    return o;
  }
  if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
    ri = Math.min(Math.max(r[1].length, r[4].length), 7);
    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
    return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
  }
  if (r = fmt.match(/^[#0?]+$/)) {
    o = "" + val;
    if (fmt.length <= o.length) return o;
    return hashq(fmt.substr(0, fmt.length - o.length)) + o;
  }
  if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
    o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
    ri = o.indexOf(".");
    var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
  }
  if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
    return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
      return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
    }) + "." + pad0(0, r[1].length);
  }
  switch (fmt) {
    case "###,###":
    case "##,###":
    case "#,###":
      var x = commaify("" + aval);
      return x !== "0" ? sign + x : "";
    default:
      if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
  }
  throw new Error("unsupported format |" + fmt + "|");
}
__name(write_num_int, "write_num_int");
function write_num(type, fmt, val) {
  return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
}
__name(write_num, "write_num");
function SSF_split_fmt(fmt) {
  var out = [];
  var in_str = false;
  for (var i = 0, j = 0; i < fmt.length; ++i) switch (
    /*cc=*/
    fmt.charCodeAt(i)
  ) {
    case 34:
      in_str = !in_str;
      break;
    case 95:
    case 42:
    case 92:
      ++i;
      break;
    case 59:
      out[out.length] = fmt.substr(j, i - j);
      j = i + 1;
  }
  out[out.length] = fmt.substr(j);
  if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
  return out;
}
__name(SSF_split_fmt, "SSF_split_fmt");
var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
function fmt_is_date(fmt) {
  var i = 0, c = "", o = "";
  while (i < fmt.length) {
    switch (c = fmt.charAt(i)) {
      case "G":
        if (SSF_isgeneral(fmt, i)) i += 6;
        i++;
        break;
      case '"':
        for (
          ;
          /*cc=*/
          fmt.charCodeAt(++i) !== 34 && i < fmt.length;
        ) {
        }
        ++i;
        break;
      case "\\":
        i += 2;
        break;
      case "_":
        i += 2;
        break;
      case "@":
        ++i;
        break;
      case "B":
      case "b":
        if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true;
      /* falls through */
      case "M":
      case "D":
      case "Y":
      case "H":
      case "S":
      case "E":
      /* falls through */
      case "m":
      case "d":
      case "y":
      case "h":
      case "s":
      case "e":
      case "g":
        return true;
      case "A":
      case "a":
      case "\u4E0A":
        if (fmt.substr(i, 3).toUpperCase() === "A/P") return true;
        if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
        if (fmt.substr(i, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348") return true;
        ++i;
        break;
      case "[":
        o = c;
        while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i);
        if (o.match(SSF_abstime)) return true;
        break;
      case ".":
      /* falls through */
      case "0":
      case "#":
        while (i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1)) {
        }
        break;
      case "?":
        while (fmt.charAt(++i) === c) {
        }
        break;
      case "*":
        ++i;
        if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
        break;
      case "(":
      case ")":
        ++i;
        break;
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) {
        }
        break;
      case " ":
        ++i;
        break;
      default:
        ++i;
        break;
    }
  }
  return false;
}
__name(fmt_is_date, "fmt_is_date");
function eval_fmt(fmt, v, opts, flen) {
  var out = [], o = "", i = 0, c = "", lst = "t", dt, j, cc;
  var hr = "H";
  while (i < fmt.length) {
    switch (c = fmt.charAt(i)) {
      case "G":
        if (!SSF_isgeneral(fmt, i)) throw new Error("unrecognized character " + c + " in " + fmt);
        out[out.length] = { t: "G", v: "General" };
        i += 7;
        break;
      case '"':
        for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length; ) o += String.fromCharCode(cc);
        out[out.length] = { t: "t", v: o };
        ++i;
        break;
      case "\\":
        var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t";
        out[out.length] = { t, v: w };
        ++i;
        break;
      case "_":
        out[out.length] = { t: "t", v: " " };
        i += 2;
        break;
      case "@":
        out[out.length] = { t: "T", v };
        ++i;
        break;
      case "B":
      case "b":
        if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
          if (dt == null) {
            dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
            if (dt == null) return "";
          }
          out[out.length] = { t: "X", v: fmt.substr(i, 2) };
          lst = c;
          i += 2;
          break;
        }
      /* falls through */
      case "M":
      case "D":
      case "Y":
      case "H":
      case "S":
      case "E":
        c = c.toLowerCase();
      /* falls through */
      case "m":
      case "d":
      case "y":
      case "h":
      case "s":
      case "e":
      case "g":
        if (v < 0) return "";
        if (dt == null) {
          dt = SSF_parse_date_code(v, opts);
          if (dt == null) return "";
        }
        o = c;
        while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o += c;
        if (c === "m" && lst.toLowerCase() === "h") c = "M";
        if (c === "h") c = hr;
        out[out.length] = { t: c, v: o };
        lst = c;
        break;
      case "A":
      case "a":
      case "\u4E0A":
        var q = { t: c, v: c };
        if (dt == null) dt = SSF_parse_date_code(v, opts);
        if (fmt.substr(i, 3).toUpperCase() === "A/P") {
          if (dt != null) q.v = dt.H >= 12 ? "P" : "A";
          q.t = "T";
          hr = "h";
          i += 3;
        } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
          if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM";
          q.t = "T";
          i += 5;
          hr = "h";
        } else if (fmt.substr(i, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348") {
          if (dt != null) q.v = dt.H >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
          q.t = "T";
          i += 5;
          hr = "h";
        } else {
          q.t = "t";
          ++i;
        }
        if (dt == null && q.t === "T") return "";
        out[out.length] = q;
        lst = c;
        break;
      case "[":
        o = c;
        while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i);
        if (o.slice(-1) !== "]") throw 'unterminated "[" block: |' + o + "|";
        if (o.match(SSF_abstime)) {
          if (dt == null) {
            dt = SSF_parse_date_code(v, opts);
            if (dt == null) return "";
          }
          out[out.length] = { t: "Z", v: o.toLowerCase() };
          lst = o.charAt(1);
        } else if (o.indexOf("$") > -1) {
          o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
          if (!fmt_is_date(fmt)) out[out.length] = { t: "t", v: o };
        }
        break;
      /* Numbers */
      case ".":
        if (dt != null) {
          o = c;
          while (++i < fmt.length && (c = fmt.charAt(i)) === "0") o += c;
          out[out.length] = { t: "s", v: o };
          break;
        }
      /* falls through */
      case "0":
      case "#":
        o = c;
        while (++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1) o += c;
        out[out.length] = { t: "n", v: o };
        break;
      case "?":
        o = c;
        while (fmt.charAt(++i) === c) o += c;
        out[out.length] = { t: c, v: o };
        lst = c;
        break;
      case "*":
        ++i;
        if (fmt.charAt(i) == " " || fmt.charAt(i) == "*") ++i;
        break;
      // **
      case "(":
      case ")":
        out[out.length] = { t: flen === 1 ? "t" : c, v: c };
        ++i;
        break;
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        o = c;
        while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o += fmt.charAt(i);
        out[out.length] = { t: "D", v: o };
        break;
      case " ":
        out[out.length] = { t: c, v: c };
        ++i;
        break;
      case "$":
        out[out.length] = { t: "t", v: "$" };
        ++i;
        break;
      default:
        if (",$-+/():!^&'~{}<>=\u20ACacfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error("unrecognized character " + c + " in " + fmt);
        out[out.length] = { t: "t", v: c };
        ++i;
        break;
    }
  }
  var bt = 0, ss0 = 0, ssm;
  for (i = out.length - 1, lst = "t"; i >= 0; --i) {
    switch (out[i].t) {
      case "h":
      case "H":
        out[i].t = hr;
        lst = "h";
        if (bt < 1) bt = 1;
        break;
      case "s":
        if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
        if (bt < 3) bt = 3;
      /* falls through */
      case "d":
      case "y":
      case "M":
      case "e":
        lst = out[i].t;
        break;
      case "m":
        if (lst === "s") {
          out[i].t = "M";
          if (bt < 2) bt = 2;
        }
        break;
      case "X":
        break;
      case "Z":
        if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
        if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
        if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
    }
  }
  switch (bt) {
    case 0:
      break;
    case 1:
      if (dt.u >= 0.5) {
        dt.u = 0;
        ++dt.S;
      }
      if (dt.S >= 60) {
        dt.S = 0;
        ++dt.M;
      }
      if (dt.M >= 60) {
        dt.M = 0;
        ++dt.H;
      }
      break;
    case 2:
      if (dt.u >= 0.5) {
        dt.u = 0;
        ++dt.S;
      }
      if (dt.S >= 60) {
        dt.S = 0;
        ++dt.M;
      }
      break;
  }
  var nstr = "", jj;
  for (i = 0; i < out.length; ++i) {
    switch (out[i].t) {
      case "t":
      case "T":
      case " ":
      case "D":
        break;
      case "X":
        out[i].v = "";
        out[i].t = ";";
        break;
      case "d":
      case "m":
      case "y":
      case "h":
      case "H":
      case "M":
      case "s":
      case "e":
      case "b":
      case "Z":
        out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
        out[i].t = "t";
        break;
      case "n":
      case "?":
        jj = i + 1;
        while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
          out[i].v += out[jj].v;
          out[jj] = { v: "", t: ";" };
          ++jj;
        }
        nstr += out[i].v;
        i = jj - 1;
        break;
      case "G":
        out[i].t = "t";
        out[i].v = SSF_general(v, opts);
        break;
    }
  }
  var vv = "", myv, ostr;
  if (nstr.length > 0) {
    if (nstr.charCodeAt(0) == 40) {
      myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
      ostr = write_num("n", nstr, myv);
    } else {
      myv = v < 0 && flen > 1 ? -v : v;
      ostr = write_num("n", nstr, myv);
      if (myv < 0 && out[0] && out[0].t == "t") {
        ostr = ostr.substr(1);
        out[0].v = "-" + out[0].v;
      }
    }
    jj = ostr.length - 1;
    var decpt = out.length;
    for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) {
      decpt = i;
      break;
    }
    var lasti = out.length;
    if (decpt === out.length && ostr.indexOf("E") === -1) {
      for (i = out.length - 1; i >= 0; --i) {
        if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
        if (jj >= out[i].v.length - 1) {
          jj -= out[i].v.length;
          out[i].v = ostr.substr(jj + 1, out[i].v.length);
        } else if (jj < 0) out[i].v = "";
        else {
          out[i].v = ostr.substr(0, jj + 1);
          jj = -1;
        }
        out[i].t = "t";
        lasti = i;
      }
      if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
    } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
      jj = ostr.indexOf(".") - 1;
      for (i = decpt; i >= 0; --i) {
        if (out[i] == null || "n?".indexOf(out[i].t) === -1) continue;
        j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
        vv = out[i].v.substr(j + 1);
        for (; j >= 0; --j) {
          if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
        }
        out[i].v = vv;
        out[i].t = "t";
        lasti = i;
      }
      if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
      jj = ostr.indexOf(".") + 1;
      for (i = decpt; i < out.length; ++i) {
        if (out[i] == null || "n?(".indexOf(out[i].t) === -1 && i !== decpt) continue;
        j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
        vv = out[i].v.substr(0, j);
        for (; j < out[i].v.length; ++j) {
          if (jj < ostr.length) vv += ostr.charAt(jj++);
        }
        out[i].v = vv;
        out[i].t = "t";
        lasti = i;
      }
    }
  }
  for (i = 0; i < out.length; ++i) if (out[i] != null && "n?".indexOf(out[i].t) > -1) {
    myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
    out[i].v = write_num(out[i].t, out[i].v, myv);
    out[i].t = "t";
  }
  var retval = "";
  for (i = 0; i !== out.length; ++i) if (out[i] != null) retval += out[i].v;
  return retval;
}
__name(eval_fmt, "eval_fmt");
var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
function chkcond(v, rr) {
  if (rr == null) return false;
  var thresh = parseFloat(rr[2]);
  switch (rr[1]) {
    case "=":
      if (v == thresh) return true;
      break;
    case ">":
      if (v > thresh) return true;
      break;
    case "<":
      if (v < thresh) return true;
      break;
    case "<>":
      if (v != thresh) return true;
      break;
    case ">=":
      if (v >= thresh) return true;
      break;
    case "<=":
      if (v <= thresh) return true;
      break;
  }
  return false;
}
__name(chkcond, "chkcond");
function choose_fmt(f, v) {
  var fmt = SSF_split_fmt(f);
  var l = fmt.length, lat = fmt[l - 1].indexOf("@");
  if (l < 4 && lat > -1) --l;
  if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
  if (typeof v !== "number") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
  switch (fmt.length) {
    case 1:
      fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
      break;
    case 2:
      fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
      break;
    case 3:
      fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
      break;
    case 4:
      break;
  }
  var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
  if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
  if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
    var m1 = fmt[0].match(cfregex2);
    var m2 = fmt[1].match(cfregex2);
    return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
  }
  return [l, ff];
}
__name(choose_fmt, "choose_fmt");
function SSF_format(fmt, v, o) {
  if (o == null) o = {};
  var sfmt = "";
  switch (typeof fmt) {
    case "string":
      if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
      else sfmt = fmt;
      break;
    case "number":
      if (fmt == 14 && o.dateNF) sfmt = o.dateNF;
      else sfmt = (o.table != null ? o.table : table_fmt)[fmt];
      if (sfmt == null) sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
      if (sfmt == null) sfmt = SSF_default_str[fmt] || "General";
      break;
  }
  if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);
  if (v instanceof Date) v = datenum_local(v, o.date1904);
  var f = choose_fmt(sfmt, v);
  if (SSF_isgeneral(f[1])) return SSF_general(v, o);
  if (v === true) v = "TRUE";
  else if (v === false) v = "FALSE";
  else if (v === "" || v == null) return "";
  return eval_fmt(f[1], v, o, f[0]);
}
__name(SSF_format, "SSF_format");
function SSF_load(fmt, idx) {
  if (typeof idx != "number") {
    idx = +idx || -1;
    for (var i = 0; i < 392; ++i) {
      if (table_fmt[i] == void 0) {
        if (idx < 0) idx = i;
        continue;
      }
      if (table_fmt[i] == fmt) {
        idx = i;
        break;
      }
    }
    if (idx < 0) idx = 391;
  }
  table_fmt[idx] = fmt;
  return idx;
}
__name(SSF_load, "SSF_load");
function make_ssf() {
  table_fmt = SSF_init_table();
}
__name(make_ssf, "make_ssf");
var SSFImplicit = {
  "5": '"$"#,##0_);\\("$"#,##0\\)',
  "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
  "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
  "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
  "23": "General",
  "24": "General",
  "25": "General",
  "26": "General",
  "27": "m/d/yy",
  "28": "m/d/yy",
  "29": "m/d/yy",
  "30": "m/d/yy",
  "31": "m/d/yy",
  "32": "h:mm:ss",
  "33": "h:mm:ss",
  "34": "h:mm:ss",
  "35": "h:mm:ss",
  "36": "m/d/yy",
  "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
  "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
  "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
  "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
  "50": "m/d/yy",
  "51": "m/d/yy",
  "52": "m/d/yy",
  "53": "m/d/yy",
  "54": "m/d/yy",
  "55": "m/d/yy",
  "56": "m/d/yy",
  "57": "m/d/yy",
  "58": "m/d/yy",
  "59": "0",
  "60": "0.00",
  "61": "#,##0",
  "62": "#,##0.00",
  "63": '"$"#,##0_);\\("$"#,##0\\)',
  "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
  "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
  "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
  "67": "0%",
  "68": "0.00%",
  "69": "# ?/?",
  "70": "# ??/??",
  "71": "m/d/yy",
  "72": "m/d/yy",
  "73": "d-mmm-yy",
  "74": "d-mmm",
  "75": "mmm-yy",
  "76": "h:mm",
  "77": "h:mm:ss",
  "78": "m/d/yy h:mm",
  "79": "mm:ss",
  "80": "[h]:mm:ss",
  "81": "mmss.0"
};
var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
function dateNF_regex(dateNF) {
  var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
  fmt = fmt.replace(dateNFregex, "(\\d+)");
  return new RegExp("^" + fmt + "$");
}
__name(dateNF_regex, "dateNF_regex");
function dateNF_fix(str, dateNF, match2) {
  var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
  (dateNF.match(dateNFregex) || []).forEach(function(n, i) {
    var v = parseInt(match2[i + 1], 10);
    switch (n.toLowerCase().charAt(0)) {
      case "y":
        Y = v;
        break;
      case "d":
        d = v;
        break;
      case "h":
        H = v;
        break;
      case "s":
        S = v;
        break;
      case "m":
        if (H >= 0) M = v;
        else m = v;
        break;
    }
  });
  if (S >= 0 && M == -1 && m >= 0) {
    M = m;
    m = -1;
  }
  var datestr = ("" + (Y >= 0 ? Y : (/* @__PURE__ */ new Date()).getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
  if (datestr.length == 7) datestr = "0" + datestr;
  if (datestr.length == 8) datestr = "20" + datestr;
  var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
  if (H == -1 && M == -1 && S == -1) return datestr;
  if (Y == -1 && m == -1 && d == -1) return timestr;
  return datestr + "T" + timestr;
}
__name(dateNF_fix, "dateNF_fix");
var CRC32 = /* @__PURE__ */ function() {
  var CRC322 = {};
  CRC322.version = "1.2.0";
  function signed_crc_table() {
    var c = 0, table = new Array(256);
    for (var n = 0; n != 256; ++n) {
      c = n;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
      table[n] = c;
    }
    return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
  }
  __name(signed_crc_table, "signed_crc_table");
  var T0 = signed_crc_table();
  function slice_by_16_tables(T) {
    var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
    for (n = 0; n != 256; ++n) table[n] = T[n];
    for (n = 0; n != 256; ++n) {
      v = T[n];
      for (c = 256 + n; c < 4096; c += 256) v = table[c] = v >>> 8 ^ T[v & 255];
    }
    var out = [];
    for (n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
    return out;
  }
  __name(slice_by_16_tables, "slice_by_16_tables");
  var TT = slice_by_16_tables(T0);
  var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
  var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
  var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
  function crc32_bstr(bstr, seed) {
    var C = seed ^ -1;
    for (var i = 0, L = bstr.length; i < L; ) C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 255];
    return ~C;
  }
  __name(crc32_bstr, "crc32_bstr");
  function crc32_buf(B, seed) {
    var C = seed ^ -1, L = B.length - 15, i = 0;
    for (; i < L; ) C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
    L += 15;
    while (i < L) C = C >>> 8 ^ T0[(C ^ B[i++]) & 255];
    return ~C;
  }
  __name(crc32_buf, "crc32_buf");
  function crc32_str(str, seed) {
    var C = seed ^ -1;
    for (var i = 0, L = str.length, c = 0, d = 0; i < L; ) {
      c = str.charCodeAt(i++);
      if (c < 128) {
        C = C >>> 8 ^ T0[(C ^ c) & 255];
      } else if (c < 2048) {
        C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
      } else if (c >= 55296 && c < 57344) {
        c = (c & 1023) + 64;
        d = str.charCodeAt(i++) & 1023;
        C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 255];
      } else {
        C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 255];
        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
      }
    }
    return ~C;
  }
  __name(crc32_str, "crc32_str");
  CRC322.table = T0;
  CRC322.bstr = crc32_bstr;
  CRC322.buf = crc32_buf;
  CRC322.str = crc32_str;
  return CRC322;
}();
var CFB = /* @__PURE__ */ (/* @__PURE__ */ __name(function _CFB() {
  var exports2 = {};
  exports2.version = "1.2.1";
  function namecmp(l, r) {
    var L = l.split("/"), R = r.split("/");
    for (var i2 = 0, c = 0, Z = Math.min(L.length, R.length); i2 < Z; ++i2) {
      if (c = L[i2].length - R[i2].length) return c;
      if (L[i2] != R[i2]) return L[i2] < R[i2] ? -1 : 1;
    }
    return L.length - R.length;
  }
  __name(namecmp, "namecmp");
  function dirname(p) {
    if (p.charAt(p.length - 1) == "/") return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
    var c = p.lastIndexOf("/");
    return c === -1 ? p : p.slice(0, c + 1);
  }
  __name(dirname, "dirname");
  function filename(p) {
    if (p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
    var c = p.lastIndexOf("/");
    return c === -1 ? p : p.slice(c + 1);
  }
  __name(filename, "filename");
  function write_dos_date(buf, date) {
    if (typeof date === "string") date = new Date(date);
    var hms = date.getHours();
    hms = hms << 6 | date.getMinutes();
    hms = hms << 5 | date.getSeconds() >>> 1;
    buf.write_shift(2, hms);
    var ymd = date.getFullYear() - 1980;
    ymd = ymd << 4 | date.getMonth() + 1;
    ymd = ymd << 5 | date.getDate();
    buf.write_shift(2, ymd);
  }
  __name(write_dos_date, "write_dos_date");
  function parse_dos_date(buf) {
    var hms = buf.read_shift(2) & 65535;
    var ymd = buf.read_shift(2) & 65535;
    var val = /* @__PURE__ */ new Date();
    var d = ymd & 31;
    ymd >>>= 5;
    var m = ymd & 15;
    ymd >>>= 4;
    val.setMilliseconds(0);
    val.setFullYear(ymd + 1980);
    val.setMonth(m - 1);
    val.setDate(d);
    var S = hms & 31;
    hms >>>= 5;
    var M = hms & 63;
    hms >>>= 6;
    val.setHours(hms);
    val.setMinutes(M);
    val.setSeconds(S << 1);
    return val;
  }
  __name(parse_dos_date, "parse_dos_date");
  function parse_extra_field(blob2) {
    prep_blob(blob2, 0);
    var o = (
      /*::(*/
      {}
    );
    var flags = 0;
    while (blob2.l <= blob2.length - 4) {
      var type = blob2.read_shift(2);
      var sz = blob2.read_shift(2), tgt = blob2.l + sz;
      var p = {};
      switch (type) {
        /* UNIX-style Timestamps */
        case 21589:
          {
            flags = blob2.read_shift(1);
            if (flags & 1) p.mtime = blob2.read_shift(4);
            if (sz > 5) {
              if (flags & 2) p.atime = blob2.read_shift(4);
              if (flags & 4) p.ctime = blob2.read_shift(4);
            }
            if (p.mtime) p.mt = new Date(p.mtime * 1e3);
          }
          break;
      }
      blob2.l = tgt;
      o[type] = p;
    }
    return o;
  }
  __name(parse_extra_field, "parse_extra_field");
  var fs3;
  function get_fs() {
    return fs3 || (fs3 = {});
  }
  __name(get_fs, "get_fs");
  function parse2(file, options) {
    if (file[0] == 80 && file[1] == 75) return parse_zip2(file, options);
    if ((file[0] | 32) == 109 && (file[1] | 32) == 105) return parse_mad(file, options);
    if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
    var mver = 3;
    var ssz = 512;
    var nmfs = 0;
    var difat_sec_cnt = 0;
    var dir_start = 0;
    var minifat_start = 0;
    var difat_start = 0;
    var fat_addrs = [];
    var blob2 = (
      /*::(*/
      file.slice(0, 512)
    );
    prep_blob(blob2, 0);
    var mv = check_get_mver(blob2);
    mver = mv[0];
    switch (mver) {
      case 3:
        ssz = 512;
        break;
      case 4:
        ssz = 4096;
        break;
      case 0:
        if (mv[1] == 0) return parse_zip2(file, options);
      /* falls through */
      default:
        throw new Error("Major Version: Expected 3 or 4 saw " + mver);
    }
    if (ssz !== 512) {
      blob2 = /*::(*/
      file.slice(0, ssz);
      prep_blob(
        blob2,
        28
        /* blob.l */
      );
    }
    var header = file.slice(0, ssz);
    check_shifts(blob2, mver);
    var dir_cnt = blob2.read_shift(4, "i");
    if (mver === 3 && dir_cnt !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
    blob2.l += 4;
    dir_start = blob2.read_shift(4, "i");
    blob2.l += 4;
    blob2.chk("00100000", "Mini Stream Cutoff Size: ");
    minifat_start = blob2.read_shift(4, "i");
    nmfs = blob2.read_shift(4, "i");
    difat_start = blob2.read_shift(4, "i");
    difat_sec_cnt = blob2.read_shift(4, "i");
    for (var q2 = -1, j = 0; j < 109; ++j) {
      q2 = blob2.read_shift(4, "i");
      if (q2 < 0) break;
      fat_addrs[j] = q2;
    }
    var sectors = sectorify(file, ssz);
    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
    var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
    sector_list[dir_start].name = "!Directory";
    if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
    sector_list[fat_addrs[0]].name = "!FAT";
    sector_list.fat_addrs = fat_addrs;
    sector_list.ssz = ssz;
    var files = {}, Paths = [], FileIndex = [], FullPaths = [];
    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
    build_full_paths(FileIndex, FullPaths, Paths);
    Paths.shift();
    var o = {
      FileIndex,
      FullPaths
    };
    if (options && options.raw) o.raw = { header, sectors };
    return o;
  }
  __name(parse2, "parse");
  function check_get_mver(blob2) {
    if (blob2[blob2.l] == 80 && blob2[blob2.l + 1] == 75) return [0, 0];
    blob2.chk(HEADER_SIGNATURE, "Header Signature: ");
    blob2.l += 16;
    var mver = blob2.read_shift(2, "u");
    return [blob2.read_shift(2, "u"), mver];
  }
  __name(check_get_mver, "check_get_mver");
  function check_shifts(blob2, mver) {
    var shift = 9;
    blob2.l += 2;
    switch (shift = blob2.read_shift(2)) {
      case 9:
        if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift);
        break;
      case 12:
        if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift);
        break;
      default:
        throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
    }
    blob2.chk("0600", "Mini Sector Shift: ");
    blob2.chk("000000000000", "Reserved: ");
  }
  __name(check_shifts, "check_shifts");
  function sectorify(file, ssz) {
    var nsectors = Math.ceil(file.length / ssz) - 1;
    var sectors = [];
    for (var i2 = 1; i2 < nsectors; ++i2) sectors[i2 - 1] = file.slice(i2 * ssz, (i2 + 1) * ssz);
    sectors[nsectors - 1] = file.slice(nsectors * ssz);
    return sectors;
  }
  __name(sectorify, "sectorify");
  function build_full_paths(FI, FP, Paths) {
    var i2 = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
    var dad = [], q2 = [];
    for (; i2 < pl; ++i2) {
      dad[i2] = q2[i2] = i2;
      FP[i2] = Paths[i2];
    }
    for (; j < q2.length; ++j) {
      i2 = q2[j];
      L = FI[i2].L;
      R = FI[i2].R;
      C = FI[i2].C;
      if (dad[i2] === i2) {
        if (L !== -1 && dad[L] !== L) dad[i2] = dad[L];
        if (R !== -1 && dad[R] !== R) dad[i2] = dad[R];
      }
      if (C !== -1) dad[C] = i2;
      if (L !== -1 && i2 != dad[i2]) {
        dad[L] = dad[i2];
        if (q2.lastIndexOf(L) < j) q2.push(L);
      }
      if (R !== -1 && i2 != dad[i2]) {
        dad[R] = dad[i2];
        if (q2.lastIndexOf(R) < j) q2.push(R);
      }
    }
    for (i2 = 1; i2 < pl; ++i2) if (dad[i2] === i2) {
      if (R !== -1 && dad[R] !== R) dad[i2] = dad[R];
      else if (L !== -1 && dad[L] !== L) dad[i2] = dad[L];
    }
    for (i2 = 1; i2 < pl; ++i2) {
      if (FI[i2].type === 0) continue;
      j = i2;
      if (j != dad[j]) do {
        j = dad[j];
        FP[i2] = FP[j] + "/" + FP[i2];
      } while (j !== 0 && -1 !== dad[j] && j != dad[j]);
      dad[i2] = -1;
    }
    FP[0] += "/";
    for (i2 = 1; i2 < pl; ++i2) {
      if (FI[i2].type !== 2) FP[i2] += "/";
    }
  }
  __name(build_full_paths, "build_full_paths");
  function get_mfat_entry(entry, payload, mini) {
    var start = entry.start, size = entry.size;
    var o = [];
    var idx = start;
    while (mini && size > 0 && idx >= 0) {
      o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
      size -= MSSZ;
      idx = __readInt32LE(mini, idx * 4);
    }
    if (o.length === 0) return new_buf(0);
    return bconcat(o).slice(0, entry.size);
  }
  __name(get_mfat_entry, "get_mfat_entry");
  function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
    var q2 = ENDOFCHAIN;
    if (idx === ENDOFCHAIN) {
      if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
    } else if (idx !== -1) {
      var sector = sectors[idx], m = (ssz >>> 2) - 1;
      if (!sector) return;
      for (var i2 = 0; i2 < m; ++i2) {
        if ((q2 = __readInt32LE(sector, i2 * 4)) === ENDOFCHAIN) break;
        fat_addrs.push(q2);
      }
      sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
    }
  }
  __name(sleuth_fat, "sleuth_fat");
  function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
    var buf = [], buf_chain = [];
    if (!chkd) chkd = [];
    var modulus = ssz - 1, j = 0, jj = 0;
    for (j = start; j >= 0; ) {
      chkd[j] = true;
      buf[buf.length] = j;
      buf_chain.push(sectors[j]);
      var addr = fat_addrs[Math.floor(j * 4 / ssz)];
      jj = j * 4 & modulus;
      if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
      if (!sectors[addr]) break;
      j = __readInt32LE(sectors[addr], jj);
    }
    return { nodes: buf, data: __toBuffer([buf_chain]) };
  }
  __name(get_sector_list, "get_sector_list");
  function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
    var sl = sectors.length, sector_list = [];
    var chkd = [], buf = [], buf_chain = [];
    var modulus = ssz - 1, i2 = 0, j = 0, k = 0, jj = 0;
    for (i2 = 0; i2 < sl; ++i2) {
      buf = [];
      k = i2 + dir_start;
      if (k >= sl) k -= sl;
      if (chkd[k]) continue;
      buf_chain = [];
      var seen = [];
      for (j = k; j >= 0; ) {
        seen[j] = true;
        chkd[j] = true;
        buf[buf.length] = j;
        buf_chain.push(sectors[j]);
        var addr = fat_addrs[Math.floor(j * 4 / ssz)];
        jj = j * 4 & modulus;
        if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
        if (!sectors[addr]) break;
        j = __readInt32LE(sectors[addr], jj);
        if (seen[j]) break;
      }
      sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) };
    }
    return sector_list;
  }
  __name(make_sector_list, "make_sector_list");
  function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
    var minifat_store = 0, pl = Paths.length ? 2 : 0;
    var sector = sector_list[dir_start].data;
    var i2 = 0, namelen = 0, name2;
    for (; i2 < sector.length; i2 += 128) {
      var blob2 = (
        /*::(*/
        sector.slice(i2, i2 + 128)
      );
      prep_blob(blob2, 64);
      namelen = blob2.read_shift(2);
      name2 = __utf16le(blob2, 0, namelen - pl);
      Paths.push(name2);
      var o = {
        name: name2,
        type: blob2.read_shift(1),
        color: blob2.read_shift(1),
        L: blob2.read_shift(4, "i"),
        R: blob2.read_shift(4, "i"),
        C: blob2.read_shift(4, "i"),
        clsid: blob2.read_shift(16),
        state: blob2.read_shift(4, "i"),
        start: 0,
        size: 0
      };
      var ctime = blob2.read_shift(2) + blob2.read_shift(2) + blob2.read_shift(2) + blob2.read_shift(2);
      if (ctime !== 0) o.ct = read_date(blob2, blob2.l - 8);
      var mtime = blob2.read_shift(2) + blob2.read_shift(2) + blob2.read_shift(2) + blob2.read_shift(2);
      if (mtime !== 0) o.mt = read_date(blob2, blob2.l - 8);
      o.start = blob2.read_shift(4, "i");
      o.size = blob2.read_shift(4, "i");
      if (o.size < 0 && o.start < 0) {
        o.size = o.type = 0;
        o.start = ENDOFCHAIN;
        o.name = "";
      }
      if (o.type === 5) {
        minifat_store = o.start;
        if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
      } else if (o.size >= 4096) {
        o.storage = "fat";
        if (sector_list[o.start] === void 0) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
        sector_list[o.start].name = o.name;
        o.content = sector_list[o.start].data.slice(0, o.size);
      } else {
        o.storage = "minifat";
        if (o.size < 0) o.size = 0;
        else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
          o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
        }
      }
      if (o.content) prep_blob(o.content, 0);
      files[name2] = o;
      FileIndex.push(o);
    }
  }
  __name(read_directory, "read_directory");
  function read_date(blob2, offset) {
    return new Date((__readUInt32LE(blob2, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob2, offset) / 1e7 - 11644473600) * 1e3);
  }
  __name(read_date, "read_date");
  function read_file(filename2, options) {
    get_fs();
    return parse2(fs3.readFileSync(filename2), options);
  }
  __name(read_file, "read_file");
  function read(blob2, options) {
    var type = options && options.type;
    if (!type) {
      if (has_buf && Buffer.isBuffer(blob2)) type = "buffer";
    }
    switch (type || "base64") {
      case "file":
        return read_file(blob2, options);
      case "base64":
        return parse2(s2a(Base64_decode(blob2)), options);
      case "binary":
        return parse2(s2a(blob2), options);
    }
    return parse2(
      /*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */
      blob2,
      options
    );
  }
  __name(read, "read");
  function init_cfb(cfb, opts) {
    var o = opts || {}, root = o.root || "Root Entry";
    if (!cfb.FullPaths) cfb.FullPaths = [];
    if (!cfb.FileIndex) cfb.FileIndex = [];
    if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
    if (cfb.FullPaths.length === 0) {
      cfb.FullPaths[0] = root + "/";
      cfb.FileIndex[0] = { name: root, type: 5 };
    }
    if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
    seed_cfb(cfb);
  }
  __name(init_cfb, "init_cfb");
  function seed_cfb(cfb) {
    var nm = "Sh33tJ5";
    if (CFB.find(cfb, "/" + nm)) return;
    var p = new_buf(4);
    p[0] = 55;
    p[1] = p[3] = 50;
    p[2] = 54;
    cfb.FileIndex.push({ name: nm, type: 2, content: p, size: 4, L: 69, R: 69, C: 69 });
    cfb.FullPaths.push(cfb.FullPaths[0] + nm);
    rebuild_cfb(cfb);
  }
  __name(seed_cfb, "seed_cfb");
  function rebuild_cfb(cfb, f) {
    init_cfb(cfb);
    var gc = false, s = false;
    for (var i2 = cfb.FullPaths.length - 1; i2 >= 0; --i2) {
      var _file = cfb.FileIndex[i2];
      switch (_file.type) {
        case 0:
          if (s) gc = true;
          else {
            cfb.FileIndex.pop();
            cfb.FullPaths.pop();
          }
          break;
        case 1:
        case 2:
        case 5:
          s = true;
          if (isNaN(_file.R * _file.L * _file.C)) gc = true;
          if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
          break;
        default:
          gc = true;
          break;
      }
    }
    if (!gc && !f) return;
    var now = new Date(1987, 1, 19), j = 0;
    var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
    var data = [];
    for (i2 = 0; i2 < cfb.FullPaths.length; ++i2) {
      fullPaths[cfb.FullPaths[i2]] = true;
      if (cfb.FileIndex[i2].type === 0) continue;
      data.push([cfb.FullPaths[i2], cfb.FileIndex[i2]]);
    }
    for (i2 = 0; i2 < data.length; ++i2) {
      var dad = dirname(data[i2][0]);
      s = fullPaths[dad];
      if (!s) {
        data.push([dad, {
          name: filename(dad).replace("/", ""),
          type: 1,
          clsid: HEADER_CLSID,
          ct: now,
          mt: now,
          content: null
        }]);
        fullPaths[dad] = true;
      }
    }
    data.sort(function(x, y) {
      return namecmp(x[0], y[0]);
    });
    cfb.FullPaths = [];
    cfb.FileIndex = [];
    for (i2 = 0; i2 < data.length; ++i2) {
      cfb.FullPaths[i2] = data[i2][0];
      cfb.FileIndex[i2] = data[i2][1];
    }
    for (i2 = 0; i2 < data.length; ++i2) {
      var elt = cfb.FileIndex[i2];
      var nm = cfb.FullPaths[i2];
      elt.name = filename(nm).replace("/", "");
      elt.L = elt.R = elt.C = -(elt.color = 1);
      elt.size = elt.content ? elt.content.length : 0;
      elt.start = 0;
      elt.clsid = elt.clsid || HEADER_CLSID;
      if (i2 === 0) {
        elt.C = data.length > 1 ? 1 : -1;
        elt.size = 0;
        elt.type = 5;
      } else if (nm.slice(-1) == "/") {
        for (j = i2 + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == nm) break;
        elt.C = j >= data.length ? -1 : j;
        for (j = i2 + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;
        elt.R = j >= data.length ? -1 : j;
        elt.type = 1;
      } else {
        if (dirname(cfb.FullPaths[i2 + 1] || "") == dirname(nm)) elt.R = i2 + 1;
        elt.type = 2;
      }
    }
  }
  __name(rebuild_cfb, "rebuild_cfb");
  function _write(cfb, options) {
    var _opts = options || {};
    if (_opts.fileType == "mad") return write_mad(cfb, _opts);
    rebuild_cfb(cfb);
    switch (_opts.fileType) {
      case "zip":
        return write_zip(cfb, _opts);
    }
    var L = function(cfb2) {
      var mini_size = 0, fat_size = 0;
      for (var i3 = 0; i3 < cfb2.FileIndex.length; ++i3) {
        var file2 = cfb2.FileIndex[i3];
        if (!file2.content) continue;
        var flen2 = file2.content.length;
        if (flen2 > 0) {
          if (flen2 < 4096) mini_size += flen2 + 63 >> 6;
          else fat_size += flen2 + 511 >> 9;
        }
      }
      var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
      var mini_cnt = mini_size + 7 >> 3;
      var mfat_cnt = mini_size + 127 >> 7;
      var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
      var fat_cnt = fat_base + 127 >> 7;
      var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
      while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
      var L2 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
      cfb2.FileIndex[0].size = mini_size << 6;
      L2[7] = (cfb2.FileIndex[0].start = L2[0] + L2[1] + L2[2] + L2[3] + L2[4] + L2[5]) + (L2[6] + 7 >> 3);
      return L2;
    }(cfb);
    var o = new_buf(L[7] << 9);
    var i2 = 0, T = 0;
    {
      for (i2 = 0; i2 < 8; ++i2) o.write_shift(1, HEADER_SIG[i2]);
      for (i2 = 0; i2 < 8; ++i2) o.write_shift(2, 0);
      o.write_shift(2, 62);
      o.write_shift(2, 3);
      o.write_shift(2, 65534);
      o.write_shift(2, 9);
      o.write_shift(2, 6);
      for (i2 = 0; i2 < 3; ++i2) o.write_shift(2, 0);
      o.write_shift(4, 0);
      o.write_shift(4, L[2]);
      o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
      o.write_shift(4, 0);
      o.write_shift(4, 1 << 12);
      o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
      o.write_shift(4, L[3]);
      o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
      o.write_shift(4, L[1]);
      for (i2 = 0; i2 < 109; ++i2) o.write_shift(-4, i2 < L[2] ? L[1] + i2 : -1);
    }
    if (L[1]) {
      for (T = 0; T < L[1]; ++T) {
        for (; i2 < 236 + T * 127; ++i2) o.write_shift(-4, i2 < L[2] ? L[1] + i2 : -1);
        o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
      }
    }
    var chainit = /* @__PURE__ */ __name(function(w) {
      for (T += w; i2 < T - 1; ++i2) o.write_shift(-4, i2 + 1);
      if (w) {
        ++i2;
        o.write_shift(-4, ENDOFCHAIN);
      }
    }, "chainit");
    T = i2 = 0;
    for (T += L[1]; i2 < T; ++i2) o.write_shift(-4, consts.DIFSECT);
    for (T += L[2]; i2 < T; ++i2) o.write_shift(-4, consts.FATSECT);
    chainit(L[3]);
    chainit(L[4]);
    var j = 0, flen = 0;
    var file = cfb.FileIndex[0];
    for (; j < cfb.FileIndex.length; ++j) {
      file = cfb.FileIndex[j];
      if (!file.content) continue;
      flen = file.content.length;
      if (flen < 4096) continue;
      file.start = T;
      chainit(flen + 511 >> 9);
    }
    chainit(L[6] + 7 >> 3);
    while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
    T = i2 = 0;
    for (j = 0; j < cfb.FileIndex.length; ++j) {
      file = cfb.FileIndex[j];
      if (!file.content) continue;
      flen = file.content.length;
      if (!flen || flen >= 4096) continue;
      file.start = T;
      chainit(flen + 63 >> 6);
    }
    while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
    for (i2 = 0; i2 < L[4] << 2; ++i2) {
      var nm = cfb.FullPaths[i2];
      if (!nm || nm.length === 0) {
        for (j = 0; j < 17; ++j) o.write_shift(4, 0);
        for (j = 0; j < 3; ++j) o.write_shift(4, -1);
        for (j = 0; j < 12; ++j) o.write_shift(4, 0);
        continue;
      }
      file = cfb.FileIndex[i2];
      if (i2 === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
      var _nm = i2 === 0 && _opts.root || file.name;
      flen = 2 * (_nm.length + 1);
      o.write_shift(64, _nm, "utf16le");
      o.write_shift(2, flen);
      o.write_shift(1, file.type);
      o.write_shift(1, file.color);
      o.write_shift(-4, file.L);
      o.write_shift(-4, file.R);
      o.write_shift(-4, file.C);
      if (!file.clsid) for (j = 0; j < 4; ++j) o.write_shift(4, 0);
      else o.write_shift(16, file.clsid, "hex");
      o.write_shift(4, file.state || 0);
      o.write_shift(4, 0);
      o.write_shift(4, 0);
      o.write_shift(4, 0);
      o.write_shift(4, 0);
      o.write_shift(4, file.start);
      o.write_shift(4, file.size);
      o.write_shift(4, 0);
    }
    for (i2 = 1; i2 < cfb.FileIndex.length; ++i2) {
      file = cfb.FileIndex[i2];
      if (file.size >= 4096) {
        o.l = file.start + 1 << 9;
        if (has_buf && Buffer.isBuffer(file.content)) {
          file.content.copy(o, o.l, 0, file.size);
          o.l += file.size + 511 & -512;
        } else {
          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
          for (; j & 511; ++j) o.write_shift(1, 0);
        }
      }
    }
    for (i2 = 1; i2 < cfb.FileIndex.length; ++i2) {
      file = cfb.FileIndex[i2];
      if (file.size > 0 && file.size < 4096) {
        if (has_buf && Buffer.isBuffer(file.content)) {
          file.content.copy(o, o.l, 0, file.size);
          o.l += file.size + 63 & -64;
        } else {
          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
          for (; j & 63; ++j) o.write_shift(1, 0);
        }
      }
    }
    if (has_buf) {
      o.l = o.length;
    } else {
      while (o.l < o.length) o.write_shift(1, 0);
    }
    return o;
  }
  __name(_write, "_write");
  function find(cfb, path3) {
    var UCFullPaths = cfb.FullPaths.map(function(x) {
      return x.toUpperCase();
    });
    var UCPaths = UCFullPaths.map(function(x) {
      var y = x.split("/");
      return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
    });
    var k = false;
    if (path3.charCodeAt(0) === 47) {
      k = true;
      path3 = UCFullPaths[0].slice(0, -1) + path3;
    } else k = path3.indexOf("/") !== -1;
    var UCPath = path3.toUpperCase();
    var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
    if (w !== -1) return cfb.FileIndex[w];
    var m = !UCPath.match(chr1);
    UCPath = UCPath.replace(chr0, "");
    if (m) UCPath = UCPath.replace(chr1, "!");
    for (w = 0; w < UCFullPaths.length; ++w) {
      if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
      if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath) return cfb.FileIndex[w];
    }
    return null;
  }
  __name(find, "find");
  var MSSZ = 64;
  var ENDOFCHAIN = -2;
  var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
  var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
  var HEADER_CLSID = "00000000000000000000000000000000";
  var consts = {
    /* 2.1 Compund File Sector Numbers and Types */
    MAXREGSECT: -6,
    DIFSECT: -4,
    FATSECT: -3,
    ENDOFCHAIN,
    FREESECT: -1,
    /* 2.2 Compound File Header */
    HEADER_SIGNATURE,
    HEADER_MINOR_VERSION: "3e00",
    MAXREGSID: -6,
    NOSTREAM: -1,
    HEADER_CLSID,
    /* 2.6.1 Compound File Directory Entry */
    EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
  };
  function write_file(cfb, filename2, options) {
    get_fs();
    var o = _write(cfb, options);
    fs3.writeFileSync(filename2, o);
  }
  __name(write_file, "write_file");
  function a2s2(o) {
    var out = new Array(o.length);
    for (var i2 = 0; i2 < o.length; ++i2) out[i2] = String.fromCharCode(o[i2]);
    return out.join("");
  }
  __name(a2s2, "a2s");
  function write(cfb, options) {
    var o = _write(cfb, options);
    switch (options && options.type || "buffer") {
      case "file":
        get_fs();
        fs3.writeFileSync(options.filename, o);
        return o;
      case "binary":
        return typeof o == "string" ? o : a2s2(o);
      case "base64":
        return Base64_encode(typeof o == "string" ? o : a2s2(o));
      case "buffer":
        if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
      /* falls through */
      case "array":
        return typeof o == "string" ? s2a(o) : o;
    }
    return o;
  }
  __name(write, "write");
  var _zlib;
  function use_zlib(zlib) {
    try {
      var InflateRaw = zlib.InflateRaw;
      var InflRaw = new InflateRaw();
      InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
      if (InflRaw.bytesRead) _zlib = zlib;
      else throw new Error("zlib does not expose bytesRead");
    } catch (e) {
      console.error("cannot use native zlib: " + (e.message || e));
    }
  }
  __name(use_zlib, "use_zlib");
  function _inflateRawSync(payload, usz) {
    if (!_zlib) return _inflate(payload, usz);
    var InflateRaw = _zlib.InflateRaw;
    var InflRaw = new InflateRaw();
    var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
    payload.l += InflRaw.bytesRead;
    return out;
  }
  __name(_inflateRawSync, "_inflateRawSync");
  function _deflateRawSync(payload) {
    return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
  }
  __name(_deflateRawSync, "_deflateRawSync");
  var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
  var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
  var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
  function bit_swap_8(n) {
    var t = (n << 1 | n << 11) & 139536 | (n << 5 | n << 15) & 558144;
    return (t >> 16 | t >> 8 | t) & 255;
  }
  __name(bit_swap_8, "bit_swap_8");
  var use_typed_arrays = typeof Uint8Array !== "undefined";
  var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
  for (var q = 0; q < 1 << 8; ++q) bitswap8[q] = bit_swap_8(q);
  function bit_swap_n(n, b) {
    var rev = bitswap8[n & 255];
    if (b <= 8) return rev >>> 8 - b;
    rev = rev << 8 | bitswap8[n >> 8 & 255];
    if (b <= 16) return rev >>> 16 - b;
    rev = rev << 8 | bitswap8[n >> 16 & 255];
    return rev >>> 24 - b;
  }
  __name(bit_swap_n, "bit_swap_n");
  function read_bits_2(buf, bl) {
    var w = bl & 7, h = bl >>> 3;
    return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 3;
  }
  __name(read_bits_2, "read_bits_2");
  function read_bits_3(buf, bl) {
    var w = bl & 7, h = bl >>> 3;
    return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 7;
  }
  __name(read_bits_3, "read_bits_3");
  function read_bits_4(buf, bl) {
    var w = bl & 7, h = bl >>> 3;
    return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 15;
  }
  __name(read_bits_4, "read_bits_4");
  function read_bits_5(buf, bl) {
    var w = bl & 7, h = bl >>> 3;
    return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 31;
  }
  __name(read_bits_5, "read_bits_5");
  function read_bits_7(buf, bl) {
    var w = bl & 7, h = bl >>> 3;
    return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 127;
  }
  __name(read_bits_7, "read_bits_7");
  function read_bits_n(buf, bl, n) {
    var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
    var v = buf[h] >>> w;
    if (n < 8 - w) return v & f;
    v |= buf[h + 1] << 8 - w;
    if (n < 16 - w) return v & f;
    v |= buf[h + 2] << 16 - w;
    if (n < 24 - w) return v & f;
    v |= buf[h + 3] << 24 - w;
    return v & f;
  }
  __name(read_bits_n, "read_bits_n");
  function write_bits_3(buf, bl, v) {
    var w = bl & 7, h = bl >>> 3;
    if (w <= 5) buf[h] |= (v & 7) << w;
    else {
      buf[h] |= v << w & 255;
      buf[h + 1] = (v & 7) >> 8 - w;
    }
    return bl + 3;
  }
  __name(write_bits_3, "write_bits_3");
  function write_bits_1(buf, bl, v) {
    var w = bl & 7, h = bl >>> 3;
    v = (v & 1) << w;
    buf[h] |= v;
    return bl + 1;
  }
  __name(write_bits_1, "write_bits_1");
  function write_bits_8(buf, bl, v) {
    var w = bl & 7, h = bl >>> 3;
    v <<= w;
    buf[h] |= v & 255;
    v >>>= 8;
    buf[h + 1] = v;
    return bl + 8;
  }
  __name(write_bits_8, "write_bits_8");
  function write_bits_16(buf, bl, v) {
    var w = bl & 7, h = bl >>> 3;
    v <<= w;
    buf[h] |= v & 255;
    v >>>= 8;
    buf[h + 1] = v & 255;
    buf[h + 2] = v >>> 8;
    return bl + 16;
  }
  __name(write_bits_16, "write_bits_16");
  function realloc(b, sz) {
    var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i2 = 0;
    if (L >= sz) return b;
    if (has_buf) {
      var o = new_unsafe_buf(M);
      if (b.copy) b.copy(o);
      else for (; i2 < b.length; ++i2) o[i2] = b[i2];
      return o;
    } else if (use_typed_arrays) {
      var a = new Uint8Array(M);
      if (a.set) a.set(b);
      else for (; i2 < L; ++i2) a[i2] = b[i2];
      return a;
    }
    b.length = M;
    return b;
  }
  __name(realloc, "realloc");
  function zero_fill_array(n) {
    var o = new Array(n);
    for (var i2 = 0; i2 < n; ++i2) o[i2] = 0;
    return o;
  }
  __name(zero_fill_array, "zero_fill_array");
  function build_tree(clens, cmap, MAX) {
    var maxlen = 1, w = 0, i2 = 0, j = 0, ccode = 0, L = clens.length;
    var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    for (i2 = 0; i2 < 32; ++i2) bl_count[i2] = 0;
    for (i2 = L; i2 < MAX; ++i2) clens[i2] = 0;
    L = clens.length;
    var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L);
    for (i2 = 0; i2 < L; ++i2) {
      bl_count[w = clens[i2]]++;
      if (maxlen < w) maxlen = w;
      ctree[i2] = 0;
    }
    bl_count[0] = 0;
    for (i2 = 1; i2 <= maxlen; ++i2) bl_count[i2 + 16] = ccode = ccode + bl_count[i2 - 1] << 1;
    for (i2 = 0; i2 < L; ++i2) {
      ccode = clens[i2];
      if (ccode != 0) ctree[i2] = bl_count[ccode + 16]++;
    }
    var cleni = 0;
    for (i2 = 0; i2 < L; ++i2) {
      cleni = clens[i2];
      if (cleni != 0) {
        ccode = bit_swap_n(ctree[i2], maxlen) >> maxlen - cleni;
        for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)
          cmap[ccode | j << cleni] = cleni & 15 | i2 << 4;
      }
    }
    return maxlen;
  }
  __name(build_tree, "build_tree");
  var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
  var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
  if (!use_typed_arrays) {
    for (var i = 0; i < 512; ++i) fix_lmap[i] = 0;
    for (i = 0; i < 32; ++i) fix_dmap[i] = 0;
  }
  (function() {
    var dlens = [];
    var i2 = 0;
    for (; i2 < 32; i2++) dlens.push(5);
    build_tree(dlens, fix_dmap, 32);
    var clens = [];
    i2 = 0;
    for (; i2 <= 143; i2++) clens.push(8);
    for (; i2 <= 255; i2++) clens.push(9);
    for (; i2 <= 279; i2++) clens.push(7);
    for (; i2 <= 287; i2++) clens.push(8);
    build_tree(clens, fix_lmap, 288);
  })();
  var _deflateRaw = /* @__PURE__ */ (/* @__PURE__ */ __name(function _deflateRawIIFE() {
    var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
    var j = 0, k = 0;
    for (; j < DST_LN.length - 1; ++j) {
      for (; k < DST_LN[j + 1]; ++k) DST_LN_RE[k] = j;
    }
    for (; k < 32768; ++k) DST_LN_RE[k] = 29;
    var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
    for (j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
      for (; k < LEN_LN[j + 1]; ++k) LEN_LN_RE[k] = j;
    }
    function write_stored(data, out) {
      var boff = 0;
      while (boff < data.length) {
        var L = Math.min(65535, data.length - boff);
        var h = boff + L == data.length;
        out.write_shift(1, +h);
        out.write_shift(2, L);
        out.write_shift(2, ~L & 65535);
        while (L-- > 0) out[out.l++] = data[boff++];
      }
      return out.l;
    }
    __name(write_stored, "write_stored");
    function write_huff_fixed(data, out) {
      var bl = 0;
      var boff = 0;
      var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
      while (boff < data.length) {
        var L = (
          /* data.length - boff; */
          Math.min(65535, data.length - boff)
        );
        if (L < 10) {
          bl = write_bits_3(out, bl, +!!(boff + L == data.length));
          if (bl & 7) bl += 8 - (bl & 7);
          out.l = bl / 8 | 0;
          out.write_shift(2, L);
          out.write_shift(2, ~L & 65535);
          while (L-- > 0) out[out.l++] = data[boff++];
          bl = out.l * 8;
          continue;
        }
        bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2);
        var hash = 0;
        while (L-- > 0) {
          var d = data[boff];
          hash = (hash << 5 ^ d) & 32767;
          var match2 = -1, mlen = 0;
          if (match2 = addrs[hash]) {
            match2 |= boff & ~32767;
            if (match2 > boff) match2 -= 32768;
            if (match2 < boff) while (data[match2 + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
          }
          if (mlen > 2) {
            d = LEN_LN_RE[mlen];
            if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;
            else {
              write_bits_8(out, bl, 3);
              bl += 5;
              write_bits_8(out, bl, bitswap8[d - 23] >> 5);
              bl += 3;
            }
            var len_eb = d < 8 ? 0 : d - 4 >> 2;
            if (len_eb > 0) {
              write_bits_16(out, bl, mlen - LEN_LN[d]);
              bl += len_eb;
            }
            d = DST_LN_RE[boff - match2];
            bl = write_bits_8(out, bl, bitswap8[d] >> 3);
            bl -= 3;
            var dst_eb = d < 4 ? 0 : d - 2 >> 1;
            if (dst_eb > 0) {
              write_bits_16(out, bl, boff - match2 - DST_LN[d]);
              bl += dst_eb;
            }
            for (var q2 = 0; q2 < mlen; ++q2) {
              addrs[hash] = boff & 32767;
              hash = (hash << 5 ^ data[boff]) & 32767;
              ++boff;
            }
            L -= mlen - 1;
          } else {
            if (d <= 143) d = d + 48;
            else bl = write_bits_1(out, bl, 1);
            bl = write_bits_8(out, bl, bitswap8[d]);
            addrs[hash] = boff & 32767;
            ++boff;
          }
        }
        bl = write_bits_8(out, bl, 0) - 1;
      }
      out.l = (bl + 7) / 8 | 0;
      return out.l;
    }
    __name(write_huff_fixed, "write_huff_fixed");
    return /* @__PURE__ */ __name(function _deflateRaw2(data, out) {
      if (data.length < 8) return write_stored(data, out);
      return write_huff_fixed(data, out);
    }, "_deflateRaw");
  }, "_deflateRawIIFE"))();
  function _deflate(data) {
    var buf = new_buf(50 + Math.floor(data.length * 1.1));
    var off = _deflateRaw(data, buf);
    return buf.slice(0, off);
  }
  __name(_deflate, "_deflate");
  var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
  var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
  var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
  var dyn_len_1 = 1, dyn_len_2 = 1;
  function dyn(data, boff) {
    var _HLIT = read_bits_5(data, boff) + 257;
    boff += 5;
    var _HDIST = read_bits_5(data, boff) + 1;
    boff += 5;
    var _HCLEN = read_bits_4(data, boff) + 4;
    boff += 4;
    var w = 0;
    var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
    var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var maxlen = 1;
    var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    var L = clens.length;
    for (var i2 = 0; i2 < _HCLEN; ++i2) {
      clens[CLEN_ORDER[i2]] = w = read_bits_3(data, boff);
      if (maxlen < w) maxlen = w;
      bl_count[w]++;
      boff += 3;
    }
    var ccode = 0;
    bl_count[0] = 0;
    for (i2 = 1; i2 <= maxlen; ++i2) next_code[i2] = ccode = ccode + bl_count[i2 - 1] << 1;
    for (i2 = 0; i2 < L; ++i2) if ((ccode = clens[i2]) != 0) ctree[i2] = next_code[ccode]++;
    var cleni = 0;
    for (i2 = 0; i2 < L; ++i2) {
      cleni = clens[i2];
      if (cleni != 0) {
        ccode = bitswap8[ctree[i2]] >> 8 - cleni;
        for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) dyn_cmap[ccode | j << cleni] = cleni & 7 | i2 << 3;
      }
    }
    var hcodes = [];
    maxlen = 1;
    for (; hcodes.length < _HLIT + _HDIST; ) {
      ccode = dyn_cmap[read_bits_7(data, boff)];
      boff += ccode & 7;
      switch (ccode >>>= 3) {
        case 16:
          w = 3 + read_bits_2(data, boff);
          boff += 2;
          ccode = hcodes[hcodes.length - 1];
          while (w-- > 0) hcodes.push(ccode);
          break;
        case 17:
          w = 3 + read_bits_3(data, boff);
          boff += 3;
          while (w-- > 0) hcodes.push(0);
          break;
        case 18:
          w = 11 + read_bits_7(data, boff);
          boff += 7;
          while (w-- > 0) hcodes.push(0);
          break;
        default:
          hcodes.push(ccode);
          if (maxlen < ccode) maxlen = ccode;
          break;
      }
    }
    var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
    for (i2 = _HLIT; i2 < 286; ++i2) h1[i2] = 0;
    for (i2 = _HDIST; i2 < 30; ++i2) h2[i2] = 0;
    dyn_len_1 = build_tree(h1, dyn_lmap, 286);
    dyn_len_2 = build_tree(h2, dyn_dmap, 30);
    return boff;
  }
  __name(dyn, "dyn");
  function inflate(data, usz) {
    if (data[0] == 3 && !(data[1] & 3)) {
      return [new_raw_buf(usz), 2];
    }
    var boff = 0;
    var header = 0;
    var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
    var woff = 0;
    var OL = outbuf.length >>> 0;
    var max_len_1 = 0, max_len_2 = 0;
    while ((header & 1) == 0) {
      header = read_bits_3(data, boff);
      boff += 3;
      if (header >>> 1 == 0) {
        if (boff & 7) boff += 8 - (boff & 7);
        var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
        boff += 32;
        if (sz > 0) {
          if (!usz && OL < woff + sz) {
            outbuf = realloc(outbuf, woff + sz);
            OL = outbuf.length;
          }
          while (sz-- > 0) {
            outbuf[woff++] = data[boff >>> 3];
            boff += 8;
          }
        }
        continue;
      } else if (header >> 1 == 1) {
        max_len_1 = 9;
        max_len_2 = 5;
      } else {
        boff = dyn(data, boff);
        max_len_1 = dyn_len_1;
        max_len_2 = dyn_len_2;
      }
      for (; ; ) {
        if (!usz && OL < woff + 32767) {
          outbuf = realloc(outbuf, woff + 32767);
          OL = outbuf.length;
        }
        var bits = read_bits_n(data, boff, max_len_1);
        var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
        boff += code & 15;
        code >>>= 4;
        if ((code >>> 8 & 255) === 0) outbuf[woff++] = code;
        else if (code == 256) break;
        else {
          code -= 257;
          var len_eb = code < 8 ? 0 : code - 4 >> 2;
          if (len_eb > 5) len_eb = 0;
          var tgt = woff + LEN_LN[code];
          if (len_eb > 0) {
            tgt += read_bits_n(data, boff, len_eb);
            boff += len_eb;
          }
          bits = read_bits_n(data, boff, max_len_2);
          code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
          boff += code & 15;
          code >>>= 4;
          var dst_eb = code < 4 ? 0 : code - 2 >> 1;
          var dst = DST_LN[code];
          if (dst_eb > 0) {
            dst += read_bits_n(data, boff, dst_eb);
            boff += dst_eb;
          }
          if (!usz && OL < tgt) {
            outbuf = realloc(outbuf, tgt + 100);
            OL = outbuf.length;
          }
          while (woff < tgt) {
            outbuf[woff] = outbuf[woff - dst];
            ++woff;
          }
        }
      }
    }
    if (usz) return [outbuf, boff + 7 >>> 3];
    return [outbuf.slice(0, woff), boff + 7 >>> 3];
  }
  __name(inflate, "inflate");
  function _inflate(payload, usz) {
    var data = payload.slice(payload.l || 0);
    var out = inflate(data, usz);
    payload.l += out[1];
    return out[0];
  }
  __name(_inflate, "_inflate");
  function warn_or_throw(wrn, msg) {
    if (wrn) {
      if (typeof console !== "undefined") console.error(msg);
    } else throw new Error(msg);
  }
  __name(warn_or_throw, "warn_or_throw");
  function parse_zip2(file, options) {
    var blob2 = (
      /*::(*/
      file
    );
    prep_blob(blob2, 0);
    var FileIndex = [], FullPaths = [];
    var o = {
      FileIndex,
      FullPaths
    };
    init_cfb(o, { root: options.root });
    var i2 = blob2.length - 4;
    while ((blob2[i2] != 80 || blob2[i2 + 1] != 75 || blob2[i2 + 2] != 5 || blob2[i2 + 3] != 6) && i2 >= 0) --i2;
    blob2.l = i2 + 4;
    blob2.l += 4;
    var fcnt = blob2.read_shift(2);
    blob2.l += 6;
    var start_cd = blob2.read_shift(4);
    blob2.l = start_cd;
    for (i2 = 0; i2 < fcnt; ++i2) {
      blob2.l += 20;
      var csz = blob2.read_shift(4);
      var usz = blob2.read_shift(4);
      var namelen = blob2.read_shift(2);
      var efsz = blob2.read_shift(2);
      var fcsz = blob2.read_shift(2);
      blob2.l += 8;
      var offset = blob2.read_shift(4);
      var EF = parse_extra_field(
        /*::(*/
        blob2.slice(blob2.l + namelen, blob2.l + namelen + efsz)
        /*:: :any)*/
      );
      blob2.l += namelen + efsz + fcsz;
      var L = blob2.l;
      blob2.l = offset + 4;
      parse_local_file(blob2, csz, usz, o, EF);
      blob2.l = L;
    }
    return o;
  }
  __name(parse_zip2, "parse_zip");
  function parse_local_file(blob2, csz, usz, o, EF) {
    blob2.l += 2;
    var flags = blob2.read_shift(2);
    var meth = blob2.read_shift(2);
    var date = parse_dos_date(blob2);
    if (flags & 8257) throw new Error("Unsupported ZIP encryption");
    var crc32 = blob2.read_shift(4);
    var _csz = blob2.read_shift(4);
    var _usz = blob2.read_shift(4);
    var namelen = blob2.read_shift(2);
    var efsz = blob2.read_shift(2);
    var name2 = "";
    for (var i2 = 0; i2 < namelen; ++i2) name2 += String.fromCharCode(blob2[blob2.l++]);
    if (efsz) {
      var ef = parse_extra_field(
        /*::(*/
        blob2.slice(blob2.l, blob2.l + efsz)
        /*:: :any)*/
      );
      if ((ef[21589] || {}).mt) date = ef[21589].mt;
      if (((EF || {})[21589] || {}).mt) date = EF[21589].mt;
    }
    blob2.l += efsz;
    var data = blob2.slice(blob2.l, blob2.l + _csz);
    switch (meth) {
      case 8:
        data = _inflateRawSync(blob2, _usz);
        break;
      case 0:
        break;
      // TODO: scan for magic number
      default:
        throw new Error("Unsupported ZIP Compression method " + meth);
    }
    var wrn = false;
    if (flags & 8) {
      crc32 = blob2.read_shift(4);
      if (crc32 == 134695760) {
        crc32 = blob2.read_shift(4);
        wrn = true;
      }
      _csz = blob2.read_shift(4);
      _usz = blob2.read_shift(4);
    }
    if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
    if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
    cfb_add(o, name2, data, { unsafe: true, mt: date });
  }
  __name(parse_local_file, "parse_local_file");
  function write_zip(cfb, options) {
    var _opts = options || {};
    var out = [], cdirs = [];
    var o = new_buf(1);
    var method = _opts.compression ? 8 : 0, flags = 0;
    var desc3 = false;
    if (desc3) flags |= 8;
    var i2 = 0, j = 0;
    var start_cd = 0, fcnt = 0;
    var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    var crcs = [];
    var sz_cd = 0;
    for (i2 = 1; i2 < cfb.FullPaths.length; ++i2) {
      fp = cfb.FullPaths[i2].slice(root.length);
      fi = cfb.FileIndex[i2];
      if (!fi.size || !fi.content || fp == "Sh33tJ5") continue;
      var start = start_cd;
      var namebuf = new_buf(fp.length);
      for (j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 127);
      namebuf = namebuf.slice(0, namebuf.l);
      crcs[fcnt] = CRC32.buf(
        /*::((*/
        fi.content,
        0
      );
      var outbuf = fi.content;
      if (method == 8) outbuf = _deflateRawSync(outbuf);
      o = new_buf(30);
      o.write_shift(4, 67324752);
      o.write_shift(2, 20);
      o.write_shift(2, flags);
      o.write_shift(2, method);
      if (fi.mt) write_dos_date(o, fi.mt);
      else o.write_shift(4, 0);
      o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
      o.write_shift(4, flags & 8 ? 0 : outbuf.length);
      o.write_shift(4, flags & 8 ? 0 : (
        /*::(*/
        fi.content.length
      ));
      o.write_shift(2, namebuf.length);
      o.write_shift(2, 0);
      start_cd += o.length;
      out.push(o);
      start_cd += namebuf.length;
      out.push(namebuf);
      start_cd += outbuf.length;
      out.push(outbuf);
      if (flags & 8) {
        o = new_buf(12);
        o.write_shift(-4, crcs[fcnt]);
        o.write_shift(4, outbuf.length);
        o.write_shift(
          4,
          /*::(*/
          fi.content.length
        );
        start_cd += o.l;
        out.push(o);
      }
      o = new_buf(46);
      o.write_shift(4, 33639248);
      o.write_shift(2, 0);
      o.write_shift(2, 20);
      o.write_shift(2, flags);
      o.write_shift(2, method);
      o.write_shift(4, 0);
      o.write_shift(-4, crcs[fcnt]);
      o.write_shift(4, outbuf.length);
      o.write_shift(
        4,
        /*::(*/
        fi.content.length
      );
      o.write_shift(2, namebuf.length);
      o.write_shift(2, 0);
      o.write_shift(2, 0);
      o.write_shift(2, 0);
      o.write_shift(2, 0);
      o.write_shift(4, 0);
      o.write_shift(4, start);
      sz_cd += o.l;
      cdirs.push(o);
      sz_cd += namebuf.length;
      cdirs.push(namebuf);
      ++fcnt;
    }
    o = new_buf(22);
    o.write_shift(4, 101010256);
    o.write_shift(2, 0);
    o.write_shift(2, 0);
    o.write_shift(2, fcnt);
    o.write_shift(2, fcnt);
    o.write_shift(4, sz_cd);
    o.write_shift(4, start_cd);
    o.write_shift(2, 0);
    return bconcat([bconcat(out), bconcat(cdirs), o]);
  }
  __name(write_zip, "write_zip");
  var ContentTypeMap = {
    "htm": "text/html",
    "xml": "text/xml",
    "gif": "image/gif",
    "jpg": "image/jpeg",
    "png": "image/png",
    "mso": "application/x-mso",
    "thmx": "application/vnd.ms-officetheme",
    "sh33tj5": "application/octet-stream"
  };
  function get_content_type(fi, fp) {
    if (fi.ctype) return fi.ctype;
    var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
    if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
    if (fp) {
      m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
      if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
    }
    return "application/octet-stream";
  }
  __name(get_content_type, "get_content_type");
  function write_base64_76(bstr) {
    var data = Base64_encode(bstr);
    var o = [];
    for (var i2 = 0; i2 < data.length; i2 += 76) o.push(data.slice(i2, i2 + 76));
    return o.join("\r\n") + "\r\n";
  }
  __name(write_base64_76, "write_base64_76");
  function write_quoted_printable(text2) {
    var encoded = text2.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
      var w = c.charCodeAt(0).toString(16).toUpperCase();
      return "=" + (w.length == 1 ? "0" + w : w);
    });
    encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
    if (encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
    encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
    var o = [], split = encoded.split("\r\n");
    for (var si = 0; si < split.length; ++si) {
      var str = split[si];
      if (str.length == 0) {
        o.push("");
        continue;
      }
      for (var i2 = 0; i2 < str.length; ) {
        var end = 76;
        var tmp = str.slice(i2, i2 + end);
        if (tmp.charAt(end - 1) == "=") end--;
        else if (tmp.charAt(end - 2) == "=") end -= 2;
        else if (tmp.charAt(end - 3) == "=") end -= 3;
        tmp = str.slice(i2, i2 + end);
        i2 += end;
        if (i2 < str.length) tmp += "=";
        o.push(tmp);
      }
    }
    return o.join("\r\n");
  }
  __name(write_quoted_printable, "write_quoted_printable");
  function parse_quoted_printable(data) {
    var o = [];
    for (var di = 0; di < data.length; ++di) {
      var line = data[di];
      while (di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
      o.push(line);
    }
    for (var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
      return String.fromCharCode(parseInt($$.slice(1), 16));
    });
    return s2a(o.join("\r\n"));
  }
  __name(parse_quoted_printable, "parse_quoted_printable");
  function parse_mime(cfb, data, root) {
    var fname = "", cte = "", ctype = "", fdata;
    var di = 0;
    for (; di < 10; ++di) {
      var line = data[di];
      if (!line || line.match(/^\s*$/)) break;
      var m = line.match(/^(.*?):\s*([^\s].*)$/);
      if (m) switch (m[1].toLowerCase()) {
        case "content-location":
          fname = m[2].trim();
          break;
        case "content-type":
          ctype = m[2].trim();
          break;
        case "content-transfer-encoding":
          cte = m[2].trim();
          break;
      }
    }
    ++di;
    switch (cte.toLowerCase()) {
      case "base64":
        fdata = s2a(Base64_decode(data.slice(di).join("")));
        break;
      case "quoted-printable":
        fdata = parse_quoted_printable(data.slice(di));
        break;
      default:
        throw new Error("Unsupported Content-Transfer-Encoding " + cte);
    }
    var file = cfb_add(cfb, fname.slice(root.length), fdata, { unsafe: true });
    if (ctype) file.ctype = ctype;
  }
  __name(parse_mime, "parse_mime");
  function parse_mad(file, options) {
    if (a2s2(file.slice(0, 13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
    var root = options && options.root || "";
    var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s2(file)).split("\r\n");
    var di = 0, row = "";
    for (di = 0; di < data.length; ++di) {
      row = data[di];
      if (!/^Content-Location:/i.test(row)) continue;
      row = row.slice(row.indexOf("file"));
      if (!root) root = row.slice(0, row.lastIndexOf("/") + 1);
      if (row.slice(0, root.length) == root) continue;
      while (root.length > 0) {
        root = root.slice(0, root.length - 1);
        root = root.slice(0, root.lastIndexOf("/") + 1);
        if (row.slice(0, root.length) == root) break;
      }
    }
    var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
    if (!mboundary) throw new Error("MAD cannot find boundary");
    var boundary = "--" + (mboundary[1] || "");
    var FileIndex = [], FullPaths = [];
    var o = {
      FileIndex,
      FullPaths
    };
    init_cfb(o);
    var start_di, fcnt = 0;
    for (di = 0; di < data.length; ++di) {
      var line = data[di];
      if (line !== boundary && line !== boundary + "--") continue;
      if (fcnt++) parse_mime(o, data.slice(start_di, di), root);
      start_di = di;
    }
    return o;
  }
  __name(parse_mad, "parse_mad");
  function write_mad(cfb, options) {
    var opts = options || {};
    var boundary = opts.boundary || "SheetJS";
    boundary = "------=" + boundary;
    var out = [
      "MIME-Version: 1.0",
      'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
      "",
      "",
      ""
    ];
    var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    for (var i2 = 1; i2 < cfb.FullPaths.length; ++i2) {
      fp = cfb.FullPaths[i2].slice(root.length);
      fi = cfb.FileIndex[i2];
      if (!fi.size || !fi.content || fp == "Sh33tJ5") continue;
      fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
        return "_x" + c.charCodeAt(0).toString(16) + "_";
      }).replace(/[\u0080-\uFFFF]/g, function(u) {
        return "_u" + u.charCodeAt(0).toString(16) + "_";
      });
      var ca = fi.content;
      var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s2(ca);
      var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
      for (var csl = 0; csl <= L; ++csl) if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128) ++dispcnt;
      var qp = dispcnt >= L * 4 / 5;
      out.push(boundary);
      out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
      out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
      out.push("Content-Type: " + get_content_type(fi, fp));
      out.push("");
      out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
    }
    out.push(boundary + "--\r\n");
    return out.join("\r\n");
  }
  __name(write_mad, "write_mad");
  function cfb_new(opts) {
    var o = {};
    init_cfb(o, opts);
    return o;
  }
  __name(cfb_new, "cfb_new");
  function cfb_add(cfb, name2, content, opts) {
    var unsafe = opts && opts.unsafe;
    if (!unsafe) init_cfb(cfb);
    var file = !unsafe && CFB.find(cfb, name2);
    if (!file) {
      var fpath = cfb.FullPaths[0];
      if (name2.slice(0, fpath.length) == fpath) fpath = name2;
      else {
        if (fpath.slice(-1) != "/") fpath += "/";
        fpath = (fpath + name2).replace("//", "/");
      }
      file = { name: filename(name2), type: 2 };
      cfb.FileIndex.push(file);
      cfb.FullPaths.push(fpath);
      if (!unsafe) CFB.utils.cfb_gc(cfb);
    }
    file.content = content;
    file.size = content ? content.length : 0;
    if (opts) {
      if (opts.CLSID) file.clsid = opts.CLSID;
      if (opts.mt) file.mt = opts.mt;
      if (opts.ct) file.ct = opts.ct;
    }
    return file;
  }
  __name(cfb_add, "cfb_add");
  function cfb_del(cfb, name2) {
    init_cfb(cfb);
    var file = CFB.find(cfb, name2);
    if (file) {
      for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
        cfb.FileIndex.splice(j, 1);
        cfb.FullPaths.splice(j, 1);
        return true;
      }
    }
    return false;
  }
  __name(cfb_del, "cfb_del");
  function cfb_mov(cfb, old_name, new_name) {
    init_cfb(cfb);
    var file = CFB.find(cfb, old_name);
    if (file) {
      for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {
        cfb.FileIndex[j].name = filename(new_name);
        cfb.FullPaths[j] = new_name;
        return true;
      }
    }
    return false;
  }
  __name(cfb_mov, "cfb_mov");
  function cfb_gc(cfb) {
    rebuild_cfb(cfb, true);
  }
  __name(cfb_gc, "cfb_gc");
  exports2.find = find;
  exports2.read = read;
  exports2.parse = parse2;
  exports2.write = write;
  exports2.writeFile = write_file;
  exports2.utils = {
    cfb_new,
    cfb_add,
    cfb_del,
    cfb_mov,
    cfb_gc,
    ReadShift,
    CheckField,
    prep_blob,
    bconcat,
    use_zlib,
    _deflateRaw: _deflate,
    _inflateRaw: _inflate,
    consts
  };
  return exports2;
}, "_CFB"))();
var _fs = void 0;
function read_binary(path3) {
  if (typeof _fs !== "undefined") return _fs.readFileSync(path3);
  if (typeof Deno !== "undefined") return Deno.readFileSync(path3);
  if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
    var infile = File(path3);
    infile.open("r");
    infile.encoding = "binary";
    var data = infile.read();
    infile.close();
    return data;
  } catch (e) {
    if (!e.message || !e.message.match(/onstruct/)) throw e;
  }
  throw new Error("Cannot access file " + path3);
}
__name(read_binary, "read_binary");
function keys(o) {
  var ks = Object.keys(o), o2 = [];
  for (var i = 0; i < ks.length; ++i) if (Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
  return o2;
}
__name(keys, "keys");
function evert(obj) {
  var o = [], K = keys(obj);
  for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
  return o;
}
__name(evert, "evert");
var basedate = /* @__PURE__ */ new Date(1899, 11, 30, 0, 0, 0);
function datenum(v, date1904) {
  var epoch = /* @__PURE__ */ v.getTime();
  if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1e3;
  var dnthresh2 = /* @__PURE__ */ basedate.getTime() + (/* @__PURE__ */ v.getTimezoneOffset() - /* @__PURE__ */ basedate.getTimezoneOffset()) * 6e4;
  return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
}
__name(datenum, "datenum");
var refdate = /* @__PURE__ */ new Date();
var dnthresh = /* @__PURE__ */ basedate.getTime() + (/* @__PURE__ */ refdate.getTimezoneOffset() - /* @__PURE__ */ basedate.getTimezoneOffset()) * 6e4;
var refoffset = /* @__PURE__ */ refdate.getTimezoneOffset();
function numdate(v) {
  var out = /* @__PURE__ */ new Date();
  out.setTime(v * 24 * 60 * 60 * 1e3 + dnthresh);
  if (out.getTimezoneOffset() !== refoffset) {
    out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
  }
  return out;
}
__name(numdate, "numdate");
function parse_isodur(s) {
  var sec = 0, mt = 0, time2 = false;
  var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
  if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
  for (var i = 1; i != m.length; ++i) {
    if (!m[i]) continue;
    mt = 1;
    if (i > 3) time2 = true;
    switch (m[i].slice(m[i].length - 1)) {
      case "Y":
        throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));
      case "D":
        mt *= 24;
      /* falls through */
      case "H":
        mt *= 60;
      /* falls through */
      case "M":
        if (!time2) throw new Error("Unsupported ISO Duration Field: M");
        else mt *= 60;
      /* falls through */
      case "S":
        break;
    }
    sec += mt * parseInt(m[i], 10);
  }
  return sec;
}
__name(parse_isodur, "parse_isodur");
var good_pd_date_1 = /* @__PURE__ */ new Date("2017-02-19T19:06:09.000Z");
var good_pd_date = /* @__PURE__ */ isNaN(/* @__PURE__ */ good_pd_date_1.getFullYear()) ? /* @__PURE__ */ new Date("2/19/17") : good_pd_date_1;
var good_pd = /* @__PURE__ */ good_pd_date.getFullYear() == 2017;
function parseDate(str, fixdate) {
  var d = new Date(str);
  if (good_pd) {
    if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1e3);
    else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1e3);
    return d;
  }
  if (str instanceof Date) return str;
  if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
    var s = d.getFullYear();
    if (str.indexOf("" + s) > -1) return d;
    d.setFullYear(d.getFullYear() + 100);
    return d;
  }
  var n = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
  var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
  if (str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
  return out;
}
__name(parseDate, "parseDate");
function cc2str(arr, debomit) {
  if (has_buf && Buffer.isBuffer(arr)) {
    if (debomit) {
      if (arr[0] == 255 && arr[1] == 254) return utf8write(arr.slice(2).toString("utf16le"));
      if (arr[1] == 254 && arr[2] == 255) return utf8write(utf16beread(arr.slice(2).toString("binary")));
    }
    return arr.toString("binary");
  }
  if (typeof TextDecoder !== "undefined") try {
    if (debomit) {
      if (arr[0] == 255 && arr[1] == 254) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
      if (arr[0] == 254 && arr[1] == 255) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
    }
    var rev = {
      "\u20AC": "\x80",
      "\u201A": "\x82",
      "\u0192": "\x83",
      "\u201E": "\x84",
      "\u2026": "\x85",
      "\u2020": "\x86",
      "\u2021": "\x87",
      "\u02C6": "\x88",
      "\u2030": "\x89",
      "\u0160": "\x8A",
      "\u2039": "\x8B",
      "\u0152": "\x8C",
      "\u017D": "\x8E",
      "\u2018": "\x91",
      "\u2019": "\x92",
      "\u201C": "\x93",
      "\u201D": "\x94",
      "\u2022": "\x95",
      "\u2013": "\x96",
      "\u2014": "\x97",
      "\u02DC": "\x98",
      "\u2122": "\x99",
      "\u0161": "\x9A",
      "\u203A": "\x9B",
      "\u0153": "\x9C",
      "\u017E": "\x9E",
      "\u0178": "\x9F"
    };
    if (Array.isArray(arr)) arr = new Uint8Array(arr);
    return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) {
      return rev[c] || c;
    });
  } catch (e) {
  }
  var o = [];
  for (var i = 0; i != arr.length; ++i) o.push(String.fromCharCode(arr[i]));
  return o.join("");
}
__name(cc2str, "cc2str");
function dup(o) {
  if (typeof JSON != "undefined" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
  if (typeof o != "object" || o == null) return o;
  if (o instanceof Date) return new Date(o.getTime());
  var out = {};
  for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
  return out;
}
__name(dup, "dup");
function fill(c, l) {
  var o = "";
  while (o.length < l) o += c;
  return o;
}
__name(fill, "fill");
function fuzzynum(s) {
  var v = Number(s);
  if (!isNaN(v)) return isFinite(v) ? v : NaN;
  if (!/\d/.test(s)) return v;
  var wt = 1;
  var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
    wt *= 100;
    return "";
  });
  if (!isNaN(v = Number(ss))) return v / wt;
  ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
    wt = -wt;
    return $1;
  });
  if (!isNaN(v = Number(ss))) return v / wt;
  return v;
}
__name(fuzzynum, "fuzzynum");
var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
function fuzzydate(s) {
  var o = new Date(s), n = /* @__PURE__ */ new Date(NaN);
  var y = o.getYear(), m = o.getMonth(), d = o.getDate();
  if (isNaN(d)) return n;
  var lower = s.toLowerCase();
  if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
    lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
    if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
  } else if (lower.match(/[a-z]/)) return n;
  if (y < 0 || y > 8099) return n;
  if ((m > 0 || d > 1) && y != 101) return o;
  if (s.match(/[^-0-9:,\/\\]/)) return n;
  return o;
}
__name(fuzzydate, "fuzzydate");
var split_regex = /* @__PURE__ */ function() {
  var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
  return /* @__PURE__ */ __name(function split_regex2(str, re, def) {
    if (safe_split_regex || typeof re == "string") return str.split(re);
    var p = str.split(re), o = [p[0]];
    for (var i = 1; i < p.length; ++i) {
      o.push(def);
      o.push(p[i]);
    }
    return o;
  }, "split_regex");
}();
function getdatastr(data) {
  if (!data) return null;
  if (data.content && data.type) return cc2str(data.content, true);
  if (data.data) return debom(data.data);
  if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary"));
  if (data.asBinary) return debom(data.asBinary());
  if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
  return null;
}
__name(getdatastr, "getdatastr");
function getdatabin(data) {
  if (!data) return null;
  if (data.data) return char_codes(data.data);
  if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();
  if (data._data && data._data.getContent) {
    var o = data._data.getContent();
    if (typeof o == "string") return char_codes(o);
    return Array.prototype.slice.call(o);
  }
  if (data.content && data.type) return data.content;
  return null;
}
__name(getdatabin, "getdatabin");
function getdata(data) {
  return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
}
__name(getdata, "getdata");
function safegetzipfile(zip, file) {
  var k = zip.FullPaths || keys(zip.files);
  var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
  for (var i = 0; i < k.length; ++i) {
    var n = k[i].replace(/^Root Entry[\/]/, "").toLowerCase();
    if (f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
  }
  return null;
}
__name(safegetzipfile, "safegetzipfile");
function getzipfile(zip, file) {
  var o = safegetzipfile(zip, file);
  if (o == null) throw new Error("Cannot find file " + file + " in zip");
  return o;
}
__name(getzipfile, "getzipfile");
function getzipdata(zip, file, safe) {
  if (!safe) return getdata(getzipfile(zip, file));
  if (!file) return null;
  try {
    return getzipdata(zip, file);
  } catch (e) {
    return null;
  }
}
__name(getzipdata, "getzipdata");
function getzipstr(zip, file, safe) {
  if (!safe) return getdatastr(getzipfile(zip, file));
  if (!file) return null;
  try {
    return getzipstr(zip, file);
  } catch (e) {
    return null;
  }
}
__name(getzipstr, "getzipstr");
function getzipbin(zip, file, safe) {
  if (!safe) return getdatabin(getzipfile(zip, file));
  if (!file) return null;
  try {
    return getzipbin(zip, file);
  } catch (e) {
    return null;
  }
}
__name(getzipbin, "getzipbin");
function zipentries(zip) {
  var k = zip.FullPaths || keys(zip.files), o = [];
  for (var i = 0; i < k.length; ++i) if (k[i].slice(-1) != "/") o.push(k[i].replace(/^Root Entry[\/]/, ""));
  return o.sort();
}
__name(zipentries, "zipentries");
function zip_add_file(zip, path3, content) {
  if (zip.FullPaths) {
    if (typeof content == "string") {
      var res;
      if (has_buf) res = Buffer_from(content);
      else res = utf8decode(content);
      return CFB.utils.cfb_add(zip, path3, res);
    }
    CFB.utils.cfb_add(zip, path3, content);
  } else zip.file(path3, content);
}
__name(zip_add_file, "zip_add_file");
function zip_read(d, o) {
  switch (o.type) {
    case "base64":
      return CFB.read(d, { type: "base64" });
    case "binary":
      return CFB.read(d, { type: "binary" });
    case "buffer":
    case "array":
      return CFB.read(d, { type: "buffer" });
  }
  throw new Error("Unrecognized type " + o.type);
}
__name(zip_read, "zip_read");
function resolve_path(path3, base) {
  if (path3.charAt(0) == "/") return path3.slice(1);
  var result = base.split("/");
  if (base.slice(-1) != "/") result.pop();
  var target = path3.split("/");
  while (target.length !== 0) {
    var step = target.shift();
    if (step === "..") result.pop();
    else if (step !== ".") result.push(step);
  }
  return result.join("/");
}
__name(resolve_path, "resolve_path");
var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg;
var tagregex2 = /<[^>]*>/g;
var tagregex = /* @__PURE__ */ XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
var nsregex = /<\w*:/;
var nsregex2 = /<(\/?)\w+:/;
function parsexmltag(tag, skip_root, skip_LC) {
  var z = {};
  var eq2 = 0, c = 0;
  for (; eq2 !== tag.length; ++eq2) if ((c = tag.charCodeAt(eq2)) === 32 || c === 10 || c === 13) break;
  if (!skip_root) z[0] = tag.slice(0, eq2);
  if (eq2 === tag.length) return z;
  var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1;
  if (m) for (i = 0; i != m.length; ++i) {
    cc = m[i];
    for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61) break;
    q = cc.slice(0, c).trim();
    while (cc.charCodeAt(c + 1) == 32) ++c;
    quot = (eq2 = cc.charCodeAt(c + 1)) == 34 || eq2 == 39 ? 1 : 0;
    v = cc.slice(c + 1 + quot, cc.length - quot);
    for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58) break;
    if (j === q.length) {
      if (q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_"));
      z[q] = v;
      if (!skip_LC) z[q.toLowerCase()] = v;
    } else {
      var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
      if (z[k] && q.slice(j - 3, j) == "ext") continue;
      z[k] = v;
      if (!skip_LC) z[k.toLowerCase()] = v;
    }
  }
  return z;
}
__name(parsexmltag, "parsexmltag");
function strip_ns(x) {
  return x.replace(nsregex2, "<$1");
}
__name(strip_ns, "strip_ns");
var encodings = {
  "&quot;": '"',
  "&apos;": "'",
  "&gt;": ">",
  "&lt;": "<",
  "&amp;": "&"
};
var rencoding = /* @__PURE__ */ evert(encodings);
var unescapexml = /* @__PURE__ */ function() {
  var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
  return /* @__PURE__ */ __name(function unescapexml2(text2) {
    var s = text2 + "", i = s.indexOf("<![CDATA[");
    if (i == -1) return s.replace(encregex, function($$, $1) {
      return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
    }).replace(coderegex, function(m, c) {
      return String.fromCharCode(parseInt(c, 16));
    });
    var j = s.indexOf("]]>");
    return unescapexml2(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml2(s.slice(j + 3));
  }, "unescapexml");
}();
var decregex = /[&<>'"]/g;
var htmlcharegex = /[\u0000-\u001f]/g;
function escapehtml(text2) {
  var s = text2 + "";
  return s.replace(decregex, function(y) {
    return rencoding[y];
  }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s2) {
    return "&#x" + ("000" + s2.charCodeAt(0).toString(16)).slice(-4) + ";";
  });
}
__name(escapehtml, "escapehtml");
var xlml_fixstr = /* @__PURE__ */ function() {
  var entregex = /&#(\d+);/g;
  function entrepl($$, $1) {
    return String.fromCharCode(parseInt($1, 10));
  }
  __name(entrepl, "entrepl");
  return /* @__PURE__ */ __name(function xlml_fixstr2(str) {
    return str.replace(entregex, entrepl);
  }, "xlml_fixstr");
}();
function parsexmlbool(value) {
  switch (value) {
    case 1:
    case true:
    case "1":
    case "true":
    case "TRUE":
      return true;
    /* case '0': case 'false': case 'FALSE':*/
    default:
      return false;
  }
}
__name(parsexmlbool, "parsexmlbool");
function utf8reada(orig) {
  var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
  while (i < orig.length) {
    c = orig.charCodeAt(i++);
    if (c < 128) {
      out += String.fromCharCode(c);
      continue;
    }
    d = orig.charCodeAt(i++);
    if (c > 191 && c < 224) {
      f = (c & 31) << 6;
      f |= d & 63;
      out += String.fromCharCode(f);
      continue;
    }
    e = orig.charCodeAt(i++);
    if (c < 240) {
      out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
      continue;
    }
    f = orig.charCodeAt(i++);
    w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
    out += String.fromCharCode(55296 + (w >>> 10 & 1023));
    out += String.fromCharCode(56320 + (w & 1023));
  }
  return out;
}
__name(utf8reada, "utf8reada");
function utf8readb(data) {
  var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;
  for (i = 0; i < data.length; i += j) {
    j = 1;
    if ((c = data.charCodeAt(i)) < 128) w = c;
    else if (c < 224) {
      w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
      j = 2;
    } else if (c < 240) {
      w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
      j = 3;
    } else {
      j = 4;
      w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
      w -= 65536;
      ww = 55296 + (w >>> 10 & 1023);
      w = 56320 + (w & 1023);
    }
    if (ww !== 0) {
      out[k++] = ww & 255;
      out[k++] = ww >>> 8;
      ww = 0;
    }
    out[k++] = w % 256;
    out[k++] = w >>> 8;
  }
  return out.slice(0, k).toString("ucs2");
}
__name(utf8readb, "utf8readb");
function utf8readc(data) {
  return Buffer_from(data, "binary").toString("utf8");
}
__name(utf8readc, "utf8readc");
var utf8corpus = "foo bar baz\xE2\x98\x83\xF0\x9F\x8D\xA3";
var utf8read = has_buf && (/* @__PURE__ */ utf8readc(utf8corpus) == /* @__PURE__ */ utf8reada(utf8corpus) && utf8readc || /* @__PURE__ */ utf8readb(utf8corpus) == /* @__PURE__ */ utf8reada(utf8corpus) && utf8readb) || utf8reada;
var utf8write = has_buf ? function(data) {
  return Buffer_from(data, "utf8").toString("binary");
} : function(orig) {
  var out = [], i = 0, c = 0, d = 0;
  while (i < orig.length) {
    c = orig.charCodeAt(i++);
    switch (true) {
      case c < 128:
        out.push(String.fromCharCode(c));
        break;
      case c < 2048:
        out.push(String.fromCharCode(192 + (c >> 6)));
        out.push(String.fromCharCode(128 + (c & 63)));
        break;
      case (c >= 55296 && c < 57344):
        c -= 55296;
        d = orig.charCodeAt(i++) - 56320 + (c << 10);
        out.push(String.fromCharCode(240 + (d >> 18 & 7)));
        out.push(String.fromCharCode(144 + (d >> 12 & 63)));
        out.push(String.fromCharCode(128 + (d >> 6 & 63)));
        out.push(String.fromCharCode(128 + (d & 63)));
        break;
      default:
        out.push(String.fromCharCode(224 + (c >> 12)));
        out.push(String.fromCharCode(128 + (c >> 6 & 63)));
        out.push(String.fromCharCode(128 + (c & 63)));
    }
  }
  return out.join("");
};
var matchtag = /* @__PURE__ */ function() {
  var mtcache = {};
  return /* @__PURE__ */ __name(function matchtag2(f, g) {
    var t = f + "|" + (g || "");
    if (mtcache[t]) return mtcache[t];
    return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "");
  }, "matchtag");
}();
var htmldecode = /* @__PURE__ */ function() {
  var entities = [
    ["nbsp", " "],
    ["middot", "\xB7"],
    ["quot", '"'],
    ["apos", "'"],
    ["gt", ">"],
    ["lt", "<"],
    ["amp", "&"]
  ].map(function(x) {
    return [new RegExp("&" + x[0] + ";", "ig"), x[1]];
  });
  return /* @__PURE__ */ __name(function htmldecode2(str) {
    var o = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
    for (var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
    return o;
  }, "htmldecode");
}();
var vtregex = /* @__PURE__ */ function() {
  var vt_cache = {};
  return /* @__PURE__ */ __name(function vt_regex(bt) {
    if (vt_cache[bt] !== void 0) return vt_cache[bt];
    return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
  }, "vt_regex");
}();
var vtvregex = /<\/?(?:vt:)?variant>/g;
var vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
function parseVector(data, opts) {
  var h = parsexmltag(data);
  var matches = data.match(vtregex(h.baseType)) || [];
  var res = [];
  if (matches.length != h.size) {
    if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
    return res;
  }
  matches.forEach(function(x) {
    var v = x.replace(vtvregex, "").match(vtmregex);
    if (v) res.push({ v: utf8read(v[2]), t: v[1] });
  });
  return res;
}
__name(parseVector, "parseVector");
var wtregex = /(^\s|\s$|\n)/;
function wxt_helper(h) {
  return keys(h).map(function(k) {
    return " " + k + '="' + h[k] + '"';
  }).join("");
}
__name(wxt_helper, "wxt_helper");
function writextag(f, g, h) {
  return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">";
}
__name(writextag, "writextag");
function xlml_normalize(d) {
  if (has_buf && /*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/
  Buffer.isBuffer(d)) return d.toString("utf8");
  if (typeof d === "string") return d;
  if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
  throw new Error("Bad input format: expected Buffer or string");
}
__name(xlml_normalize, "xlml_normalize");
var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
var XMLNS = {
  CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
  CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
  EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
  CT: "http://schemas.openxmlformats.org/package/2006/content-types",
  RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
  TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
  "dc": "http://purl.org/dc/elements/1.1/",
  "dcterms": "http://purl.org/dc/terms/",
  "dcmitype": "http://purl.org/dc/dcmitype/",
  "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
  "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
  "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
  "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
  "xsi": "http://www.w3.org/2001/XMLSchema-instance",
  "xsd": "http://www.w3.org/2001/XMLSchema"
};
var XMLNS_main = [
  "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
  "http://purl.oclc.org/ooxml/spreadsheetml/main",
  "http://schemas.microsoft.com/office/excel/2006/main",
  "http://schemas.microsoft.com/office/excel/2006/2"
];
function read_double_le(b, idx) {
  var s = 1 - 2 * (b[idx + 7] >>> 7);
  var e = ((b[idx + 7] & 127) << 4) + (b[idx + 6] >>> 4 & 15);
  var m = b[idx + 6] & 15;
  for (var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
  if (e == 2047) return m == 0 ? s * Infinity : NaN;
  if (e == 0) e = -1022;
  else {
    e -= 1023;
    m += Math.pow(2, 52);
  }
  return s * Math.pow(2, e - 52) * m;
}
__name(read_double_le, "read_double_le");
function write_double_le(b, v, idx) {
  var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
  var av = bs ? -v : v;
  if (!isFinite(av)) {
    e = 2047;
    m = isNaN(v) ? 26985 : 0;
  } else if (av == 0) e = m = 0;
  else {
    e = Math.floor(Math.log(av) / Math.LN2);
    m = av * Math.pow(2, 52 - e);
    if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {
      e = -1022;
    } else {
      m -= Math.pow(2, 52);
      e += 1023;
    }
  }
  for (var i = 0; i <= 5; ++i, m /= 256) b[idx + i] = m & 255;
  b[idx + 6] = (e & 15) << 4 | m & 15;
  b[idx + 7] = e >> 4 | bs;
}
__name(write_double_le, "write_double_le");
var ___toBuffer = /* @__PURE__ */ __name(function(bufs) {
  var x = [], w = 10240;
  for (var i = 0; i < bufs[0].length; ++i) if (bufs[0][i]) for (var j = 0, L = bufs[0][i].length; j < L; j += w) x.push.apply(x, bufs[0][i].slice(j, j + w));
  return x;
}, "___toBuffer");
var __toBuffer = has_buf ? function(bufs) {
  return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {
    return Buffer.isBuffer(x) ? x : Buffer_from(x);
  })) : ___toBuffer(bufs);
} : ___toBuffer;
var ___utf16le = /* @__PURE__ */ __name(function(b, s, e) {
  var ss = [];
  for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i)));
  return ss.join("").replace(chr0, "");
}, "___utf16le");
var __utf16le = has_buf ? function(b, s, e) {
  if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);
  return b.toString("utf16le", s, e).replace(chr0, "");
} : ___utf16le;
var ___hexlify = /* @__PURE__ */ __name(function(b, s, l) {
  var ss = [];
  for (var i = s; i < s + l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2));
  return ss.join("");
}, "___hexlify");
var __hexlify = has_buf ? function(b, s, l) {
  return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
} : ___hexlify;
var ___utf8 = /* @__PURE__ */ __name(function(b, s, e) {
  var ss = [];
  for (var i = s; i < e; i++) ss.push(String.fromCharCode(__readUInt8(b, i)));
  return ss.join("");
}, "___utf8");
var __utf8 = has_buf ? /* @__PURE__ */ __name(function utf8_b(b, s, e) {
  return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
}, "utf8_b") : ___utf8;
var ___lpstr = /* @__PURE__ */ __name(function(b, i) {
  var len = __readUInt32LE(b, i);
  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
}, "___lpstr");
var __lpstr = ___lpstr;
var ___cpstr = /* @__PURE__ */ __name(function(b, i) {
  var len = __readUInt32LE(b, i);
  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
}, "___cpstr");
var __cpstr = ___cpstr;
var ___lpwstr = /* @__PURE__ */ __name(function(b, i) {
  var len = 2 * __readUInt32LE(b, i);
  return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
}, "___lpwstr");
var __lpwstr = ___lpwstr;
var ___lpp4 = /* @__PURE__ */ __name(function lpp4_(b, i) {
  var len = __readUInt32LE(b, i);
  return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
}, "lpp4_");
var __lpp4 = ___lpp4;
var ___8lpp4 = /* @__PURE__ */ __name(function(b, i) {
  var len = __readUInt32LE(b, i);
  return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
}, "___8lpp4");
var __8lpp4 = ___8lpp4;
var ___double = /* @__PURE__ */ __name(function(b, idx) {
  return read_double_le(b, idx);
}, "___double");
var __double = ___double;
var is_buf = /* @__PURE__ */ __name(function is_buf_a(a) {
  return Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
}, "is_buf_a");
if (has_buf) {
  __lpstr = /* @__PURE__ */ __name(function lpstr_b(b, i) {
    if (!Buffer.isBuffer(b)) return ___lpstr(b, i);
    var len = b.readUInt32LE(i);
    return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
  }, "lpstr_b");
  __cpstr = /* @__PURE__ */ __name(function cpstr_b(b, i) {
    if (!Buffer.isBuffer(b)) return ___cpstr(b, i);
    var len = b.readUInt32LE(i);
    return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
  }, "cpstr_b");
  __lpwstr = /* @__PURE__ */ __name(function lpwstr_b(b, i) {
    if (!Buffer.isBuffer(b)) return ___lpwstr(b, i);
    var len = 2 * b.readUInt32LE(i);
    return b.toString("utf16le", i + 4, i + 4 + len - 1);
  }, "lpwstr_b");
  __lpp4 = /* @__PURE__ */ __name(function lpp4_b(b, i) {
    if (!Buffer.isBuffer(b)) return ___lpp4(b, i);
    var len = b.readUInt32LE(i);
    return b.toString("utf16le", i + 4, i + 4 + len);
  }, "lpp4_b");
  __8lpp4 = /* @__PURE__ */ __name(function lpp4_8b(b, i) {
    if (!Buffer.isBuffer(b)) return ___8lpp4(b, i);
    var len = b.readUInt32LE(i);
    return b.toString("utf8", i + 4, i + 4 + len);
  }, "lpp4_8b");
  __double = /* @__PURE__ */ __name(function double_(b, i) {
    if (Buffer.isBuffer(b)) return b.readDoubleLE(i);
    return ___double(b, i);
  }, "double_");
  is_buf = /* @__PURE__ */ __name(function is_buf_b(a) {
    return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
  }, "is_buf_b");
}
function cpdoit() {
  __utf16le = /* @__PURE__ */ __name(function(b, s, e) {
    return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
  }, "__utf16le");
  __utf8 = /* @__PURE__ */ __name(function(b, s, e) {
    return $cptable.utils.decode(65001, b.slice(s, e));
  }, "__utf8");
  __lpstr = /* @__PURE__ */ __name(function(b, i) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
  }, "__lpstr");
  __cpstr = /* @__PURE__ */ __name(function(b, i) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
  }, "__cpstr");
  __lpwstr = /* @__PURE__ */ __name(function(b, i) {
    var len = 2 * __readUInt32LE(b, i);
    return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
  }, "__lpwstr");
  __lpp4 = /* @__PURE__ */ __name(function(b, i) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
  }, "__lpp4");
  __8lpp4 = /* @__PURE__ */ __name(function(b, i) {
    var len = __readUInt32LE(b, i);
    return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
  }, "__8lpp4");
}
__name(cpdoit, "cpdoit");
if (typeof $cptable !== "undefined") cpdoit();
var __readUInt8 = /* @__PURE__ */ __name(function(b, idx) {
  return b[idx];
}, "__readUInt8");
var __readUInt16LE = /* @__PURE__ */ __name(function(b, idx) {
  return b[idx + 1] * (1 << 8) + b[idx];
}, "__readUInt16LE");
var __readInt16LE = /* @__PURE__ */ __name(function(b, idx) {
  var u = b[idx + 1] * (1 << 8) + b[idx];
  return u < 32768 ? u : (65535 - u + 1) * -1;
}, "__readInt16LE");
var __readUInt32LE = /* @__PURE__ */ __name(function(b, idx) {
  return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
}, "__readUInt32LE");
var __readInt32LE = /* @__PURE__ */ __name(function(b, idx) {
  return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
}, "__readInt32LE");
var __readInt32BE = /* @__PURE__ */ __name(function(b, idx) {
  return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
}, "__readInt32BE");
function ReadShift(size, t) {
  var o = "", oI, oR, oo = [], w, vv, i, loc;
  switch (t) {
    case "dbcs":
      loc = this.l;
      if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
      else for (i = 0; i < size; ++i) {
        o += String.fromCharCode(__readUInt16LE(this, loc));
        loc += 2;
      }
      size *= 2;
      break;
    case "utf8":
      o = __utf8(this, this.l, this.l + size);
      break;
    case "utf16le":
      size *= 2;
      o = __utf16le(this, this.l, this.l + size);
      break;
    case "wstr":
      if (typeof $cptable !== "undefined") o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
      else return ReadShift.call(this, size, "dbcs");
      size = 2 * size;
      break;
    /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
    case "lpstr-ansi":
      o = __lpstr(this, this.l);
      size = 4 + __readUInt32LE(this, this.l);
      break;
    case "lpstr-cp":
      o = __cpstr(this, this.l);
      size = 4 + __readUInt32LE(this, this.l);
      break;
    /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
    case "lpwstr":
      o = __lpwstr(this, this.l);
      size = 4 + 2 * __readUInt32LE(this, this.l);
      break;
    /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
    case "lpp4":
      size = 4 + __readUInt32LE(this, this.l);
      o = __lpp4(this, this.l);
      if (size & 2) size += 2;
      break;
    /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
    case "8lpp4":
      size = 4 + __readUInt32LE(this, this.l);
      o = __8lpp4(this, this.l);
      if (size & 3) size += 4 - (size & 3);
      break;
    case "cstr":
      size = 0;
      o = "";
      while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w));
      o = oo.join("");
      break;
    case "_wstr":
      size = 0;
      o = "";
      while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
        oo.push(_getchar(w));
        size += 2;
      }
      size += 2;
      o = oo.join("");
      break;
    /* sbcs and dbcs support continue records in the SST way TODO codepages */
    case "dbcs-cont":
      o = "";
      loc = this.l;
      for (i = 0; i < size; ++i) {
        if (this.lens && this.lens.indexOf(loc) !== -1) {
          w = __readUInt8(this, loc);
          this.l = loc + 1;
          vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
          return oo.join("") + vv;
        }
        oo.push(_getchar(__readUInt16LE(this, loc)));
        loc += 2;
      }
      o = oo.join("");
      size *= 2;
      break;
    case "cpstr":
      if (typeof $cptable !== "undefined") {
        o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
        break;
      }
    /* falls through */
    case "sbcs-cont":
      o = "";
      loc = this.l;
      for (i = 0; i != size; ++i) {
        if (this.lens && this.lens.indexOf(loc) !== -1) {
          w = __readUInt8(this, loc);
          this.l = loc + 1;
          vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
          return oo.join("") + vv;
        }
        oo.push(_getchar(__readUInt8(this, loc)));
        loc += 1;
      }
      o = oo.join("");
      break;
    default:
      switch (size) {
        case 1:
          oI = __readUInt8(this, this.l);
          this.l++;
          return oI;
        case 2:
          oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
          this.l += 2;
          return oI;
        case 4:
        case -4:
          if (t === "i" || (this[this.l + 3] & 128) === 0) {
            oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
            this.l += 4;
            return oI;
          } else {
            oR = __readUInt32LE(this, this.l);
            this.l += 4;
          }
          return oR;
        case 8:
        case -8:
          if (t === "f") {
            if (size == 8) oR = __double(this, this.l);
            else oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
            this.l += 8;
            return oR;
          } else size = 8;
        /* falls through */
        case 16:
          o = __hexlify(this, this.l, size);
          break;
      }
  }
  this.l += size;
  return o;
}
__name(ReadShift, "ReadShift");
var __writeUInt32LE = /* @__PURE__ */ __name(function(b, val, idx) {
  b[idx] = val & 255;
  b[idx + 1] = val >>> 8 & 255;
  b[idx + 2] = val >>> 16 & 255;
  b[idx + 3] = val >>> 24 & 255;
}, "__writeUInt32LE");
var __writeInt32LE = /* @__PURE__ */ __name(function(b, val, idx) {
  b[idx] = val & 255;
  b[idx + 1] = val >> 8 & 255;
  b[idx + 2] = val >> 16 & 255;
  b[idx + 3] = val >> 24 & 255;
}, "__writeInt32LE");
var __writeUInt16LE = /* @__PURE__ */ __name(function(b, val, idx) {
  b[idx] = val & 255;
  b[idx + 1] = val >>> 8 & 255;
}, "__writeUInt16LE");
function WriteShift(t, val, f) {
  var size = 0, i = 0;
  if (f === "dbcs") {
    for (i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
    size = 2 * val.length;
  } else if (f === "sbcs") {
    if (typeof $cptable !== "undefined" && current_ansi == 874) {
      for (i = 0; i != val.length; ++i) {
        var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));
        this[this.l + i] = cppayload[0];
      }
    } else {
      val = val.replace(/[^\x00-\x7F]/g, "_");
      for (i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 255;
    }
    size = val.length;
  } else if (f === "hex") {
    for (; i < t; ++i) {
      this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
    }
    return this;
  } else if (f === "utf16le") {
    var end = Math.min(this.l + t, this.length);
    for (i = 0; i < Math.min(val.length, t); ++i) {
      var cc = val.charCodeAt(i);
      this[this.l++] = cc & 255;
      this[this.l++] = cc >> 8;
    }
    while (this.l < end) this[this.l++] = 0;
    return this;
  } else switch (t) {
    case 1:
      size = 1;
      this[this.l] = val & 255;
      break;
    case 2:
      size = 2;
      this[this.l] = val & 255;
      val >>>= 8;
      this[this.l + 1] = val & 255;
      break;
    case 3:
      size = 3;
      this[this.l] = val & 255;
      val >>>= 8;
      this[this.l + 1] = val & 255;
      val >>>= 8;
      this[this.l + 2] = val & 255;
      break;
    case 4:
      size = 4;
      __writeUInt32LE(this, val, this.l);
      break;
    case 8:
      size = 8;
      if (f === "f") {
        write_double_le(this, val, this.l);
        break;
      }
    /* falls through */
    case 16:
      break;
    case -4:
      size = 4;
      __writeInt32LE(this, val, this.l);
      break;
  }
  this.l += size;
  return this;
}
__name(WriteShift, "WriteShift");
function CheckField(hexstr, fld) {
  var m = __hexlify(this, this.l, hexstr.length >> 1);
  if (m !== hexstr) throw new Error(fld + "Expected " + hexstr + " saw " + m);
  this.l += hexstr.length >> 1;
}
__name(CheckField, "CheckField");
function prep_blob(blob2, pos) {
  blob2.l = pos;
  blob2.read_shift = /*::(*/
  ReadShift;
  blob2.chk = CheckField;
  blob2.write_shift = WriteShift;
}
__name(prep_blob, "prep_blob");
function parsenoop(blob2, length) {
  blob2.l += length;
}
__name(parsenoop, "parsenoop");
function new_buf(sz) {
  var o = new_raw_buf(sz);
  prep_blob(o, 0);
  return o;
}
__name(new_buf, "new_buf");
function recordhopper(data, cb, opts) {
  if (!data) return;
  var tmpbyte, cntbyte, length;
  prep_blob(data, data.l || 0);
  var L = data.length, RT = 0, tgt = 0;
  while (data.l < L) {
    RT = data.read_shift(1);
    if (RT & 128) RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
    var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
    tmpbyte = data.read_shift(1);
    length = tmpbyte & 127;
    for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
    tgt = data.l + length;
    var d = R.f && R.f(data, length, opts);
    data.l = tgt;
    if (cb(d, R, RT)) return;
  }
}
__name(recordhopper, "recordhopper");
function buf_array() {
  var bufs = [], blksz = has_buf ? 256 : 2048;
  var newblk = /* @__PURE__ */ __name(function ba_newblk(sz) {
    var o = new_buf(sz);
    prep_blob(o, 0);
    return o;
  }, "ba_newblk");
  var curbuf = newblk(blksz);
  var endbuf = /* @__PURE__ */ __name(function ba_endbuf() {
    if (!curbuf) return;
    if (curbuf.length > curbuf.l) {
      curbuf = curbuf.slice(0, curbuf.l);
      curbuf.l = curbuf.length;
    }
    if (curbuf.length > 0) bufs.push(curbuf);
    curbuf = null;
  }, "ba_endbuf");
  var next = /* @__PURE__ */ __name(function ba_next(sz) {
    if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
    endbuf();
    return curbuf = newblk(Math.max(sz + 1, blksz));
  }, "ba_next");
  var end = /* @__PURE__ */ __name(function ba_end() {
    endbuf();
    return bconcat(bufs);
  }, "ba_end");
  var push = /* @__PURE__ */ __name(function ba_push(buf) {
    endbuf();
    curbuf = buf;
    if (curbuf.l == null) curbuf.l = curbuf.length;
    next(blksz);
  }, "ba_push");
  return { next, push, end, _bufs: bufs };
}
__name(buf_array, "buf_array");
function shift_cell_xls(cell, tgt, opts) {
  var out = dup(cell);
  if (tgt.s) {
    if (out.cRel) out.c += tgt.s.c;
    if (out.rRel) out.r += tgt.s.r;
  } else {
    if (out.cRel) out.c += tgt.c;
    if (out.rRel) out.r += tgt.r;
  }
  if (!opts || opts.biff < 12) {
    while (out.c >= 256) out.c -= 256;
    while (out.r >= 65536) out.r -= 65536;
  }
  return out;
}
__name(shift_cell_xls, "shift_cell_xls");
function shift_range_xls(cell, range2, opts) {
  var out = dup(cell);
  out.s = shift_cell_xls(out.s, range2.s, opts);
  out.e = shift_cell_xls(out.e, range2.s, opts);
  return out;
}
__name(shift_range_xls, "shift_range_xls");
function encode_cell_xls(c, biff) {
  if (c.cRel && c.c < 0) {
    c = dup(c);
    while (c.c < 0) c.c += biff > 8 ? 16384 : 256;
  }
  if (c.rRel && c.r < 0) {
    c = dup(c);
    while (c.r < 0) c.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
  }
  var s = encode_cell(c);
  if (!c.cRel && c.cRel != null) s = fix_col(s);
  if (!c.rRel && c.rRel != null) s = fix_row(s);
  return s;
}
__name(encode_cell_xls, "encode_cell_xls");
function encode_range_xls(r, opts) {
  if (r.s.r == 0 && !r.s.rRel) {
    if (r.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r.e.rRel) {
      return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
    }
  }
  if (r.s.c == 0 && !r.s.cRel) {
    if (r.e.c == (opts.biff >= 12 ? 16383 : 255) && !r.e.cRel) {
      return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
    }
  }
  return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
}
__name(encode_range_xls, "encode_range_xls");
function decode_row(rowstr) {
  return parseInt(unfix_row(rowstr), 10) - 1;
}
__name(decode_row, "decode_row");
function encode_row(row) {
  return "" + (row + 1);
}
__name(encode_row, "encode_row");
function fix_row(cstr) {
  return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
}
__name(fix_row, "fix_row");
function unfix_row(cstr) {
  return cstr.replace(/\$(\d+)$/, "$1");
}
__name(unfix_row, "unfix_row");
function decode_col(colstr) {
  var c = unfix_col(colstr), d = 0, i = 0;
  for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64;
  return d - 1;
}
__name(decode_col, "decode_col");
function encode_col(col) {
  if (col < 0) throw new Error("invalid column " + col);
  var s = "";
  for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode((col - 1) % 26 + 65) + s;
  return s;
}
__name(encode_col, "encode_col");
function fix_col(cstr) {
  return cstr.replace(/^([A-Z])/, "$$$1");
}
__name(fix_col, "fix_col");
function unfix_col(cstr) {
  return cstr.replace(/^\$([A-Z])/, "$1");
}
__name(unfix_col, "unfix_col");
function split_cell(cstr) {
  return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
}
__name(split_cell, "split_cell");
function decode_cell(cstr) {
  var R = 0, C = 0;
  for (var i = 0; i < cstr.length; ++i) {
    var cc = cstr.charCodeAt(i);
    if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
    else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
  }
  return { c: C - 1, r: R - 1 };
}
__name(decode_cell, "decode_cell");
function encode_cell(cell) {
  var col = cell.c + 1;
  var s = "";
  for (; col; col = (col - 1) / 26 | 0) s = String.fromCharCode((col - 1) % 26 + 65) + s;
  return s + (cell.r + 1);
}
__name(encode_cell, "encode_cell");
function decode_range(range2) {
  var idx = range2.indexOf(":");
  if (idx == -1) return { s: decode_cell(range2), e: decode_cell(range2) };
  return { s: decode_cell(range2.slice(0, idx)), e: decode_cell(range2.slice(idx + 1)) };
}
__name(decode_range, "decode_range");
function encode_range(cs, ce) {
  if (typeof ce === "undefined" || typeof ce === "number") {
    return encode_range(cs.s, cs.e);
  }
  if (typeof cs !== "string") cs = encode_cell(cs);
  if (typeof ce !== "string") ce = encode_cell(ce);
  return cs == ce ? cs : cs + ":" + ce;
}
__name(encode_range, "encode_range");
function safe_decode_range(range2) {
  var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
  var idx = 0, i = 0, cc = 0;
  var len = range2.length;
  for (idx = 0; i < len; ++i) {
    if ((cc = range2.charCodeAt(i) - 64) < 1 || cc > 26) break;
    idx = 26 * idx + cc;
  }
  o.s.c = --idx;
  for (idx = 0; i < len; ++i) {
    if ((cc = range2.charCodeAt(i) - 48) < 0 || cc > 9) break;
    idx = 10 * idx + cc;
  }
  o.s.r = --idx;
  if (i === len || cc != 10) {
    o.e.c = o.s.c;
    o.e.r = o.s.r;
    return o;
  }
  ++i;
  for (idx = 0; i != len; ++i) {
    if ((cc = range2.charCodeAt(i) - 64) < 1 || cc > 26) break;
    idx = 26 * idx + cc;
  }
  o.e.c = --idx;
  for (idx = 0; i != len; ++i) {
    if ((cc = range2.charCodeAt(i) - 48) < 0 || cc > 9) break;
    idx = 10 * idx + cc;
  }
  o.e.r = --idx;
  return o;
}
__name(safe_decode_range, "safe_decode_range");
function safe_format_cell(cell, v) {
  var q = cell.t == "d" && v instanceof Date;
  if (cell.z != null) try {
    return cell.w = SSF_format(cell.z, q ? datenum(v) : v);
  } catch (e) {
  }
  try {
    return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
  } catch (e) {
    return "" + v;
  }
}
__name(safe_format_cell, "safe_format_cell");
function format_cell(cell, v, o) {
  if (cell == null || cell.t == null || cell.t == "z") return "";
  if (cell.w !== void 0) return cell.w;
  if (cell.t == "d" && !cell.z && o && o.dateNF) cell.z = o.dateNF;
  if (cell.t == "e") return BErr[cell.v] || cell.v;
  if (v == void 0) return safe_format_cell(cell, cell.v);
  return safe_format_cell(cell, v);
}
__name(format_cell, "format_cell");
function sheet_to_workbook(sheet, opts) {
  var n = opts && opts.sheet ? opts.sheet : "Sheet1";
  var sheets = {};
  sheets[n] = sheet;
  return { SheetNames: [n], Sheets: sheets };
}
__name(sheet_to_workbook, "sheet_to_workbook");
function sheet_add_aoa(_ws, data, opts) {
  var o = opts || {};
  var dense = _ws ? Array.isArray(_ws) : o.dense;
  if (DENSE != null && dense == null) dense = DENSE;
  var ws = _ws || (dense ? [] : {});
  var _R = 0, _C = 0;
  if (ws && o.origin != null) {
    if (typeof o.origin == "number") _R = o.origin;
    else {
      var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
      _R = _origin.r;
      _C = _origin.c;
    }
    if (!ws["!ref"]) ws["!ref"] = "A1:A1";
  }
  var range2 = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
  if (ws["!ref"]) {
    var _range = safe_decode_range(ws["!ref"]);
    range2.s.c = _range.s.c;
    range2.s.r = _range.s.r;
    range2.e.c = Math.max(range2.e.c, _range.e.c);
    range2.e.r = Math.max(range2.e.r, _range.e.r);
    if (_R == -1) range2.e.r = _R = _range.e.r + 1;
  }
  for (var R = 0; R != data.length; ++R) {
    if (!data[R]) continue;
    if (!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
    for (var C = 0; C != data[R].length; ++C) {
      if (typeof data[R][C] === "undefined") continue;
      var cell = { v: data[R][C] };
      var __R = _R + R, __C = _C + C;
      if (range2.s.r > __R) range2.s.r = __R;
      if (range2.s.c > __C) range2.s.c = __C;
      if (range2.e.r < __R) range2.e.r = __R;
      if (range2.e.c < __C) range2.e.c = __C;
      if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
      else {
        if (Array.isArray(cell.v)) {
          cell.f = data[R][C][1];
          cell.v = cell.v[0];
        }
        if (cell.v === null) {
          if (cell.f) cell.t = "n";
          else if (o.nullError) {
            cell.t = "e";
            cell.v = 0;
          } else if (!o.sheetStubs) continue;
          else cell.t = "z";
        } else if (typeof cell.v === "number") cell.t = "n";
        else if (typeof cell.v === "boolean") cell.t = "b";
        else if (cell.v instanceof Date) {
          cell.z = o.dateNF || table_fmt[14];
          if (o.cellDates) {
            cell.t = "d";
            cell.w = SSF_format(cell.z, datenum(cell.v));
          } else {
            cell.t = "n";
            cell.v = datenum(cell.v);
            cell.w = SSF_format(cell.z, cell.v);
          }
        } else cell.t = "s";
      }
      if (dense) {
        if (!ws[__R]) ws[__R] = [];
        if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
        ws[__R][__C] = cell;
      } else {
        var cell_ref = encode_cell({ c: __C, r: __R });
        if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
        ws[cell_ref] = cell;
      }
    }
  }
  if (range2.s.c < 1e7) ws["!ref"] = encode_range(range2);
  return ws;
}
__name(sheet_add_aoa, "sheet_add_aoa");
function aoa_to_sheet(data, opts) {
  return sheet_add_aoa(null, data, opts);
}
__name(aoa_to_sheet, "aoa_to_sheet");
function parse_Int32LE(data) {
  return data.read_shift(4, "i");
}
__name(parse_Int32LE, "parse_Int32LE");
function parse_XLWideString(data) {
  var cchCharacters = data.read_shift(4);
  return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
}
__name(parse_XLWideString, "parse_XLWideString");
function parse_StrRun(data) {
  return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
}
__name(parse_StrRun, "parse_StrRun");
function parse_RichStr(data, length) {
  var start = data.l;
  var flags = data.read_shift(1);
  var str = parse_XLWideString(data);
  var rgsStrRun = [];
  var z = { t: str, h: str };
  if ((flags & 1) !== 0) {
    var dwSizeStrRun = data.read_shift(4);
    for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
    z.r = rgsStrRun;
  } else z.r = [{ ich: 0, ifnt: 0 }];
  data.l = start + length;
  return z;
}
__name(parse_RichStr, "parse_RichStr");
var parse_BrtCommentText = parse_RichStr;
function parse_XLSBCell(data) {
  var col = data.read_shift(4);
  var iStyleRef = data.read_shift(2);
  iStyleRef += data.read_shift(1) << 16;
  data.l++;
  return { c: col, iStyleRef };
}
__name(parse_XLSBCell, "parse_XLSBCell");
function parse_XLSBShortCell(data) {
  var iStyleRef = data.read_shift(2);
  iStyleRef += data.read_shift(1) << 16;
  data.l++;
  return { c: -1, iStyleRef };
}
__name(parse_XLSBShortCell, "parse_XLSBShortCell");
var parse_XLSBCodeName = parse_XLWideString;
function parse_XLNullableWideString(data) {
  var cchCharacters = data.read_shift(4);
  return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
}
__name(parse_XLNullableWideString, "parse_XLNullableWideString");
var parse_XLNameWideString = parse_XLWideString;
var parse_RelID = parse_XLNullableWideString;
function parse_RkNumber(data) {
  var b = data.slice(data.l, data.l + 4);
  var fX100 = b[0] & 1, fInt = b[0] & 2;
  data.l += 4;
  var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0] & 252, b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
  return fX100 ? RK / 100 : RK;
}
__name(parse_RkNumber, "parse_RkNumber");
function parse_RfX(data) {
  var cell = { s: {}, e: {} };
  cell.s.r = data.read_shift(4);
  cell.e.r = data.read_shift(4);
  cell.s.c = data.read_shift(4);
  cell.e.c = data.read_shift(4);
  return cell;
}
__name(parse_RfX, "parse_RfX");
var parse_UncheckedRfX = parse_RfX;
function parse_Xnum(data) {
  if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
  return data.read_shift(8, "f");
}
__name(parse_Xnum, "parse_Xnum");
function parse_BrtColor(data) {
  var out = {};
  var d = data.read_shift(1);
  var xColorType = d >>> 1;
  var index = data.read_shift(1);
  var nTS = data.read_shift(2, "i");
  var bR = data.read_shift(1);
  var bG = data.read_shift(1);
  var bB = data.read_shift(1);
  data.l++;
  switch (xColorType) {
    case 0:
      out.auto = 1;
      break;
    case 1:
      out.index = index;
      var icv = XLSIcv[index];
      if (icv) out.rgb = rgb2Hex(icv);
      break;
    case 2:
      out.rgb = rgb2Hex([bR, bG, bB]);
      break;
    case 3:
      out.theme = index;
      break;
  }
  if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
  return out;
}
__name(parse_BrtColor, "parse_BrtColor");
function parse_FontFlags(data) {
  var d = data.read_shift(1);
  data.l++;
  var out = {
    fBold: d & 1,
    fItalic: d & 2,
    fUnderline: d & 4,
    fStrikeout: d & 8,
    fOutline: d & 16,
    fShadow: d & 32,
    fCondense: d & 64,
    fExtend: d & 128
  };
  return out;
}
__name(parse_FontFlags, "parse_FontFlags");
function parse_ClipboardFormatOrString(o, w) {
  var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
  var m = o.read_shift(4);
  switch (m) {
    case 0:
      return "";
    case 4294967295:
    case 4294967294:
      return ClipFmt[o.read_shift(4)] || "";
  }
  if (m > 400) throw new Error("Unsupported Clipboard: " + m.toString(16));
  o.l -= 4;
  return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
}
__name(parse_ClipboardFormatOrString, "parse_ClipboardFormatOrString");
function parse_ClipboardFormatOrAnsiString(o) {
  return parse_ClipboardFormatOrString(o, 1);
}
__name(parse_ClipboardFormatOrAnsiString, "parse_ClipboardFormatOrAnsiString");
function parse_ClipboardFormatOrUnicodeString(o) {
  return parse_ClipboardFormatOrString(o, 2);
}
__name(parse_ClipboardFormatOrUnicodeString, "parse_ClipboardFormatOrUnicodeString");
var VT_I2 = 2;
var VT_I4 = 3;
var VT_BOOL = 11;
var VT_VARIANT = 12;
var VT_UI4 = 19;
var VT_FILETIME = 64;
var VT_BLOB = 65;
var VT_CF = 71;
var VT_VECTOR_VARIANT = 4108;
var VT_VECTOR_LPSTR = 4126;
var VT_STRING = 80;
var VT_USTR = 81;
var VT_CUSTOM = [VT_STRING, VT_USTR];
var DocSummaryPIDDSI = {
  /*::[*/
  1: { n: "CodePage", t: VT_I2 },
  /*::[*/
  2: { n: "Category", t: VT_STRING },
  /*::[*/
  3: { n: "PresentationFormat", t: VT_STRING },
  /*::[*/
  4: { n: "ByteCount", t: VT_I4 },
  /*::[*/
  5: { n: "LineCount", t: VT_I4 },
  /*::[*/
  6: { n: "ParagraphCount", t: VT_I4 },
  /*::[*/
  7: { n: "SlideCount", t: VT_I4 },
  /*::[*/
  8: { n: "NoteCount", t: VT_I4 },
  /*::[*/
  9: { n: "HiddenCount", t: VT_I4 },
  /*::[*/
  10: { n: "MultimediaClipCount", t: VT_I4 },
  /*::[*/
  11: { n: "ScaleCrop", t: VT_BOOL },
  /*::[*/
  12: {
    n: "HeadingPairs",
    t: VT_VECTOR_VARIANT
    /* VT_VECTOR | VT_VARIANT */
  },
  /*::[*/
  13: {
    n: "TitlesOfParts",
    t: VT_VECTOR_LPSTR
    /* VT_VECTOR | VT_LPSTR */
  },
  /*::[*/
  14: { n: "Manager", t: VT_STRING },
  /*::[*/
  15: { n: "Company", t: VT_STRING },
  /*::[*/
  16: { n: "LinksUpToDate", t: VT_BOOL },
  /*::[*/
  17: { n: "CharacterCount", t: VT_I4 },
  /*::[*/
  19: { n: "SharedDoc", t: VT_BOOL },
  /*::[*/
  22: { n: "HyperlinksChanged", t: VT_BOOL },
  /*::[*/
  23: { n: "AppVersion", t: VT_I4, p: "version" },
  /*::[*/
  24: { n: "DigSig", t: VT_BLOB },
  /*::[*/
  26: { n: "ContentType", t: VT_STRING },
  /*::[*/
  27: { n: "ContentStatus", t: VT_STRING },
  /*::[*/
  28: { n: "Language", t: VT_STRING },
  /*::[*/
  29: { n: "Version", t: VT_STRING },
  /*::[*/
  255: {},
  /* [MS-OLEPS] 2.18 */
  /*::[*/
  2147483648: { n: "Locale", t: VT_UI4 },
  /*::[*/
  2147483651: { n: "Behavior", t: VT_UI4 },
  /*::[*/
  1919054434: {}
};
var SummaryPIDSI = {
  /*::[*/
  1: { n: "CodePage", t: VT_I2 },
  /*::[*/
  2: { n: "Title", t: VT_STRING },
  /*::[*/
  3: { n: "Subject", t: VT_STRING },
  /*::[*/
  4: { n: "Author", t: VT_STRING },
  /*::[*/
  5: { n: "Keywords", t: VT_STRING },
  /*::[*/
  6: { n: "Comments", t: VT_STRING },
  /*::[*/
  7: { n: "Template", t: VT_STRING },
  /*::[*/
  8: { n: "LastAuthor", t: VT_STRING },
  /*::[*/
  9: { n: "RevNumber", t: VT_STRING },
  /*::[*/
  10: { n: "EditTime", t: VT_FILETIME },
  /*::[*/
  11: { n: "LastPrinted", t: VT_FILETIME },
  /*::[*/
  12: { n: "CreatedDate", t: VT_FILETIME },
  /*::[*/
  13: { n: "ModifiedDate", t: VT_FILETIME },
  /*::[*/
  14: { n: "PageCount", t: VT_I4 },
  /*::[*/
  15: { n: "WordCount", t: VT_I4 },
  /*::[*/
  16: { n: "CharCount", t: VT_I4 },
  /*::[*/
  17: { n: "Thumbnail", t: VT_CF },
  /*::[*/
  18: { n: "Application", t: VT_STRING },
  /*::[*/
  19: { n: "DocSecurity", t: VT_I4 },
  /*::[*/
  255: {},
  /* [MS-OLEPS] 2.18 */
  /*::[*/
  2147483648: { n: "Locale", t: VT_UI4 },
  /*::[*/
  2147483651: { n: "Behavior", t: VT_UI4 },
  /*::[*/
  1919054434: {}
};
var CountryEnum = {
  /*::[*/
  1: "US",
  // United States
  /*::[*/
  2: "CA",
  // Canada
  /*::[*/
  3: "",
  // Latin America (except Brazil)
  /*::[*/
  7: "RU",
  // Russia
  /*::[*/
  20: "EG",
  // Egypt
  /*::[*/
  30: "GR",
  // Greece
  /*::[*/
  31: "NL",
  // Netherlands
  /*::[*/
  32: "BE",
  // Belgium
  /*::[*/
  33: "FR",
  // France
  /*::[*/
  34: "ES",
  // Spain
  /*::[*/
  36: "HU",
  // Hungary
  /*::[*/
  39: "IT",
  // Italy
  /*::[*/
  41: "CH",
  // Switzerland
  /*::[*/
  43: "AT",
  // Austria
  /*::[*/
  44: "GB",
  // United Kingdom
  /*::[*/
  45: "DK",
  // Denmark
  /*::[*/
  46: "SE",
  // Sweden
  /*::[*/
  47: "NO",
  // Norway
  /*::[*/
  48: "PL",
  // Poland
  /*::[*/
  49: "DE",
  // Germany
  /*::[*/
  52: "MX",
  // Mexico
  /*::[*/
  55: "BR",
  // Brazil
  /*::[*/
  61: "AU",
  // Australia
  /*::[*/
  64: "NZ",
  // New Zealand
  /*::[*/
  66: "TH",
  // Thailand
  /*::[*/
  81: "JP",
  // Japan
  /*::[*/
  82: "KR",
  // Korea
  /*::[*/
  84: "VN",
  // Viet Nam
  /*::[*/
  86: "CN",
  // China
  /*::[*/
  90: "TR",
  // Turkey
  /*::[*/
  105: "JS",
  // Ramastan
  /*::[*/
  213: "DZ",
  // Algeria
  /*::[*/
  216: "MA",
  // Morocco
  /*::[*/
  218: "LY",
  // Libya
  /*::[*/
  351: "PT",
  // Portugal
  /*::[*/
  354: "IS",
  // Iceland
  /*::[*/
  358: "FI",
  // Finland
  /*::[*/
  420: "CZ",
  // Czech Republic
  /*::[*/
  886: "TW",
  // Taiwan
  /*::[*/
  961: "LB",
  // Lebanon
  /*::[*/
  962: "JO",
  // Jordan
  /*::[*/
  963: "SY",
  // Syria
  /*::[*/
  964: "IQ",
  // Iraq
  /*::[*/
  965: "KW",
  // Kuwait
  /*::[*/
  966: "SA",
  // Saudi Arabia
  /*::[*/
  971: "AE",
  // United Arab Emirates
  /*::[*/
  972: "IL",
  // Israel
  /*::[*/
  974: "QA",
  // Qatar
  /*::[*/
  981: "IR",
  // Iran
  /*::[*/
  65535: "US"
  // United States
};
var XLSFillPattern = [
  null,
  "solid",
  "mediumGray",
  "darkGray",
  "lightGray",
  "darkHorizontal",
  "darkVertical",
  "darkDown",
  "darkUp",
  "darkGrid",
  "darkTrellis",
  "lightHorizontal",
  "lightVertical",
  "lightDown",
  "lightUp",
  "lightGrid",
  "lightTrellis",
  "gray125",
  "gray0625"
];
function rgbify(arr) {
  return arr.map(function(x) {
    return [x >> 16 & 255, x >> 8 & 255, x & 255];
  });
}
__name(rgbify, "rgbify");
var _XLSIcv = /* @__PURE__ */ rgbify([
  /* Color Constants */
  0,
  16777215,
  16711680,
  65280,
  255,
  16776960,
  16711935,
  65535,
  /* Overridable Defaults */
  0,
  16777215,
  16711680,
  65280,
  255,
  16776960,
  16711935,
  65535,
  8388608,
  32768,
  128,
  8421376,
  8388736,
  32896,
  12632256,
  8421504,
  10066431,
  10040166,
  16777164,
  13434879,
  6684774,
  16744576,
  26316,
  13421823,
  128,
  16711935,
  16776960,
  65535,
  8388736,
  8388608,
  32896,
  255,
  52479,
  13434879,
  13434828,
  16777113,
  10079487,
  16751052,
  13408767,
  16764057,
  3368703,
  3394764,
  10079232,
  16763904,
  16750848,
  16737792,
  6710937,
  9868950,
  13158,
  3381606,
  13056,
  3355392,
  10040064,
  10040166,
  3355545,
  3355443,
  /* Other entries to appease BIFF8/12 */
  16777215,
  /* 0x40 icvForeground ?? */
  0,
  /* 0x41 icvBackground ?? */
  0,
  /* 0x42 icvFrame ?? */
  0,
  /* 0x43 icv3D ?? */
  0,
  /* 0x44 icv3DText ?? */
  0,
  /* 0x45 icv3DHilite ?? */
  0,
  /* 0x46 icv3DShadow ?? */
  0,
  /* 0x47 icvHilite ?? */
  0,
  /* 0x48 icvCtlText ?? */
  0,
  /* 0x49 icvCtlScrl ?? */
  0,
  /* 0x4A icvCtlInv ?? */
  0,
  /* 0x4B icvCtlBody ?? */
  0,
  /* 0x4C icvCtlFrame ?? */
  0,
  /* 0x4D icvCtlFore ?? */
  0,
  /* 0x4E icvCtlBack ?? */
  0,
  /* 0x4F icvCtlNeutral */
  0,
  /* 0x50 icvInfoBk ?? */
  0
  /* 0x51 icvInfoText ?? */
]);
var XLSIcv = /* @__PURE__ */ dup(_XLSIcv);
var BErr = {
  /*::[*/
  0: "#NULL!",
  /*::[*/
  7: "#DIV/0!",
  /*::[*/
  15: "#VALUE!",
  /*::[*/
  23: "#REF!",
  /*::[*/
  29: "#NAME?",
  /*::[*/
  36: "#NUM!",
  /*::[*/
  42: "#N/A",
  /*::[*/
  43: "#GETTING_DATA",
  /*::[*/
  255: "#WTF?"
};
var RBErr = {
  "#NULL!": 0,
  "#DIV/0!": 7,
  "#VALUE!": 15,
  "#REF!": 23,
  "#NAME?": 29,
  "#NUM!": 36,
  "#N/A": 42,
  "#GETTING_DATA": 43,
  "#WTF?": 255
};
var ct2type = {
  /* Workbook */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
  "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
  "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
  "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
  /* Worksheet */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
  "application/vnd.ms-excel.worksheet": "sheets",
  "application/vnd.ms-excel.binIndexWs": "TODO",
  /* Binary Index */
  /* Chartsheet */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
  "application/vnd.ms-excel.chartsheet": "charts",
  /* Macrosheet */
  "application/vnd.ms-excel.macrosheet+xml": "macros",
  "application/vnd.ms-excel.macrosheet": "macros",
  "application/vnd.ms-excel.intlmacrosheet": "TODO",
  "application/vnd.ms-excel.binIndexMs": "TODO",
  /* Binary Index */
  /* Dialogsheet */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
  "application/vnd.ms-excel.dialogsheet": "dialogs",
  /* Shared Strings */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
  "application/vnd.ms-excel.sharedStrings": "strs",
  /* Styles */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
  "application/vnd.ms-excel.styles": "styles",
  /* File Properties */
  "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
  /* Custom Data Properties */
  "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
  /* Comments */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
  "application/vnd.ms-excel.comments": "comments",
  "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
  "application/vnd.ms-excel.person+xml": "people",
  /* Metadata (Stock/Geography and Dynamic Array) */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
  "application/vnd.ms-excel.sheetMetadata": "metadata",
  /* PivotTable */
  "application/vnd.ms-excel.pivotTable": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
  /* Chart Objects */
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
  /* Chart Colors */
  "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
  /* Chart Style */
  "application/vnd.ms-office.chartstyle+xml": "TODO",
  /* Chart Advanced */
  "application/vnd.ms-office.chartex+xml": "TODO",
  /* Calculation Chain */
  "application/vnd.ms-excel.calcChain": "calcchains",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
  /* Printer Settings */
  "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
  /* ActiveX */
  "application/vnd.ms-office.activeX": "TODO",
  "application/vnd.ms-office.activeX+xml": "TODO",
  /* Custom Toolbars */
  "application/vnd.ms-excel.attachedToolbars": "TODO",
  /* External Data Connections */
  "application/vnd.ms-excel.connections": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
  /* External Links */
  "application/vnd.ms-excel.externalLink": "links",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
  /* PivotCache */
  "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
  "application/vnd.ms-excel.pivotCacheRecords": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
  /* Query Table */
  "application/vnd.ms-excel.queryTable": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
  /* Shared Workbook */
  "application/vnd.ms-excel.userNames": "TODO",
  "application/vnd.ms-excel.revisionHeaders": "TODO",
  "application/vnd.ms-excel.revisionLog": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
  /* Single Cell Table */
  "application/vnd.ms-excel.tableSingleCells": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
  /* Slicer */
  "application/vnd.ms-excel.slicer": "TODO",
  "application/vnd.ms-excel.slicerCache": "TODO",
  "application/vnd.ms-excel.slicer+xml": "TODO",
  "application/vnd.ms-excel.slicerCache+xml": "TODO",
  /* Sort Map */
  "application/vnd.ms-excel.wsSortMap": "TODO",
  /* Table */
  "application/vnd.ms-excel.table": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
  /* Themes */
  "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
  /* Theme Override */
  "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
  /* Timeline */
  "application/vnd.ms-excel.Timeline+xml": "TODO",
  /* verify */
  "application/vnd.ms-excel.TimelineCache+xml": "TODO",
  /* verify */
  /* VBA */
  "application/vnd.ms-office.vbaProject": "vba",
  "application/vnd.ms-office.vbaProjectSignature": "TODO",
  /* Volatile Dependencies */
  "application/vnd.ms-office.volatileDependencies": "TODO",
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
  /* Control Properties */
  "application/vnd.ms-excel.controlproperties+xml": "TODO",
  /* Data Model */
  "application/vnd.openxmlformats-officedocument.model+data": "TODO",
  /* Survey */
  "application/vnd.ms-excel.Survey+xml": "TODO",
  /* Drawing */
  "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
  "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
  /* VML */
  "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
  "application/vnd.openxmlformats-package.relationships+xml": "rels",
  "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
  /* Image */
  "image/png": "TODO",
  "sheet": "js"
};
function new_ct() {
  return {
    workbooks: [],
    sheets: [],
    charts: [],
    dialogs: [],
    macros: [],
    rels: [],
    strs: [],
    comments: [],
    threadedcomments: [],
    links: [],
    coreprops: [],
    extprops: [],
    custprops: [],
    themes: [],
    styles: [],
    calcchains: [],
    vba: [],
    drawings: [],
    metadata: [],
    people: [],
    TODO: [],
    xmlns: ""
  };
}
__name(new_ct, "new_ct");
function parse_ct(data) {
  var ct = new_ct();
  if (!data || !data.match) return ct;
  var ctext = {};
  (data.match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (y[0].replace(nsregex, "<")) {
      case "<?xml":
        break;
      case "<Types":
        ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || ["", ""])[1]];
        break;
      case "<Default":
        ctext[y.Extension] = y.ContentType;
        break;
      case "<Override":
        if (ct[ct2type[y.ContentType]] !== void 0) ct[ct2type[y.ContentType]].push(y.PartName);
        break;
    }
  });
  if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
  ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
  ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
  ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
  ct.defaults = ctext;
  delete ct.calcchains;
  return ct;
}
__name(parse_ct, "parse_ct");
var RELS = {
  WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
  SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
  HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
  VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
  XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
  XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
  XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
  CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
  CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
  CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
  CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
  EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
  CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
  SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
  STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
  THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
  CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
  CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
  CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
  WS: [
    "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
    "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
  ],
  DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
  MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
  IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
  DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
  XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
  TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
  PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
  VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
};
function get_rels_path(file) {
  var n = file.lastIndexOf("/");
  return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
}
__name(get_rels_path, "get_rels_path");
function parse_rels(data, currentFilePath) {
  var rels = { "!id": {} };
  if (!data) return rels;
  if (currentFilePath.charAt(0) !== "/") {
    currentFilePath = "/" + currentFilePath;
  }
  var hash = {};
  (data.match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    if (y[0] === "<Relationship") {
      var rel = {};
      rel.Type = y.Type;
      rel.Target = y.Target;
      rel.Id = y.Id;
      if (y.TargetMode) rel.TargetMode = y.TargetMode;
      var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
      rels[canonictarget] = rel;
      hash[y.Id] = rel;
    }
  });
  rels["!id"] = hash;
  return rels;
}
__name(parse_rels, "parse_rels");
var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
function parse_manifest(d, opts) {
  var str = xlml_normalize(d);
  var Rn;
  var FEtag;
  while (Rn = xlmlregex.exec(str)) switch (Rn[3]) {
    case "manifest":
      break;
    // 4.2 <manifest:manifest>
    case "file-entry":
      FEtag = parsexmltag(Rn[0], false);
      if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
      break;
    case "encryption-data":
    // 4.4 <manifest:encryption-data>
    case "algorithm":
    // 4.5 <manifest:algorithm>
    case "start-key-generation":
    // 4.6 <manifest:start-key-generation>
    case "key-derivation":
      throw new Error("Unsupported ODS Encryption");
    default:
      if (opts && opts.WTF) throw Rn;
  }
}
__name(parse_manifest, "parse_manifest");
var CORE_PROPS = [
  ["cp:category", "Category"],
  ["cp:contentStatus", "ContentStatus"],
  ["cp:keywords", "Keywords"],
  ["cp:lastModifiedBy", "LastAuthor"],
  ["cp:lastPrinted", "LastPrinted"],
  ["cp:revision", "RevNumber"],
  ["cp:version", "Version"],
  ["dc:creator", "Author"],
  ["dc:description", "Comments"],
  ["dc:identifier", "Identifier"],
  ["dc:language", "Language"],
  ["dc:subject", "Subject"],
  ["dc:title", "Title"],
  ["dcterms:created", "CreatedDate", "date"],
  ["dcterms:modified", "ModifiedDate", "date"]
];
var CORE_PROPS_REGEX = /* @__PURE__ */ function() {
  var r = new Array(CORE_PROPS.length);
  for (var i = 0; i < CORE_PROPS.length; ++i) {
    var f = CORE_PROPS[i];
    var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
    r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
  }
  return r;
}();
function parse_core_props(data) {
  var p = {};
  data = utf8read(data);
  for (var i = 0; i < CORE_PROPS.length; ++i) {
    var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
    if (cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
    if (f[2] === "date" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
  }
  return p;
}
__name(parse_core_props, "parse_core_props");
var EXT_PROPS = [
  ["Application", "Application", "string"],
  ["AppVersion", "AppVersion", "string"],
  ["Company", "Company", "string"],
  ["DocSecurity", "DocSecurity", "string"],
  ["Manager", "Manager", "string"],
  ["HyperlinksChanged", "HyperlinksChanged", "bool"],
  ["SharedDoc", "SharedDoc", "bool"],
  ["LinksUpToDate", "LinksUpToDate", "bool"],
  ["ScaleCrop", "ScaleCrop", "bool"],
  ["HeadingPairs", "HeadingPairs", "raw"],
  ["TitlesOfParts", "TitlesOfParts", "raw"]
];
function load_props_pairs(HP, TOP, props, opts) {
  var v = [];
  if (typeof HP == "string") v = parseVector(HP, opts);
  else for (var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function(hp) {
    return { v: hp };
  }));
  var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
    return x.v;
  }) : TOP;
  var idx = 0, len = 0;
  if (parts.length > 0) for (var i = 0; i !== v.length; i += 2) {
    len = +v[i + 1].v;
    switch (v[i].v) {
      case "Worksheets":
      case "\u5DE5\u4F5C\u8868":
      case "\u041B\u0438\u0441\u0442\u044B":
      case "\u0623\u0648\u0631\u0627\u0642 \u0627\u0644\u0639\u0645\u0644":
      case "\u30EF\u30FC\u30AF\u30B7\u30FC\u30C8":
      case "\u05D2\u05DC\u05D9\u05D5\u05E0\u05D5\u05EA \u05E2\u05D1\u05D5\u05D3\u05D4":
      case "Arbeitsbl\xE4tter":
      case "\xC7al\u0131\u015Fma Sayfalar\u0131":
      case "Feuilles de calcul":
      case "Fogli di lavoro":
      case "Folhas de c\xE1lculo":
      case "Planilhas":
      case "Regneark":
      case "Hojas de c\xE1lculo":
      case "Werkbladen":
        props.Worksheets = len;
        props.SheetNames = parts.slice(idx, idx + len);
        break;
      case "Named Ranges":
      case "Rangos con nombre":
      case "\u540D\u524D\u4ED8\u304D\u4E00\u89A7":
      case "Benannte Bereiche":
      case "Navngivne omr\xE5der":
        props.NamedRanges = len;
        props.DefinedNames = parts.slice(idx, idx + len);
        break;
      case "Charts":
      case "Diagramme":
        props.Chartsheets = len;
        props.ChartNames = parts.slice(idx, idx + len);
        break;
    }
    idx += len;
  }
}
__name(load_props_pairs, "load_props_pairs");
function parse_ext_props(data, p, opts) {
  var q = {};
  if (!p) p = {};
  data = utf8read(data);
  EXT_PROPS.forEach(function(f) {
    var xml = (data.match(matchtag(f[0])) || [])[1];
    switch (f[2]) {
      case "string":
        if (xml) p[f[1]] = unescapexml(xml);
        break;
      case "bool":
        p[f[1]] = xml === "true";
        break;
      case "raw":
        var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
        if (cur && cur.length > 0) q[f[1]] = cur[1];
        break;
    }
  });
  if (q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
  return p;
}
__name(parse_ext_props, "parse_ext_props");
var custregex = /<[^>]+>[^<]*/g;
function parse_cust_props(data, opts) {
  var p = {}, name2 = "";
  var m = data.match(custregex);
  if (m) for (var i = 0; i != m.length; ++i) {
    var x = m[i], y = parsexmltag(x);
    switch (y[0]) {
      case "<?xml":
        break;
      case "<Properties":
        break;
      case "<property":
        name2 = unescapexml(y.name);
        break;
      case "</property>":
        name2 = null;
        break;
      default:
        if (x.indexOf("<vt:") === 0) {
          var toks = x.split(">");
          var type = toks[0].slice(4), text2 = toks[1];
          switch (type) {
            case "lpstr":
            case "bstr":
            case "lpwstr":
              p[name2] = unescapexml(text2);
              break;
            case "bool":
              p[name2] = parsexmlbool(text2);
              break;
            case "i1":
            case "i2":
            case "i4":
            case "i8":
            case "int":
            case "uint":
              p[name2] = parseInt(text2, 10);
              break;
            case "r4":
            case "r8":
            case "decimal":
              p[name2] = parseFloat(text2);
              break;
            case "filetime":
            case "date":
              p[name2] = parseDate(text2);
              break;
            case "cy":
            case "error":
              p[name2] = unescapexml(text2);
              break;
            default:
              if (type.slice(-1) == "/") break;
              if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x, type, toks);
          }
        } else if (x.slice(0, 2) === "</") {
        } else if (opts.WTF) throw new Error(x);
    }
  }
  return p;
}
__name(parse_cust_props, "parse_cust_props");
var XLMLDocPropsMap = {
  Title: "Title",
  Subject: "Subject",
  Author: "Author",
  Keywords: "Keywords",
  Comments: "Description",
  LastAuthor: "LastAuthor",
  RevNumber: "Revision",
  Application: "AppName",
  /* TotalTime: 'TotalTime', */
  LastPrinted: "LastPrinted",
  CreatedDate: "Created",
  ModifiedDate: "LastSaved",
  /* Pages */
  /* Words */
  /* Characters */
  Category: "Category",
  /* PresentationFormat */
  Manager: "Manager",
  Company: "Company",
  /* Guid */
  /* HyperlinkBase */
  /* Bytes */
  /* Lines */
  /* Paragraphs */
  /* CharactersWithSpaces */
  AppVersion: "Version",
  ContentStatus: "ContentStatus",
  /* NOTE: missing from schema */
  Identifier: "Identifier",
  /* NOTE: missing from schema */
  Language: "Language"
  /* NOTE: missing from schema */
};
var evert_XLMLDPM;
function xlml_set_prop(Props, tag, val) {
  if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
  tag = evert_XLMLDPM[tag] || tag;
  Props[tag] = val;
}
__name(xlml_set_prop, "xlml_set_prop");
function parse_FILETIME(blob2) {
  var dwLowDateTime = blob2.read_shift(4), dwHighDateTime = blob2.read_shift(4);
  return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
}
__name(parse_FILETIME, "parse_FILETIME");
function parse_lpstr(blob2, type, pad) {
  var start = blob2.l;
  var str = blob2.read_shift(0, "lpstr-cp");
  if (pad) while (blob2.l - start & 3) ++blob2.l;
  return str;
}
__name(parse_lpstr, "parse_lpstr");
function parse_lpwstr(blob2, type, pad) {
  var str = blob2.read_shift(0, "lpwstr");
  if (pad) blob2.l += 4 - (str.length + 1 & 3) & 3;
  return str;
}
__name(parse_lpwstr, "parse_lpwstr");
function parse_VtStringBase(blob2, stringType, pad) {
  if (stringType === 31) return parse_lpwstr(blob2);
  return parse_lpstr(blob2, stringType, pad);
}
__name(parse_VtStringBase, "parse_VtStringBase");
function parse_VtString(blob2, t, pad) {
  return parse_VtStringBase(blob2, t, pad === false ? 0 : 4);
}
__name(parse_VtString, "parse_VtString");
function parse_VtUnalignedString(blob2, t) {
  if (!t) throw new Error("VtUnalignedString must have positive length");
  return parse_VtStringBase(blob2, t, 0);
}
__name(parse_VtUnalignedString, "parse_VtUnalignedString");
function parse_VtVecLpwstrValue(blob2) {
  var length = blob2.read_shift(4);
  var ret = [];
  for (var i = 0; i != length; ++i) {
    var start = blob2.l;
    ret[i] = blob2.read_shift(0, "lpwstr").replace(chr0, "");
    if (blob2.l - start & 2) blob2.l += 2;
  }
  return ret;
}
__name(parse_VtVecLpwstrValue, "parse_VtVecLpwstrValue");
function parse_VtVecUnalignedLpstrValue(blob2) {
  var length = blob2.read_shift(4);
  var ret = [];
  for (var i = 0; i != length; ++i) ret[i] = blob2.read_shift(0, "lpstr-cp").replace(chr0, "");
  return ret;
}
__name(parse_VtVecUnalignedLpstrValue, "parse_VtVecUnalignedLpstrValue");
function parse_VtHeadingPair(blob2) {
  var start = blob2.l;
  var headingString = parse_TypedPropertyValue(blob2, VT_USTR);
  if (blob2[blob2.l] == 0 && blob2[blob2.l + 1] == 0 && blob2.l - start & 2) blob2.l += 2;
  var headerParts = parse_TypedPropertyValue(blob2, VT_I4);
  return [headingString, headerParts];
}
__name(parse_VtHeadingPair, "parse_VtHeadingPair");
function parse_VtVecHeadingPairValue(blob2) {
  var cElements = blob2.read_shift(4);
  var out = [];
  for (var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob2));
  return out;
}
__name(parse_VtVecHeadingPairValue, "parse_VtVecHeadingPairValue");
function parse_dictionary(blob2, CodePage) {
  var cnt = blob2.read_shift(4);
  var dict = {};
  for (var j = 0; j != cnt; ++j) {
    var pid = blob2.read_shift(4);
    var len = blob2.read_shift(4);
    dict[pid] = blob2.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
    if (CodePage === 1200 && len % 2) blob2.l += 2;
  }
  if (blob2.l & 3) blob2.l = blob2.l >> 2 + 1 << 2;
  return dict;
}
__name(parse_dictionary, "parse_dictionary");
function parse_BLOB(blob2) {
  var size = blob2.read_shift(4);
  var bytes = blob2.slice(blob2.l, blob2.l + size);
  blob2.l += size;
  if ((size & 3) > 0) blob2.l += 4 - (size & 3) & 3;
  return bytes;
}
__name(parse_BLOB, "parse_BLOB");
function parse_ClipboardData(blob2) {
  var o = {};
  o.Size = blob2.read_shift(4);
  blob2.l += o.Size + 3 - (o.Size - 1) % 4;
  return o;
}
__name(parse_ClipboardData, "parse_ClipboardData");
function parse_TypedPropertyValue(blob2, type, _opts) {
  var t = blob2.read_shift(2), ret, opts = _opts || {};
  blob2.l += 2;
  if (type !== VT_VARIANT) {
    if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t & 65534) == 4126)) throw new Error("Expected type " + type + " saw " + t);
  }
  switch (type === VT_VARIANT ? t : type) {
    case 2:
      ret = blob2.read_shift(2, "i");
      if (!opts.raw) blob2.l += 2;
      return ret;
    case 3:
      ret = blob2.read_shift(4, "i");
      return ret;
    case 11:
      return blob2.read_shift(4) !== 0;
    case 19:
      ret = blob2.read_shift(4);
      return ret;
    case 30:
      return parse_lpstr(blob2, t, 4).replace(chr0, "");
    case 31:
      return parse_lpwstr(blob2);
    case 64:
      return parse_FILETIME(blob2);
    case 65:
      return parse_BLOB(blob2);
    case 71:
      return parse_ClipboardData(blob2);
    case 80:
      return parse_VtString(blob2, t, !opts.raw).replace(chr0, "");
    case 81:
      return parse_VtUnalignedString(
        blob2,
        t
        /*, 4*/
      ).replace(chr0, "");
    case 4108:
      return parse_VtVecHeadingPairValue(blob2);
    case 4126:
    case 4127:
      return t == 4127 ? parse_VtVecLpwstrValue(blob2) : parse_VtVecUnalignedLpstrValue(blob2);
    default:
      throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
  }
}
__name(parse_TypedPropertyValue, "parse_TypedPropertyValue");
function parse_PropertySet(blob2, PIDSI) {
  var start_addr = blob2.l;
  var size = blob2.read_shift(4);
  var NumProps = blob2.read_shift(4);
  var Props = [], i = 0;
  var CodePage = 0;
  var Dictionary = -1, DictObj = {};
  for (i = 0; i != NumProps; ++i) {
    var PropID = blob2.read_shift(4);
    var Offset = blob2.read_shift(4);
    Props[i] = [PropID, Offset + start_addr];
  }
  Props.sort(function(x, y) {
    return x[1] - y[1];
  });
  var PropH = {};
  for (i = 0; i != NumProps; ++i) {
    if (blob2.l !== Props[i][1]) {
      var fail = true;
      if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) {
        case 2:
          if (blob2.l + 2 === Props[i][1]) {
            blob2.l += 2;
            fail = false;
          }
          break;
        case 80:
          if (blob2.l <= Props[i][1]) {
            blob2.l = Props[i][1];
            fail = false;
          }
          break;
        case 4108:
          if (blob2.l <= Props[i][1]) {
            blob2.l = Props[i][1];
            fail = false;
          }
          break;
      }
      if ((!PIDSI || i == 0) && blob2.l <= Props[i][1]) {
        fail = false;
        blob2.l = Props[i][1];
      }
      if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob2.l + " :" + i);
    }
    if (PIDSI) {
      var piddsi = PIDSI[Props[i][0]];
      PropH[piddsi.n] = parse_TypedPropertyValue(blob2, piddsi.t, { raw: true });
      if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
      if (piddsi.n == "CodePage") switch (PropH[piddsi.n]) {
        case 0:
          PropH[piddsi.n] = 1252;
        /* falls through */
        case 874:
        case 932:
        case 936:
        case 949:
        case 950:
        case 1250:
        case 1251:
        case 1253:
        case 1254:
        case 1255:
        case 1256:
        case 1257:
        case 1258:
        case 1e4:
        case 1200:
        case 1201:
        case 1252:
        case 65e3:
        case -536:
        case 65001:
        case -535:
          set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
          break;
        default:
          throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
      }
    } else {
      if (Props[i][0] === 1) {
        CodePage = PropH.CodePage = parse_TypedPropertyValue(blob2, VT_I2);
        set_cp(CodePage);
        if (Dictionary !== -1) {
          var oldpos = blob2.l;
          blob2.l = Props[Dictionary][1];
          DictObj = parse_dictionary(blob2, CodePage);
          blob2.l = oldpos;
        }
      } else if (Props[i][0] === 0) {
        if (CodePage === 0) {
          Dictionary = i;
          blob2.l = Props[i + 1][1];
          continue;
        }
        DictObj = parse_dictionary(blob2, CodePage);
      } else {
        var name2 = DictObj[Props[i][0]];
        var val;
        switch (blob2[blob2.l]) {
          case 65:
            blob2.l += 4;
            val = parse_BLOB(blob2);
            break;
          case 30:
            blob2.l += 4;
            val = parse_VtString(blob2, blob2[blob2.l - 4]).replace(/\u0000+$/, "");
            break;
          case 31:
            blob2.l += 4;
            val = parse_VtString(blob2, blob2[blob2.l - 4]).replace(/\u0000+$/, "");
            break;
          case 3:
            blob2.l += 4;
            val = blob2.read_shift(4, "i");
            break;
          case 19:
            blob2.l += 4;
            val = blob2.read_shift(4);
            break;
          case 5:
            blob2.l += 4;
            val = blob2.read_shift(8, "f");
            break;
          case 11:
            blob2.l += 4;
            val = parsebool(blob2, 4);
            break;
          case 64:
            blob2.l += 4;
            val = parseDate(parse_FILETIME(blob2));
            break;
          default:
            throw new Error("unparsed value: " + blob2[blob2.l]);
        }
        PropH[name2] = val;
      }
    }
  }
  blob2.l = start_addr + size;
  return PropH;
}
__name(parse_PropertySet, "parse_PropertySet");
function parse_PropertySetStream(file, PIDSI, clsid) {
  var blob2 = file.content;
  if (!blob2) return {};
  prep_blob(blob2, 0);
  var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
  blob2.chk("feff", "Byte Order: ");
  blob2.read_shift(2);
  var SystemIdentifier = blob2.read_shift(4);
  var CLSID = blob2.read_shift(16);
  if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
  NumSets = blob2.read_shift(4);
  if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
  FMTID0 = blob2.read_shift(16);
  Offset0 = blob2.read_shift(4);
  if (NumSets === 1 && Offset0 !== blob2.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob2.l);
  else if (NumSets === 2) {
    FMTID1 = blob2.read_shift(16);
    Offset1 = blob2.read_shift(4);
  }
  var PSet0 = parse_PropertySet(blob2, PIDSI);
  var rval = { SystemIdentifier };
  for (var y in PSet0) rval[y] = PSet0[y];
  rval.FMTID = FMTID0;
  if (NumSets === 1) return rval;
  if (Offset1 - blob2.l == 2) blob2.l += 2;
  if (blob2.l !== Offset1) throw new Error("Length mismatch 2: " + blob2.l + " !== " + Offset1);
  var PSet1;
  try {
    PSet1 = parse_PropertySet(blob2, null);
  } catch (e) {
  }
  for (y in PSet1) rval[y] = PSet1[y];
  rval.FMTID = [FMTID0, FMTID1];
  return rval;
}
__name(parse_PropertySetStream, "parse_PropertySetStream");
function parsenoop2(blob2, length) {
  blob2.read_shift(length);
  return null;
}
__name(parsenoop2, "parsenoop2");
function parslurp(blob2, length, cb) {
  var arr = [], target = blob2.l + length;
  while (blob2.l < target) arr.push(cb(blob2, target - blob2.l));
  if (target !== blob2.l) throw new Error("Slurp error");
  return arr;
}
__name(parslurp, "parslurp");
function parsebool(blob2, length) {
  return blob2.read_shift(length) === 1;
}
__name(parsebool, "parsebool");
function parseuint16(blob2) {
  return blob2.read_shift(2, "u");
}
__name(parseuint16, "parseuint16");
function parseuint16a(blob2, length) {
  return parslurp(blob2, length, parseuint16);
}
__name(parseuint16a, "parseuint16a");
function parse_Bes(blob2) {
  var v = blob2.read_shift(1), t = blob2.read_shift(1);
  return t === 1 ? v : v === 1;
}
__name(parse_Bes, "parse_Bes");
function parse_ShortXLUnicodeString(blob2, length, opts) {
  var cch = blob2.read_shift(opts && opts.biff >= 12 ? 2 : 1);
  var encoding = "sbcs-cont";
  var cp = current_codepage;
  if (opts && opts.biff >= 8) current_codepage = 1200;
  if (!opts || opts.biff == 8) {
    var fHighByte = blob2.read_shift(1);
    if (fHighByte) {
      encoding = "dbcs-cont";
    }
  } else if (opts.biff == 12) {
    encoding = "wstr";
  }
  if (opts.biff >= 2 && opts.biff <= 5) encoding = "cpstr";
  var o = cch ? blob2.read_shift(cch, encoding) : "";
  current_codepage = cp;
  return o;
}
__name(parse_ShortXLUnicodeString, "parse_ShortXLUnicodeString");
function parse_XLUnicodeRichExtendedString(blob2) {
  var cp = current_codepage;
  current_codepage = 1200;
  var cch = blob2.read_shift(2), flags = blob2.read_shift(1);
  var fExtSt = flags & 4, fRichSt = flags & 8;
  var width = 1 + (flags & 1);
  var cRun = 0, cbExtRst;
  var z = {};
  if (fRichSt) cRun = blob2.read_shift(2);
  if (fExtSt) cbExtRst = blob2.read_shift(4);
  var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
  var msg = cch === 0 ? "" : blob2.read_shift(cch, encoding);
  if (fRichSt) blob2.l += 4 * cRun;
  if (fExtSt) blob2.l += cbExtRst;
  z.t = msg;
  if (!fRichSt) {
    z.raw = "<t>" + z.t + "</t>";
    z.r = z.t;
  }
  current_codepage = cp;
  return z;
}
__name(parse_XLUnicodeRichExtendedString, "parse_XLUnicodeRichExtendedString");
function parse_XLUnicodeStringNoCch(blob2, cch, opts) {
  var retval;
  if (opts) {
    if (opts.biff >= 2 && opts.biff <= 5) return blob2.read_shift(cch, "cpstr");
    if (opts.biff >= 12) return blob2.read_shift(cch, "dbcs-cont");
  }
  var fHighByte = blob2.read_shift(1);
  if (fHighByte === 0) {
    retval = blob2.read_shift(cch, "sbcs-cont");
  } else {
    retval = blob2.read_shift(cch, "dbcs-cont");
  }
  return retval;
}
__name(parse_XLUnicodeStringNoCch, "parse_XLUnicodeStringNoCch");
function parse_XLUnicodeString(blob2, length, opts) {
  var cch = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  if (cch === 0) {
    blob2.l++;
    return "";
  }
  return parse_XLUnicodeStringNoCch(blob2, cch, opts);
}
__name(parse_XLUnicodeString, "parse_XLUnicodeString");
function parse_XLUnicodeString2(blob2, length, opts) {
  if (opts.biff > 5) return parse_XLUnicodeString(blob2, length, opts);
  var cch = blob2.read_shift(1);
  if (cch === 0) {
    blob2.l++;
    return "";
  }
  return blob2.read_shift(cch, opts.biff <= 4 || !blob2.lens ? "cpstr" : "sbcs-cont");
}
__name(parse_XLUnicodeString2, "parse_XLUnicodeString2");
function parse_ControlInfo(blob2) {
  var flags = blob2.read_shift(1);
  blob2.l++;
  var accel = blob2.read_shift(2);
  blob2.l += 2;
  return [flags, accel];
}
__name(parse_ControlInfo, "parse_ControlInfo");
function parse_URLMoniker(blob2) {
  var len = blob2.read_shift(4), start = blob2.l;
  var extra = false;
  if (len > 24) {
    blob2.l += len - 24;
    if (blob2.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
    blob2.l = start;
  }
  var url2 = blob2.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
  if (extra) blob2.l += 24;
  return url2;
}
__name(parse_URLMoniker, "parse_URLMoniker");
function parse_FileMoniker(blob2) {
  var cAnti = blob2.read_shift(2);
  var preamble = "";
  while (cAnti-- > 0) preamble += "../";
  var ansiPath = blob2.read_shift(0, "lpstr-ansi");
  blob2.l += 2;
  if (blob2.read_shift(2) != 57005) throw new Error("Bad FileMoniker");
  var sz = blob2.read_shift(4);
  if (sz === 0) return preamble + ansiPath.replace(/\\/g, "/");
  var bytes = blob2.read_shift(4);
  if (blob2.read_shift(2) != 3) throw new Error("Bad FileMoniker");
  var unicodePath = blob2.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
  return preamble + unicodePath;
}
__name(parse_FileMoniker, "parse_FileMoniker");
function parse_HyperlinkMoniker(blob2, length) {
  var clsid = blob2.read_shift(16);
  length -= 16;
  switch (clsid) {
    case "e0c9ea79f9bace118c8200aa004ba90b":
      return parse_URLMoniker(blob2, length);
    case "0303000000000000c000000000000046":
      return parse_FileMoniker(blob2, length);
    default:
      throw new Error("Unsupported Moniker " + clsid);
  }
}
__name(parse_HyperlinkMoniker, "parse_HyperlinkMoniker");
function parse_HyperlinkString(blob2) {
  var len = blob2.read_shift(4);
  var o = len > 0 ? blob2.read_shift(len, "utf16le").replace(chr0, "") : "";
  return o;
}
__name(parse_HyperlinkString, "parse_HyperlinkString");
function parse_Hyperlink(blob2, length) {
  var end = blob2.l + length;
  var sVer = blob2.read_shift(4);
  if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
  var flags = blob2.read_shift(2);
  blob2.l += 2;
  var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
  if (flags & 16) displayName = parse_HyperlinkString(blob2, end - blob2.l);
  if (flags & 128) targetFrameName = parse_HyperlinkString(blob2, end - blob2.l);
  if ((flags & 257) === 257) moniker = parse_HyperlinkString(blob2, end - blob2.l);
  if ((flags & 257) === 1) oleMoniker = parse_HyperlinkMoniker(blob2, end - blob2.l);
  if (flags & 8) Loc = parse_HyperlinkString(blob2, end - blob2.l);
  if (flags & 32) guid = blob2.read_shift(16);
  if (flags & 64) fileTime = parse_FILETIME(
    blob2
    /*, 8*/
  );
  blob2.l = end;
  var target = targetFrameName || moniker || oleMoniker || "";
  if (target && Loc) target += "#" + Loc;
  if (!target) target = "#" + Loc;
  if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
  var out = { Target: target };
  if (guid) out.guid = guid;
  if (fileTime) out.time = fileTime;
  if (displayName) out.Tooltip = displayName;
  return out;
}
__name(parse_Hyperlink, "parse_Hyperlink");
function parse_LongRGBA(blob2) {
  var r = blob2.read_shift(1), g = blob2.read_shift(1), b = blob2.read_shift(1), a = blob2.read_shift(1);
  return [r, g, b, a];
}
__name(parse_LongRGBA, "parse_LongRGBA");
function parse_LongRGB(blob2, length) {
  var x = parse_LongRGBA(blob2, length);
  x[3] = 0;
  return x;
}
__name(parse_LongRGB, "parse_LongRGB");
function parse_XLSCell(blob2) {
  var rw = blob2.read_shift(2);
  var col = blob2.read_shift(2);
  var ixfe = blob2.read_shift(2);
  return { r: rw, c: col, ixfe };
}
__name(parse_XLSCell, "parse_XLSCell");
function parse_frtHeader(blob2) {
  var rt = blob2.read_shift(2);
  var flags = blob2.read_shift(2);
  blob2.l += 8;
  return { type: rt, flags };
}
__name(parse_frtHeader, "parse_frtHeader");
function parse_OptXLUnicodeString(blob2, length, opts) {
  return length === 0 ? "" : parse_XLUnicodeString2(blob2, length, opts);
}
__name(parse_OptXLUnicodeString, "parse_OptXLUnicodeString");
function parse_XTI(blob2, length, opts) {
  var w = opts.biff > 8 ? 4 : 2;
  var iSupBook = blob2.read_shift(w), itabFirst = blob2.read_shift(w, "i"), itabLast = blob2.read_shift(w, "i");
  return [iSupBook, itabFirst, itabLast];
}
__name(parse_XTI, "parse_XTI");
function parse_RkRec(blob2) {
  var ixfe = blob2.read_shift(2);
  var RK = parse_RkNumber(blob2);
  return [ixfe, RK];
}
__name(parse_RkRec, "parse_RkRec");
function parse_AddinUdf(blob2, length, opts) {
  blob2.l += 4;
  length -= 4;
  var l = blob2.l + length;
  var udfName = parse_ShortXLUnicodeString(blob2, length, opts);
  var cb = blob2.read_shift(2);
  l -= blob2.l;
  if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
  blob2.l += cb;
  return udfName;
}
__name(parse_AddinUdf, "parse_AddinUdf");
function parse_Ref8U(blob2) {
  var rwFirst = blob2.read_shift(2);
  var rwLast = blob2.read_shift(2);
  var colFirst = blob2.read_shift(2);
  var colLast = blob2.read_shift(2);
  return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
}
__name(parse_Ref8U, "parse_Ref8U");
function parse_RefU(blob2) {
  var rwFirst = blob2.read_shift(2);
  var rwLast = blob2.read_shift(2);
  var colFirst = blob2.read_shift(1);
  var colLast = blob2.read_shift(1);
  return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
}
__name(parse_RefU, "parse_RefU");
var parse_Ref = parse_RefU;
function parse_FtCmo(blob2) {
  blob2.l += 4;
  var ot = blob2.read_shift(2);
  var id = blob2.read_shift(2);
  var flags = blob2.read_shift(2);
  blob2.l += 12;
  return [id, ot, flags];
}
__name(parse_FtCmo, "parse_FtCmo");
function parse_FtNts(blob2) {
  var out = {};
  blob2.l += 4;
  blob2.l += 16;
  out.fSharedNote = blob2.read_shift(2);
  blob2.l += 4;
  return out;
}
__name(parse_FtNts, "parse_FtNts");
function parse_FtCf(blob2) {
  var out = {};
  blob2.l += 4;
  blob2.cf = blob2.read_shift(2);
  return out;
}
__name(parse_FtCf, "parse_FtCf");
function parse_FtSkip(blob2) {
  blob2.l += 2;
  blob2.l += blob2.read_shift(2);
}
__name(parse_FtSkip, "parse_FtSkip");
var FtTab = {
  /*::[*/
  0: parse_FtSkip,
  /* FtEnd */
  /*::[*/
  4: parse_FtSkip,
  /* FtMacro */
  /*::[*/
  5: parse_FtSkip,
  /* FtButton */
  /*::[*/
  6: parse_FtSkip,
  /* FtGmo */
  /*::[*/
  7: parse_FtCf,
  /* FtCf */
  /*::[*/
  8: parse_FtSkip,
  /* FtPioGrbit */
  /*::[*/
  9: parse_FtSkip,
  /* FtPictFmla */
  /*::[*/
  10: parse_FtSkip,
  /* FtCbls */
  /*::[*/
  11: parse_FtSkip,
  /* FtRbo */
  /*::[*/
  12: parse_FtSkip,
  /* FtSbs */
  /*::[*/
  13: parse_FtNts,
  /* FtNts */
  /*::[*/
  14: parse_FtSkip,
  /* FtSbsFmla */
  /*::[*/
  15: parse_FtSkip,
  /* FtGboData */
  /*::[*/
  16: parse_FtSkip,
  /* FtEdoData */
  /*::[*/
  17: parse_FtSkip,
  /* FtRboData */
  /*::[*/
  18: parse_FtSkip,
  /* FtCblsData */
  /*::[*/
  19: parse_FtSkip,
  /* FtLbsData */
  /*::[*/
  20: parse_FtSkip,
  /* FtCblsFmla */
  /*::[*/
  21: parse_FtCmo
};
function parse_FtArray(blob2, length) {
  var tgt = blob2.l + length;
  var fts = [];
  while (blob2.l < tgt) {
    var ft = blob2.read_shift(2);
    blob2.l -= 2;
    try {
      fts.push(FtTab[ft](blob2, tgt - blob2.l));
    } catch (e) {
      blob2.l = tgt;
      return fts;
    }
  }
  if (blob2.l != tgt) blob2.l = tgt;
  return fts;
}
__name(parse_FtArray, "parse_FtArray");
function parse_BOF(blob2, length) {
  var o = { BIFFVer: 0, dt: 0 };
  o.BIFFVer = blob2.read_shift(2);
  length -= 2;
  if (length >= 2) {
    o.dt = blob2.read_shift(2);
    blob2.l -= 2;
  }
  switch (o.BIFFVer) {
    case 1536:
    /* BIFF8 */
    case 1280:
    /* BIFF5 */
    case 1024:
    /* BIFF4 */
    case 768:
    /* BIFF3 */
    case 512:
    /* BIFF2 */
    case 2:
    case 7:
      break;
    default:
      if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
  }
  blob2.read_shift(length);
  return o;
}
__name(parse_BOF, "parse_BOF");
function parse_InterfaceHdr(blob2, length) {
  if (length === 0) return 1200;
  if (blob2.read_shift(2) !== 1200) {
  }
  return 1200;
}
__name(parse_InterfaceHdr, "parse_InterfaceHdr");
function parse_WriteAccess(blob2, length, opts) {
  if (opts.enc) {
    blob2.l += length;
    return "";
  }
  var l = blob2.l;
  var UserName = parse_XLUnicodeString2(blob2, 0, opts);
  blob2.read_shift(length + l - blob2.l);
  return UserName;
}
__name(parse_WriteAccess, "parse_WriteAccess");
function parse_WsBool(blob2, length, opts) {
  var flags = opts && opts.biff == 8 || length == 2 ? blob2.read_shift(2) : (blob2.l += length, 0);
  return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
}
__name(parse_WsBool, "parse_WsBool");
function parse_BoundSheet8(blob2, length, opts) {
  var pos = blob2.read_shift(4);
  var hidden = blob2.read_shift(1) & 3;
  var dt = blob2.read_shift(1);
  switch (dt) {
    case 0:
      dt = "Worksheet";
      break;
    case 1:
      dt = "Macrosheet";
      break;
    case 2:
      dt = "Chartsheet";
      break;
    case 6:
      dt = "VBAModule";
      break;
  }
  var name2 = parse_ShortXLUnicodeString(blob2, 0, opts);
  if (name2.length === 0) name2 = "Sheet1";
  return { pos, hs: hidden, dt, name: name2 };
}
__name(parse_BoundSheet8, "parse_BoundSheet8");
function parse_SST(blob2, length) {
  var end = blob2.l + length;
  var cnt = blob2.read_shift(4);
  var ucnt = blob2.read_shift(4);
  var strs2 = [];
  for (var i = 0; i != ucnt && blob2.l < end; ++i) {
    strs2.push(parse_XLUnicodeRichExtendedString(blob2));
  }
  strs2.Count = cnt;
  strs2.Unique = ucnt;
  return strs2;
}
__name(parse_SST, "parse_SST");
function parse_ExtSST(blob2, length) {
  var extsst = {};
  extsst.dsst = blob2.read_shift(2);
  blob2.l += length - 2;
  return extsst;
}
__name(parse_ExtSST, "parse_ExtSST");
function parse_Row(blob2) {
  var z = {};
  z.r = blob2.read_shift(2);
  z.c = blob2.read_shift(2);
  z.cnt = blob2.read_shift(2) - z.c;
  var miyRw = blob2.read_shift(2);
  blob2.l += 4;
  var flags = blob2.read_shift(1);
  blob2.l += 3;
  if (flags & 7) z.level = flags & 7;
  if (flags & 32) z.hidden = true;
  if (flags & 64) z.hpt = miyRw / 20;
  return z;
}
__name(parse_Row, "parse_Row");
function parse_ForceFullCalculation(blob2) {
  var header = parse_frtHeader(blob2);
  if (header.type != 2211) throw new Error("Invalid Future Record " + header.type);
  var fullcalc = blob2.read_shift(4);
  return fullcalc !== 0;
}
__name(parse_ForceFullCalculation, "parse_ForceFullCalculation");
function parse_RecalcId(blob2) {
  blob2.read_shift(2);
  return blob2.read_shift(4);
}
__name(parse_RecalcId, "parse_RecalcId");
function parse_DefaultRowHeight(blob2, length, opts) {
  var f = 0;
  if (!(opts && opts.biff == 2)) {
    f = blob2.read_shift(2);
  }
  var miyRw = blob2.read_shift(2);
  if (opts && opts.biff == 2) {
    f = 1 - (miyRw >> 15);
    miyRw &= 32767;
  }
  var fl = { Unsynced: f & 1, DyZero: (f & 2) >> 1, ExAsc: (f & 4) >> 2, ExDsc: (f & 8) >> 3 };
  return [fl, miyRw];
}
__name(parse_DefaultRowHeight, "parse_DefaultRowHeight");
function parse_Window1(blob2) {
  var xWn = blob2.read_shift(2), yWn = blob2.read_shift(2), dxWn = blob2.read_shift(2), dyWn = blob2.read_shift(2);
  var flags = blob2.read_shift(2), iTabCur = blob2.read_shift(2), iTabFirst = blob2.read_shift(2);
  var ctabSel = blob2.read_shift(2), wTabRatio = blob2.read_shift(2);
  return {
    Pos: [xWn, yWn],
    Dim: [dxWn, dyWn],
    Flags: flags,
    CurTab: iTabCur,
    FirstTab: iTabFirst,
    Selected: ctabSel,
    TabRatio: wTabRatio
  };
}
__name(parse_Window1, "parse_Window1");
function parse_Window2(blob2, length, opts) {
  if (opts && opts.biff >= 2 && opts.biff < 5) return {};
  var f = blob2.read_shift(2);
  return { RTL: f & 64 };
}
__name(parse_Window2, "parse_Window2");
function parse_Pane() {
}
__name(parse_Pane, "parse_Pane");
function parse_Font(blob2, length, opts) {
  var o = {
    dyHeight: blob2.read_shift(2),
    fl: blob2.read_shift(2)
  };
  switch (opts && opts.biff || 8) {
    case 2:
      break;
    case 3:
    case 4:
      blob2.l += 2;
      break;
    default:
      blob2.l += 10;
      break;
  }
  o.name = parse_ShortXLUnicodeString(blob2, 0, opts);
  return o;
}
__name(parse_Font, "parse_Font");
function parse_LabelSst(blob2) {
  var cell = parse_XLSCell(blob2);
  cell.isst = blob2.read_shift(4);
  return cell;
}
__name(parse_LabelSst, "parse_LabelSst");
function parse_Label(blob2, length, opts) {
  if (opts.biffguess && opts.biff == 2) opts.biff = 5;
  var target = blob2.l + length;
  var cell = parse_XLSCell(blob2, 6);
  if (opts.biff == 2) blob2.l++;
  var str = parse_XLUnicodeString(blob2, target - blob2.l, opts);
  cell.val = str;
  return cell;
}
__name(parse_Label, "parse_Label");
function parse_Format(blob2, length, opts) {
  var numFmtId = blob2.read_shift(2);
  var fmtstr = parse_XLUnicodeString2(blob2, 0, opts);
  return [numFmtId, fmtstr];
}
__name(parse_Format, "parse_Format");
var parse_BIFF2Format = parse_XLUnicodeString2;
function parse_Dimensions(blob2, length, opts) {
  var end = blob2.l + length;
  var w = opts.biff == 8 || !opts.biff ? 4 : 2;
  var r = blob2.read_shift(w), R = blob2.read_shift(w);
  var c = blob2.read_shift(2), C = blob2.read_shift(2);
  blob2.l = end;
  return { s: { r, c }, e: { r: R, c: C } };
}
__name(parse_Dimensions, "parse_Dimensions");
function parse_RK(blob2) {
  var rw = blob2.read_shift(2), col = blob2.read_shift(2);
  var rkrec = parse_RkRec(blob2);
  return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
}
__name(parse_RK, "parse_RK");
function parse_MulRk(blob2, length) {
  var target = blob2.l + length - 2;
  var rw = blob2.read_shift(2), col = blob2.read_shift(2);
  var rkrecs = [];
  while (blob2.l < target) rkrecs.push(parse_RkRec(blob2));
  if (blob2.l !== target) throw new Error("MulRK read error");
  var lastcol = blob2.read_shift(2);
  if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
  return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
}
__name(parse_MulRk, "parse_MulRk");
function parse_MulBlank(blob2, length) {
  var target = blob2.l + length - 2;
  var rw = blob2.read_shift(2), col = blob2.read_shift(2);
  var ixfes = [];
  while (blob2.l < target) ixfes.push(blob2.read_shift(2));
  if (blob2.l !== target) throw new Error("MulBlank read error");
  var lastcol = blob2.read_shift(2);
  if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
  return { r: rw, c: col, C: lastcol, ixfe: ixfes };
}
__name(parse_MulBlank, "parse_MulBlank");
function parse_CellStyleXF(blob2, length, style, opts) {
  var o = {};
  var a = blob2.read_shift(4), b = blob2.read_shift(4);
  var c = blob2.read_shift(4), d = blob2.read_shift(2);
  o.patternType = XLSFillPattern[c >> 26];
  if (!opts.cellStyles) return o;
  o.alc = a & 7;
  o.fWrap = a >> 3 & 1;
  o.alcV = a >> 4 & 7;
  o.fJustLast = a >> 7 & 1;
  o.trot = a >> 8 & 255;
  o.cIndent = a >> 16 & 15;
  o.fShrinkToFit = a >> 20 & 1;
  o.iReadOrder = a >> 22 & 2;
  o.fAtrNum = a >> 26 & 1;
  o.fAtrFnt = a >> 27 & 1;
  o.fAtrAlc = a >> 28 & 1;
  o.fAtrBdr = a >> 29 & 1;
  o.fAtrPat = a >> 30 & 1;
  o.fAtrProt = a >> 31 & 1;
  o.dgLeft = b & 15;
  o.dgRight = b >> 4 & 15;
  o.dgTop = b >> 8 & 15;
  o.dgBottom = b >> 12 & 15;
  o.icvLeft = b >> 16 & 127;
  o.icvRight = b >> 23 & 127;
  o.grbitDiag = b >> 30 & 3;
  o.icvTop = c & 127;
  o.icvBottom = c >> 7 & 127;
  o.icvDiag = c >> 14 & 127;
  o.dgDiag = c >> 21 & 15;
  o.icvFore = d & 127;
  o.icvBack = d >> 7 & 127;
  o.fsxButton = d >> 14 & 1;
  return o;
}
__name(parse_CellStyleXF, "parse_CellStyleXF");
function parse_XF(blob2, length, opts) {
  var o = {};
  o.ifnt = blob2.read_shift(2);
  o.numFmtId = blob2.read_shift(2);
  o.flags = blob2.read_shift(2);
  o.fStyle = o.flags >> 2 & 1;
  length -= 6;
  o.data = parse_CellStyleXF(blob2, length, o.fStyle, opts);
  return o;
}
__name(parse_XF, "parse_XF");
function parse_Guts(blob2) {
  blob2.l += 4;
  var out = [blob2.read_shift(2), blob2.read_shift(2)];
  if (out[0] !== 0) out[0]--;
  if (out[1] !== 0) out[1]--;
  if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
  return out;
}
__name(parse_Guts, "parse_Guts");
function parse_BoolErr(blob2, length, opts) {
  var cell = parse_XLSCell(blob2, 6);
  if (opts.biff == 2 || length == 9) ++blob2.l;
  var val = parse_Bes(blob2, 2);
  cell.val = val;
  cell.t = val === true || val === false ? "b" : "e";
  return cell;
}
__name(parse_BoolErr, "parse_BoolErr");
function parse_Number(blob2, length, opts) {
  if (opts.biffguess && opts.biff == 2) opts.biff = 5;
  var cell = parse_XLSCell(blob2, 6);
  var xnum = parse_Xnum(blob2, 8);
  cell.val = xnum;
  return cell;
}
__name(parse_Number, "parse_Number");
var parse_XLHeaderFooter = parse_OptXLUnicodeString;
function parse_SupBook(blob2, length, opts) {
  var end = blob2.l + length;
  var ctab = blob2.read_shift(2);
  var cch = blob2.read_shift(2);
  opts.sbcch = cch;
  if (cch == 1025 || cch == 14849) return [cch, ctab];
  if (cch < 1 || cch > 255) throw new Error("Unexpected SupBook type: " + cch);
  var virtPath = parse_XLUnicodeStringNoCch(blob2, cch);
  var rgst = [];
  while (end > blob2.l) rgst.push(parse_XLUnicodeString(blob2));
  return [cch, ctab, virtPath, rgst];
}
__name(parse_SupBook, "parse_SupBook");
function parse_ExternName(blob2, length, opts) {
  var flags = blob2.read_shift(2);
  var body;
  var o = {
    fBuiltIn: flags & 1,
    fWantAdvise: flags >>> 1 & 1,
    fWantPict: flags >>> 2 & 1,
    fOle: flags >>> 3 & 1,
    fOleLink: flags >>> 4 & 1,
    cf: flags >>> 5 & 1023,
    fIcon: flags >>> 15 & 1
  };
  if (opts.sbcch === 14849) body = parse_AddinUdf(blob2, length - 2, opts);
  o.body = body || blob2.read_shift(length - 2);
  if (typeof body === "string") o.Name = body;
  return o;
}
__name(parse_ExternName, "parse_ExternName");
var XLSLblBuiltIn = [
  "_xlnm.Consolidate_Area",
  "_xlnm.Auto_Open",
  "_xlnm.Auto_Close",
  "_xlnm.Extract",
  "_xlnm.Database",
  "_xlnm.Criteria",
  "_xlnm.Print_Area",
  "_xlnm.Print_Titles",
  "_xlnm.Recorder",
  "_xlnm.Data_Form",
  "_xlnm.Auto_Activate",
  "_xlnm.Auto_Deactivate",
  "_xlnm.Sheet_Title",
  "_xlnm._FilterDatabase"
];
function parse_Lbl(blob2, length, opts) {
  var target = blob2.l + length;
  var flags = blob2.read_shift(2);
  var chKey = blob2.read_shift(1);
  var cch = blob2.read_shift(1);
  var cce = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  var itab = 0;
  if (!opts || opts.biff >= 5) {
    if (opts.biff != 5) blob2.l += 2;
    itab = blob2.read_shift(2);
    if (opts.biff == 5) blob2.l += 2;
    blob2.l += 4;
  }
  var name2 = parse_XLUnicodeStringNoCch(blob2, cch, opts);
  if (flags & 32) name2 = XLSLblBuiltIn[name2.charCodeAt(0)];
  var npflen = target - blob2.l;
  if (opts && opts.biff == 2) --npflen;
  var rgce = target == blob2.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob2, npflen, opts, cce);
  return {
    chKey,
    Name: name2,
    itab,
    rgce
  };
}
__name(parse_Lbl, "parse_Lbl");
function parse_ExternSheet(blob2, length, opts) {
  if (opts.biff < 8) return parse_BIFF5ExternSheet(blob2, length, opts);
  var o = [], target = blob2.l + length, len = blob2.read_shift(opts.biff > 8 ? 4 : 2);
  while (len-- !== 0) o.push(parse_XTI(blob2, opts.biff > 8 ? 12 : 6, opts));
  if (blob2.l != target) throw new Error("Bad ExternSheet: " + blob2.l + " != " + target);
  return o;
}
__name(parse_ExternSheet, "parse_ExternSheet");
function parse_BIFF5ExternSheet(blob2, length, opts) {
  if (blob2[blob2.l + 1] == 3) blob2[blob2.l]++;
  var o = parse_ShortXLUnicodeString(blob2, length, opts);
  return o.charCodeAt(0) == 3 ? o.slice(1) : o;
}
__name(parse_BIFF5ExternSheet, "parse_BIFF5ExternSheet");
function parse_NameCmt(blob2, length, opts) {
  if (opts.biff < 8) {
    blob2.l += length;
    return;
  }
  var cchName = blob2.read_shift(2);
  var cchComment = blob2.read_shift(2);
  var name2 = parse_XLUnicodeStringNoCch(blob2, cchName, opts);
  var comment = parse_XLUnicodeStringNoCch(blob2, cchComment, opts);
  return [name2, comment];
}
__name(parse_NameCmt, "parse_NameCmt");
function parse_ShrFmla(blob2, length, opts) {
  var ref = parse_RefU(blob2, 6);
  blob2.l++;
  var cUse = blob2.read_shift(1);
  length -= 8;
  return [parse_SharedParsedFormula(blob2, length, opts), cUse, ref];
}
__name(parse_ShrFmla, "parse_ShrFmla");
function parse_Array(blob2, length, opts) {
  var ref = parse_Ref(blob2, 6);
  switch (opts.biff) {
    case 2:
      blob2.l++;
      length -= 7;
      break;
    case 3:
    case 4:
      blob2.l += 2;
      length -= 8;
      break;
    default:
      blob2.l += 6;
      length -= 12;
  }
  return [ref, parse_ArrayParsedFormula(blob2, length, opts, ref)];
}
__name(parse_Array, "parse_Array");
function parse_MTRSettings(blob2) {
  var fMTREnabled = blob2.read_shift(4) !== 0;
  var fUserSetThreadCount = blob2.read_shift(4) !== 0;
  var cUserThreadCount = blob2.read_shift(4);
  return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
}
__name(parse_MTRSettings, "parse_MTRSettings");
function parse_NoteSh(blob2, length, opts) {
  if (opts.biff < 8) return;
  var row = blob2.read_shift(2), col = blob2.read_shift(2);
  var flags = blob2.read_shift(2), idObj = blob2.read_shift(2);
  var stAuthor = parse_XLUnicodeString2(blob2, 0, opts);
  if (opts.biff < 8) blob2.read_shift(1);
  return [{ r: row, c: col }, stAuthor, idObj, flags];
}
__name(parse_NoteSh, "parse_NoteSh");
function parse_Note(blob2, length, opts) {
  return parse_NoteSh(blob2, length, opts);
}
__name(parse_Note, "parse_Note");
function parse_MergeCells(blob2, length) {
  var merges = [];
  var cmcs = blob2.read_shift(2);
  while (cmcs--) merges.push(parse_Ref8U(blob2, length));
  return merges;
}
__name(parse_MergeCells, "parse_MergeCells");
function parse_Obj(blob2, length, opts) {
  if (opts && opts.biff < 8) return parse_BIFF5Obj(blob2, length, opts);
  var cmo = parse_FtCmo(blob2, 22);
  var fts = parse_FtArray(blob2, length - 22, cmo[1]);
  return { cmo, ft: fts };
}
__name(parse_Obj, "parse_Obj");
var parse_BIFF5OT = {
  8: function(blob2, length) {
    var tgt = blob2.l + length;
    blob2.l += 10;
    var cf = blob2.read_shift(2);
    blob2.l += 4;
    blob2.l += 2;
    blob2.l += 2;
    blob2.l += 2;
    blob2.l += 4;
    var cchName = blob2.read_shift(1);
    blob2.l += cchName;
    blob2.l = tgt;
    return { fmt: cf };
  }
};
function parse_BIFF5Obj(blob2, length, opts) {
  blob2.l += 4;
  var ot = blob2.read_shift(2);
  var id = blob2.read_shift(2);
  var grbit = blob2.read_shift(2);
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 2;
  blob2.l += 6;
  length -= 36;
  var fts = [];
  fts.push((parse_BIFF5OT[ot] || parsenoop)(blob2, length, opts));
  return { cmo: [id, ot, grbit], ft: fts };
}
__name(parse_BIFF5Obj, "parse_BIFF5Obj");
function parse_TxO(blob2, length, opts) {
  var s = blob2.l;
  var texts = "";
  try {
    blob2.l += 4;
    var ot = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
    var controlInfo;
    if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob2.l += 6;
    else controlInfo = parse_ControlInfo(blob2, 6, opts);
    var cchText = blob2.read_shift(2);
    blob2.read_shift(2);
    parseuint16(blob2, 2);
    var len = blob2.read_shift(2);
    blob2.l += len;
    for (var i = 1; i < blob2.lens.length - 1; ++i) {
      if (blob2.l - s != blob2.lens[i]) throw new Error("TxO: bad continue record");
      var hdr = blob2[blob2.l];
      var t = parse_XLUnicodeStringNoCch(blob2, blob2.lens[i + 1] - blob2.lens[i] - 1);
      texts += t;
      if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
    }
    if (texts.length !== cchText && texts.length !== cchText * 2) {
      throw new Error("cchText: " + cchText + " != " + texts.length);
    }
    blob2.l = s + length;
    return { t: texts };
  } catch (e) {
    blob2.l = s + length;
    return { t: texts };
  }
}
__name(parse_TxO, "parse_TxO");
function parse_HLink(blob2, length) {
  var ref = parse_Ref8U(blob2, 8);
  blob2.l += 16;
  var hlink = parse_Hyperlink(blob2, length - 24);
  return [ref, hlink];
}
__name(parse_HLink, "parse_HLink");
function parse_HLinkTooltip(blob2, length) {
  blob2.read_shift(2);
  var ref = parse_Ref8U(blob2, 8);
  var wzTooltip = blob2.read_shift((length - 10) / 2, "dbcs-cont");
  wzTooltip = wzTooltip.replace(chr0, "");
  return [ref, wzTooltip];
}
__name(parse_HLinkTooltip, "parse_HLinkTooltip");
function parse_Country(blob2) {
  var o = [0, 0], d;
  d = blob2.read_shift(2);
  o[0] = CountryEnum[d] || d;
  d = blob2.read_shift(2);
  o[1] = CountryEnum[d] || d;
  return o;
}
__name(parse_Country, "parse_Country");
function parse_ClrtClient(blob2) {
  var ccv = blob2.read_shift(2);
  var o = [];
  while (ccv-- > 0) o.push(parse_LongRGB(blob2, 8));
  return o;
}
__name(parse_ClrtClient, "parse_ClrtClient");
function parse_Palette(blob2) {
  var ccv = blob2.read_shift(2);
  var o = [];
  while (ccv-- > 0) o.push(parse_LongRGB(blob2, 8));
  return o;
}
__name(parse_Palette, "parse_Palette");
function parse_XFCRC(blob2) {
  blob2.l += 2;
  var o = { cxfs: 0, crc: 0 };
  o.cxfs = blob2.read_shift(2);
  o.crc = blob2.read_shift(4);
  return o;
}
__name(parse_XFCRC, "parse_XFCRC");
function parse_ColInfo(blob2, length, opts) {
  if (!opts.cellStyles) return parsenoop(blob2, length);
  var w = opts && opts.biff >= 12 ? 4 : 2;
  var colFirst = blob2.read_shift(w);
  var colLast = blob2.read_shift(w);
  var coldx = blob2.read_shift(w);
  var ixfe = blob2.read_shift(w);
  var flags = blob2.read_shift(2);
  if (w == 2) blob2.l += 2;
  var o = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
  if (opts.biff >= 5 || !opts.biff) o.level = flags >> 8 & 7;
  return o;
}
__name(parse_ColInfo, "parse_ColInfo");
function parse_Setup(blob2, length) {
  var o = {};
  if (length < 32) return o;
  blob2.l += 16;
  o.header = parse_Xnum(blob2, 8);
  o.footer = parse_Xnum(blob2, 8);
  blob2.l += 2;
  return o;
}
__name(parse_Setup, "parse_Setup");
function parse_ShtProps(blob2, length, opts) {
  var def = { area: false };
  if (opts.biff != 5) {
    blob2.l += length;
    return def;
  }
  var d = blob2.read_shift(1);
  blob2.l += 3;
  if (d & 16) def.area = true;
  return def;
}
__name(parse_ShtProps, "parse_ShtProps");
var parse_Blank = parse_XLSCell;
var parse_Scl = parseuint16a;
var parse_String = parse_XLUnicodeString;
function parse_ImData(blob2) {
  var cf = blob2.read_shift(2);
  var env3 = blob2.read_shift(2);
  var lcb = blob2.read_shift(4);
  var o = { fmt: cf, env: env3, len: lcb, data: blob2.slice(blob2.l, blob2.l + lcb) };
  blob2.l += lcb;
  return o;
}
__name(parse_ImData, "parse_ImData");
function parse_BIFF2STR(blob2, length, opts) {
  if (opts.biffguess && opts.biff == 5) opts.biff = 2;
  var cell = parse_XLSCell(blob2, 6);
  ++blob2.l;
  var str = parse_XLUnicodeString2(blob2, length - 7, opts);
  cell.t = "str";
  cell.val = str;
  return cell;
}
__name(parse_BIFF2STR, "parse_BIFF2STR");
function parse_BIFF2NUM(blob2) {
  var cell = parse_XLSCell(blob2, 6);
  ++blob2.l;
  var num = parse_Xnum(blob2, 8);
  cell.t = "n";
  cell.val = num;
  return cell;
}
__name(parse_BIFF2NUM, "parse_BIFF2NUM");
function parse_BIFF2INT(blob2) {
  var cell = parse_XLSCell(blob2, 6);
  ++blob2.l;
  var num = blob2.read_shift(2);
  cell.t = "n";
  cell.val = num;
  return cell;
}
__name(parse_BIFF2INT, "parse_BIFF2INT");
function parse_BIFF2STRING(blob2) {
  var cch = blob2.read_shift(1);
  if (cch === 0) {
    blob2.l++;
    return "";
  }
  return blob2.read_shift(cch, "sbcs-cont");
}
__name(parse_BIFF2STRING, "parse_BIFF2STRING");
function parse_BIFF2FONTXTRA(blob2, length) {
  blob2.l += 6;
  blob2.l += 2;
  blob2.l += 1;
  blob2.l += 3;
  blob2.l += 1;
  blob2.l += length - 13;
}
__name(parse_BIFF2FONTXTRA, "parse_BIFF2FONTXTRA");
function parse_RString(blob2, length, opts) {
  var end = blob2.l + length;
  var cell = parse_XLSCell(blob2, 6);
  var cch = blob2.read_shift(2);
  var str = parse_XLUnicodeStringNoCch(blob2, cch, opts);
  blob2.l = end;
  cell.t = "str";
  cell.val = str;
  return cell;
}
__name(parse_RString, "parse_RString");
var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
var DBF = /* @__PURE__ */ function() {
  var dbf_codepage_map = {
    /* Code Pages Supported by Visual FoxPro */
    /*::[*/
    1: 437,
    /*::[*/
    2: 850,
    /*::[*/
    3: 1252,
    /*::[*/
    4: 1e4,
    /*::[*/
    100: 852,
    /*::[*/
    101: 866,
    /*::[*/
    102: 865,
    /*::[*/
    103: 861,
    /*::[*/
    104: 895,
    /*::[*/
    105: 620,
    /*::[*/
    106: 737,
    /*::[*/
    107: 857,
    /*::[*/
    120: 950,
    /*::[*/
    121: 949,
    /*::[*/
    122: 936,
    /*::[*/
    123: 932,
    /*::[*/
    124: 874,
    /*::[*/
    125: 1255,
    /*::[*/
    126: 1256,
    /*::[*/
    150: 10007,
    /*::[*/
    151: 10029,
    /*::[*/
    152: 10006,
    /*::[*/
    200: 1250,
    /*::[*/
    201: 1251,
    /*::[*/
    202: 1254,
    /*::[*/
    203: 1253,
    /* shapefile DBF extension */
    /*::[*/
    0: 20127,
    /*::[*/
    8: 865,
    /*::[*/
    9: 437,
    /*::[*/
    10: 850,
    /*::[*/
    11: 437,
    /*::[*/
    13: 437,
    /*::[*/
    14: 850,
    /*::[*/
    15: 437,
    /*::[*/
    16: 850,
    /*::[*/
    17: 437,
    /*::[*/
    18: 850,
    /*::[*/
    19: 932,
    /*::[*/
    20: 850,
    /*::[*/
    21: 437,
    /*::[*/
    22: 850,
    /*::[*/
    23: 865,
    /*::[*/
    24: 437,
    /*::[*/
    25: 437,
    /*::[*/
    26: 850,
    /*::[*/
    27: 437,
    /*::[*/
    28: 863,
    /*::[*/
    29: 850,
    /*::[*/
    31: 852,
    /*::[*/
    34: 852,
    /*::[*/
    35: 852,
    /*::[*/
    36: 860,
    /*::[*/
    37: 850,
    /*::[*/
    38: 866,
    /*::[*/
    55: 850,
    /*::[*/
    64: 852,
    /*::[*/
    77: 936,
    /*::[*/
    78: 949,
    /*::[*/
    79: 950,
    /*::[*/
    80: 874,
    /*::[*/
    87: 1252,
    /*::[*/
    88: 1252,
    /*::[*/
    89: 1252,
    /*::[*/
    108: 863,
    /*::[*/
    134: 737,
    /*::[*/
    135: 852,
    /*::[*/
    136: 857,
    /*::[*/
    204: 1257,
    /*::[*/
    255: 16969
  };
  var dbf_reverse_map = evert({
    /*::[*/
    1: 437,
    /*::[*/
    2: 850,
    /*::[*/
    3: 1252,
    /*::[*/
    4: 1e4,
    /*::[*/
    100: 852,
    /*::[*/
    101: 866,
    /*::[*/
    102: 865,
    /*::[*/
    103: 861,
    /*::[*/
    104: 895,
    /*::[*/
    105: 620,
    /*::[*/
    106: 737,
    /*::[*/
    107: 857,
    /*::[*/
    120: 950,
    /*::[*/
    121: 949,
    /*::[*/
    122: 936,
    /*::[*/
    123: 932,
    /*::[*/
    124: 874,
    /*::[*/
    125: 1255,
    /*::[*/
    126: 1256,
    /*::[*/
    150: 10007,
    /*::[*/
    151: 10029,
    /*::[*/
    152: 10006,
    /*::[*/
    200: 1250,
    /*::[*/
    201: 1251,
    /*::[*/
    202: 1254,
    /*::[*/
    203: 1253,
    /*::[*/
    0: 20127
  });
  function dbf_to_aoa(buf, opts) {
    var out = [];
    var d = new_raw_buf(1);
    switch (opts.type) {
      case "base64":
        d = s2a(Base64_decode(buf));
        break;
      case "binary":
        d = s2a(buf);
        break;
      case "buffer":
      case "array":
        d = buf;
        break;
    }
    prep_blob(d, 0);
    var ft = d.read_shift(1);
    var memo = !!(ft & 136);
    var vfp = false, l7 = false;
    switch (ft) {
      case 2:
        break;
      // dBASE II
      case 3:
        break;
      // dBASE III
      case 48:
        vfp = true;
        memo = true;
        break;
      // VFP
      case 49:
        vfp = true;
        memo = true;
        break;
      // VFP with autoincrement
      // 0x43 dBASE IV SQL table files
      // 0x63 dBASE IV SQL system files
      case 131:
        break;
      // dBASE III with memo
      case 139:
        break;
      // dBASE IV with memo
      case 140:
        l7 = true;
        break;
      // dBASE Level 7 with memo
      // case 0xCB dBASE IV SQL table files with memo
      case 245:
        break;
      // FoxPro 2.x with memo
      // case 0xFB FoxBASE
      default:
        throw new Error("DBF Unsupported Version: " + ft.toString(16));
    }
    var nrow = 0, fpos = 521;
    if (ft == 2) nrow = d.read_shift(2);
    d.l += 3;
    if (ft != 2) nrow = d.read_shift(4);
    if (nrow > 1048576) nrow = 1e6;
    if (ft != 2) fpos = d.read_shift(2);
    var rlen = d.read_shift(2);
    var current_cp = opts.codepage || 1252;
    if (ft != 2) {
      d.l += 16;
      d.read_shift(1);
      if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
      d.l += 1;
      d.l += 2;
    }
    if (l7) d.l += 36;
    var fields = [], field = {};
    var hend = Math.min(d.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
    var ww = l7 ? 32 : 11;
    while (d.l < hend && d[d.l] != 13) {
      field = {};
      field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
      d.l += ww;
      field.type = String.fromCharCode(d.read_shift(1));
      if (ft != 2 && !l7) field.offset = d.read_shift(4);
      field.len = d.read_shift(1);
      if (ft == 2) field.offset = d.read_shift(2);
      field.dec = d.read_shift(1);
      if (field.name.length) fields.push(field);
      if (ft != 2) d.l += l7 ? 13 : 14;
      switch (field.type) {
        case "B":
          if ((!vfp || field.len != 8) && opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
          break;
        case "G":
        // General (FoxPro and dBASE L7)
        case "P":
          if (opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
          break;
        case "+":
        // Autoincrement (dBASE L7 only)
        case "0":
        // _NullFlags (VFP only)
        case "@":
        // Timestamp (dBASE L7 only)
        case "C":
        // Character (dBASE II)
        case "D":
        // Date (dBASE III)
        case "F":
        // Float (dBASE IV)
        case "I":
        // Long (VFP and dBASE L7)
        case "L":
        // Logical (dBASE II)
        case "M":
        // Memo (dBASE III)
        case "N":
        // Number (dBASE II)
        case "O":
        // Double (dBASE L7 only)
        case "T":
        // Datetime (VFP only)
        case "Y":
          break;
        default:
          throw new Error("Unknown Field Type: " + field.type);
      }
    }
    if (d[d.l] !== 13) d.l = fpos - 1;
    if (d.read_shift(1) !== 13) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
    d.l = fpos;
    var R = 0, C = 0;
    out[0] = [];
    for (C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
    while (nrow-- > 0) {
      if (d[d.l] === 42) {
        d.l += rlen;
        continue;
      }
      ++d.l;
      out[++R] = [];
      C = 0;
      for (C = 0; C != fields.length; ++C) {
        var dd = d.slice(d.l, d.l + fields[C].len);
        d.l += fields[C].len;
        prep_blob(dd, 0);
        var s = $cptable.utils.decode(current_cp, dd);
        switch (fields[C].type) {
          case "C":
            if (s.trim().length) out[R][C] = s.replace(/\s+$/, "");
            break;
          case "D":
            if (s.length === 8) out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));
            else out[R][C] = s;
            break;
          case "F":
            out[R][C] = parseFloat(s.trim());
            break;
          case "+":
          case "I":
            out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
            break;
          case "L":
            switch (s.trim().toUpperCase()) {
              case "Y":
              case "T":
                out[R][C] = true;
                break;
              case "N":
              case "F":
                out[R][C] = false;
                break;
              case "":
              case "?":
                break;
              default:
                throw new Error("DBF Unrecognized L:|" + s + "|");
            }
            break;
          case "M":
            if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
            out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
            break;
          case "N":
            s = s.replace(/\u0000/g, "").trim();
            if (s && s != ".") out[R][C] = +s || 0;
            break;
          case "@":
            out[R][C] = new Date(dd.read_shift(-8, "f") - 621356832e5);
            break;
          case "T":
            out[R][C] = new Date((dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4));
            break;
          case "Y":
            out[R][C] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
            break;
          case "O":
            out[R][C] = -dd.read_shift(-8, "f");
            break;
          case "B":
            if (vfp && fields[C].len == 8) {
              out[R][C] = dd.read_shift(8, "f");
              break;
            }
          /* falls through */
          case "G":
          case "P":
            dd.l += fields[C].len;
            break;
          case "0":
            if (fields[C].name === "_NullFlags") break;
          /* falls through */
          default:
            throw new Error("DBF Unsupported data type " + fields[C].type);
        }
      }
    }
    if (ft != 2) {
      if (d.l < d.length && d[d.l++] != 26) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
    }
    if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
    opts.DBF = fields;
    return out;
  }
  __name(dbf_to_aoa, "dbf_to_aoa");
  function dbf_to_sheet(buf, opts) {
    var o = opts || {};
    if (!o.dateNF) o.dateNF = "yyyymmdd";
    var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
    ws["!cols"] = o.DBF.map(function(field) {
      return {
        wch: field.len,
        DBF: field
      };
    });
    delete o.DBF;
    return ws;
  }
  __name(dbf_to_sheet, "dbf_to_sheet");
  function dbf_to_workbook(buf, opts) {
    try {
      return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
    } catch (e) {
      if (opts && opts.WTF) throw e;
    }
    return { SheetNames: [], Sheets: {} };
  }
  __name(dbf_to_workbook, "dbf_to_workbook");
  var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
  function sheet_to_dbf(ws, opts) {
    var o = opts || {};
    if (+o.codepage >= 0) set_cp(+o.codepage);
    if (o.type == "string") throw new Error("Cannot write DBF to JS string");
    var ba = buf_array();
    var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
    var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
    var i = 0, j = 0, hcnt = 0, rlen = 1;
    for (i = 0; i < headers.length; ++i) {
      if (((cols[i] || {}).DBF || {}).name) {
        headers[i] = cols[i].DBF.name;
        ++hcnt;
        continue;
      }
      if (headers[i] == null) continue;
      ++hcnt;
      if (typeof headers[i] === "number") headers[i] = headers[i].toString(10);
      if (typeof headers[i] !== "string") throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
      if (headers.indexOf(headers[i]) !== i) {
        for (j = 0; j < 1024; ++j)
          if (headers.indexOf(headers[i] + "_" + j) == -1) {
            headers[i] += "_" + j;
            break;
          }
      }
    }
    var range2 = safe_decode_range(ws["!ref"]);
    var coltypes = [];
    var colwidths = [];
    var coldecimals = [];
    for (i = 0; i <= range2.e.c - range2.s.c; ++i) {
      var guess = "", _guess = "", maxlen = 0;
      var col = [];
      for (j = 0; j < data.length; ++j) {
        if (data[j][i] != null) col.push(data[j][i]);
      }
      if (col.length == 0 || headers[i] == null) {
        coltypes[i] = "?";
        continue;
      }
      for (j = 0; j < col.length; ++j) {
        switch (typeof col[j]) {
          /* TODO: check if L2 compat is desired */
          case "number":
            _guess = "B";
            break;
          case "string":
            _guess = "C";
            break;
          case "boolean":
            _guess = "L";
            break;
          case "object":
            _guess = col[j] instanceof Date ? "D" : "C";
            break;
          default:
            _guess = "C";
        }
        maxlen = Math.max(maxlen, String(col[j]).length);
        guess = guess && guess != _guess ? "C" : _guess;
      }
      if (maxlen > 250) maxlen = 250;
      _guess = ((cols[i] || {}).DBF || {}).type;
      if (_guess == "C") {
        if (cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
      }
      if (guess == "B" && _guess == "N") {
        guess = "N";
        coldecimals[i] = cols[i].DBF.dec;
        maxlen = cols[i].DBF.len;
      }
      colwidths[i] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
      rlen += colwidths[i];
      coltypes[i] = guess;
    }
    var h = ba.next(32);
    h.write_shift(4, 318902576);
    h.write_shift(4, data.length);
    h.write_shift(2, 296 + 32 * hcnt);
    h.write_shift(2, rlen);
    for (i = 0; i < 4; ++i) h.write_shift(4, 0);
    h.write_shift(4, 0 | (+dbf_reverse_map[
      /*::String(*/
      current_ansi
      /*::)*/
    ] || 3) << 8);
    for (i = 0, j = 0; i < headers.length; ++i) {
      if (headers[i] == null) continue;
      var hf = ba.next(32);
      var _f = (headers[i].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
      hf.write_shift(1, _f, "sbcs");
      hf.write_shift(1, coltypes[i] == "?" ? "C" : coltypes[i], "sbcs");
      hf.write_shift(4, j);
      hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
      hf.write_shift(1, coldecimals[i] || 0);
      hf.write_shift(1, 2);
      hf.write_shift(4, 0);
      hf.write_shift(1, 0);
      hf.write_shift(4, 0);
      hf.write_shift(4, 0);
      j += colwidths[i] || _RLEN[coltypes[i]] || 0;
    }
    var hb = ba.next(264);
    hb.write_shift(4, 13);
    for (i = 0; i < 65; ++i) hb.write_shift(4, 0);
    for (i = 0; i < data.length; ++i) {
      var rout = ba.next(rlen);
      rout.write_shift(1, 0);
      for (j = 0; j < headers.length; ++j) {
        if (headers[j] == null) continue;
        switch (coltypes[j]) {
          case "L":
            rout.write_shift(1, data[i][j] == null ? 63 : data[i][j] ? 84 : 70);
            break;
          case "B":
            rout.write_shift(8, data[i][j] || 0, "f");
            break;
          case "N":
            var _n = "0";
            if (typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j] || 0);
            for (hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt) rout.write_shift(1, 32);
            rout.write_shift(1, _n, "sbcs");
            break;
          case "D":
            if (!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
            else {
              rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
              rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
              rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
            }
            break;
          case "C":
            var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
            rout.write_shift(1, _s, "sbcs");
            for (hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt) rout.write_shift(1, 32);
            break;
        }
      }
    }
    ba.next(1).write_shift(1, 26);
    return ba.end();
  }
  __name(sheet_to_dbf, "sheet_to_dbf");
  return {
    to_workbook: dbf_to_workbook,
    to_sheet: dbf_to_sheet,
    from_sheet: sheet_to_dbf
  };
}();
var SYLK = /* @__PURE__ */ function() {
  var sylk_escapes = {
    AA: "\xC0",
    BA: "\xC1",
    CA: "\xC2",
    DA: 195,
    HA: "\xC4",
    JA: 197,
    AE: "\xC8",
    BE: "\xC9",
    CE: "\xCA",
    HE: "\xCB",
    AI: "\xCC",
    BI: "\xCD",
    CI: "\xCE",
    HI: "\xCF",
    AO: "\xD2",
    BO: "\xD3",
    CO: "\xD4",
    DO: 213,
    HO: "\xD6",
    AU: "\xD9",
    BU: "\xDA",
    CU: "\xDB",
    HU: "\xDC",
    Aa: "\xE0",
    Ba: "\xE1",
    Ca: "\xE2",
    Da: 227,
    Ha: "\xE4",
    Ja: 229,
    Ae: "\xE8",
    Be: "\xE9",
    Ce: "\xEA",
    He: "\xEB",
    Ai: "\xEC",
    Bi: "\xED",
    Ci: "\xEE",
    Hi: "\xEF",
    Ao: "\xF2",
    Bo: "\xF3",
    Co: "\xF4",
    Do: 245,
    Ho: "\xF6",
    Au: "\xF9",
    Bu: "\xFA",
    Cu: "\xFB",
    Hu: "\xFC",
    KC: "\xC7",
    Kc: "\xE7",
    q: "\xE6",
    z: "\u0153",
    a: "\xC6",
    j: "\u0152",
    DN: 209,
    Dn: 241,
    Hy: 255,
    S: 169,
    c: 170,
    R: 174,
    "B ": 180,
    /*::[*/
    0: 176,
    /*::[*/
    1: 177,
    /*::[*/
    2: 178,
    /*::[*/
    3: 179,
    /*::[*/
    5: 181,
    /*::[*/
    6: 182,
    /*::[*/
    7: 183,
    Q: 185,
    k: 186,
    b: 208,
    i: 216,
    l: 222,
    s: 240,
    y: 248,
    "!": 161,
    '"': 162,
    "#": 163,
    "(": 164,
    "%": 165,
    "'": 167,
    "H ": 168,
    "+": 171,
    ";": 187,
    "<": 188,
    "=": 189,
    ">": 190,
    "?": 191,
    "{": 223
  };
  var sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
  var sylk_char_fn = /* @__PURE__ */ __name(function(_, $1) {
    var o = sylk_escapes[$1];
    return typeof o == "number" ? _getansi(o) : o;
  }, "sylk_char_fn");
  var decode_sylk_char = /* @__PURE__ */ __name(function($$, $1, $2) {
    var newcc = $1.charCodeAt(0) - 32 << 4 | $2.charCodeAt(0) - 48;
    return newcc == 59 ? $$ : _getansi(newcc);
  }, "decode_sylk_char");
  sylk_escapes["|"] = 254;
  function sylk_to_aoa(d, opts) {
    switch (opts.type) {
      case "base64":
        return sylk_to_aoa_str(Base64_decode(d), opts);
      case "binary":
        return sylk_to_aoa_str(d, opts);
      case "buffer":
        return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
      case "array":
        return sylk_to_aoa_str(cc2str(d), opts);
    }
    throw new Error("Unrecognized type " + opts.type);
  }
  __name(sylk_to_aoa, "sylk_to_aoa");
  function sylk_to_aoa_str(str, opts) {
    var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
    var formats = [];
    var next_cell_format = null;
    var sht = {}, rowinfo = [], colinfo = [], cw = [];
    var Mval = 0, j;
    if (+opts.codepage >= 0) set_cp(+opts.codepage);
    for (; ri !== records.length; ++ri) {
      Mval = 0;
      var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
      var record = rstr.replace(/;;/g, "\0").split(";").map(function(x) {
        return x.replace(/\u0000/g, ";");
      });
      var RT = record[0], val;
      if (rstr.length > 0) switch (RT) {
        case "ID":
          break;
        /* header */
        case "E":
          break;
        /* EOF */
        case "B":
          break;
        /* dimensions */
        case "O":
          break;
        /* options? */
        case "W":
          break;
        /* window? */
        case "P":
          if (record[1].charAt(0) == "P")
            formats.push(rstr.slice(3).replace(/;;/g, ";"));
          break;
        case "C":
          var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
          for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
            case "A":
              break;
            // TODO: comment
            case "X":
              C = parseInt(record[rj].slice(1)) - 1;
              C_seen_X = true;
              break;
            case "Y":
              R = parseInt(record[rj].slice(1)) - 1;
              if (!C_seen_X) C = 0;
              for (j = arr.length; j <= R; ++j) arr[j] = [];
              break;
            case "K":
              val = record[rj].slice(1);
              if (val.charAt(0) === '"') val = val.slice(1, val.length - 1);
              else if (val === "TRUE") val = true;
              else if (val === "FALSE") val = false;
              else if (!isNaN(fuzzynum(val))) {
                val = fuzzynum(val);
                if (next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
              } else if (!isNaN(fuzzydate(val).getDate())) {
                val = parseDate(val);
              }
              if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);
              C_seen_K = true;
              break;
            case "E":
              C_seen_E = true;
              var formula = rc_to_a1(record[rj].slice(1), { r: R, c: C });
              arr[R][C] = [arr[R][C], formula];
              break;
            case "S":
              C_seen_S = true;
              arr[R][C] = [arr[R][C], "S5S"];
              break;
            case "G":
              break;
            // unknown
            case "R":
              _R = parseInt(record[rj].slice(1)) - 1;
              break;
            case "C":
              _C = parseInt(record[rj].slice(1)) - 1;
              break;
            default:
              if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
          }
          if (C_seen_K) {
            if (arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
            else arr[R][C] = val;
            next_cell_format = null;
          }
          if (C_seen_S) {
            if (C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
            var shrbase = _R > -1 && arr[_R][_C];
            if (!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
            arr[R][C][1] = shift_formula_str(shrbase[1], { r: R - _R, c: C - _C });
          }
          break;
        case "F":
          var F_seen = 0;
          for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
            case "X":
              C = parseInt(record[rj].slice(1)) - 1;
              ++F_seen;
              break;
            case "Y":
              R = parseInt(record[rj].slice(1)) - 1;
              for (j = arr.length; j <= R; ++j) arr[j] = [];
              break;
            case "M":
              Mval = parseInt(record[rj].slice(1)) / 20;
              break;
            case "F":
              break;
            /* ??? */
            case "G":
              break;
            /* hide grid */
            case "P":
              next_cell_format = formats[parseInt(record[rj].slice(1))];
              break;
            case "S":
              break;
            /* cell style */
            case "D":
              break;
            /* column */
            case "N":
              break;
            /* font */
            case "W":
              cw = record[rj].slice(1).split(" ");
              for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
                Mval = parseInt(cw[2], 10);
                colinfo[j - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                process_col(colinfo[j - 1]);
              }
              break;
            case "C":
              C = parseInt(record[rj].slice(1)) - 1;
              if (!colinfo[C]) colinfo[C] = {};
              break;
            case "R":
              R = parseInt(record[rj].slice(1)) - 1;
              if (!rowinfo[R]) rowinfo[R] = {};
              if (Mval > 0) {
                rowinfo[R].hpt = Mval;
                rowinfo[R].hpx = pt2px(Mval);
              } else if (Mval === 0) rowinfo[R].hidden = true;
              break;
            default:
              if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
          }
          if (F_seen < 1) next_cell_format = null;
          break;
        default:
          if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
      }
    }
    if (rowinfo.length > 0) sht["!rows"] = rowinfo;
    if (colinfo.length > 0) sht["!cols"] = colinfo;
    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    return [arr, sht];
  }
  __name(sylk_to_aoa_str, "sylk_to_aoa_str");
  function sylk_to_sheet(d, opts) {
    var aoasht = sylk_to_aoa(d, opts);
    var aoa = aoasht[0], ws = aoasht[1];
    var o = aoa_to_sheet(aoa, opts);
    keys(ws).forEach(function(k) {
      o[k] = ws[k];
    });
    return o;
  }
  __name(sylk_to_sheet, "sylk_to_sheet");
  function sylk_to_workbook(d, opts) {
    return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
  }
  __name(sylk_to_workbook, "sylk_to_workbook");
  function write_ws_cell_sylk(cell, ws, R, C) {
    var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
    switch (cell.t) {
      case "n":
        o += cell.v || 0;
        if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, { r: R, c: C });
        break;
      case "b":
        o += cell.v ? "TRUE" : "FALSE";
        break;
      case "e":
        o += cell.w || cell.v;
        break;
      case "d":
        o += '"' + (cell.w || cell.v) + '"';
        break;
      case "s":
        o += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
        break;
    }
    return o;
  }
  __name(write_ws_cell_sylk, "write_ws_cell_sylk");
  function write_ws_cols_sylk(out, cols) {
    cols.forEach(function(col, i) {
      var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
      if (col.hidden) rec += "0";
      else {
        if (typeof col.width == "number" && !col.wpx) col.wpx = width2px(col.width);
        if (typeof col.wpx == "number" && !col.wch) col.wch = px2char(col.wpx);
        if (typeof col.wch == "number") rec += Math.round(col.wch);
      }
      if (rec.charAt(rec.length - 1) != " ") out.push(rec);
    });
  }
  __name(write_ws_cols_sylk, "write_ws_cols_sylk");
  function write_ws_rows_sylk(out, rows) {
    rows.forEach(function(row, i) {
      var rec = "F;";
      if (row.hidden) rec += "M0;";
      else if (row.hpt) rec += "M" + 20 * row.hpt + ";";
      else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
      if (rec.length > 2) out.push(rec + "R" + (i + 1));
    });
  }
  __name(write_ws_rows_sylk, "write_ws_rows_sylk");
  function sheet_to_sylk(ws, opts) {
    var preamble = ["ID;PWXL;N;E"], o = [];
    var r = safe_decode_range(ws["!ref"]), cell;
    var dense = Array.isArray(ws);
    var RS = "\r\n";
    preamble.push("P;PGeneral");
    preamble.push("F;P0;DG0G8;M255");
    if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]);
    if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]);
    preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" "));
    for (var R = r.s.r; R <= r.e.r; ++R) {
      for (var C = r.s.c; C <= r.e.c; ++C) {
        var coord = encode_cell({ r: R, c: C });
        cell = dense ? (ws[R] || [])[C] : ws[coord];
        if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
        o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
      }
    }
    return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
  }
  __name(sheet_to_sylk, "sheet_to_sylk");
  return {
    to_workbook: sylk_to_workbook,
    to_sheet: sylk_to_sheet,
    from_sheet: sheet_to_sylk
  };
}();
var DIF = /* @__PURE__ */ function() {
  function dif_to_aoa(d, opts) {
    switch (opts.type) {
      case "base64":
        return dif_to_aoa_str(Base64_decode(d), opts);
      case "binary":
        return dif_to_aoa_str(d, opts);
      case "buffer":
        return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
      case "array":
        return dif_to_aoa_str(cc2str(d), opts);
    }
    throw new Error("Unrecognized type " + opts.type);
  }
  __name(dif_to_aoa, "dif_to_aoa");
  function dif_to_aoa_str(str, opts) {
    var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
    for (; ri !== records.length; ++ri) {
      if (records[ri].trim() === "BOT") {
        arr[++R] = [];
        C = 0;
        continue;
      }
      if (R < 0) continue;
      var metadata = records[ri].trim().split(",");
      var type = metadata[0], value = metadata[1];
      ++ri;
      var data = records[ri] || "";
      while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1) data += "\n" + records[++ri];
      data = data.trim();
      switch (+type) {
        case -1:
          if (data === "BOT") {
            arr[++R] = [];
            C = 0;
            continue;
          } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data);
          break;
        case 0:
          if (data === "TRUE") arr[R][C] = true;
          else if (data === "FALSE") arr[R][C] = false;
          else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
          else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
          else arr[R][C] = value;
          ++C;
          break;
        case 1:
          data = data.slice(1, data.length - 1);
          data = data.replace(/""/g, '"');
          if (DIF_XL && data && data.match(/^=".*"$/)) data = data.slice(2, -1);
          arr[R][C++] = data !== "" ? data : null;
          break;
      }
      if (data === "EOD") break;
    }
    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    return arr;
  }
  __name(dif_to_aoa_str, "dif_to_aoa_str");
  function dif_to_sheet(str, opts) {
    return aoa_to_sheet(dif_to_aoa(str, opts), opts);
  }
  __name(dif_to_sheet, "dif_to_sheet");
  function dif_to_workbook(str, opts) {
    return sheet_to_workbook(dif_to_sheet(str, opts), opts);
  }
  __name(dif_to_workbook, "dif_to_workbook");
  var sheet_to_dif = /* @__PURE__ */ function() {
    var push_field = /* @__PURE__ */ __name(function pf(o, topic, v, n, s) {
      o.push(topic);
      o.push(v + "," + n);
      o.push('"' + s.replace(/"/g, '""') + '"');
    }, "pf");
    var push_value = /* @__PURE__ */ __name(function po(o, type, v, s) {
      o.push(type + "," + v);
      o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
    }, "po");
    return /* @__PURE__ */ __name(function sheet_to_dif2(ws) {
      var o = [];
      var r = safe_decode_range(ws["!ref"]), cell;
      var dense = Array.isArray(ws);
      push_field(o, "TABLE", 0, 1, "sheetjs");
      push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
      push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
      push_field(o, "DATA", 0, 0, "");
      for (var R = r.s.r; R <= r.e.r; ++R) {
        push_value(o, -1, 0, "BOT");
        for (var C = r.s.c; C <= r.e.c; ++C) {
          var coord = encode_cell({ r: R, c: C });
          cell = dense ? (ws[R] || [])[C] : ws[coord];
          if (!cell) {
            push_value(o, 1, 0, "");
            continue;
          }
          switch (cell.t) {
            case "n":
              var val = DIF_XL ? cell.w : cell.v;
              if (!val && cell.v != null) val = cell.v;
              if (val == null) {
                if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
                else push_value(o, 1, 0, "");
              } else push_value(o, 0, val, "V");
              break;
            case "b":
              push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
              break;
            case "s":
              push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
              break;
            case "d":
              if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
              if (DIF_XL) push_value(o, 0, cell.w, "V");
              else push_value(o, 1, 0, cell.w);
              break;
            default:
              push_value(o, 1, 0, "");
          }
        }
      }
      push_value(o, -1, 0, "EOD");
      var RS = "\r\n";
      var oo = o.join(RS);
      return oo;
    }, "sheet_to_dif");
  }();
  return {
    to_workbook: dif_to_workbook,
    to_sheet: dif_to_sheet,
    from_sheet: sheet_to_dif
  };
}();
var ETH = /* @__PURE__ */ function() {
  function decode(s) {
    return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
  }
  __name(decode, "decode");
  function encode(s) {
    return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
  }
  __name(encode, "encode");
  function eth_to_aoa(str, opts) {
    var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
    for (; ri !== records.length; ++ri) {
      var record = records[ri].trim().split(":");
      if (record[0] !== "cell") continue;
      var addr = decode_cell(record[1]);
      if (arr.length <= addr.r) {
        for (R = arr.length; R <= addr.r; ++R) if (!arr[R]) arr[R] = [];
      }
      R = addr.r;
      C = addr.c;
      switch (record[2]) {
        case "t":
          arr[R][C] = decode(record[3]);
          break;
        case "v":
          arr[R][C] = +record[3];
          break;
        case "vtf":
          var _f = record[record.length - 1];
        /* falls through */
        case "vtc":
          switch (record[3]) {
            case "nl":
              arr[R][C] = +record[4] ? true : false;
              break;
            default:
              arr[R][C] = +record[4];
              break;
          }
          if (record[2] == "vtf") arr[R][C] = [arr[R][C], _f];
      }
    }
    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    return arr;
  }
  __name(eth_to_aoa, "eth_to_aoa");
  function eth_to_sheet(d, opts) {
    return aoa_to_sheet(eth_to_aoa(d, opts), opts);
  }
  __name(eth_to_sheet, "eth_to_sheet");
  function eth_to_workbook(d, opts) {
    return sheet_to_workbook(eth_to_sheet(d, opts), opts);
  }
  __name(eth_to_workbook, "eth_to_workbook");
  var header = [
    "socialcalc:version:1.5",
    "MIME-Version: 1.0",
    "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
  ].join("\n");
  var sep = [
    "--SocialCalcSpreadsheetControlSave",
    "Content-type: text/plain; charset=UTF-8"
  ].join("\n") + "\n";
  var meta = [
    "# SocialCalc Spreadsheet Control Save",
    "part:sheet"
  ].join("\n");
  var end = "--SocialCalcSpreadsheetControlSave--";
  function sheet_to_eth_data(ws) {
    if (!ws || !ws["!ref"]) return "";
    var o = [], oo = [], cell, coord = "";
    var r = decode_range(ws["!ref"]);
    var dense = Array.isArray(ws);
    for (var R = r.s.r; R <= r.e.r; ++R) {
      for (var C = r.s.c; C <= r.e.c; ++C) {
        coord = encode_cell({ r: R, c: C });
        cell = dense ? (ws[R] || [])[C] : ws[coord];
        if (!cell || cell.v == null || cell.t === "z") continue;
        oo = ["cell", coord, "t"];
        switch (cell.t) {
          case "s":
          case "str":
            oo.push(encode(cell.v));
            break;
          case "n":
            if (!cell.f) {
              oo[2] = "v";
              oo[3] = cell.v;
            } else {
              oo[2] = "vtf";
              oo[3] = "n";
              oo[4] = cell.v;
              oo[5] = encode(cell.f);
            }
            break;
          case "b":
            oo[2] = "vt" + (cell.f ? "f" : "c");
            oo[3] = "nl";
            oo[4] = cell.v ? "1" : "0";
            oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
            break;
          case "d":
            var t = datenum(parseDate(cell.v));
            oo[2] = "vtc";
            oo[3] = "nd";
            oo[4] = "" + t;
            oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
            break;
          case "e":
            continue;
        }
        o.push(oo.join(":"));
      }
    }
    o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
    o.push("valueformat:1:text-wiki");
    return o.join("\n");
  }
  __name(sheet_to_eth_data, "sheet_to_eth_data");
  function sheet_to_eth(ws) {
    return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
  }
  __name(sheet_to_eth, "sheet_to_eth");
  return {
    to_workbook: eth_to_workbook,
    to_sheet: eth_to_sheet,
    from_sheet: sheet_to_eth
  };
}();
var PRN = /* @__PURE__ */ function() {
  function set_text_arr(data, arr, R, C, o) {
    if (o.raw) arr[R][C] = data;
    else if (data === "") {
    } else if (data === "TRUE") arr[R][C] = true;
    else if (data === "FALSE") arr[R][C] = false;
    else if (!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
    else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
    else arr[R][C] = data;
  }
  __name(set_text_arr, "set_text_arr");
  function prn_to_aoa_str(f, opts) {
    var o = opts || {};
    var arr = [];
    if (!f || f.length === 0) return arr;
    var lines = f.split(/[\r\n]/);
    var L = lines.length - 1;
    while (L >= 0 && lines[L].length === 0) --L;
    var start = 10, idx = 0;
    var R = 0;
    for (; R <= L; ++R) {
      idx = lines[R].indexOf(" ");
      if (idx == -1) idx = lines[R].length;
      else idx++;
      start = Math.max(start, idx);
    }
    for (R = 0; R <= L; ++R) {
      arr[R] = [];
      var C = 0;
      set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
      for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)
        set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
    }
    if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
    return arr;
  }
  __name(prn_to_aoa_str, "prn_to_aoa_str");
  var guess_seps = {
    /*::[*/
    44: ",",
    /*::[*/
    9: "	",
    /*::[*/
    59: ";",
    /*::[*/
    124: "|"
  };
  var guess_sep_weights = {
    /*::[*/
    44: 3,
    /*::[*/
    9: 2,
    /*::[*/
    59: 1,
    /*::[*/
    124: 0
  };
  function guess_sep(str) {
    var cnt = {}, instr = false, end = 0, cc = 0;
    for (; end < str.length; ++end) {
      if ((cc = str.charCodeAt(end)) == 34) instr = !instr;
      else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
    }
    cc = [];
    for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
      cc.push([cnt[end], end]);
    }
    if (!cc.length) {
      cnt = guess_sep_weights;
      for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
        cc.push([cnt[end], end]);
      }
    }
    cc.sort(function(a, b) {
      return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
    });
    return guess_seps[cc.pop()[1]] || 44;
  }
  __name(guess_sep, "guess_sep");
  function dsv_to_sheet_str(str, opts) {
    var o = opts || {};
    var sep = "";
    if (DENSE != null && o.dense == null) o.dense = DENSE;
    var ws = o.dense ? [] : {};
    var range2 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
    if (str.slice(0, 4) == "sep=") {
      if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
        sep = str.charAt(4);
        str = str.slice(7);
      } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
        sep = str.charAt(4);
        str = str.slice(6);
      } else sep = guess_sep(str.slice(0, 1024));
    } else if (o && o.FS) sep = o.FS;
    else sep = guess_sep(str.slice(0, 1024));
    var R = 0, C = 0, v = 0;
    var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
    str = str.replace(/\r\n/mg, "\n");
    var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
    function finish_cell() {
      var s = str.slice(start, end);
      var cell = {};
      if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1, -1).replace(/""/g, '"');
      if (s.length === 0) cell.t = "z";
      else if (o.raw) {
        cell.t = "s";
        cell.v = s;
      } else if (s.trim().length === 0) {
        cell.t = "s";
        cell.v = s;
      } else if (s.charCodeAt(0) == 61) {
        if (s.charCodeAt(1) == 34 && s.charCodeAt(s.length - 1) == 34) {
          cell.t = "s";
          cell.v = s.slice(2, -1).replace(/""/g, '"');
        } else if (fuzzyfmla(s)) {
          cell.t = "n";
          cell.f = s.slice(1);
        } else {
          cell.t = "s";
          cell.v = s;
        }
      } else if (s == "TRUE") {
        cell.t = "b";
        cell.v = true;
      } else if (s == "FALSE") {
        cell.t = "b";
        cell.v = false;
      } else if (!isNaN(v = fuzzynum(s))) {
        cell.t = "n";
        if (o.cellText !== false) cell.w = s;
        cell.v = v;
      } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
        cell.z = o.dateNF || table_fmt[14];
        var k = 0;
        if (_re && s.match(_re)) {
          s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
          k = 1;
        }
        if (o.cellDates) {
          cell.t = "d";
          cell.v = parseDate(s, k);
        } else {
          cell.t = "n";
          cell.v = datenum(parseDate(s, k));
        }
        if (o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
        if (!o.cellNF) delete cell.z;
      } else {
        cell.t = "s";
        cell.v = s;
      }
      if (cell.t == "z") {
      } else if (o.dense) {
        if (!ws[R]) ws[R] = [];
        ws[R][C] = cell;
      } else ws[encode_cell({ c: C, r: R })] = cell;
      start = end + 1;
      startcc = str.charCodeAt(start);
      if (range2.e.c < C) range2.e.c = C;
      if (range2.e.r < R) range2.e.r = R;
      if (cc == sepcc) ++C;
      else {
        C = 0;
        ++R;
        if (o.sheetRows && o.sheetRows <= R) return true;
      }
    }
    __name(finish_cell, "finish_cell");
    outer: for (; end < str.length; ++end) switch (cc = str.charCodeAt(end)) {
      case 34:
        if (startcc === 34) instr = !instr;
        break;
      case sepcc:
      case 10:
      case 13:
        if (!instr && finish_cell()) break outer;
        break;
      default:
        break;
    }
    if (end - start > 0) finish_cell();
    ws["!ref"] = encode_range(range2);
    return ws;
  }
  __name(dsv_to_sheet_str, "dsv_to_sheet_str");
  function prn_to_sheet_str(str, opts) {
    if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
    if (opts.FS) return dsv_to_sheet_str(str, opts);
    if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
    if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
    return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
  }
  __name(prn_to_sheet_str, "prn_to_sheet_str");
  function prn_to_sheet(d, opts) {
    var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d, opts);
    switch (opts.type) {
      case "base64":
        str = Base64_decode(d);
        break;
      case "binary":
        str = d;
        break;
      case "buffer":
        if (opts.codepage == 65001) str = d.toString("utf8");
        else if (opts.codepage && typeof $cptable !== "undefined") str = $cptable.utils.decode(opts.codepage, d);
        else str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
        break;
      case "array":
        str = cc2str(d);
        break;
      case "string":
        str = d;
        break;
      default:
        throw new Error("Unrecognized type " + opts.type);
    }
    if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str.slice(3));
    else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001) str = utf8read(str);
    else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
    if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
    return prn_to_sheet_str(str, opts);
  }
  __name(prn_to_sheet, "prn_to_sheet");
  function prn_to_workbook(d, opts) {
    return sheet_to_workbook(prn_to_sheet(d, opts), opts);
  }
  __name(prn_to_workbook, "prn_to_workbook");
  function sheet_to_prn(ws) {
    var o = [];
    var r = safe_decode_range(ws["!ref"]), cell;
    var dense = Array.isArray(ws);
    for (var R = r.s.r; R <= r.e.r; ++R) {
      var oo = [];
      for (var C = r.s.c; C <= r.e.c; ++C) {
        var coord = encode_cell({ r: R, c: C });
        cell = dense ? (ws[R] || [])[C] : ws[coord];
        if (!cell || cell.v == null) {
          oo.push("          ");
          continue;
        }
        var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
        while (w.length < 10) w += " ";
        oo.push(w + (C === 0 ? " " : ""));
      }
      o.push(oo.join(""));
    }
    return o.join("\n");
  }
  __name(sheet_to_prn, "sheet_to_prn");
  return {
    to_workbook: prn_to_workbook,
    to_sheet: prn_to_sheet,
    from_sheet: sheet_to_prn
  };
}();
function read_wb_ID(d, opts) {
  var o = opts || {}, OLD_WTF = !!o.WTF;
  o.WTF = true;
  try {
    var out = SYLK.to_workbook(d, o);
    o.WTF = OLD_WTF;
    return out;
  } catch (e) {
    o.WTF = OLD_WTF;
    if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
    return PRN.to_workbook(d, opts);
  }
}
__name(read_wb_ID, "read_wb_ID");
var WK_ = /* @__PURE__ */ function() {
  function lotushopper(data, cb, opts) {
    if (!data) return;
    prep_blob(data, data.l || 0);
    var Enum = opts.Enum || WK1Enum;
    while (data.l < data.length) {
      var RT = data.read_shift(2);
      var R = Enum[RT] || Enum[65535];
      var length = data.read_shift(2);
      var tgt = data.l + length;
      var d = R.f && R.f(data, length, opts);
      data.l = tgt;
      if (cb(d, R, RT)) return;
    }
  }
  __name(lotushopper, "lotushopper");
  function lotus_to_workbook(d, opts) {
    switch (opts.type) {
      case "base64":
        return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
      case "binary":
        return lotus_to_workbook_buf(s2a(d), opts);
      case "buffer":
      case "array":
        return lotus_to_workbook_buf(d, opts);
    }
    throw "Unsupported type " + opts.type;
  }
  __name(lotus_to_workbook, "lotus_to_workbook");
  function lotus_to_workbook_buf(d, opts) {
    if (!d) return d;
    var o = opts || {};
    if (DENSE != null && o.dense == null) o.dense = DENSE;
    var s = o.dense ? [] : {}, n = "Sheet1", next_n = "", sidx = 0;
    var sheets = {}, snames = [], realnames = [];
    var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
    var sheetRows = o.sheetRows || 0;
    if (d[2] == 0) {
      if (d[3] == 8 || d[3] == 9) {
        if (d.length >= 16 && d[14] == 5 && d[15] === 108) throw new Error("Unsupported Works 3 for Mac file");
      }
    }
    if (d[2] == 2) {
      o.Enum = WK1Enum;
      lotushopper(d, function(val, R, RT) {
        switch (RT) {
          case 0:
            o.vers = val;
            if (val >= 4096) o.qpro = true;
            break;
          case 6:
            refguess = val;
            break;
          /* RANGE */
          case 204:
            if (val) next_n = val;
            break;
          /* SHEETNAMECS */
          case 222:
            next_n = val;
            break;
          /* SHEETNAMELP */
          case 15:
          /* LABEL */
          case 51:
            if (!o.qpro) val[1].v = val[1].v.slice(1);
          /* falls through */
          case 13:
          /* INTEGER */
          case 14:
          /* NUMBER */
          case 16:
            if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
              val[1].z = o.dateNF || table_fmt[14];
              if (o.cellDates) {
                val[1].t = "d";
                val[1].v = numdate(val[1].v);
              }
            }
            if (o.qpro) {
              if (val[3] > sidx) {
                s["!ref"] = encode_range(refguess);
                sheets[n] = s;
                snames.push(n);
                s = o.dense ? [] : {};
                refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                sidx = val[3];
                n = next_n || "Sheet" + (sidx + 1);
                next_n = "";
              }
            }
            var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];
            if (tmpcell) {
              tmpcell.t = val[1].t;
              tmpcell.v = val[1].v;
              if (val[1].z != null) tmpcell.z = val[1].z;
              if (val[1].f != null) tmpcell.f = val[1].f;
              break;
            }
            if (o.dense) {
              if (!s[val[0].r]) s[val[0].r] = [];
              s[val[0].r][val[0].c] = val[1];
            } else s[encode_cell(val[0])] = val[1];
            break;
          default:
        }
      }, o);
    } else if (d[2] == 26 || d[2] == 14) {
      o.Enum = WK3Enum;
      if (d[2] == 14) {
        o.qpro = true;
        d.l = 0;
      }
      lotushopper(d, function(val, R, RT) {
        switch (RT) {
          case 204:
            n = val;
            break;
          /* SHEETNAMECS */
          case 22:
            val[1].v = val[1].v.slice(1);
          /* falls through */
          case 23:
          /* NUMBER17 */
          case 24:
          /* NUMBER18 */
          case 25:
          /* FORMULA19 */
          case 37:
          /* NUMBER25 */
          case 39:
          /* NUMBER27 */
          case 40:
            if (val[3] > sidx) {
              s["!ref"] = encode_range(refguess);
              sheets[n] = s;
              snames.push(n);
              s = o.dense ? [] : {};
              refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
              sidx = val[3];
              n = "Sheet" + (sidx + 1);
            }
            if (sheetRows > 0 && val[0].r >= sheetRows) break;
            if (o.dense) {
              if (!s[val[0].r]) s[val[0].r] = [];
              s[val[0].r][val[0].c] = val[1];
            } else s[encode_cell(val[0])] = val[1];
            if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
            if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
            break;
          case 27:
            if (val[14e3]) realnames[val[14e3][0]] = val[14e3][1];
            break;
          case 1537:
            realnames[val[0]] = val[1];
            if (val[0] == sidx) n = val[1];
            break;
          default:
            break;
        }
      }, o);
    } else throw new Error("Unrecognized LOTUS BOF " + d[2]);
    s["!ref"] = encode_range(refguess);
    sheets[next_n || n] = s;
    snames.push(next_n || n);
    if (!realnames.length) return { SheetNames: snames, Sheets: sheets };
    var osheets = {}, rnames = [];
    for (var i = 0; i < realnames.length; ++i) if (sheets[snames[i]]) {
      rnames.push(realnames[i] || snames[i]);
      osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
    } else {
      rnames.push(realnames[i]);
      osheets[realnames[i]] = { "!ref": "A1" };
    }
    return { SheetNames: rnames, Sheets: osheets };
  }
  __name(lotus_to_workbook_buf, "lotus_to_workbook_buf");
  function sheet_to_wk1(ws, opts) {
    var o = opts || {};
    if (+o.codepage >= 0) set_cp(+o.codepage);
    if (o.type == "string") throw new Error("Cannot write WK1 to JS string");
    var ba = buf_array();
    var range2 = safe_decode_range(ws["!ref"]);
    var dense = Array.isArray(ws);
    var cols = [];
    write_biff_rec(ba, 0, write_BOF_WK1(1030));
    write_biff_rec(ba, 6, write_RANGE(range2));
    var max_R = Math.min(range2.e.r, 8191);
    for (var R = range2.s.r; R <= max_R; ++R) {
      var rr = encode_row(R);
      for (var C = range2.s.c; C <= range2.e.c; ++C) {
        if (R === range2.s.r) cols[C] = encode_col(C);
        var ref = cols[C] + rr;
        var cell = dense ? (ws[R] || [])[C] : ws[ref];
        if (!cell || cell.t == "z") continue;
        if (cell.t == "n") {
          if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 13, write_INTEGER(R, C, cell.v));
          else write_biff_rec(ba, 14, write_NUMBER(R, C, cell.v));
        } else {
          var str = format_cell(cell);
          write_biff_rec(ba, 15, write_LABEL(R, C, str.slice(0, 239)));
        }
      }
    }
    write_biff_rec(ba, 1);
    return ba.end();
  }
  __name(sheet_to_wk1, "sheet_to_wk1");
  function book_to_wk3(wb, opts) {
    var o = opts || {};
    if (+o.codepage >= 0) set_cp(+o.codepage);
    if (o.type == "string") throw new Error("Cannot write WK3 to JS string");
    var ba = buf_array();
    write_biff_rec(ba, 0, write_BOF_WK3(wb));
    for (var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if ((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));
    var wsidx = 0;
    for (i = 0; i < wb.SheetNames.length; ++i) {
      var ws = wb.Sheets[wb.SheetNames[i]];
      if (!ws || !ws["!ref"]) continue;
      var range2 = safe_decode_range(ws["!ref"]);
      var dense = Array.isArray(ws);
      var cols = [];
      var max_R = Math.min(range2.e.r, 8191);
      for (var R = range2.s.r; R <= max_R; ++R) {
        var rr = encode_row(R);
        for (var C = range2.s.c; C <= range2.e.c; ++C) {
          if (R === range2.s.r) cols[C] = encode_col(C);
          var ref = cols[C] + rr;
          var cell = dense ? (ws[R] || [])[C] : ws[ref];
          if (!cell || cell.t == "z") continue;
          if (cell.t == "n") {
            write_biff_rec(ba, 23, write_NUMBER_17(R, C, wsidx, cell.v));
          } else {
            var str = format_cell(cell);
            write_biff_rec(ba, 22, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
          }
        }
      }
      ++wsidx;
    }
    write_biff_rec(ba, 1);
    return ba.end();
  }
  __name(book_to_wk3, "book_to_wk3");
  function write_BOF_WK1(v) {
    var out = new_buf(2);
    out.write_shift(2, v);
    return out;
  }
  __name(write_BOF_WK1, "write_BOF_WK1");
  function write_BOF_WK3(wb) {
    var out = new_buf(26);
    out.write_shift(2, 4096);
    out.write_shift(2, 4);
    out.write_shift(4, 0);
    var rows = 0, cols = 0, wscnt = 0;
    for (var i = 0; i < wb.SheetNames.length; ++i) {
      var name2 = wb.SheetNames[i];
      var ws = wb.Sheets[name2];
      if (!ws || !ws["!ref"]) continue;
      ++wscnt;
      var range2 = decode_range(ws["!ref"]);
      if (rows < range2.e.r) rows = range2.e.r;
      if (cols < range2.e.c) cols = range2.e.c;
    }
    if (rows > 8191) rows = 8191;
    out.write_shift(2, rows);
    out.write_shift(1, wscnt);
    out.write_shift(1, cols);
    out.write_shift(2, 0);
    out.write_shift(2, 0);
    out.write_shift(1, 1);
    out.write_shift(1, 2);
    out.write_shift(4, 0);
    out.write_shift(4, 0);
    return out;
  }
  __name(write_BOF_WK3, "write_BOF_WK3");
  function parse_RANGE(blob2, length, opts) {
    var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
    if (length == 8 && opts.qpro) {
      o.s.c = blob2.read_shift(1);
      blob2.l++;
      o.s.r = blob2.read_shift(2);
      o.e.c = blob2.read_shift(1);
      blob2.l++;
      o.e.r = blob2.read_shift(2);
      return o;
    }
    o.s.c = blob2.read_shift(2);
    o.s.r = blob2.read_shift(2);
    if (length == 12 && opts.qpro) blob2.l += 2;
    o.e.c = blob2.read_shift(2);
    o.e.r = blob2.read_shift(2);
    if (length == 12 && opts.qpro) blob2.l += 2;
    if (o.s.c == 65535) o.s.c = o.e.c = o.s.r = o.e.r = 0;
    return o;
  }
  __name(parse_RANGE, "parse_RANGE");
  function write_RANGE(range2) {
    var out = new_buf(8);
    out.write_shift(2, range2.s.c);
    out.write_shift(2, range2.s.r);
    out.write_shift(2, range2.e.c);
    out.write_shift(2, range2.e.r);
    return out;
  }
  __name(write_RANGE, "write_RANGE");
  function parse_cell(blob2, length, opts) {
    var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0, 0];
    if (opts.qpro && opts.vers != 20768) {
      o[0].c = blob2.read_shift(1);
      o[3] = blob2.read_shift(1);
      o[0].r = blob2.read_shift(2);
      blob2.l += 2;
    } else {
      o[2] = blob2.read_shift(1);
      o[0].c = blob2.read_shift(2);
      o[0].r = blob2.read_shift(2);
    }
    return o;
  }
  __name(parse_cell, "parse_cell");
  function parse_LABEL(blob2, length, opts) {
    var tgt = blob2.l + length;
    var o = parse_cell(blob2, length, opts);
    o[1].t = "s";
    if (opts.vers == 20768) {
      blob2.l++;
      var len = blob2.read_shift(1);
      o[1].v = blob2.read_shift(len, "utf8");
      return o;
    }
    if (opts.qpro) blob2.l++;
    o[1].v = blob2.read_shift(tgt - blob2.l, "cstr");
    return o;
  }
  __name(parse_LABEL, "parse_LABEL");
  function write_LABEL(R, C, s) {
    var o = new_buf(7 + s.length);
    o.write_shift(1, 255);
    o.write_shift(2, C);
    o.write_shift(2, R);
    o.write_shift(1, 39);
    for (var i = 0; i < o.length; ++i) {
      var cc = s.charCodeAt(i);
      o.write_shift(1, cc >= 128 ? 95 : cc);
    }
    o.write_shift(1, 0);
    return o;
  }
  __name(write_LABEL, "write_LABEL");
  function parse_INTEGER(blob2, length, opts) {
    var o = parse_cell(blob2, length, opts);
    o[1].v = blob2.read_shift(2, "i");
    return o;
  }
  __name(parse_INTEGER, "parse_INTEGER");
  function write_INTEGER(R, C, v) {
    var o = new_buf(7);
    o.write_shift(1, 255);
    o.write_shift(2, C);
    o.write_shift(2, R);
    o.write_shift(2, v, "i");
    return o;
  }
  __name(write_INTEGER, "write_INTEGER");
  function parse_NUMBER(blob2, length, opts) {
    var o = parse_cell(blob2, length, opts);
    o[1].v = blob2.read_shift(8, "f");
    return o;
  }
  __name(parse_NUMBER, "parse_NUMBER");
  function write_NUMBER(R, C, v) {
    var o = new_buf(13);
    o.write_shift(1, 255);
    o.write_shift(2, C);
    o.write_shift(2, R);
    o.write_shift(8, v, "f");
    return o;
  }
  __name(write_NUMBER, "write_NUMBER");
  function parse_FORMULA(blob2, length, opts) {
    var tgt = blob2.l + length;
    var o = parse_cell(blob2, length, opts);
    o[1].v = blob2.read_shift(8, "f");
    if (opts.qpro) blob2.l = tgt;
    else {
      var flen = blob2.read_shift(2);
      wk1_fmla_to_csf(blob2.slice(blob2.l, blob2.l + flen), o);
      blob2.l += flen;
    }
    return o;
  }
  __name(parse_FORMULA, "parse_FORMULA");
  function wk1_parse_rc(B, V, col) {
    var rel = V & 32768;
    V &= ~32768;
    V = (rel ? B : 0) + (V >= 8192 ? V - 16384 : V);
    return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
  }
  __name(wk1_parse_rc, "wk1_parse_rc");
  var FuncTab = {
    51: ["FALSE", 0],
    52: ["TRUE", 0],
    70: ["LEN", 1],
    80: ["SUM", 69],
    81: ["AVERAGEA", 69],
    82: ["COUNTA", 69],
    83: ["MINA", 69],
    84: ["MAXA", 69],
    111: ["T", 1]
  };
  var BinOpTab = [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    // eslint-disable-line no-mixed-spaces-and-tabs
    "",
    "+",
    "-",
    "*",
    "/",
    "^",
    "=",
    "<>",
    // eslint-disable-line no-mixed-spaces-and-tabs
    "<=",
    ">=",
    "<",
    ">",
    "",
    "",
    "",
    "",
    // eslint-disable-line no-mixed-spaces-and-tabs
    "&",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
    // eslint-disable-line no-mixed-spaces-and-tabs
  ];
  function wk1_fmla_to_csf(blob2, o) {
    prep_blob(blob2, 0);
    var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
    while (blob2.l < blob2.length) {
      var cc = blob2[blob2.l++];
      switch (cc) {
        case 0:
          out.push(blob2.read_shift(8, "f"));
          break;
        case 1:
          {
            C = wk1_parse_rc(o[0].c, blob2.read_shift(2), true);
            R = wk1_parse_rc(o[0].r, blob2.read_shift(2), false);
            out.push(C + R);
          }
          break;
        case 2:
          {
            var c = wk1_parse_rc(o[0].c, blob2.read_shift(2), true);
            var r = wk1_parse_rc(o[0].r, blob2.read_shift(2), false);
            C = wk1_parse_rc(o[0].c, blob2.read_shift(2), true);
            R = wk1_parse_rc(o[0].r, blob2.read_shift(2), false);
            out.push(c + r + ":" + C + R);
          }
          break;
        case 3:
          if (blob2.l < blob2.length) {
            console.error("WK1 premature formula end");
            return;
          }
          break;
        case 4:
          out.push("(" + out.pop() + ")");
          break;
        case 5:
          out.push(blob2.read_shift(2));
          break;
        case 6:
          {
            var Z = "";
            while (cc = blob2[blob2.l++]) Z += String.fromCharCode(cc);
            out.push('"' + Z.replace(/"/g, '""') + '"');
          }
          break;
        case 8:
          out.push("-" + out.pop());
          break;
        case 23:
          out.push("+" + out.pop());
          break;
        case 22:
          out.push("NOT(" + out.pop() + ")");
          break;
        case 20:
        case 21:
          {
            argR = out.pop();
            argL = out.pop();
            out.push(["AND", "OR"][cc - 20] + "(" + argL + "," + argR + ")");
          }
          break;
        default:
          if (cc < 32 && BinOpTab[cc]) {
            argR = out.pop();
            argL = out.pop();
            out.push(argL + BinOpTab[cc] + argR);
          } else if (FuncTab[cc]) {
            argc = FuncTab[cc][1];
            if (argc == 69) argc = blob2[blob2.l++];
            if (argc > out.length) {
              console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
              return;
            }
            var args = out.slice(-argc);
            out.length -= argc;
            out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
          } else if (cc <= 7) return console.error("WK1 invalid opcode " + cc.toString(16));
          else if (cc <= 24) return console.error("WK1 unsupported op " + cc.toString(16));
          else if (cc <= 30) return console.error("WK1 invalid opcode " + cc.toString(16));
          else if (cc <= 115) return console.error("WK1 unsupported function opcode " + cc.toString(16));
          else return console.error("WK1 unrecognized opcode " + cc.toString(16));
      }
    }
    if (out.length == 1) o[1].f = "" + out[0];
    else console.error("WK1 bad formula parse |" + out.join("|") + "|");
  }
  __name(wk1_fmla_to_csf, "wk1_fmla_to_csf");
  function parse_cell_3(blob2) {
    var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
    o[0].r = blob2.read_shift(2);
    o[3] = blob2[blob2.l++];
    o[0].c = blob2[blob2.l++];
    return o;
  }
  __name(parse_cell_3, "parse_cell_3");
  function parse_LABEL_16(blob2, length) {
    var o = parse_cell_3(blob2, length);
    o[1].t = "s";
    o[1].v = blob2.read_shift(length - 4, "cstr");
    return o;
  }
  __name(parse_LABEL_16, "parse_LABEL_16");
  function write_LABEL_16(R, C, wsidx, s) {
    var o = new_buf(6 + s.length);
    o.write_shift(2, R);
    o.write_shift(1, wsidx);
    o.write_shift(1, C);
    o.write_shift(1, 39);
    for (var i = 0; i < s.length; ++i) {
      var cc = s.charCodeAt(i);
      o.write_shift(1, cc >= 128 ? 95 : cc);
    }
    o.write_shift(1, 0);
    return o;
  }
  __name(write_LABEL_16, "write_LABEL_16");
  function parse_NUMBER_18(blob2, length) {
    var o = parse_cell_3(blob2, length);
    o[1].v = blob2.read_shift(2);
    var v = o[1].v >> 1;
    if (o[1].v & 1) {
      switch (v & 7) {
        case 0:
          v = (v >> 3) * 5e3;
          break;
        case 1:
          v = (v >> 3) * 500;
          break;
        case 2:
          v = (v >> 3) / 20;
          break;
        case 3:
          v = (v >> 3) / 200;
          break;
        case 4:
          v = (v >> 3) / 2e3;
          break;
        case 5:
          v = (v >> 3) / 2e4;
          break;
        case 6:
          v = (v >> 3) / 16;
          break;
        case 7:
          v = (v >> 3) / 64;
          break;
      }
    }
    o[1].v = v;
    return o;
  }
  __name(parse_NUMBER_18, "parse_NUMBER_18");
  function parse_NUMBER_17(blob2, length) {
    var o = parse_cell_3(blob2, length);
    var v1 = blob2.read_shift(4);
    var v2 = blob2.read_shift(4);
    var e = blob2.read_shift(2);
    if (e == 65535) {
      if (v1 === 0 && v2 === 3221225472) {
        o[1].t = "e";
        o[1].v = 15;
      } else if (v1 === 0 && v2 === 3489660928) {
        o[1].t = "e";
        o[1].v = 42;
      } else o[1].v = 0;
      return o;
    }
    var s = e & 32768;
    e = (e & 32767) - 16446;
    o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));
    return o;
  }
  __name(parse_NUMBER_17, "parse_NUMBER_17");
  function write_NUMBER_17(R, C, wsidx, v) {
    var o = new_buf(14);
    o.write_shift(2, R);
    o.write_shift(1, wsidx);
    o.write_shift(1, C);
    if (v == 0) {
      o.write_shift(4, 0);
      o.write_shift(4, 0);
      o.write_shift(2, 65535);
      return o;
    }
    var s = 0, e = 0, v1 = 0, v2 = 0;
    if (v < 0) {
      s = 1;
      v = -v;
    }
    e = Math.log2(v) | 0;
    v /= Math.pow(2, e - 31);
    v2 = v >>> 0;
    if ((v2 & 2147483648) == 0) {
      v /= 2;
      ++e;
      v2 = v >>> 0;
    }
    v -= v2;
    v2 |= 2147483648;
    v2 >>>= 0;
    v *= Math.pow(2, 32);
    v1 = v >>> 0;
    o.write_shift(4, v1);
    o.write_shift(4, v2);
    e += 16383 + (s ? 32768 : 0);
    o.write_shift(2, e);
    return o;
  }
  __name(write_NUMBER_17, "write_NUMBER_17");
  function parse_FORMULA_19(blob2, length) {
    var o = parse_NUMBER_17(blob2, 14);
    blob2.l += length - 14;
    return o;
  }
  __name(parse_FORMULA_19, "parse_FORMULA_19");
  function parse_NUMBER_25(blob2, length) {
    var o = parse_cell_3(blob2, length);
    var v1 = blob2.read_shift(4);
    o[1].v = v1 >> 6;
    return o;
  }
  __name(parse_NUMBER_25, "parse_NUMBER_25");
  function parse_NUMBER_27(blob2, length) {
    var o = parse_cell_3(blob2, length);
    var v1 = blob2.read_shift(8, "f");
    o[1].v = v1;
    return o;
  }
  __name(parse_NUMBER_27, "parse_NUMBER_27");
  function parse_FORMULA_28(blob2, length) {
    var o = parse_NUMBER_27(blob2, 14);
    blob2.l += length - 10;
    return o;
  }
  __name(parse_FORMULA_28, "parse_FORMULA_28");
  function parse_SHEETNAMECS(blob2, length) {
    return blob2[blob2.l + length - 1] == 0 ? blob2.read_shift(length, "cstr") : "";
  }
  __name(parse_SHEETNAMECS, "parse_SHEETNAMECS");
  function parse_SHEETNAMELP(blob2, length) {
    var len = blob2[blob2.l++];
    if (len > length - 1) len = length - 1;
    var o = "";
    while (o.length < len) o += String.fromCharCode(blob2[blob2.l++]);
    return o;
  }
  __name(parse_SHEETNAMELP, "parse_SHEETNAMELP");
  function parse_SHEETINFOQP(blob2, length, opts) {
    if (!opts.qpro || length < 21) return;
    var id = blob2.read_shift(1);
    blob2.l += 17;
    blob2.l += 1;
    blob2.l += 2;
    var nm = blob2.read_shift(length - 21, "cstr");
    return [id, nm];
  }
  __name(parse_SHEETINFOQP, "parse_SHEETINFOQP");
  function parse_XFORMAT(blob2, length) {
    var o = {}, tgt = blob2.l + length;
    while (blob2.l < tgt) {
      var dt = blob2.read_shift(2);
      if (dt == 14e3) {
        o[dt] = [0, ""];
        o[dt][0] = blob2.read_shift(2);
        while (blob2[blob2.l]) {
          o[dt][1] += String.fromCharCode(blob2[blob2.l]);
          blob2.l++;
        }
        blob2.l++;
      }
    }
    return o;
  }
  __name(parse_XFORMAT, "parse_XFORMAT");
  function write_XFORMAT_SHEETNAME(name2, wsidx) {
    var out = new_buf(5 + name2.length);
    out.write_shift(2, 14e3);
    out.write_shift(2, wsidx);
    for (var i = 0; i < name2.length; ++i) {
      var cc = name2.charCodeAt(i);
      out[out.l++] = cc > 127 ? 95 : cc;
    }
    out[out.l++] = 0;
    return out;
  }
  __name(write_XFORMAT_SHEETNAME, "write_XFORMAT_SHEETNAME");
  var WK1Enum = {
    /*::[*/
    0: { n: "BOF", f: parseuint16 },
    /*::[*/
    1: { n: "EOF" },
    /*::[*/
    2: { n: "CALCMODE" },
    /*::[*/
    3: { n: "CALCORDER" },
    /*::[*/
    4: { n: "SPLIT" },
    /*::[*/
    5: { n: "SYNC" },
    /*::[*/
    6: { n: "RANGE", f: parse_RANGE },
    /*::[*/
    7: { n: "WINDOW1" },
    /*::[*/
    8: { n: "COLW1" },
    /*::[*/
    9: { n: "WINTWO" },
    /*::[*/
    10: { n: "COLW2" },
    /*::[*/
    11: { n: "NAME" },
    /*::[*/
    12: { n: "BLANK" },
    /*::[*/
    13: { n: "INTEGER", f: parse_INTEGER },
    /*::[*/
    14: { n: "NUMBER", f: parse_NUMBER },
    /*::[*/
    15: { n: "LABEL", f: parse_LABEL },
    /*::[*/
    16: { n: "FORMULA", f: parse_FORMULA },
    /*::[*/
    24: { n: "TABLE" },
    /*::[*/
    25: { n: "ORANGE" },
    /*::[*/
    26: { n: "PRANGE" },
    /*::[*/
    27: { n: "SRANGE" },
    /*::[*/
    28: { n: "FRANGE" },
    /*::[*/
    29: { n: "KRANGE1" },
    /*::[*/
    32: { n: "HRANGE" },
    /*::[*/
    35: { n: "KRANGE2" },
    /*::[*/
    36: { n: "PROTEC" },
    /*::[*/
    37: { n: "FOOTER" },
    /*::[*/
    38: { n: "HEADER" },
    /*::[*/
    39: { n: "SETUP" },
    /*::[*/
    40: { n: "MARGINS" },
    /*::[*/
    41: { n: "LABELFMT" },
    /*::[*/
    42: { n: "TITLES" },
    /*::[*/
    43: { n: "SHEETJS" },
    /*::[*/
    45: { n: "GRAPH" },
    /*::[*/
    46: { n: "NGRAPH" },
    /*::[*/
    47: { n: "CALCCOUNT" },
    /*::[*/
    48: { n: "UNFORMATTED" },
    /*::[*/
    49: { n: "CURSORW12" },
    /*::[*/
    50: { n: "WINDOW" },
    /*::[*/
    51: { n: "STRING", f: parse_LABEL },
    /*::[*/
    55: { n: "PASSWORD" },
    /*::[*/
    56: { n: "LOCKED" },
    /*::[*/
    60: { n: "QUERY" },
    /*::[*/
    61: { n: "QUERYNAME" },
    /*::[*/
    62: { n: "PRINT" },
    /*::[*/
    63: { n: "PRINTNAME" },
    /*::[*/
    64: { n: "GRAPH2" },
    /*::[*/
    65: { n: "GRAPHNAME" },
    /*::[*/
    66: { n: "ZOOM" },
    /*::[*/
    67: { n: "SYMSPLIT" },
    /*::[*/
    68: { n: "NSROWS" },
    /*::[*/
    69: { n: "NSCOLS" },
    /*::[*/
    70: { n: "RULER" },
    /*::[*/
    71: { n: "NNAME" },
    /*::[*/
    72: { n: "ACOMM" },
    /*::[*/
    73: { n: "AMACRO" },
    /*::[*/
    74: { n: "PARSE" },
    /*::[*/
    102: { n: "PRANGES??" },
    /*::[*/
    103: { n: "RRANGES??" },
    /*::[*/
    104: { n: "FNAME??" },
    /*::[*/
    105: { n: "MRANGES??" },
    /*::[*/
    204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
    /*::[*/
    222: { n: "SHEETNAMELP", f: parse_SHEETNAMELP },
    /*::[*/
    65535: { n: "" }
  };
  var WK3Enum = {
    /*::[*/
    0: { n: "BOF" },
    /*::[*/
    1: { n: "EOF" },
    /*::[*/
    2: { n: "PASSWORD" },
    /*::[*/
    3: { n: "CALCSET" },
    /*::[*/
    4: { n: "WINDOWSET" },
    /*::[*/
    5: { n: "SHEETCELLPTR" },
    /*::[*/
    6: { n: "SHEETLAYOUT" },
    /*::[*/
    7: { n: "COLUMNWIDTH" },
    /*::[*/
    8: { n: "HIDDENCOLUMN" },
    /*::[*/
    9: { n: "USERRANGE" },
    /*::[*/
    10: { n: "SYSTEMRANGE" },
    /*::[*/
    11: { n: "ZEROFORCE" },
    /*::[*/
    12: { n: "SORTKEYDIR" },
    /*::[*/
    13: { n: "FILESEAL" },
    /*::[*/
    14: { n: "DATAFILLNUMS" },
    /*::[*/
    15: { n: "PRINTMAIN" },
    /*::[*/
    16: { n: "PRINTSTRING" },
    /*::[*/
    17: { n: "GRAPHMAIN" },
    /*::[*/
    18: { n: "GRAPHSTRING" },
    /*::[*/
    19: { n: "??" },
    /*::[*/
    20: { n: "ERRCELL" },
    /*::[*/
    21: { n: "NACELL" },
    /*::[*/
    22: { n: "LABEL16", f: parse_LABEL_16 },
    /*::[*/
    23: { n: "NUMBER17", f: parse_NUMBER_17 },
    /*::[*/
    24: { n: "NUMBER18", f: parse_NUMBER_18 },
    /*::[*/
    25: { n: "FORMULA19", f: parse_FORMULA_19 },
    /*::[*/
    26: { n: "FORMULA1A" },
    /*::[*/
    27: { n: "XFORMAT", f: parse_XFORMAT },
    /*::[*/
    28: { n: "DTLABELMISC" },
    /*::[*/
    29: { n: "DTLABELCELL" },
    /*::[*/
    30: { n: "GRAPHWINDOW" },
    /*::[*/
    31: { n: "CPA" },
    /*::[*/
    32: { n: "LPLAUTO" },
    /*::[*/
    33: { n: "QUERY" },
    /*::[*/
    34: { n: "HIDDENSHEET" },
    /*::[*/
    35: { n: "??" },
    /*::[*/
    37: { n: "NUMBER25", f: parse_NUMBER_25 },
    /*::[*/
    38: { n: "??" },
    /*::[*/
    39: { n: "NUMBER27", f: parse_NUMBER_27 },
    /*::[*/
    40: { n: "FORMULA28", f: parse_FORMULA_28 },
    /*::[*/
    142: { n: "??" },
    /*::[*/
    147: { n: "??" },
    /*::[*/
    150: { n: "??" },
    /*::[*/
    151: { n: "??" },
    /*::[*/
    152: { n: "??" },
    /*::[*/
    153: { n: "??" },
    /*::[*/
    154: { n: "??" },
    /*::[*/
    155: { n: "??" },
    /*::[*/
    156: { n: "??" },
    /*::[*/
    163: { n: "??" },
    /*::[*/
    174: { n: "??" },
    /*::[*/
    175: { n: "??" },
    /*::[*/
    176: { n: "??" },
    /*::[*/
    177: { n: "??" },
    /*::[*/
    184: { n: "??" },
    /*::[*/
    185: { n: "??" },
    /*::[*/
    186: { n: "??" },
    /*::[*/
    187: { n: "??" },
    /*::[*/
    188: { n: "??" },
    /*::[*/
    195: { n: "??" },
    /*::[*/
    201: { n: "??" },
    /*::[*/
    204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
    /*::[*/
    205: { n: "??" },
    /*::[*/
    206: { n: "??" },
    /*::[*/
    207: { n: "??" },
    /*::[*/
    208: { n: "??" },
    /*::[*/
    256: { n: "??" },
    /*::[*/
    259: { n: "??" },
    /*::[*/
    260: { n: "??" },
    /*::[*/
    261: { n: "??" },
    /*::[*/
    262: { n: "??" },
    /*::[*/
    263: { n: "??" },
    /*::[*/
    265: { n: "??" },
    /*::[*/
    266: { n: "??" },
    /*::[*/
    267: { n: "??" },
    /*::[*/
    268: { n: "??" },
    /*::[*/
    270: { n: "??" },
    /*::[*/
    271: { n: "??" },
    /*::[*/
    384: { n: "??" },
    /*::[*/
    389: { n: "??" },
    /*::[*/
    390: { n: "??" },
    /*::[*/
    393: { n: "??" },
    /*::[*/
    396: { n: "??" },
    /*::[*/
    512: { n: "??" },
    /*::[*/
    514: { n: "??" },
    /*::[*/
    513: { n: "??" },
    /*::[*/
    516: { n: "??" },
    /*::[*/
    517: { n: "??" },
    /*::[*/
    640: { n: "??" },
    /*::[*/
    641: { n: "??" },
    /*::[*/
    642: { n: "??" },
    /*::[*/
    643: { n: "??" },
    /*::[*/
    644: { n: "??" },
    /*::[*/
    645: { n: "??" },
    /*::[*/
    646: { n: "??" },
    /*::[*/
    647: { n: "??" },
    /*::[*/
    648: { n: "??" },
    /*::[*/
    658: { n: "??" },
    /*::[*/
    659: { n: "??" },
    /*::[*/
    660: { n: "??" },
    /*::[*/
    661: { n: "??" },
    /*::[*/
    662: { n: "??" },
    /*::[*/
    665: { n: "??" },
    /*::[*/
    666: { n: "??" },
    /*::[*/
    768: { n: "??" },
    /*::[*/
    772: { n: "??" },
    /*::[*/
    1537: { n: "SHEETINFOQP", f: parse_SHEETINFOQP },
    /*::[*/
    1600: { n: "??" },
    /*::[*/
    1602: { n: "??" },
    /*::[*/
    1793: { n: "??" },
    /*::[*/
    1794: { n: "??" },
    /*::[*/
    1795: { n: "??" },
    /*::[*/
    1796: { n: "??" },
    /*::[*/
    1920: { n: "??" },
    /*::[*/
    2048: { n: "??" },
    /*::[*/
    2049: { n: "??" },
    /*::[*/
    2052: { n: "??" },
    /*::[*/
    2688: { n: "??" },
    /*::[*/
    10998: { n: "??" },
    /*::[*/
    12849: { n: "??" },
    /*::[*/
    28233: { n: "??" },
    /*::[*/
    28484: { n: "??" },
    /*::[*/
    65535: { n: "" }
  };
  return {
    sheet_to_wk1,
    book_to_wk3,
    to_workbook: lotus_to_workbook
  };
}();
function parse_rpr(rpr) {
  var font = {}, m = rpr.match(tagregex), i = 0;
  var pass = false;
  if (m) for (; i != m.length; ++i) {
    var y = parsexmltag(m[i]);
    switch (y[0].replace(/\w*:/g, "")) {
      /* 18.8.12 condense CT_BooleanProperty */
      /* ** not required . */
      case "<condense":
        break;
      /* 18.8.17 extend CT_BooleanProperty */
      /* ** not required . */
      case "<extend":
        break;
      /* 18.8.36 shadow CT_BooleanProperty */
      /* ** not required . */
      case "<shadow":
        if (!y.val) break;
      /* falls through */
      case "<shadow>":
      case "<shadow/>":
        font.shadow = 1;
        break;
      case "</shadow>":
        break;
      /* 18.4.1 charset CT_IntProperty TODO */
      case "<charset":
        if (y.val == "1") break;
        font.cp = CS2CP[parseInt(y.val, 10)];
        break;
      /* 18.4.2 outline CT_BooleanProperty TODO */
      case "<outline":
        if (!y.val) break;
      /* falls through */
      case "<outline>":
      case "<outline/>":
        font.outline = 1;
        break;
      case "</outline>":
        break;
      /* 18.4.5 rFont CT_FontName */
      case "<rFont":
        font.name = y.val;
        break;
      /* 18.4.11 sz CT_FontSize */
      case "<sz":
        font.sz = y.val;
        break;
      /* 18.4.10 strike CT_BooleanProperty */
      case "<strike":
        if (!y.val) break;
      /* falls through */
      case "<strike>":
      case "<strike/>":
        font.strike = 1;
        break;
      case "</strike>":
        break;
      /* 18.4.13 u CT_UnderlineProperty */
      case "<u":
        if (!y.val) break;
        switch (y.val) {
          case "double":
            font.uval = "double";
            break;
          case "singleAccounting":
            font.uval = "single-accounting";
            break;
          case "doubleAccounting":
            font.uval = "double-accounting";
            break;
        }
      /* falls through */
      case "<u>":
      case "<u/>":
        font.u = 1;
        break;
      case "</u>":
        break;
      /* 18.8.2 b */
      case "<b":
        if (y.val == "0") break;
      /* falls through */
      case "<b>":
      case "<b/>":
        font.b = 1;
        break;
      case "</b>":
        break;
      /* 18.8.26 i */
      case "<i":
        if (y.val == "0") break;
      /* falls through */
      case "<i>":
      case "<i/>":
        font.i = 1;
        break;
      case "</i>":
        break;
      /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
      case "<color":
        if (y.rgb) font.color = y.rgb.slice(2, 8);
        break;
      case "<color>":
      case "<color/>":
      case "</color>":
        break;
      /* 18.8.18 family ST_FontFamily */
      case "<family":
        font.family = y.val;
        break;
      case "<family>":
      case "<family/>":
      case "</family>":
        break;
      /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
      case "<vertAlign":
        font.valign = y.val;
        break;
      case "<vertAlign>":
      case "<vertAlign/>":
      case "</vertAlign>":
        break;
      /* 18.8.35 scheme CT_FontScheme TODO */
      case "<scheme":
        break;
      case "<scheme>":
      case "<scheme/>":
      case "</scheme>":
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (y[0].charCodeAt(1) !== 47 && !pass) throw new Error("Unrecognized rich format " + y[0]);
    }
  }
  return font;
}
__name(parse_rpr, "parse_rpr");
var parse_rs = /* @__PURE__ */ function() {
  var tregex = matchtag("t"), rpregex = matchtag("rPr");
  function parse_r(r) {
    var t = r.match(tregex);
    if (!t) return { t: "s", v: "" };
    var o = { t: "s", v: unescapexml(t[1]) };
    var rpr = r.match(rpregex);
    if (rpr) o.s = parse_rpr(rpr[1]);
    return o;
  }
  __name(parse_r, "parse_r");
  var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
  return /* @__PURE__ */ __name(function parse_rs2(rs) {
    return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r) {
      return r.v;
    });
  }, "parse_rs");
}();
var rs_to_html = /* @__PURE__ */ (/* @__PURE__ */ __name(function parse_rs_factory() {
  var nlregex = /(\r\n|\n)/g;
  function parse_rpr2(font, intro, outro) {
    var style = [];
    if (font.u) style.push("text-decoration: underline;");
    if (font.uval) style.push("text-underline-style:" + font.uval + ";");
    if (font.sz) style.push("font-size:" + font.sz + "pt;");
    if (font.outline) style.push("text-effect: outline;");
    if (font.shadow) style.push("text-shadow: auto;");
    intro.push('<span style="' + style.join("") + '">');
    if (font.b) {
      intro.push("<b>");
      outro.push("</b>");
    }
    if (font.i) {
      intro.push("<i>");
      outro.push("</i>");
    }
    if (font.strike) {
      intro.push("<s>");
      outro.push("</s>");
    }
    var align = font.valign || "";
    if (align == "superscript" || align == "super") align = "sup";
    else if (align == "subscript") align = "sub";
    if (align != "") {
      intro.push("<" + align + ">");
      outro.push("</" + align + ">");
    }
    outro.push("</span>");
    return font;
  }
  __name(parse_rpr2, "parse_rpr2");
  function r_to_html(r) {
    var terms = [[], r.v, []];
    if (!r.v) return "";
    if (r.s) parse_rpr2(r.s, terms[0], terms[2]);
    return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
  }
  __name(r_to_html, "r_to_html");
  return /* @__PURE__ */ __name(function parse_rs2(rs) {
    return rs.map(r_to_html).join("");
  }, "parse_rs");
}, "parse_rs_factory"))();
var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g;
var sirregex = /<(?:\w+:)?r>/;
var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
function parse_si(x, opts) {
  var html = opts ? opts.cellHTML : true;
  var z = {};
  if (!x) return { t: "" };
  if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
    z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
    z.r = utf8read(x);
    if (html) z.h = escapehtml(z.t);
  } else if (
    /*y = */
    x.match(sirregex)
  ) {
    z.r = utf8read(x);
    z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
    if (html) z.h = rs_to_html(parse_rs(z.r));
  }
  return z;
}
__name(parse_si, "parse_si");
var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
function parse_sst_xml(data, opts) {
  var s = [], ss = "";
  if (!data) return s;
  var sst = data.match(sstr0);
  if (sst) {
    ss = sst[2].replace(sstr1, "").split(sstr2);
    for (var i = 0; i != ss.length; ++i) {
      var o = parse_si(ss[i].trim(), opts);
      if (o != null) s[s.length] = o;
    }
    sst = parsexmltag(sst[1]);
    s.Count = sst.count;
    s.Unique = sst.uniqueCount;
  }
  return s;
}
__name(parse_sst_xml, "parse_sst_xml");
function parse_BrtBeginSst(data) {
  return [data.read_shift(4), data.read_shift(4)];
}
__name(parse_BrtBeginSst, "parse_BrtBeginSst");
function parse_sst_bin(data, opts) {
  var s = [];
  var pass = false;
  recordhopper(data, /* @__PURE__ */ __name(function hopper_sst(val, R, RT) {
    switch (RT) {
      case 159:
        s.Count = val[0];
        s.Unique = val[1];
        break;
      case 19:
        s.push(val);
        break;
      case 160:
        return true;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      default:
        if (R.T) {
        }
        if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "hopper_sst"));
  return s;
}
__name(parse_sst_bin, "parse_sst_bin");
function _JS2ANSI(str) {
  if (typeof $cptable !== "undefined") return $cptable.utils.encode(current_ansi, str);
  var o = [], oo = str.split("");
  for (var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
  return o;
}
__name(_JS2ANSI, "_JS2ANSI");
function parse_CRYPTOVersion(blob2, length) {
  var o = {};
  o.Major = blob2.read_shift(2);
  o.Minor = blob2.read_shift(2);
  if (length >= 4) blob2.l += length - 4;
  return o;
}
__name(parse_CRYPTOVersion, "parse_CRYPTOVersion");
function parse_DataSpaceVersionInfo(blob2) {
  var o = {};
  o.id = blob2.read_shift(0, "lpp4");
  o.R = parse_CRYPTOVersion(blob2, 4);
  o.U = parse_CRYPTOVersion(blob2, 4);
  o.W = parse_CRYPTOVersion(blob2, 4);
  return o;
}
__name(parse_DataSpaceVersionInfo, "parse_DataSpaceVersionInfo");
function parse_DataSpaceMapEntry(blob2) {
  var len = blob2.read_shift(4);
  var end = blob2.l + len - 4;
  var o = {};
  var cnt = blob2.read_shift(4);
  var comps = [];
  while (cnt-- > 0) comps.push({ t: blob2.read_shift(4), v: blob2.read_shift(0, "lpp4") });
  o.name = blob2.read_shift(0, "lpp4");
  o.comps = comps;
  if (blob2.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob2.l + " != " + end);
  return o;
}
__name(parse_DataSpaceMapEntry, "parse_DataSpaceMapEntry");
function parse_DataSpaceMap(blob2) {
  var o = [];
  blob2.l += 4;
  var cnt = blob2.read_shift(4);
  while (cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob2));
  return o;
}
__name(parse_DataSpaceMap, "parse_DataSpaceMap");
function parse_DataSpaceDefinition(blob2) {
  var o = [];
  blob2.l += 4;
  var cnt = blob2.read_shift(4);
  while (cnt-- > 0) o.push(blob2.read_shift(0, "lpp4"));
  return o;
}
__name(parse_DataSpaceDefinition, "parse_DataSpaceDefinition");
function parse_TransformInfoHeader(blob2) {
  var o = {};
  blob2.read_shift(4);
  blob2.l += 4;
  o.id = blob2.read_shift(0, "lpp4");
  o.name = blob2.read_shift(0, "lpp4");
  o.R = parse_CRYPTOVersion(blob2, 4);
  o.U = parse_CRYPTOVersion(blob2, 4);
  o.W = parse_CRYPTOVersion(blob2, 4);
  return o;
}
__name(parse_TransformInfoHeader, "parse_TransformInfoHeader");
function parse_Primary(blob2) {
  var hdr = parse_TransformInfoHeader(blob2);
  hdr.ename = blob2.read_shift(0, "8lpp4");
  hdr.blksz = blob2.read_shift(4);
  hdr.cmode = blob2.read_shift(4);
  if (blob2.read_shift(4) != 4) throw new Error("Bad !Primary record");
  return hdr;
}
__name(parse_Primary, "parse_Primary");
function parse_EncryptionHeader(blob2, length) {
  var tgt = blob2.l + length;
  var o = {};
  o.Flags = blob2.read_shift(4) & 63;
  blob2.l += 4;
  o.AlgID = blob2.read_shift(4);
  var valid = false;
  switch (o.AlgID) {
    case 26126:
    case 26127:
    case 26128:
      valid = o.Flags == 36;
      break;
    case 26625:
      valid = o.Flags == 4;
      break;
    case 0:
      valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36;
      break;
    default:
      throw "Unrecognized encryption algorithm: " + o.AlgID;
  }
  if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
  o.AlgIDHash = blob2.read_shift(4);
  o.KeySize = blob2.read_shift(4);
  o.ProviderType = blob2.read_shift(4);
  blob2.l += 8;
  o.CSPName = blob2.read_shift(tgt - blob2.l >> 1, "utf16le");
  blob2.l = tgt;
  return o;
}
__name(parse_EncryptionHeader, "parse_EncryptionHeader");
function parse_EncryptionVerifier(blob2, length) {
  var o = {}, tgt = blob2.l + length;
  blob2.l += 4;
  o.Salt = blob2.slice(blob2.l, blob2.l + 16);
  blob2.l += 16;
  o.Verifier = blob2.slice(blob2.l, blob2.l + 16);
  blob2.l += 16;
  blob2.read_shift(4);
  o.VerifierHash = blob2.slice(blob2.l, tgt);
  blob2.l = tgt;
  return o;
}
__name(parse_EncryptionVerifier, "parse_EncryptionVerifier");
function parse_EncryptionInfo(blob2) {
  var vers = parse_CRYPTOVersion(blob2);
  switch (vers.Minor) {
    case 2:
      return [vers.Minor, parse_EncInfoStd(blob2, vers)];
    case 3:
      return [vers.Minor, parse_EncInfoExt(blob2, vers)];
    case 4:
      return [vers.Minor, parse_EncInfoAgl(blob2, vers)];
  }
  throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
}
__name(parse_EncryptionInfo, "parse_EncryptionInfo");
function parse_EncInfoStd(blob2) {
  var flags = blob2.read_shift(4);
  if ((flags & 63) != 36) throw new Error("EncryptionInfo mismatch");
  var sz = blob2.read_shift(4);
  var hdr = parse_EncryptionHeader(blob2, sz);
  var verifier = parse_EncryptionVerifier(blob2, blob2.length - blob2.l);
  return { t: "Std", h: hdr, v: verifier };
}
__name(parse_EncInfoStd, "parse_EncInfoStd");
function parse_EncInfoExt() {
  throw new Error("File is password-protected: ECMA-376 Extensible");
}
__name(parse_EncInfoExt, "parse_EncInfoExt");
function parse_EncInfoAgl(blob2) {
  var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
  blob2.l += 4;
  var xml = blob2.read_shift(blob2.length - blob2.l, "utf8");
  var o = {};
  xml.replace(tagregex, /* @__PURE__ */ __name(function xml_agile(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<?xml":
        break;
      case "<encryption":
      case "</encryption>":
        break;
      case "<keyData":
        KeyData.forEach(function(k) {
          o[k] = y[k];
        });
        break;
      case "<dataIntegrity":
        o.encryptedHmacKey = y.encryptedHmacKey;
        o.encryptedHmacValue = y.encryptedHmacValue;
        break;
      case "<keyEncryptors>":
      case "<keyEncryptors":
        o.encs = [];
        break;
      case "</keyEncryptors>":
        break;
      case "<keyEncryptor":
        o.uri = y.uri;
        break;
      case "</keyEncryptor>":
        break;
      case "<encryptedKey":
        o.encs.push(y);
        break;
      default:
        throw y[0];
    }
  }, "xml_agile"));
  return o;
}
__name(parse_EncInfoAgl, "parse_EncInfoAgl");
function parse_RC4CryptoHeader(blob2, length) {
  var o = {};
  var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob2, 4);
  length -= 4;
  if (vers.Minor != 2) throw new Error("unrecognized minor version code: " + vers.Minor);
  if (vers.Major > 4 || vers.Major < 2) throw new Error("unrecognized major version code: " + vers.Major);
  o.Flags = blob2.read_shift(4);
  length -= 4;
  var sz = blob2.read_shift(4);
  length -= 4;
  o.EncryptionHeader = parse_EncryptionHeader(blob2, sz);
  length -= sz;
  o.EncryptionVerifier = parse_EncryptionVerifier(blob2, length);
  return o;
}
__name(parse_RC4CryptoHeader, "parse_RC4CryptoHeader");
function parse_RC4Header(blob2) {
  var o = {};
  var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob2, 4);
  if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
  o.Salt = blob2.read_shift(16);
  o.EncryptedVerifier = blob2.read_shift(16);
  o.EncryptedVerifierHash = blob2.read_shift(16);
  return o;
}
__name(parse_RC4Header, "parse_RC4Header");
function crypto_CreatePasswordVerifier_Method1(Password) {
  var Verifier = 0, PasswordArray;
  var PasswordDecoded = _JS2ANSI(Password);
  var len = PasswordDecoded.length + 1, i, PasswordByte;
  var Intermediate1, Intermediate2, Intermediate3;
  PasswordArray = new_raw_buf(len);
  PasswordArray[0] = PasswordDecoded.length;
  for (i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i - 1];
  for (i = len - 1; i >= 0; --i) {
    PasswordByte = PasswordArray[i];
    Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
    Intermediate2 = Verifier << 1 & 32767;
    Intermediate3 = Intermediate1 | Intermediate2;
    Verifier = Intermediate3 ^ PasswordByte;
  }
  return Verifier ^ 52811;
}
__name(crypto_CreatePasswordVerifier_Method1, "crypto_CreatePasswordVerifier_Method1");
var crypto_CreateXorArray_Method1 = /* @__PURE__ */ function() {
  var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
  var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
  var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
  var Ror = /* @__PURE__ */ __name(function(Byte) {
    return (Byte / 2 | Byte * 128) & 255;
  }, "Ror");
  var XorRor = /* @__PURE__ */ __name(function(byte1, byte2) {
    return Ror(byte1 ^ byte2);
  }, "XorRor");
  var CreateXorKey_Method1 = /* @__PURE__ */ __name(function(Password) {
    var XorKey = InitialCode[Password.length - 1];
    var CurrentElement = 104;
    for (var i = Password.length - 1; i >= 0; --i) {
      var Char = Password[i];
      for (var j = 0; j != 7; ++j) {
        if (Char & 64) XorKey ^= XorMatrix[CurrentElement];
        Char *= 2;
        --CurrentElement;
      }
    }
    return XorKey;
  }, "CreateXorKey_Method1");
  return function(password) {
    var Password = _JS2ANSI(password);
    var XorKey = CreateXorKey_Method1(Password);
    var Index = Password.length;
    var ObfuscationArray = new_raw_buf(16);
    for (var i = 0; i != 16; ++i) ObfuscationArray[i] = 0;
    var Temp, PasswordLastChar, PadIndex;
    if ((Index & 1) === 1) {
      Temp = XorKey >> 8;
      ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
      --Index;
      Temp = XorKey & 255;
      PasswordLastChar = Password[Password.length - 1];
      ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
    }
    while (Index > 0) {
      --Index;
      Temp = XorKey >> 8;
      ObfuscationArray[Index] = XorRor(Password[Index], Temp);
      --Index;
      Temp = XorKey & 255;
      ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    }
    Index = 15;
    PadIndex = 15 - Password.length;
    while (PadIndex > 0) {
      Temp = XorKey >> 8;
      ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
      --Index;
      --PadIndex;
      Temp = XorKey & 255;
      ObfuscationArray[Index] = XorRor(Password[Index], Temp);
      --Index;
      --PadIndex;
    }
    return ObfuscationArray;
  };
}();
var crypto_DecryptData_Method1 = /* @__PURE__ */ __name(function(password, Data, XorArrayIndex, XorArray, O) {
  if (!O) O = Data;
  if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
  var Index, Value;
  for (Index = 0; Index != Data.length; ++Index) {
    Value = Data[Index];
    Value ^= XorArray[XorArrayIndex];
    Value = (Value >> 5 | Value << 3) & 255;
    O[Index] = Value;
    ++XorArrayIndex;
  }
  return [O, XorArrayIndex, XorArray];
}, "crypto_DecryptData_Method1");
var crypto_MakeXorDecryptor = /* @__PURE__ */ __name(function(password) {
  var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
  return function(Data) {
    var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
    XorArrayIndex = O[1];
    return O[0];
  };
}, "crypto_MakeXorDecryptor");
function parse_XORObfuscation(blob2, length, opts, out) {
  var o = { key: parseuint16(blob2), verificationBytes: parseuint16(blob2) };
  if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
  out.valid = o.verificationBytes === o.verifier;
  if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
  return o;
}
__name(parse_XORObfuscation, "parse_XORObfuscation");
function parse_FilePassHeader(blob2, length, oo) {
  var o = oo || {};
  o.Info = blob2.read_shift(2);
  blob2.l -= 2;
  if (o.Info === 1) o.Data = parse_RC4Header(blob2, length);
  else o.Data = parse_RC4CryptoHeader(blob2, length);
  return o;
}
__name(parse_FilePassHeader, "parse_FilePassHeader");
function parse_FilePass(blob2, length, opts) {
  var o = { Type: opts.biff >= 8 ? blob2.read_shift(2) : 0 };
  if (o.Type) parse_FilePassHeader(blob2, length - 2, o);
  else parse_XORObfuscation(blob2, opts.biff >= 8 ? length : length - 2, opts, o);
  return o;
}
__name(parse_FilePass, "parse_FilePass");
var RTF = /* @__PURE__ */ function() {
  function rtf_to_sheet(d, opts) {
    switch (opts.type) {
      case "base64":
        return rtf_to_sheet_str(Base64_decode(d), opts);
      case "binary":
        return rtf_to_sheet_str(d, opts);
      case "buffer":
        return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
      case "array":
        return rtf_to_sheet_str(cc2str(d), opts);
    }
    throw new Error("Unrecognized type " + opts.type);
  }
  __name(rtf_to_sheet, "rtf_to_sheet");
  function rtf_to_sheet_str(str, opts) {
    var o = opts || {};
    var ws = o.dense ? [] : {};
    var rows = str.match(/\\trowd.*?\\row\b/g);
    if (!rows.length) throw new Error("RTF missing table");
    var range2 = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
    rows.forEach(function(rowtf, R) {
      if (Array.isArray(ws)) ws[R] = [];
      var rtfre = /\\\w+\b/g;
      var last_index = 0;
      var res;
      var C = -1;
      while (res = rtfre.exec(rowtf)) {
        switch (res[0]) {
          case "\\cell":
            var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
            if (data[0] == " ") data = data.slice(1);
            ++C;
            if (data.length) {
              var cell = { v: data, t: "s" };
              if (Array.isArray(ws)) ws[R][C] = cell;
              else ws[encode_cell({ r: R, c: C })] = cell;
            }
            break;
        }
        last_index = rtfre.lastIndex;
      }
      if (C > range2.e.c) range2.e.c = C;
    });
    ws["!ref"] = encode_range(range2);
    return ws;
  }
  __name(rtf_to_sheet_str, "rtf_to_sheet_str");
  function rtf_to_workbook(d, opts) {
    return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
  }
  __name(rtf_to_workbook, "rtf_to_workbook");
  function sheet_to_rtf(ws) {
    var o = ["{\\rtf1\\ansi"];
    var r = safe_decode_range(ws["!ref"]), cell;
    var dense = Array.isArray(ws);
    for (var R = r.s.r; R <= r.e.r; ++R) {
      o.push("\\trowd\\trautofit1");
      for (var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C + 1));
      o.push("\\pard\\intbl");
      for (C = r.s.c; C <= r.e.c; ++C) {
        var coord = encode_cell({ r: R, c: C });
        cell = dense ? (ws[R] || [])[C] : ws[coord];
        if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
        o.push(" " + (cell.w || (format_cell(cell), cell.w)));
        o.push("\\cell");
      }
      o.push("\\pard\\intbl\\row");
    }
    return o.join("") + "}";
  }
  __name(sheet_to_rtf, "sheet_to_rtf");
  return {
    to_workbook: rtf_to_workbook,
    to_sheet: rtf_to_sheet,
    from_sheet: sheet_to_rtf
  };
}();
function hex2RGB(h) {
  var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
  return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];
}
__name(hex2RGB, "hex2RGB");
function rgb2Hex(rgb) {
  for (var i = 0, o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
  return o.toString(16).toUpperCase().slice(1);
}
__name(rgb2Hex, "rgb2Hex");
function rgb2HSL(rgb) {
  var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
  var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
  if (C === 0) return [0, 0, R];
  var H6 = 0, S = 0, L2 = M + m;
  S = C / (L2 > 1 ? 2 - L2 : L2);
  switch (M) {
    case R:
      H6 = ((G - B) / C + 6) % 6;
      break;
    case G:
      H6 = (B - R) / C + 2;
      break;
    case B:
      H6 = (R - G) / C + 4;
      break;
  }
  return [H6 / 6, S, L2 / 2];
}
__name(rgb2HSL, "rgb2HSL");
function hsl2RGB(hsl) {
  var H = hsl[0], S = hsl[1], L = hsl[2];
  var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
  var rgb = [m, m, m], h6 = 6 * H;
  var X;
  if (S !== 0) switch (h6 | 0) {
    case 0:
    case 6:
      X = C * h6;
      rgb[0] += C;
      rgb[1] += X;
      break;
    case 1:
      X = C * (2 - h6);
      rgb[0] += X;
      rgb[1] += C;
      break;
    case 2:
      X = C * (h6 - 2);
      rgb[1] += C;
      rgb[2] += X;
      break;
    case 3:
      X = C * (4 - h6);
      rgb[1] += X;
      rgb[2] += C;
      break;
    case 4:
      X = C * (h6 - 4);
      rgb[2] += C;
      rgb[0] += X;
      break;
    case 5:
      X = C * (6 - h6);
      rgb[2] += X;
      rgb[0] += C;
      break;
  }
  for (var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i] * 255);
  return rgb;
}
__name(hsl2RGB, "hsl2RGB");
function rgb_tint(hex, tint) {
  if (tint === 0) return hex;
  var hsl = rgb2HSL(hex2RGB(hex));
  if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
  else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
  return rgb2Hex(hsl2RGB(hsl));
}
__name(rgb_tint, "rgb_tint");
var DEF_MDW = 6;
var MAX_MDW = 15;
var MIN_MDW = 1;
var MDW = DEF_MDW;
function width2px(width) {
  return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
}
__name(width2px, "width2px");
function px2char(px) {
  return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
}
__name(px2char, "px2char");
function char2width(chr) {
  return Math.round((chr * MDW + 5) / MDW * 256) / 256;
}
__name(char2width, "char2width");
function cycle_width(collw) {
  return char2width(px2char(width2px(collw)));
}
__name(cycle_width, "cycle_width");
function find_mdw_colw(collw) {
  var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
  if (delta > 5e-3) {
    for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) if (Math.abs(collw - cycle_width(collw)) <= delta) {
      delta = Math.abs(collw - cycle_width(collw));
      _MDW = MDW;
    }
  }
  MDW = _MDW;
}
__name(find_mdw_colw, "find_mdw_colw");
function process_col(coll) {
  if (coll.width) {
    coll.wpx = width2px(coll.width);
    coll.wch = px2char(coll.wpx);
    coll.MDW = MDW;
  } else if (coll.wpx) {
    coll.wch = px2char(coll.wpx);
    coll.width = char2width(coll.wch);
    coll.MDW = MDW;
  } else if (typeof coll.wch == "number") {
    coll.width = char2width(coll.wch);
    coll.wpx = width2px(coll.width);
    coll.MDW = MDW;
  }
  if (coll.customWidth) delete coll.customWidth;
}
__name(process_col, "process_col");
var DEF_PPI = 96;
var PPI = DEF_PPI;
function px2pt(px) {
  return px * 96 / PPI;
}
__name(px2pt, "px2pt");
function pt2px(pt) {
  return pt * PPI / 96;
}
__name(pt2px, "pt2px");
var XLMLPatternTypeMap = {
  "None": "none",
  "Solid": "solid",
  "Gray50": "mediumGray",
  "Gray75": "darkGray",
  "Gray25": "lightGray",
  "HorzStripe": "darkHorizontal",
  "VertStripe": "darkVertical",
  "ReverseDiagStripe": "darkDown",
  "DiagStripe": "darkUp",
  "DiagCross": "darkGrid",
  "ThickDiagCross": "darkTrellis",
  "ThinHorzStripe": "lightHorizontal",
  "ThinVertStripe": "lightVertical",
  "ThinReverseDiagStripe": "lightDown",
  "ThinHorzCross": "lightGrid"
};
function parse_borders(t, styles, themes, opts) {
  styles.Borders = [];
  var border = {};
  var pass = false;
  (t[0].match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<borders":
      case "<borders>":
      case "</borders>":
        break;
      /* 18.8.4 border CT_Border */
      case "<border":
      case "<border>":
      case "<border/>":
        border = /*::(*/
        {};
        if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
        if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
        styles.Borders.push(border);
        break;
      case "</border>":
        break;
      /* note: not in spec, appears to be CT_BorderPr */
      case "<left/>":
        break;
      case "<left":
      case "<left>":
        break;
      case "</left>":
        break;
      /* note: not in spec, appears to be CT_BorderPr */
      case "<right/>":
        break;
      case "<right":
      case "<right>":
        break;
      case "</right>":
        break;
      /* 18.8.43 top CT_BorderPr */
      case "<top/>":
        break;
      case "<top":
      case "<top>":
        break;
      case "</top>":
        break;
      /* 18.8.6 bottom CT_BorderPr */
      case "<bottom/>":
        break;
      case "<bottom":
      case "<bottom>":
        break;
      case "</bottom>":
        break;
      /* 18.8.13 diagonal CT_BorderPr */
      case "<diagonal":
      case "<diagonal>":
      case "<diagonal/>":
        break;
      case "</diagonal>":
        break;
      /* 18.8.25 horizontal CT_BorderPr */
      case "<horizontal":
      case "<horizontal>":
      case "<horizontal/>":
        break;
      case "</horizontal>":
        break;
      /* 18.8.44 vertical CT_BorderPr */
      case "<vertical":
      case "<vertical>":
      case "<vertical/>":
        break;
      case "</vertical>":
        break;
      /* 18.8.37 start CT_BorderPr */
      case "<start":
      case "<start>":
      case "<start/>":
        break;
      case "</start>":
        break;
      /* 18.8.16 end CT_BorderPr */
      case "<end":
      case "<end>":
      case "<end/>":
        break;
      case "</end>":
        break;
      /* 18.8.? color CT_Color */
      case "<color":
      case "<color>":
        break;
      case "<color/>":
      case "</color>":
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (opts && opts.WTF) {
          if (!pass) throw new Error("unrecognized " + y[0] + " in borders");
        }
    }
  });
}
__name(parse_borders, "parse_borders");
function parse_fills(t, styles, themes, opts) {
  styles.Fills = [];
  var fill2 = {};
  var pass = false;
  (t[0].match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<fills":
      case "<fills>":
      case "</fills>":
        break;
      /* 18.8.20 fill CT_Fill */
      case "<fill>":
      case "<fill":
      case "<fill/>":
        fill2 = {};
        styles.Fills.push(fill2);
        break;
      case "</fill>":
        break;
      /* 18.8.24 gradientFill CT_GradientFill */
      case "<gradientFill>":
        break;
      case "<gradientFill":
      case "</gradientFill>":
        styles.Fills.push(fill2);
        fill2 = {};
        break;
      /* 18.8.32 patternFill CT_PatternFill */
      case "<patternFill":
      case "<patternFill>":
        if (y.patternType) fill2.patternType = y.patternType;
        break;
      case "<patternFill/>":
      case "</patternFill>":
        break;
      /* 18.8.3 bgColor CT_Color */
      case "<bgColor":
        if (!fill2.bgColor) fill2.bgColor = {};
        if (y.indexed) fill2.bgColor.indexed = parseInt(y.indexed, 10);
        if (y.theme) fill2.bgColor.theme = parseInt(y.theme, 10);
        if (y.tint) fill2.bgColor.tint = parseFloat(y.tint);
        if (y.rgb) fill2.bgColor.rgb = y.rgb.slice(-6);
        break;
      case "<bgColor/>":
      case "</bgColor>":
        break;
      /* 18.8.19 fgColor CT_Color */
      case "<fgColor":
        if (!fill2.fgColor) fill2.fgColor = {};
        if (y.theme) fill2.fgColor.theme = parseInt(y.theme, 10);
        if (y.tint) fill2.fgColor.tint = parseFloat(y.tint);
        if (y.rgb != null) fill2.fgColor.rgb = y.rgb.slice(-6);
        break;
      case "<fgColor/>":
      case "</fgColor>":
        break;
      /* 18.8.38 stop CT_GradientStop */
      case "<stop":
      case "<stop/>":
        break;
      case "</stop>":
        break;
      /* 18.8.? color CT_Color */
      case "<color":
      case "<color/>":
        break;
      case "</color>":
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (opts && opts.WTF) {
          if (!pass) throw new Error("unrecognized " + y[0] + " in fills");
        }
    }
  });
}
__name(parse_fills, "parse_fills");
function parse_fonts(t, styles, themes, opts) {
  styles.Fonts = [];
  var font = {};
  var pass = false;
  (t[0].match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<fonts":
      case "<fonts>":
      case "</fonts>":
        break;
      /* 18.8.22 font CT_Font */
      case "<font":
      case "<font>":
        break;
      case "</font>":
      case "<font/>":
        styles.Fonts.push(font);
        font = {};
        break;
      /* 18.8.29 name CT_FontName */
      case "<name":
        if (y.val) font.name = utf8read(y.val);
        break;
      case "<name/>":
      case "</name>":
        break;
      /* 18.8.2  b CT_BooleanProperty */
      case "<b":
        font.bold = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<b/>":
        font.bold = 1;
        break;
      /* 18.8.26 i CT_BooleanProperty */
      case "<i":
        font.italic = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<i/>":
        font.italic = 1;
        break;
      /* 18.4.13 u CT_UnderlineProperty */
      case "<u":
        switch (y.val) {
          case "none":
            font.underline = 0;
            break;
          case "single":
            font.underline = 1;
            break;
          case "double":
            font.underline = 2;
            break;
          case "singleAccounting":
            font.underline = 33;
            break;
          case "doubleAccounting":
            font.underline = 34;
            break;
        }
        break;
      case "<u/>":
        font.underline = 1;
        break;
      /* 18.4.10 strike CT_BooleanProperty */
      case "<strike":
        font.strike = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<strike/>":
        font.strike = 1;
        break;
      /* 18.4.2  outline CT_BooleanProperty */
      case "<outline":
        font.outline = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<outline/>":
        font.outline = 1;
        break;
      /* 18.8.36 shadow CT_BooleanProperty */
      case "<shadow":
        font.shadow = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<shadow/>":
        font.shadow = 1;
        break;
      /* 18.8.12 condense CT_BooleanProperty */
      case "<condense":
        font.condense = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<condense/>":
        font.condense = 1;
        break;
      /* 18.8.17 extend CT_BooleanProperty */
      case "<extend":
        font.extend = y.val ? parsexmlbool(y.val) : 1;
        break;
      case "<extend/>":
        font.extend = 1;
        break;
      /* 18.4.11 sz CT_FontSize */
      case "<sz":
        if (y.val) font.sz = +y.val;
        break;
      case "<sz/>":
      case "</sz>":
        break;
      /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
      case "<vertAlign":
        if (y.val) font.vertAlign = y.val;
        break;
      case "<vertAlign/>":
      case "</vertAlign>":
        break;
      /* 18.8.18 family CT_FontFamily */
      case "<family":
        if (y.val) font.family = parseInt(y.val, 10);
        break;
      case "<family/>":
      case "</family>":
        break;
      /* 18.8.35 scheme CT_FontScheme */
      case "<scheme":
        if (y.val) font.scheme = y.val;
        break;
      case "<scheme/>":
      case "</scheme>":
        break;
      /* 18.4.1 charset CT_IntProperty */
      case "<charset":
        if (y.val == "1") break;
        y.codepage = CS2CP[parseInt(y.val, 10)];
        break;
      /* 18.?.? color CT_Color */
      case "<color":
        if (!font.color) font.color = {};
        if (y.auto) font.color.auto = parsexmlbool(y.auto);
        if (y.rgb) font.color.rgb = y.rgb.slice(-6);
        else if (y.indexed) {
          font.color.index = parseInt(y.indexed, 10);
          var icv = XLSIcv[font.color.index];
          if (font.color.index == 81) icv = XLSIcv[1];
          if (!icv) icv = XLSIcv[1];
          font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
        } else if (y.theme) {
          font.color.theme = parseInt(y.theme, 10);
          if (y.tint) font.color.tint = parseFloat(y.tint);
          if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {
            font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
          }
        }
        break;
      case "<color/>":
      case "</color>":
        break;
      /* note: sometimes mc:AlternateContent appears bare */
      case "<AlternateContent":
        pass = true;
        break;
      case "</AlternateContent>":
        pass = false;
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (opts && opts.WTF) {
          if (!pass) throw new Error("unrecognized " + y[0] + " in fonts");
        }
    }
  });
}
__name(parse_fonts, "parse_fonts");
function parse_numFmts(t, styles, opts) {
  styles.NumberFmt = [];
  var k = keys(table_fmt);
  for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = table_fmt[k[i]];
  var m = t[0].match(tagregex);
  if (!m) return;
  for (i = 0; i < m.length; ++i) {
    var y = parsexmltag(m[i]);
    switch (strip_ns(y[0])) {
      case "<numFmts":
      case "</numFmts>":
      case "<numFmts/>":
      case "<numFmts>":
        break;
      case "<numFmt":
        {
          var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
          styles.NumberFmt[j] = f;
          if (j > 0) {
            if (j > 392) {
              for (j = 392; j > 60; --j) if (styles.NumberFmt[j] == null) break;
              styles.NumberFmt[j] = f;
            }
            SSF_load(f, j);
          }
        }
        break;
      case "</numFmt>":
        break;
      default:
        if (opts.WTF) throw new Error("unrecognized " + y[0] + " in numFmts");
    }
  }
}
__name(parse_numFmts, "parse_numFmts");
var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
function parse_cellXfs(t, styles, opts) {
  styles.CellXf = [];
  var xf;
  var pass = false;
  (t[0].match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x), i = 0;
    switch (strip_ns(y[0])) {
      case "<cellXfs":
      case "<cellXfs>":
      case "<cellXfs/>":
      case "</cellXfs>":
        break;
      /* 18.8.45 xf CT_Xf */
      case "<xf":
      case "<xf/>":
        xf = y;
        delete xf[0];
        for (i = 0; i < cellXF_uint.length; ++i) if (xf[cellXF_uint[i]])
          xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
        for (i = 0; i < cellXF_bool.length; ++i) if (xf[cellXF_bool[i]])
          xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
        if (styles.NumberFmt && xf.numFmtId > 392) {
          for (i = 392; i > 60; --i) if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
            xf.numFmtId = i;
            break;
          }
        }
        styles.CellXf.push(xf);
        break;
      case "</xf>":
        break;
      /* 18.8.1 alignment CT_CellAlignment */
      case "<alignment":
      case "<alignment/>":
        var alignment = {};
        if (y.vertical) alignment.vertical = y.vertical;
        if (y.horizontal) alignment.horizontal = y.horizontal;
        if (y.textRotation != null) alignment.textRotation = y.textRotation;
        if (y.indent) alignment.indent = y.indent;
        if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
        xf.alignment = alignment;
        break;
      case "</alignment>":
        break;
      /* 18.8.33 protection CT_CellProtection */
      case "<protection":
        break;
      case "</protection>":
      case "<protection/>":
        break;
      /* note: sometimes mc:AlternateContent appears bare */
      case "<AlternateContent":
        pass = true;
        break;
      case "</AlternateContent>":
        pass = false;
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (opts && opts.WTF) {
          if (!pass) throw new Error("unrecognized " + y[0] + " in cellXfs");
        }
    }
  });
}
__name(parse_cellXfs, "parse_cellXfs");
var parse_sty_xml = /* @__PURE__ */ (/* @__PURE__ */ __name(function make_pstyx() {
  var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
  var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
  var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
  var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
  var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
  return /* @__PURE__ */ __name(function parse_sty_xml2(data, themes, opts) {
    var styles = {};
    if (!data) return styles;
    data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
    var t;
    if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts);
    if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts);
    if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts);
    if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts);
    if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts);
    return styles;
  }, "parse_sty_xml");
}, "make_pstyx"))();
function parse_BrtFmt(data, length) {
  var numFmtId = data.read_shift(2);
  var stFmtCode = parse_XLWideString(data, length - 2);
  return [numFmtId, stFmtCode];
}
__name(parse_BrtFmt, "parse_BrtFmt");
function parse_BrtFont(data, length, opts) {
  var out = {};
  out.sz = data.read_shift(2) / 20;
  var grbit = parse_FontFlags(data, 2, opts);
  if (grbit.fItalic) out.italic = 1;
  if (grbit.fCondense) out.condense = 1;
  if (grbit.fExtend) out.extend = 1;
  if (grbit.fShadow) out.shadow = 1;
  if (grbit.fOutline) out.outline = 1;
  if (grbit.fStrikeout) out.strike = 1;
  var bls = data.read_shift(2);
  if (bls === 700) out.bold = 1;
  switch (data.read_shift(2)) {
    /* case 0: out.vertAlign = "baseline"; break; */
    case 1:
      out.vertAlign = "superscript";
      break;
    case 2:
      out.vertAlign = "subscript";
      break;
  }
  var underline = data.read_shift(1);
  if (underline != 0) out.underline = underline;
  var family = data.read_shift(1);
  if (family > 0) out.family = family;
  var bCharSet = data.read_shift(1);
  if (bCharSet > 0) out.charset = bCharSet;
  data.l++;
  out.color = parse_BrtColor(data, 8);
  switch (data.read_shift(1)) {
    /* case 0: out.scheme = "none": break; */
    case 1:
      out.scheme = "major";
      break;
    case 2:
      out.scheme = "minor";
      break;
  }
  out.name = parse_XLWideString(data, length - 21);
  return out;
}
__name(parse_BrtFont, "parse_BrtFont");
var parse_BrtFill = parsenoop;
function parse_BrtXF(data, length) {
  var tgt = data.l + length;
  var ixfeParent = data.read_shift(2);
  var ifmt = data.read_shift(2);
  data.l = tgt;
  return { ixfe: ixfeParent, numFmtId: ifmt };
}
__name(parse_BrtXF, "parse_BrtXF");
var parse_BrtBorder = parsenoop;
function parse_sty_bin(data, themes, opts) {
  var styles = {};
  styles.NumberFmt = [];
  for (var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];
  styles.CellXf = [];
  styles.Fonts = [];
  var state = [];
  var pass = false;
  recordhopper(data, /* @__PURE__ */ __name(function hopper_sty(val, R, RT) {
    switch (RT) {
      case 44:
        styles.NumberFmt[val[0]] = val[1];
        SSF_load(val[1], val[0]);
        break;
      case 43:
        styles.Fonts.push(val);
        if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
          val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
        }
        break;
      case 1025:
        break;
      case 45:
        break;
      case 46:
        break;
      case 47:
        if (state[state.length - 1] == 617) {
          styles.CellXf.push(val);
        }
        break;
      case 48:
      /* BrtStyle */
      case 507:
      /* BrtDXF */
      case 572:
      /* BrtMRUColor */
      case 475:
        break;
      case 1171:
      /* BrtDXF14 */
      case 2102:
      /* BrtDXF15 */
      case 1130:
      /* BrtSlicerStyleElement */
      case 512:
      /* BrtTableStyleElement */
      case 2095:
      /* BrtTimelineStyleElement */
      case 3072:
        break;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      case 37:
        state.push(RT);
        pass = true;
        break;
      case 38:
        state.pop();
        pass = false;
        break;
      default:
        if (R.T > 0) state.push(RT);
        else if (R.T < 0) state.pop();
        else if (!pass || opts.WTF && state[state.length - 1] != 37) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "hopper_sty"));
  return styles;
}
__name(parse_sty_bin, "parse_sty_bin");
var XLSXThemeClrScheme = [
  "</a:lt1>",
  "</a:dk1>",
  "</a:lt2>",
  "</a:dk2>",
  "</a:accent1>",
  "</a:accent2>",
  "</a:accent3>",
  "</a:accent4>",
  "</a:accent5>",
  "</a:accent6>",
  "</a:hlink>",
  "</a:folHlink>"
];
function parse_clrScheme(t, themes, opts) {
  themes.themeElements.clrScheme = [];
  var color = {};
  (t[0].match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (y[0]) {
      /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
      case "<a:clrScheme":
      case "</a:clrScheme>":
        break;
      /* 20.1.2.3.32 srgbClr CT_SRgbColor */
      case "<a:srgbClr":
        color.rgb = y.val;
        break;
      /* 20.1.2.3.33 sysClr CT_SystemColor */
      case "<a:sysClr":
        color.rgb = y.lastClr;
        break;
      /* 20.1.4.1.1 accent1 (Accent 1) */
      /* 20.1.4.1.2 accent2 (Accent 2) */
      /* 20.1.4.1.3 accent3 (Accent 3) */
      /* 20.1.4.1.4 accent4 (Accent 4) */
      /* 20.1.4.1.5 accent5 (Accent 5) */
      /* 20.1.4.1.6 accent6 (Accent 6) */
      /* 20.1.4.1.9 dk1 (Dark 1) */
      /* 20.1.4.1.10 dk2 (Dark 2) */
      /* 20.1.4.1.15 folHlink (Followed Hyperlink) */
      /* 20.1.4.1.19 hlink (Hyperlink) */
      /* 20.1.4.1.22 lt1 (Light 1) */
      /* 20.1.4.1.23 lt2 (Light 2) */
      case "<a:dk1>":
      case "</a:dk1>":
      case "<a:lt1>":
      case "</a:lt1>":
      case "<a:dk2>":
      case "</a:dk2>":
      case "<a:lt2>":
      case "</a:lt2>":
      case "<a:accent1>":
      case "</a:accent1>":
      case "<a:accent2>":
      case "</a:accent2>":
      case "<a:accent3>":
      case "</a:accent3>":
      case "<a:accent4>":
      case "</a:accent4>":
      case "<a:accent5>":
      case "</a:accent5>":
      case "<a:accent6>":
      case "</a:accent6>":
      case "<a:hlink>":
      case "</a:hlink>":
      case "<a:folHlink>":
      case "</a:folHlink>":
        if (y[0].charAt(1) === "/") {
          themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
          color = {};
        } else {
          color.name = y[0].slice(3, y[0].length - 1);
        }
        break;
      default:
        if (opts && opts.WTF) throw new Error("Unrecognized " + y[0] + " in clrScheme");
    }
  });
}
__name(parse_clrScheme, "parse_clrScheme");
function parse_fontScheme() {
}
__name(parse_fontScheme, "parse_fontScheme");
function parse_fmtScheme() {
}
__name(parse_fmtScheme, "parse_fmtScheme");
var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
function parse_themeElements(data, themes, opts) {
  themes.themeElements = {};
  var t;
  [
    /* clrScheme CT_ColorScheme */
    ["clrScheme", clrsregex, parse_clrScheme],
    /* fontScheme CT_FontScheme */
    ["fontScheme", fntsregex, parse_fontScheme],
    /* fmtScheme CT_StyleMatrix */
    ["fmtScheme", fmtsregex, parse_fmtScheme]
  ].forEach(function(m) {
    if (!(t = data.match(m[1]))) throw new Error(m[0] + " not found in themeElements");
    m[2](t, themes, opts);
  });
}
__name(parse_themeElements, "parse_themeElements");
var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
function parse_theme_xml(data, opts) {
  if (!data || data.length === 0) data = write_theme();
  var t;
  var themes = {};
  if (!(t = data.match(themeltregex))) throw new Error("themeElements not found in theme");
  parse_themeElements(t[0], themes, opts);
  themes.raw = data;
  return themes;
}
__name(parse_theme_xml, "parse_theme_xml");
function write_theme(Themes, opts) {
  if (opts && opts.themeXLSX) return opts.themeXLSX;
  if (Themes && typeof Themes.raw == "string") return Themes.raw;
  var o = [XML_HEADER];
  o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
  o[o.length] = "<a:themeElements>";
  o[o.length] = '<a:clrScheme name="Office">';
  o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
  o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
  o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
  o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
  o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
  o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
  o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
  o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
  o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
  o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
  o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
  o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
  o[o.length] = "</a:clrScheme>";
  o[o.length] = '<a:fontScheme name="Office">';
  o[o.length] = "<a:majorFont>";
  o[o.length] = '<a:latin typeface="Cambria"/>';
  o[o.length] = '<a:ea typeface=""/>';
  o[o.length] = '<a:cs typeface=""/>';
  o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
  o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
  o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
  o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
  o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
  o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
  o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
  o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
  o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
  o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
  o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
  o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
  o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
  o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
  o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
  o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
  o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
  o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
  o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
  o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
  o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
  o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
  o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
  o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
  o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
  o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
  o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
  o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
  o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
  o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
  o[o.length] = "</a:majorFont>";
  o[o.length] = "<a:minorFont>";
  o[o.length] = '<a:latin typeface="Calibri"/>';
  o[o.length] = '<a:ea typeface=""/>';
  o[o.length] = '<a:cs typeface=""/>';
  o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
  o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
  o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
  o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
  o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
  o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
  o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
  o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
  o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
  o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
  o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
  o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
  o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
  o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
  o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
  o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
  o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
  o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
  o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
  o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
  o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
  o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
  o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
  o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
  o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
  o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
  o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
  o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
  o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
  o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
  o[o.length] = "</a:minorFont>";
  o[o.length] = "</a:fontScheme>";
  o[o.length] = '<a:fmtScheme name="Office">';
  o[o.length] = "<a:fillStyleLst>";
  o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
  o[o.length] = '<a:gradFill rotWithShape="1">';
  o[o.length] = "<a:gsLst>";
  o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
  o[o.length] = "</a:gsLst>";
  o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
  o[o.length] = "</a:gradFill>";
  o[o.length] = '<a:gradFill rotWithShape="1">';
  o[o.length] = "<a:gsLst>";
  o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
  o[o.length] = "</a:gsLst>";
  o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
  o[o.length] = "</a:gradFill>";
  o[o.length] = "</a:fillStyleLst>";
  o[o.length] = "<a:lnStyleLst>";
  o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
  o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
  o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
  o[o.length] = "</a:lnStyleLst>";
  o[o.length] = "<a:effectStyleLst>";
  o[o.length] = "<a:effectStyle>";
  o[o.length] = "<a:effectLst>";
  o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
  o[o.length] = "</a:effectLst>";
  o[o.length] = "</a:effectStyle>";
  o[o.length] = "<a:effectStyle>";
  o[o.length] = "<a:effectLst>";
  o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
  o[o.length] = "</a:effectLst>";
  o[o.length] = "</a:effectStyle>";
  o[o.length] = "<a:effectStyle>";
  o[o.length] = "<a:effectLst>";
  o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
  o[o.length] = "</a:effectLst>";
  o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
  o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
  o[o.length] = "</a:effectStyle>";
  o[o.length] = "</a:effectStyleLst>";
  o[o.length] = "<a:bgFillStyleLst>";
  o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
  o[o.length] = '<a:gradFill rotWithShape="1">';
  o[o.length] = "<a:gsLst>";
  o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
  o[o.length] = "</a:gsLst>";
  o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
  o[o.length] = "</a:gradFill>";
  o[o.length] = '<a:gradFill rotWithShape="1">';
  o[o.length] = "<a:gsLst>";
  o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
  o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
  o[o.length] = "</a:gsLst>";
  o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
  o[o.length] = "</a:gradFill>";
  o[o.length] = "</a:bgFillStyleLst>";
  o[o.length] = "</a:fmtScheme>";
  o[o.length] = "</a:themeElements>";
  o[o.length] = "<a:objectDefaults>";
  o[o.length] = "<a:spDef>";
  o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
  o[o.length] = "</a:spDef>";
  o[o.length] = "<a:lnDef>";
  o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
  o[o.length] = "</a:lnDef>";
  o[o.length] = "</a:objectDefaults>";
  o[o.length] = "<a:extraClrSchemeLst/>";
  o[o.length] = "</a:theme>";
  return o.join("");
}
__name(write_theme, "write_theme");
function parse_Theme(blob2, length, opts) {
  var end = blob2.l + length;
  var dwThemeVersion = blob2.read_shift(4);
  if (dwThemeVersion === 124226) return;
  if (!opts.cellStyles) {
    blob2.l = end;
    return;
  }
  var data = blob2.slice(blob2.l);
  blob2.l = end;
  var zip;
  try {
    zip = zip_read(data, { type: "array" });
  } catch (e) {
    return;
  }
  var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
  if (!themeXML) return;
  return parse_theme_xml(themeXML, opts);
}
__name(parse_Theme, "parse_Theme");
function parse_ColorTheme(blob2) {
  return blob2.read_shift(4);
}
__name(parse_ColorTheme, "parse_ColorTheme");
function parse_FullColorExt(blob2) {
  var o = {};
  o.xclrType = blob2.read_shift(2);
  o.nTintShade = blob2.read_shift(2);
  switch (o.xclrType) {
    case 0:
      blob2.l += 4;
      break;
    case 1:
      o.xclrValue = parse_IcvXF(blob2, 4);
      break;
    case 2:
      o.xclrValue = parse_LongRGBA(blob2, 4);
      break;
    case 3:
      o.xclrValue = parse_ColorTheme(blob2, 4);
      break;
    case 4:
      blob2.l += 4;
      break;
  }
  blob2.l += 8;
  return o;
}
__name(parse_FullColorExt, "parse_FullColorExt");
function parse_IcvXF(blob2, length) {
  return parsenoop(blob2, length);
}
__name(parse_IcvXF, "parse_IcvXF");
function parse_XFExtGradient(blob2, length) {
  return parsenoop(blob2, length);
}
__name(parse_XFExtGradient, "parse_XFExtGradient");
function parse_ExtProp(blob2) {
  var extType = blob2.read_shift(2);
  var cb = blob2.read_shift(2) - 4;
  var o = [extType];
  switch (extType) {
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
      o[1] = parse_FullColorExt(blob2, cb);
      break;
    case 6:
      o[1] = parse_XFExtGradient(blob2, cb);
      break;
    case 14:
    case 15:
      o[1] = blob2.read_shift(cb === 1 ? 1 : 2);
      break;
    default:
      throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
  }
  return o;
}
__name(parse_ExtProp, "parse_ExtProp");
function parse_XFExt(blob2, length) {
  var end = blob2.l + length;
  blob2.l += 2;
  var ixfe = blob2.read_shift(2);
  blob2.l += 2;
  var cexts = blob2.read_shift(2);
  var ext = [];
  while (cexts-- > 0) ext.push(parse_ExtProp(blob2, end - blob2.l));
  return { ixfe, ext };
}
__name(parse_XFExt, "parse_XFExt");
function update_xfext(xf, xfext) {
  xfext.forEach(function(xfe) {
    switch (xfe[0]) {
      /* 2.5.108 extPropData */
      case 4:
        break;
      /* foreground color */
      case 5:
        break;
      /* background color */
      case 6:
        break;
      /* gradient fill */
      case 7:
        break;
      /* top cell border color */
      case 8:
        break;
      /* bottom cell border color */
      case 9:
        break;
      /* left cell border color */
      case 10:
        break;
      /* right cell border color */
      case 11:
        break;
      /* diagonal cell border color */
      case 13:
        break;
      case 14:
        break;
      /* font scheme */
      case 15:
        break;
    }
  });
}
__name(update_xfext, "update_xfext");
function parse_BrtMdtinfo(data, length) {
  return {
    flags: data.read_shift(4),
    version: data.read_shift(4),
    name: parse_XLWideString(data, length - 8)
  };
}
__name(parse_BrtMdtinfo, "parse_BrtMdtinfo");
function parse_BrtMdb(data) {
  var out = [];
  var cnt = data.read_shift(4);
  while (cnt-- > 0)
    out.push([data.read_shift(4), data.read_shift(4)]);
  return out;
}
__name(parse_BrtMdb, "parse_BrtMdb");
function parse_BrtBeginEsmdb(data) {
  data.l += 4;
  return data.read_shift(4) != 0;
}
__name(parse_BrtBeginEsmdb, "parse_BrtBeginEsmdb");
function parse_xlmeta_bin(data, name2, _opts) {
  var out = { Types: [], Cell: [], Value: [] };
  var opts = _opts || {};
  var state = [];
  var pass = false;
  var metatype = 2;
  recordhopper(data, function(val, R, RT) {
    switch (RT) {
      case 335:
        out.Types.push({ name: val.name });
        break;
      case 51:
        val.forEach(function(r) {
          if (metatype == 1)
            out.Cell.push({ type: out.Types[r[0] - 1].name, index: r[1] });
          else if (metatype == 0)
            out.Value.push({ type: out.Types[r[0] - 1].name, index: r[1] });
        });
        break;
      case 337:
        metatype = val ? 1 : 0;
        break;
      case 338:
        metatype = 2;
        break;
      case 35:
        state.push(RT);
        pass = true;
        break;
      case 36:
        state.pop();
        pass = false;
        break;
      default:
        if (R.T) {
        } else if (!pass || opts.WTF && state[state.length - 1] != 35)
          throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  });
  return out;
}
__name(parse_xlmeta_bin, "parse_xlmeta_bin");
function parse_xlmeta_xml(data, name2, opts) {
  var out = { Types: [], Cell: [], Value: [] };
  if (!data)
    return out;
  var pass = false;
  var metatype = 2;
  var lastmeta;
  data.replace(tagregex, function(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<?xml":
        break;
      case "<metadata":
      case "</metadata>":
        break;
      case "<metadataTypes":
      case "</metadataTypes>":
        break;
      case "<metadataType":
        out.Types.push({ name: y.name });
        break;
      case "</metadataType>":
        break;
      case "<futureMetadata":
        for (var j = 0; j < out.Types.length; ++j)
          if (out.Types[j].name == y.name)
            lastmeta = out.Types[j];
        break;
      case "</futureMetadata>":
        break;
      case "<bk>":
        break;
      case "</bk>":
        break;
      case "<rc":
        if (metatype == 1)
          out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
        else if (metatype == 0)
          out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
        break;
      case "</rc>":
        break;
      case "<cellMetadata":
        metatype = 1;
        break;
      case "</cellMetadata>":
        metatype = 2;
        break;
      case "<valueMetadata":
        metatype = 0;
        break;
      case "</valueMetadata>":
        metatype = 2;
        break;
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
      case "<extLst/>":
        break;
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      case "<rvb":
        if (!lastmeta)
          break;
        if (!lastmeta.offsets)
          lastmeta.offsets = [];
        lastmeta.offsets.push(+y.i);
        break;
      default:
        if (!pass && opts.WTF)
          throw new Error("unrecognized " + y[0] + " in metadata");
    }
    return x;
  });
  return out;
}
__name(parse_xlmeta_xml, "parse_xlmeta_xml");
function parse_cc_xml(data) {
  var d = [];
  if (!data) return d;
  var i = 1;
  (data.match(tagregex) || []).forEach(function(x) {
    var y = parsexmltag(x);
    switch (y[0]) {
      case "<?xml":
        break;
      /* 18.6.2  calcChain CT_CalcChain 1 */
      case "<calcChain":
      case "<calcChain>":
      case "</calcChain>":
        break;
      /* 18.6.1  c CT_CalcCell 1 */
      case "<c":
        delete y[0];
        if (y.i) i = y.i;
        else y.i = i;
        d.push(y);
        break;
    }
  });
  return d;
}
__name(parse_cc_xml, "parse_cc_xml");
function parse_BrtCalcChainItem$(data) {
  var out = {};
  out.i = data.read_shift(4);
  var cell = {};
  cell.r = data.read_shift(4);
  cell.c = data.read_shift(4);
  out.r = encode_cell(cell);
  var flags = data.read_shift(1);
  if (flags & 2) out.l = "1";
  if (flags & 8) out.a = "1";
  return out;
}
__name(parse_BrtCalcChainItem$, "parse_BrtCalcChainItem$");
function parse_cc_bin(data, name2, opts) {
  var out = [];
  var pass = false;
  recordhopper(data, /* @__PURE__ */ __name(function hopper_cc(val, R, RT) {
    switch (RT) {
      case 63:
        out.push(val);
        break;
      default:
        if (R.T) {
        } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "hopper_cc"));
  return out;
}
__name(parse_cc_bin, "parse_cc_bin");
function parse_xlink_xml() {
}
__name(parse_xlink_xml, "parse_xlink_xml");
function parse_xlink_bin(data, rel, name2, _opts) {
  if (!data) return data;
  var opts = _opts || {};
  var pass = false, end = false;
  recordhopper(data, /* @__PURE__ */ __name(function xlink_parse(val, R, RT) {
    if (end) return;
    switch (RT) {
      case 359:
      /* 'BrtSupTabs' */
      case 363:
      /* 'BrtExternTableStart' */
      case 364:
      /* 'BrtExternTableEnd' */
      case 366:
      /* 'BrtExternRowHdr' */
      case 367:
      /* 'BrtExternCellBlank' */
      case 368:
      /* 'BrtExternCellReal' */
      case 369:
      /* 'BrtExternCellBool' */
      case 370:
      /* 'BrtExternCellError' */
      case 371:
      /* 'BrtExternCellString' */
      case 472:
      /* 'BrtExternValueMeta' */
      case 577:
      /* 'BrtSupNameStart' */
      case 578:
      /* 'BrtSupNameValueStart' */
      case 579:
      /* 'BrtSupNameValueEnd' */
      case 580:
      /* 'BrtSupNameNum' */
      case 581:
      /* 'BrtSupNameErr' */
      case 582:
      /* 'BrtSupNameSt' */
      case 583:
      /* 'BrtSupNameNil' */
      case 584:
      /* 'BrtSupNameBool' */
      case 585:
      /* 'BrtSupNameFmla' */
      case 586:
      /* 'BrtSupNameBits' */
      case 587:
        break;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      default:
        if (R.T) {
        } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "xlink_parse"), opts);
}
__name(parse_xlink_bin, "parse_xlink_bin");
function parse_drawing(data, rels) {
  if (!data) return "??";
  var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
  return rels["!id"][id].Target;
}
__name(parse_drawing, "parse_drawing");
function sheet_insert_comments(sheet, comments, threaded, people) {
  var dense = Array.isArray(sheet);
  var cell;
  comments.forEach(function(comment) {
    var r = decode_cell(comment.ref);
    if (dense) {
      if (!sheet[r.r]) sheet[r.r] = [];
      cell = sheet[r.r][r.c];
    } else cell = sheet[comment.ref];
    if (!cell) {
      cell = { t: "z" };
      if (dense) sheet[r.r][r.c] = cell;
      else sheet[comment.ref] = cell;
      var range2 = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
      if (range2.s.r > r.r) range2.s.r = r.r;
      if (range2.e.r < r.r) range2.e.r = r.r;
      if (range2.s.c > r.c) range2.s.c = r.c;
      if (range2.e.c < r.c) range2.e.c = r.c;
      var encoded = encode_range(range2);
      if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
    }
    if (!cell.c) cell.c = [];
    var o = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
    if (comment.h) o.h = comment.h;
    for (var i = cell.c.length - 1; i >= 0; --i) {
      if (!threaded && cell.c[i].T) return;
      if (threaded && !cell.c[i].T) cell.c.splice(i, 1);
    }
    if (threaded && people) for (i = 0; i < people.length; ++i) {
      if (o.a == people[i].id) {
        o.a = people[i].name || o.a;
        break;
      }
    }
    cell.c.push(o);
  });
}
__name(sheet_insert_comments, "sheet_insert_comments");
function parse_comments_xml(data, opts) {
  if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
  var authors = [];
  var commentList = [];
  var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
  if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
    if (x === "" || x.trim() === "") return;
    var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
    if (a) authors.push(a[1]);
  });
  var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
  if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
    if (x === "" || x.trim() === "") return;
    var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
    if (!cm) return;
    var y = parsexmltag(cm[0]);
    var comment = { author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid };
    var cell = decode_cell(y.ref);
    if (opts.sheetRows && opts.sheetRows <= cell.r) return;
    var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
    var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
    comment.r = rt.r;
    if (rt.r == "<t></t>") rt.t = rt.h = "";
    comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    if (opts.cellHTML) comment.h = rt.h;
    commentList.push(comment);
  });
  return commentList;
}
__name(parse_comments_xml, "parse_comments_xml");
function parse_tcmnt_xml(data, opts) {
  var out = [];
  var pass = false, comment = {}, tidx = 0;
  data.replace(tagregex, /* @__PURE__ */ __name(function xml_tcmnt(x, idx) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<?xml":
        break;
      /* 2.6.207 ThreadedComments CT_ThreadedComments */
      case "<ThreadedComments":
        break;
      case "</ThreadedComments>":
        break;
      /* 2.6.205 threadedComment CT_ThreadedComment */
      case "<threadedComment":
        comment = { author: y.personId, guid: y.id, ref: y.ref, T: 1 };
        break;
      case "</threadedComment>":
        if (comment.t != null) out.push(comment);
        break;
      case "<text>":
      case "<text":
        tidx = idx + x.length;
        break;
      case "</text>":
        comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        break;
      /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */
      case "<mentions":
      case "<mentions>":
        pass = true;
        break;
      case "</mentions>":
        pass = false;
        break;
      /* 2.6.202 mention CT_Mention TODO */
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
      case "<extLst/>":
        break;
      /* 18.2.7  ext CT_Extension + */
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
    }
    return x;
  }, "xml_tcmnt"));
  return out;
}
__name(parse_tcmnt_xml, "parse_tcmnt_xml");
function parse_people_xml(data, opts) {
  var out = [];
  var pass = false;
  data.replace(tagregex, /* @__PURE__ */ __name(function xml_tcmnt(x) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<?xml":
        break;
      /* 2.4.85 personList CT_PersonList */
      case "<personList":
        break;
      case "</personList>":
        break;
      /* 2.6.203 person CT_Person TODO: providers */
      case "<person":
        out.push({ name: y.displayname, id: y.id });
        break;
      case "</person>":
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
      case "<extLst/>":
        break;
      /* 18.2.7  ext CT_Extension + */
      case "<ext":
        pass = true;
        break;
      case "</ext>":
        pass = false;
        break;
      default:
        if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in threaded comments");
    }
    return x;
  }, "xml_tcmnt"));
  return out;
}
__name(parse_people_xml, "parse_people_xml");
function parse_BrtBeginComment(data) {
  var out = {};
  out.iauthor = data.read_shift(4);
  var rfx = parse_UncheckedRfX(data, 16);
  out.rfx = rfx.s;
  out.ref = encode_cell(rfx.s);
  data.l += 16;
  return out;
}
__name(parse_BrtBeginComment, "parse_BrtBeginComment");
var parse_BrtCommentAuthor = parse_XLWideString;
function parse_comments_bin(data, opts) {
  var out = [];
  var authors = [];
  var c = {};
  var pass = false;
  recordhopper(data, /* @__PURE__ */ __name(function hopper_cmnt(val, R, RT) {
    switch (RT) {
      case 632:
        authors.push(val);
        break;
      case 635:
        c = val;
        break;
      case 637:
        c.t = val.t;
        c.h = val.h;
        c.r = val.r;
        break;
      case 636:
        c.author = authors[c.iauthor];
        delete c.iauthor;
        if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
        if (!c.t) c.t = "";
        delete c.rfx;
        out.push(c);
        break;
      case 3072:
        break;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      case 37:
        break;
      case 38:
        break;
      default:
        if (R.T) {
        } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "hopper_cmnt"));
  return out;
}
__name(parse_comments_bin, "parse_comments_bin");
var CT_VBA = "application/vnd.ms-office.vbaProject";
function make_vba_xls(cfb) {
  var newcfb = CFB.utils.cfb_new({ root: "R" });
  cfb.FullPaths.forEach(function(p, i) {
    if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
      return;
    var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
    CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
  });
  return CFB.write(newcfb);
}
__name(make_vba_xls, "make_vba_xls");
function parse_ds_bin() {
  return { "!type": "dialog" };
}
__name(parse_ds_bin, "parse_ds_bin");
function parse_ds_xml() {
  return { "!type": "dialog" };
}
__name(parse_ds_xml, "parse_ds_xml");
function parse_ms_bin() {
  return { "!type": "macro" };
}
__name(parse_ms_bin, "parse_ms_bin");
function parse_ms_xml() {
  return { "!type": "macro" };
}
__name(parse_ms_xml, "parse_ms_xml");
var rc_to_a1 = /* @__PURE__ */ function() {
  var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
  var rcbase = { r: 0, c: 0 };
  function rcfunc($$, $1, $2, $3) {
    var cRel = false, rRel = false;
    if ($2.length == 0) rRel = true;
    else if ($2.charAt(0) == "[") {
      rRel = true;
      $2 = $2.slice(1, -1);
    }
    if ($3.length == 0) cRel = true;
    else if ($3.charAt(0) == "[") {
      cRel = true;
      $3 = $3.slice(1, -1);
    }
    var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
    if (cRel) C += rcbase.c;
    else --C;
    if (rRel) R += rcbase.r;
    else --R;
    return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
  }
  __name(rcfunc, "rcfunc");
  return /* @__PURE__ */ __name(function rc_to_a12(fstr, base) {
    rcbase = base;
    return fstr.replace(rcregex, rcfunc);
  }, "rc_to_a1");
}();
var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
var a1_to_rc = /* @__PURE__ */ function() {
  return /* @__PURE__ */ __name(function a1_to_rc2(fstr, base) {
    return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
      var c = decode_col($3) - ($2 ? 0 : base.c);
      var r = decode_row($5) - ($4 ? 0 : base.r);
      var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
      var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
      return $1 + "R" + R + "C" + C;
    });
  }, "a1_to_rc");
}();
function shift_formula_str(f, delta) {
  return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
    return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
  });
}
__name(shift_formula_str, "shift_formula_str");
function shift_formula_xlsx(f, range2, cell) {
  var r = decode_range(range2), s = r.s, c = decode_cell(cell);
  var delta = { r: c.r - s.r, c: c.c - s.c };
  return shift_formula_str(f, delta);
}
__name(shift_formula_xlsx, "shift_formula_xlsx");
function fuzzyfmla(f) {
  if (f.length == 1) return false;
  return true;
}
__name(fuzzyfmla, "fuzzyfmla");
function _xlfn(f) {
  return f.replace(/_xlfn\./g, "");
}
__name(_xlfn, "_xlfn");
function parseread1(blob2) {
  blob2.l += 1;
  return;
}
__name(parseread1, "parseread1");
function parse_ColRelU(blob2, length) {
  var c = blob2.read_shift(length == 1 ? 1 : 2);
  return [c & 16383, c >> 14 & 1, c >> 15 & 1];
}
__name(parse_ColRelU, "parse_ColRelU");
function parse_RgceArea(blob2, length, opts) {
  var w = 2;
  if (opts) {
    if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob2, length, opts);
    else if (opts.biff == 12) w = 4;
  }
  var r = blob2.read_shift(w), R = blob2.read_shift(w);
  var c = parse_ColRelU(blob2, 2);
  var C = parse_ColRelU(blob2, 2);
  return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
}
__name(parse_RgceArea, "parse_RgceArea");
function parse_RgceArea_BIFF2(blob2) {
  var r = parse_ColRelU(blob2, 2), R = parse_ColRelU(blob2, 2);
  var c = blob2.read_shift(1);
  var C = blob2.read_shift(1);
  return { s: { r: r[0], c, cRel: r[1], rRel: r[2] }, e: { r: R[0], c: C, cRel: R[1], rRel: R[2] } };
}
__name(parse_RgceArea_BIFF2, "parse_RgceArea_BIFF2");
function parse_RgceAreaRel(blob2, length, opts) {
  if (opts.biff < 8) return parse_RgceArea_BIFF2(blob2, length, opts);
  var r = blob2.read_shift(opts.biff == 12 ? 4 : 2), R = blob2.read_shift(opts.biff == 12 ? 4 : 2);
  var c = parse_ColRelU(blob2, 2);
  var C = parse_ColRelU(blob2, 2);
  return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
}
__name(parse_RgceAreaRel, "parse_RgceAreaRel");
function parse_RgceLoc(blob2, length, opts) {
  if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob2, length, opts);
  var r = blob2.read_shift(opts && opts.biff == 12 ? 4 : 2);
  var c = parse_ColRelU(blob2, 2);
  return { r, c: c[0], cRel: c[1], rRel: c[2] };
}
__name(parse_RgceLoc, "parse_RgceLoc");
function parse_RgceLoc_BIFF2(blob2) {
  var r = parse_ColRelU(blob2, 2);
  var c = blob2.read_shift(1);
  return { r: r[0], c, cRel: r[1], rRel: r[2] };
}
__name(parse_RgceLoc_BIFF2, "parse_RgceLoc_BIFF2");
function parse_RgceElfLoc(blob2) {
  var r = blob2.read_shift(2);
  var c = blob2.read_shift(2);
  return { r, c: c & 255, fQuoted: !!(c & 16384), cRel: c >> 15, rRel: c >> 15 };
}
__name(parse_RgceElfLoc, "parse_RgceElfLoc");
function parse_RgceLocRel(blob2, length, opts) {
  var biff = opts && opts.biff ? opts.biff : 8;
  if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob2, length, opts);
  var r = blob2.read_shift(biff >= 12 ? 4 : 2);
  var cl = blob2.read_shift(2);
  var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
  cl &= 16383;
  if (rRel == 1) while (r > 524287) r -= 1048576;
  if (cRel == 1) while (cl > 8191) cl = cl - 16384;
  return { r, c: cl, cRel, rRel };
}
__name(parse_RgceLocRel, "parse_RgceLocRel");
function parse_RgceLocRel_BIFF2(blob2) {
  var rl = blob2.read_shift(2);
  var c = blob2.read_shift(1);
  var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
  rl &= 16383;
  if (rRel == 1 && rl >= 8192) rl = rl - 16384;
  if (cRel == 1 && c >= 128) c = c - 256;
  return { r: rl, c, cRel, rRel };
}
__name(parse_RgceLocRel_BIFF2, "parse_RgceLocRel_BIFF2");
function parse_PtgArea(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  var area = parse_RgceArea(blob2, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
  return [type, area];
}
__name(parse_PtgArea, "parse_PtgArea");
function parse_PtgArea3d(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  var ixti = blob2.read_shift(2, "i");
  var w = 8;
  if (opts) switch (opts.biff) {
    case 5:
      blob2.l += 12;
      w = 6;
      break;
    case 12:
      w = 12;
      break;
  }
  var area = parse_RgceArea(blob2, w, opts);
  return [type, ixti, area];
}
__name(parse_PtgArea3d, "parse_PtgArea3d");
function parse_PtgAreaErr(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  blob2.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
  return [type];
}
__name(parse_PtgAreaErr, "parse_PtgAreaErr");
function parse_PtgAreaErr3d(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  var ixti = blob2.read_shift(2);
  var w = 8;
  if (opts) switch (opts.biff) {
    case 5:
      blob2.l += 12;
      w = 6;
      break;
    case 12:
      w = 12;
      break;
  }
  blob2.l += w;
  return [type, ixti];
}
__name(parse_PtgAreaErr3d, "parse_PtgAreaErr3d");
function parse_PtgAreaN(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  var area = parse_RgceAreaRel(blob2, length - 1, opts);
  return [type, area];
}
__name(parse_PtgAreaN, "parse_PtgAreaN");
function parse_PtgArray(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  blob2.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
  return [type];
}
__name(parse_PtgArray, "parse_PtgArray");
function parse_PtgAttrBaxcel(blob2) {
  var bitSemi = blob2[blob2.l + 1] & 1;
  var bitBaxcel = 1;
  blob2.l += 4;
  return [bitSemi, bitBaxcel];
}
__name(parse_PtgAttrBaxcel, "parse_PtgAttrBaxcel");
function parse_PtgAttrChoose(blob2, length, opts) {
  blob2.l += 2;
  var offset = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  var o = [];
  for (var i = 0; i <= offset; ++i) o.push(blob2.read_shift(opts && opts.biff == 2 ? 1 : 2));
  return o;
}
__name(parse_PtgAttrChoose, "parse_PtgAttrChoose");
function parse_PtgAttrGoto(blob2, length, opts) {
  var bitGoto = blob2[blob2.l + 1] & 255 ? 1 : 0;
  blob2.l += 2;
  return [bitGoto, blob2.read_shift(opts && opts.biff == 2 ? 1 : 2)];
}
__name(parse_PtgAttrGoto, "parse_PtgAttrGoto");
function parse_PtgAttrIf(blob2, length, opts) {
  var bitIf = blob2[blob2.l + 1] & 255 ? 1 : 0;
  blob2.l += 2;
  return [bitIf, blob2.read_shift(opts && opts.biff == 2 ? 1 : 2)];
}
__name(parse_PtgAttrIf, "parse_PtgAttrIf");
function parse_PtgAttrIfError(blob2) {
  var bitIf = blob2[blob2.l + 1] & 255 ? 1 : 0;
  blob2.l += 2;
  return [bitIf, blob2.read_shift(2)];
}
__name(parse_PtgAttrIfError, "parse_PtgAttrIfError");
function parse_PtgAttrSemi(blob2, length, opts) {
  var bitSemi = blob2[blob2.l + 1] & 255 ? 1 : 0;
  blob2.l += opts && opts.biff == 2 ? 3 : 4;
  return [bitSemi];
}
__name(parse_PtgAttrSemi, "parse_PtgAttrSemi");
function parse_PtgAttrSpaceType(blob2) {
  var type = blob2.read_shift(1), cch = blob2.read_shift(1);
  return [type, cch];
}
__name(parse_PtgAttrSpaceType, "parse_PtgAttrSpaceType");
function parse_PtgAttrSpace(blob2) {
  blob2.read_shift(2);
  return parse_PtgAttrSpaceType(blob2, 2);
}
__name(parse_PtgAttrSpace, "parse_PtgAttrSpace");
function parse_PtgAttrSpaceSemi(blob2) {
  blob2.read_shift(2);
  return parse_PtgAttrSpaceType(blob2, 2);
}
__name(parse_PtgAttrSpaceSemi, "parse_PtgAttrSpaceSemi");
function parse_PtgRef(blob2, length, opts) {
  var type = (blob2[blob2.l] & 96) >> 5;
  blob2.l += 1;
  var loc = parse_RgceLoc(blob2, 0, opts);
  return [type, loc];
}
__name(parse_PtgRef, "parse_PtgRef");
function parse_PtgRefN(blob2, length, opts) {
  var type = (blob2[blob2.l] & 96) >> 5;
  blob2.l += 1;
  var loc = parse_RgceLocRel(blob2, 0, opts);
  return [type, loc];
}
__name(parse_PtgRefN, "parse_PtgRefN");
function parse_PtgRef3d(blob2, length, opts) {
  var type = (blob2[blob2.l] & 96) >> 5;
  blob2.l += 1;
  var ixti = blob2.read_shift(2);
  if (opts && opts.biff == 5) blob2.l += 12;
  var loc = parse_RgceLoc(blob2, 0, opts);
  return [type, ixti, loc];
}
__name(parse_PtgRef3d, "parse_PtgRef3d");
function parse_PtgFunc(blob2, length, opts) {
  var type = (blob2[blob2.l] & 96) >> 5;
  blob2.l += 1;
  var iftab = blob2.read_shift(opts && opts.biff <= 3 ? 1 : 2);
  return [FtabArgc[iftab], Ftab[iftab], type];
}
__name(parse_PtgFunc, "parse_PtgFunc");
function parse_PtgFuncVar(blob2, length, opts) {
  var type = blob2[blob2.l++];
  var cparams = blob2.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob2.read_shift(1)] : parsetab(blob2);
  return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
}
__name(parse_PtgFuncVar, "parse_PtgFuncVar");
function parsetab(blob2) {
  return [blob2[blob2.l + 1] >> 7, blob2.read_shift(2) & 32767];
}
__name(parsetab, "parsetab");
function parse_PtgAttrSum(blob2, length, opts) {
  blob2.l += opts && opts.biff == 2 ? 3 : 4;
  return;
}
__name(parse_PtgAttrSum, "parse_PtgAttrSum");
function parse_PtgExp(blob2, length, opts) {
  blob2.l++;
  if (opts && opts.biff == 12) return [blob2.read_shift(4, "i"), 0];
  var row = blob2.read_shift(2);
  var col = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  return [row, col];
}
__name(parse_PtgExp, "parse_PtgExp");
function parse_PtgErr(blob2) {
  blob2.l++;
  return BErr[blob2.read_shift(1)];
}
__name(parse_PtgErr, "parse_PtgErr");
function parse_PtgInt(blob2) {
  blob2.l++;
  return blob2.read_shift(2);
}
__name(parse_PtgInt, "parse_PtgInt");
function parse_PtgBool(blob2) {
  blob2.l++;
  return blob2.read_shift(1) !== 0;
}
__name(parse_PtgBool, "parse_PtgBool");
function parse_PtgNum(blob2) {
  blob2.l++;
  return parse_Xnum(blob2, 8);
}
__name(parse_PtgNum, "parse_PtgNum");
function parse_PtgStr(blob2, length, opts) {
  blob2.l++;
  return parse_ShortXLUnicodeString(blob2, length - 1, opts);
}
__name(parse_PtgStr, "parse_PtgStr");
function parse_SerAr(blob2, biff) {
  var val = [blob2.read_shift(1)];
  if (biff == 12) switch (val[0]) {
    case 2:
      val[0] = 4;
      break;
    /* SerBool */
    case 4:
      val[0] = 16;
      break;
    /* SerErr */
    case 0:
      val[0] = 1;
      break;
    /* SerNum */
    case 1:
      val[0] = 2;
      break;
  }
  switch (val[0]) {
    case 4:
      val[1] = parsebool(blob2, 1) ? "TRUE" : "FALSE";
      if (biff != 12) blob2.l += 7;
      break;
    case 37:
    /* appears to be an alias */
    case 16:
      val[1] = BErr[blob2[blob2.l]];
      blob2.l += biff == 12 ? 4 : 8;
      break;
    case 0:
      blob2.l += 8;
      break;
    case 1:
      val[1] = parse_Xnum(blob2, 8);
      break;
    case 2:
      val[1] = parse_XLUnicodeString2(blob2, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
      break;
    default:
      throw new Error("Bad SerAr: " + val[0]);
  }
  return val;
}
__name(parse_SerAr, "parse_SerAr");
function parse_PtgExtraMem(blob2, cce, opts) {
  var count = blob2.read_shift(opts.biff == 12 ? 4 : 2);
  var out = [];
  for (var i = 0; i != count; ++i) out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob2, 8));
  return out;
}
__name(parse_PtgExtraMem, "parse_PtgExtraMem");
function parse_PtgExtraArray(blob2, length, opts) {
  var rows = 0, cols = 0;
  if (opts.biff == 12) {
    rows = blob2.read_shift(4);
    cols = blob2.read_shift(4);
  } else {
    cols = 1 + blob2.read_shift(1);
    rows = 1 + blob2.read_shift(2);
  }
  if (opts.biff >= 2 && opts.biff < 8) {
    --rows;
    if (--cols == 0) cols = 256;
  }
  for (var i = 0, o = []; i != rows && (o[i] = []); ++i)
    for (var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob2, opts.biff);
  return o;
}
__name(parse_PtgExtraArray, "parse_PtgExtraArray");
function parse_PtgName(blob2, length, opts) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  var w = !opts || opts.biff >= 8 ? 4 : 2;
  var nameindex = blob2.read_shift(w);
  switch (opts.biff) {
    case 2:
      blob2.l += 5;
      break;
    case 3:
    case 4:
      blob2.l += 8;
      break;
    case 5:
      blob2.l += 12;
      break;
  }
  return [type, 0, nameindex];
}
__name(parse_PtgName, "parse_PtgName");
function parse_PtgNameX(blob2, length, opts) {
  if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob2, length, opts);
  var type = blob2.read_shift(1) >>> 5 & 3;
  var ixti = blob2.read_shift(2);
  var nameindex = blob2.read_shift(4);
  return [type, ixti, nameindex];
}
__name(parse_PtgNameX, "parse_PtgNameX");
function parse_PtgNameX_BIFF5(blob2) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  var ixti = blob2.read_shift(2, "i");
  blob2.l += 8;
  var nameindex = blob2.read_shift(2);
  blob2.l += 12;
  return [type, ixti, nameindex];
}
__name(parse_PtgNameX_BIFF5, "parse_PtgNameX_BIFF5");
function parse_PtgMemArea(blob2, length, opts) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  blob2.l += opts && opts.biff == 2 ? 3 : 4;
  var cce = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  return [type, cce];
}
__name(parse_PtgMemArea, "parse_PtgMemArea");
function parse_PtgMemFunc(blob2, length, opts) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  var cce = blob2.read_shift(opts && opts.biff == 2 ? 1 : 2);
  return [type, cce];
}
__name(parse_PtgMemFunc, "parse_PtgMemFunc");
function parse_PtgRefErr(blob2, length, opts) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  blob2.l += 4;
  if (opts.biff < 8) blob2.l--;
  if (opts.biff == 12) blob2.l += 2;
  return [type];
}
__name(parse_PtgRefErr, "parse_PtgRefErr");
function parse_PtgRefErr3d(blob2, length, opts) {
  var type = (blob2[blob2.l++] & 96) >> 5;
  var ixti = blob2.read_shift(2);
  var w = 4;
  if (opts) switch (opts.biff) {
    case 5:
      w = 15;
      break;
    case 12:
      w = 6;
      break;
  }
  blob2.l += w;
  return [type, ixti];
}
__name(parse_PtgRefErr3d, "parse_PtgRefErr3d");
var parse_PtgMemErr = parsenoop;
var parse_PtgMemNoMem = parsenoop;
var parse_PtgTbl = parsenoop;
function parse_PtgElfLoc(blob2, length, opts) {
  blob2.l += 2;
  return [parse_RgceElfLoc(blob2, 4, opts)];
}
__name(parse_PtgElfLoc, "parse_PtgElfLoc");
function parse_PtgElfNoop(blob2) {
  blob2.l += 6;
  return [];
}
__name(parse_PtgElfNoop, "parse_PtgElfNoop");
var parse_PtgElfCol = parse_PtgElfLoc;
var parse_PtgElfColS = parse_PtgElfNoop;
var parse_PtgElfColSV = parse_PtgElfNoop;
var parse_PtgElfColV = parse_PtgElfLoc;
function parse_PtgElfLel(blob2) {
  blob2.l += 2;
  return [parseuint16(blob2), blob2.read_shift(2) & 1];
}
__name(parse_PtgElfLel, "parse_PtgElfLel");
var parse_PtgElfRadical = parse_PtgElfLoc;
var parse_PtgElfRadicalLel = parse_PtgElfLel;
var parse_PtgElfRadicalS = parse_PtgElfNoop;
var parse_PtgElfRw = parse_PtgElfLoc;
var parse_PtgElfRwV = parse_PtgElfLoc;
var PtgListRT = [
  "Data",
  "All",
  "Headers",
  "??",
  "?Data2",
  "??",
  "?DataHeaders",
  "??",
  "Totals",
  "??",
  "??",
  "??",
  "?DataTotals",
  "??",
  "??",
  "??",
  "?Current"
];
function parse_PtgList(blob2) {
  blob2.l += 2;
  var ixti = blob2.read_shift(2);
  var flags = blob2.read_shift(2);
  var idx = blob2.read_shift(4);
  var c = blob2.read_shift(2);
  var C = blob2.read_shift(2);
  var rt = PtgListRT[flags >> 2 & 31];
  return { ixti, coltype: flags & 3, rt, idx, c, C };
}
__name(parse_PtgList, "parse_PtgList");
function parse_PtgSxName(blob2) {
  blob2.l += 2;
  return [blob2.read_shift(4)];
}
__name(parse_PtgSxName, "parse_PtgSxName");
function parse_PtgSheet(blob2, length, opts) {
  blob2.l += 5;
  blob2.l += 2;
  blob2.l += opts.biff == 2 ? 1 : 4;
  return ["PTGSHEET"];
}
__name(parse_PtgSheet, "parse_PtgSheet");
function parse_PtgEndSheet(blob2, length, opts) {
  blob2.l += opts.biff == 2 ? 4 : 5;
  return ["PTGENDSHEET"];
}
__name(parse_PtgEndSheet, "parse_PtgEndSheet");
function parse_PtgMemAreaN(blob2) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  var cce = blob2.read_shift(2);
  return [type, cce];
}
__name(parse_PtgMemAreaN, "parse_PtgMemAreaN");
function parse_PtgMemNoMemN(blob2) {
  var type = blob2.read_shift(1) >>> 5 & 3;
  var cce = blob2.read_shift(2);
  return [type, cce];
}
__name(parse_PtgMemNoMemN, "parse_PtgMemNoMemN");
function parse_PtgAttrNoop(blob2) {
  blob2.l += 4;
  return [0, 0];
}
__name(parse_PtgAttrNoop, "parse_PtgAttrNoop");
var PtgTypes = {
  /*::[*/
  1: { n: "PtgExp", f: parse_PtgExp },
  /*::[*/
  2: { n: "PtgTbl", f: parse_PtgTbl },
  /*::[*/
  3: { n: "PtgAdd", f: parseread1 },
  /*::[*/
  4: { n: "PtgSub", f: parseread1 },
  /*::[*/
  5: { n: "PtgMul", f: parseread1 },
  /*::[*/
  6: { n: "PtgDiv", f: parseread1 },
  /*::[*/
  7: { n: "PtgPower", f: parseread1 },
  /*::[*/
  8: { n: "PtgConcat", f: parseread1 },
  /*::[*/
  9: { n: "PtgLt", f: parseread1 },
  /*::[*/
  10: { n: "PtgLe", f: parseread1 },
  /*::[*/
  11: { n: "PtgEq", f: parseread1 },
  /*::[*/
  12: { n: "PtgGe", f: parseread1 },
  /*::[*/
  13: { n: "PtgGt", f: parseread1 },
  /*::[*/
  14: { n: "PtgNe", f: parseread1 },
  /*::[*/
  15: { n: "PtgIsect", f: parseread1 },
  /*::[*/
  16: { n: "PtgUnion", f: parseread1 },
  /*::[*/
  17: { n: "PtgRange", f: parseread1 },
  /*::[*/
  18: { n: "PtgUplus", f: parseread1 },
  /*::[*/
  19: { n: "PtgUminus", f: parseread1 },
  /*::[*/
  20: { n: "PtgPercent", f: parseread1 },
  /*::[*/
  21: { n: "PtgParen", f: parseread1 },
  /*::[*/
  22: { n: "PtgMissArg", f: parseread1 },
  /*::[*/
  23: { n: "PtgStr", f: parse_PtgStr },
  /*::[*/
  26: { n: "PtgSheet", f: parse_PtgSheet },
  /*::[*/
  27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
  /*::[*/
  28: { n: "PtgErr", f: parse_PtgErr },
  /*::[*/
  29: { n: "PtgBool", f: parse_PtgBool },
  /*::[*/
  30: { n: "PtgInt", f: parse_PtgInt },
  /*::[*/
  31: { n: "PtgNum", f: parse_PtgNum },
  /*::[*/
  32: { n: "PtgArray", f: parse_PtgArray },
  /*::[*/
  33: { n: "PtgFunc", f: parse_PtgFunc },
  /*::[*/
  34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
  /*::[*/
  35: { n: "PtgName", f: parse_PtgName },
  /*::[*/
  36: { n: "PtgRef", f: parse_PtgRef },
  /*::[*/
  37: { n: "PtgArea", f: parse_PtgArea },
  /*::[*/
  38: { n: "PtgMemArea", f: parse_PtgMemArea },
  /*::[*/
  39: { n: "PtgMemErr", f: parse_PtgMemErr },
  /*::[*/
  40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
  /*::[*/
  41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
  /*::[*/
  42: { n: "PtgRefErr", f: parse_PtgRefErr },
  /*::[*/
  43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
  /*::[*/
  44: { n: "PtgRefN", f: parse_PtgRefN },
  /*::[*/
  45: { n: "PtgAreaN", f: parse_PtgAreaN },
  /*::[*/
  46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
  /*::[*/
  47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
  /*::[*/
  57: { n: "PtgNameX", f: parse_PtgNameX },
  /*::[*/
  58: { n: "PtgRef3d", f: parse_PtgRef3d },
  /*::[*/
  59: { n: "PtgArea3d", f: parse_PtgArea3d },
  /*::[*/
  60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
  /*::[*/
  61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
  /*::[*/
  255: {}
};
var PtgDupes = {
  /*::[*/
  64: 32,
  /*::[*/
  96: 32,
  /*::[*/
  65: 33,
  /*::[*/
  97: 33,
  /*::[*/
  66: 34,
  /*::[*/
  98: 34,
  /*::[*/
  67: 35,
  /*::[*/
  99: 35,
  /*::[*/
  68: 36,
  /*::[*/
  100: 36,
  /*::[*/
  69: 37,
  /*::[*/
  101: 37,
  /*::[*/
  70: 38,
  /*::[*/
  102: 38,
  /*::[*/
  71: 39,
  /*::[*/
  103: 39,
  /*::[*/
  72: 40,
  /*::[*/
  104: 40,
  /*::[*/
  73: 41,
  /*::[*/
  105: 41,
  /*::[*/
  74: 42,
  /*::[*/
  106: 42,
  /*::[*/
  75: 43,
  /*::[*/
  107: 43,
  /*::[*/
  76: 44,
  /*::[*/
  108: 44,
  /*::[*/
  77: 45,
  /*::[*/
  109: 45,
  /*::[*/
  78: 46,
  /*::[*/
  110: 46,
  /*::[*/
  79: 47,
  /*::[*/
  111: 47,
  /*::[*/
  88: 34,
  /*::[*/
  120: 34,
  /*::[*/
  89: 57,
  /*::[*/
  121: 57,
  /*::[*/
  90: 58,
  /*::[*/
  122: 58,
  /*::[*/
  91: 59,
  /*::[*/
  123: 59,
  /*::[*/
  92: 60,
  /*::[*/
  124: 60,
  /*::[*/
  93: 61,
  /*::[*/
  125: 61
};
var Ptg18 = {
  /*::[*/
  1: { n: "PtgElfLel", f: parse_PtgElfLel },
  /*::[*/
  2: { n: "PtgElfRw", f: parse_PtgElfRw },
  /*::[*/
  3: { n: "PtgElfCol", f: parse_PtgElfCol },
  /*::[*/
  6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
  /*::[*/
  7: { n: "PtgElfColV", f: parse_PtgElfColV },
  /*::[*/
  10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
  /*::[*/
  11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
  /*::[*/
  13: { n: "PtgElfColS", f: parse_PtgElfColS },
  /*::[*/
  15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
  /*::[*/
  16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
  /*::[*/
  25: { n: "PtgList", f: parse_PtgList },
  /*::[*/
  29: { n: "PtgSxName", f: parse_PtgSxName },
  /*::[*/
  255: {}
};
var Ptg19 = {
  /*::[*/
  0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
  /*::[*/
  1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
  /*::[*/
  2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
  /*::[*/
  4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
  /*::[*/
  8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
  /*::[*/
  16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
  /*::[*/
  32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
  /*::[*/
  33: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
  /*::[*/
  64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
  /*::[*/
  65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
  /*::[*/
  128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
  /*::[*/
  255: {}
};
function parse_RgbExtra(blob2, length, rgce, opts) {
  if (opts.biff < 8) return parsenoop(blob2, length);
  var target = blob2.l + length;
  var o = [];
  for (var i = 0; i !== rgce.length; ++i) {
    switch (rgce[i][0]) {
      case "PtgArray":
        rgce[i][1] = parse_PtgExtraArray(blob2, 0, opts);
        o.push(rgce[i][1]);
        break;
      case "PtgMemArea":
        rgce[i][2] = parse_PtgExtraMem(blob2, rgce[i][1], opts);
        o.push(rgce[i][2]);
        break;
      case "PtgExp":
        if (opts && opts.biff == 12) {
          rgce[i][1][1] = blob2.read_shift(4);
          o.push(rgce[i][1]);
        }
        break;
      case "PtgList":
      /* TODO: PtgList -> PtgExtraList */
      case "PtgElfRadicalS":
      /* TODO: PtgElfRadicalS -> PtgExtraElf */
      case "PtgElfColS":
      /* TODO: PtgElfColS -> PtgExtraElf */
      case "PtgElfColSV":
        throw "Unsupported " + rgce[i][0];
      default:
        break;
    }
  }
  length = target - blob2.l;
  if (length !== 0) o.push(parsenoop(blob2, length));
  return o;
}
__name(parse_RgbExtra, "parse_RgbExtra");
function parse_Rgce(blob2, length, opts) {
  var target = blob2.l + length;
  var R, id, ptgs = [];
  while (target != blob2.l) {
    length = target - blob2.l;
    id = blob2[blob2.l];
    R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
    if (id === 24 || id === 25) R = (id === 24 ? Ptg18 : Ptg19)[blob2[blob2.l + 1]];
    if (!R || !R.f) {
      parsenoop(blob2, length);
    } else {
      ptgs.push([R.n, R.f(blob2, length, opts)]);
    }
  }
  return ptgs;
}
__name(parse_Rgce, "parse_Rgce");
function stringify_array(f) {
  var o = [];
  for (var i = 0; i < f.length; ++i) {
    var x = f[i], r = [];
    for (var j = 0; j < x.length; ++j) {
      var y = x[j];
      if (y) switch (y[0]) {
        // TODO: handle embedded quotes
        case 2:
          r.push('"' + y[1].replace(/"/g, '""') + '"');
          break;
        default:
          r.push(y[1]);
      }
      else r.push("");
    }
    o.push(r.join(","));
  }
  return o.join(";");
}
__name(stringify_array, "stringify_array");
var PtgBinOp = {
  PtgAdd: "+",
  PtgConcat: "&",
  PtgDiv: "/",
  PtgEq: "=",
  PtgGe: ">=",
  PtgGt: ">",
  PtgLe: "<=",
  PtgLt: "<",
  PtgMul: "*",
  PtgNe: "<>",
  PtgPower: "^",
  PtgSub: "-"
};
function formula_quote_sheet_name(sname, opts) {
  if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
  if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
  return sname;
}
__name(formula_quote_sheet_name, "formula_quote_sheet_name");
function get_ixti_raw(supbooks, ixti, opts) {
  if (!supbooks) return "SH33TJSERR0";
  if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
  if (!supbooks.XTI) return "SH33TJSERR6";
  var XTI = supbooks.XTI[ixti];
  if (opts.biff < 8) {
    if (ixti > 1e4) ixti -= 65536;
    if (ixti < 0) ixti = -ixti;
    return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
  }
  if (!XTI) return "SH33TJSERR1";
  var o = "";
  if (opts.biff > 8) switch (supbooks[XTI[0]][0]) {
    case 357:
      o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
      return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    case 358:
      if (opts.SID != null) return supbooks.SheetNames[opts.SID];
      return "SH33TJSSAME" + supbooks[XTI[0]][0];
    case 355:
    /* 'BrtSupBookSrc' */
    /* falls through */
    default:
      return "SH33TJSSRC" + supbooks[XTI[0]][0];
  }
  switch (supbooks[XTI[0]][0][0]) {
    case 1025:
      o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
      return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    case 14849:
      return supbooks[XTI[0]].slice(1).map(function(name2) {
        return name2.Name;
      }).join(";;");
    //return "SH33TJSERR8";
    default:
      if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
      o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
      return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
  }
}
__name(get_ixti_raw, "get_ixti_raw");
function get_ixti(supbooks, ixti, opts) {
  var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
  return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
}
__name(get_ixti, "get_ixti");
function stringify_formula(formula, range2, cell, supbooks, opts) {
  var biff = opts && opts.biff || 8;
  var _range = (
    /*range != null ? range :*/
    { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }
  );
  var stack2 = [], e1, e2, c, ixti = 0, nameidx = 0, r, sname = "";
  if (!formula[0] || !formula[0][0]) return "";
  var last_sp = -1, sp = "";
  for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
    var f = formula[0][ff];
    switch (f[0]) {
      case "PtgUminus":
        stack2.push("-" + stack2.pop());
        break;
      case "PtgUplus":
        stack2.push("+" + stack2.pop());
        break;
      case "PtgPercent":
        stack2.push(stack2.pop() + "%");
        break;
      case "PtgAdd":
      /* [MS-XLS] 2.5.198.26 */
      case "PtgConcat":
      /* [MS-XLS] 2.5.198.43 */
      case "PtgDiv":
      /* [MS-XLS] 2.5.198.45 */
      case "PtgEq":
      /* [MS-XLS] 2.5.198.56 */
      case "PtgGe":
      /* [MS-XLS] 2.5.198.64 */
      case "PtgGt":
      /* [MS-XLS] 2.5.198.65 */
      case "PtgLe":
      /* [MS-XLS] 2.5.198.68 */
      case "PtgLt":
      /* [MS-XLS] 2.5.198.69 */
      case "PtgMul":
      /* [MS-XLS] 2.5.198.75 */
      case "PtgNe":
      /* [MS-XLS] 2.5.198.78 */
      case "PtgPower":
      /* [MS-XLS] 2.5.198.82 */
      case "PtgSub":
        e1 = stack2.pop();
        e2 = stack2.pop();
        if (last_sp >= 0) {
          switch (formula[0][last_sp][1][0]) {
            case 0:
              sp = fill(" ", formula[0][last_sp][1][1]);
              break;
            case 1:
              sp = fill("\r", formula[0][last_sp][1][1]);
              break;
            default:
              sp = "";
              if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
          }
          e2 = e2 + sp;
          last_sp = -1;
        }
        stack2.push(e2 + PtgBinOp[f[0]] + e1);
        break;
      case "PtgIsect":
        e1 = stack2.pop();
        e2 = stack2.pop();
        stack2.push(e2 + " " + e1);
        break;
      case "PtgUnion":
        e1 = stack2.pop();
        e2 = stack2.pop();
        stack2.push(e2 + "," + e1);
        break;
      case "PtgRange":
        e1 = stack2.pop();
        e2 = stack2.pop();
        stack2.push(e2 + ":" + e1);
        break;
      case "PtgAttrChoose":
        break;
      case "PtgAttrGoto":
        break;
      case "PtgAttrIf":
        break;
      case "PtgAttrIfError":
        break;
      case "PtgRef":
        c = shift_cell_xls(f[1][1], _range, opts);
        stack2.push(encode_cell_xls(c, biff));
        break;
      case "PtgRefN":
        c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
        stack2.push(encode_cell_xls(c, biff));
        break;
      case "PtgRef3d":
        ixti = /*::Number(*/
        f[1][1];
        c = shift_cell_xls(f[1][2], _range, opts);
        sname = get_ixti(supbooks, ixti, opts);
        var w = sname;
        stack2.push(sname + "!" + encode_cell_xls(c, biff));
        break;
      case "PtgFunc":
      /* [MS-XLS] 2.5.198.62 */
      case "PtgFuncVar":
        var argc = f[1][0], func = f[1][1];
        if (!argc) argc = 0;
        argc &= 127;
        var args = argc == 0 ? [] : stack2.slice(-argc);
        stack2.length -= argc;
        if (func === "User") func = args.shift();
        stack2.push(func + "(" + args.join(",") + ")");
        break;
      case "PtgBool":
        stack2.push(f[1] ? "TRUE" : "FALSE");
        break;
      case "PtgInt":
        stack2.push(
          /*::String(*/
          f[1]
          /*::)*/
        );
        break;
      case "PtgNum":
        stack2.push(String(f[1]));
        break;
      case "PtgStr":
        stack2.push('"' + f[1].replace(/"/g, '""') + '"');
        break;
      case "PtgErr":
        stack2.push(
          /*::String(*/
          f[1]
          /*::)*/
        );
        break;
      case "PtgAreaN":
        r = shift_range_xls(f[1][1], cell ? { s: cell } : _range, opts);
        stack2.push(encode_range_xls(r, opts));
        break;
      case "PtgArea":
        r = shift_range_xls(f[1][1], _range, opts);
        stack2.push(encode_range_xls(r, opts));
        break;
      case "PtgArea3d":
        ixti = /*::Number(*/
        f[1][1];
        r = f[1][2];
        sname = get_ixti(supbooks, ixti, opts);
        stack2.push(sname + "!" + encode_range_xls(r, opts));
        break;
      case "PtgAttrSum":
        stack2.push("SUM(" + stack2.pop() + ")");
        break;
      case "PtgAttrBaxcel":
      /* [MS-XLS] 2.5.198.33 */
      case "PtgAttrSemi":
        break;
      case "PtgName":
        nameidx = f[1][2];
        var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
        var name2 = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
        if (name2 && name2.slice(0, 6) == "_xlfn." && !opts.xlfn) name2 = name2.slice(6);
        stack2.push(name2);
        break;
      case "PtgNameX":
        var bookidx = f[1][1];
        nameidx = f[1][2];
        var externbook;
        if (opts.biff <= 5) {
          if (bookidx < 0) bookidx = -bookidx;
          if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
        } else {
          var o = "";
          if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
          } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
            if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
              o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
            }
          } else o = supbooks.SheetNames[nameidx - 1] + "!";
          if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
          else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
          else {
            var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
            if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1];
            else o += "SH33TJSERRX";
          }
          stack2.push(o);
          break;
        }
        if (!externbook) externbook = { Name: "SH33TJSERRY" };
        stack2.push(externbook.Name);
        break;
      case "PtgParen":
        var lp = "(", rp = ")";
        if (last_sp >= 0) {
          sp = "";
          switch (formula[0][last_sp][1][0]) {
            // $FlowIgnore
            case 2:
              lp = fill(" ", formula[0][last_sp][1][1]) + lp;
              break;
            // $FlowIgnore
            case 3:
              lp = fill("\r", formula[0][last_sp][1][1]) + lp;
              break;
            // $FlowIgnore
            case 4:
              rp = fill(" ", formula[0][last_sp][1][1]) + rp;
              break;
            // $FlowIgnore
            case 5:
              rp = fill("\r", formula[0][last_sp][1][1]) + rp;
              break;
            default:
              if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
          }
          last_sp = -1;
        }
        stack2.push(lp + stack2.pop() + rp);
        break;
      case "PtgRefErr":
        stack2.push("#REF!");
        break;
      case "PtgRefErr3d":
        stack2.push("#REF!");
        break;
      case "PtgExp":
        c = { c: f[1][1], r: f[1][0] };
        var q = { c: cell.c, r: cell.r };
        if (supbooks.sharedf[encode_cell(c)]) {
          var parsedf = supbooks.sharedf[encode_cell(c)];
          stack2.push(stringify_formula(parsedf, _range, q, supbooks, opts));
        } else {
          var fnd = false;
          for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
            e2 = supbooks.arrayf[e1];
            if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
            if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
            stack2.push(stringify_formula(e2[1], _range, q, supbooks, opts));
            fnd = true;
            break;
          }
          if (!fnd) stack2.push(
            /*::String(*/
            f[1]
            /*::)*/
          );
        }
        break;
      case "PtgArray":
        stack2.push("{" + stringify_array(
          /*::(*/
          f[1]
          /*:: :any)*/
        ) + "}");
        break;
      case "PtgMemArea":
        break;
      case "PtgAttrSpace":
      /* [MS-XLS] 2.5.198.38 */
      case "PtgAttrSpaceSemi":
        last_sp = ff;
        break;
      case "PtgTbl":
        break;
      case "PtgMemErr":
        break;
      case "PtgMissArg":
        stack2.push("");
        break;
      case "PtgAreaErr":
        stack2.push("#REF!");
        break;
      case "PtgAreaErr3d":
        stack2.push("#REF!");
        break;
      case "PtgList":
        stack2.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
        break;
      case "PtgMemAreaN":
      case "PtgMemNoMemN":
      case "PtgAttrNoop":
      case "PtgSheet":
      case "PtgEndSheet":
        break;
      case "PtgMemFunc":
        break;
      case "PtgMemNoMem":
        break;
      case "PtgElfCol":
      /* [MS-XLS] 2.5.198.46 */
      case "PtgElfColS":
      /* [MS-XLS] 2.5.198.47 */
      case "PtgElfColSV":
      /* [MS-XLS] 2.5.198.48 */
      case "PtgElfColV":
      /* [MS-XLS] 2.5.198.49 */
      case "PtgElfLel":
      /* [MS-XLS] 2.5.198.50 */
      case "PtgElfRadical":
      /* [MS-XLS] 2.5.198.51 */
      case "PtgElfRadicalLel":
      /* [MS-XLS] 2.5.198.52 */
      case "PtgElfRadicalS":
      /* [MS-XLS] 2.5.198.53 */
      case "PtgElfRw":
      /* [MS-XLS] 2.5.198.54 */
      case "PtgElfRwV":
        throw new Error("Unsupported ELFs");
      case "PtgSxName":
        throw new Error("Unrecognized Formula Token: " + String(f));
      default:
        throw new Error("Unrecognized Formula Token: " + String(f));
    }
    var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
    if (opts.biff != 3) {
      if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
        f = formula[0][last_sp];
        var _left = true;
        switch (f[1][0]) {
          /* note: some bad XLSB files omit the PtgParen */
          case 4:
            _left = false;
          /* falls through */
          case 0:
            sp = fill(" ", f[1][1]);
            break;
          case 5:
            _left = false;
          /* falls through */
          case 1:
            sp = fill("\r", f[1][1]);
            break;
          default:
            sp = "";
            if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
        }
        stack2.push((_left ? sp : "") + stack2.pop() + (_left ? "" : sp));
        last_sp = -1;
      }
    }
  }
  if (stack2.length > 1 && opts.WTF) throw new Error("bad formula stack");
  return stack2[0];
}
__name(stringify_formula, "stringify_formula");
function parse_ArrayParsedFormula(blob2, length, opts) {
  var target = blob2.l + length, len = opts.biff == 2 ? 1 : 2;
  var rgcb, cce = blob2.read_shift(len);
  if (cce == 65535) return [[], parsenoop(blob2, length - 2)];
  var rgce = parse_Rgce(blob2, cce, opts);
  if (length !== cce + len) rgcb = parse_RgbExtra(blob2, length - cce - len, rgce, opts);
  blob2.l = target;
  return [rgce, rgcb];
}
__name(parse_ArrayParsedFormula, "parse_ArrayParsedFormula");
function parse_XLSCellParsedFormula(blob2, length, opts) {
  var target = blob2.l + length, len = opts.biff == 2 ? 1 : 2;
  var rgcb, cce = blob2.read_shift(len);
  if (cce == 65535) return [[], parsenoop(blob2, length - 2)];
  var rgce = parse_Rgce(blob2, cce, opts);
  if (length !== cce + len) rgcb = parse_RgbExtra(blob2, length - cce - len, rgce, opts);
  blob2.l = target;
  return [rgce, rgcb];
}
__name(parse_XLSCellParsedFormula, "parse_XLSCellParsedFormula");
function parse_NameParsedFormula(blob2, length, opts, cce) {
  var target = blob2.l + length;
  var rgce = parse_Rgce(blob2, cce, opts);
  var rgcb;
  if (target !== blob2.l) rgcb = parse_RgbExtra(blob2, target - blob2.l, rgce, opts);
  return [rgce, rgcb];
}
__name(parse_NameParsedFormula, "parse_NameParsedFormula");
function parse_SharedParsedFormula(blob2, length, opts) {
  var target = blob2.l + length;
  var rgcb, cce = blob2.read_shift(2);
  var rgce = parse_Rgce(blob2, cce, opts);
  if (cce == 65535) return [[], parsenoop(blob2, length - 2)];
  if (length !== cce + 2) rgcb = parse_RgbExtra(blob2, target - cce - 2, rgce, opts);
  return [rgce, rgcb];
}
__name(parse_SharedParsedFormula, "parse_SharedParsedFormula");
function parse_FormulaValue(blob2) {
  var b;
  if (__readUInt16LE(blob2, blob2.l + 6) !== 65535) return [parse_Xnum(blob2), "n"];
  switch (blob2[blob2.l]) {
    case 0:
      blob2.l += 8;
      return ["String", "s"];
    case 1:
      b = blob2[blob2.l + 2] === 1;
      blob2.l += 8;
      return [b, "b"];
    case 2:
      b = blob2[blob2.l + 2];
      blob2.l += 8;
      return [b, "e"];
    case 3:
      blob2.l += 8;
      return ["", "s"];
  }
  return [];
}
__name(parse_FormulaValue, "parse_FormulaValue");
function parse_Formula(blob2, length, opts) {
  var end = blob2.l + length;
  var cell = parse_XLSCell(blob2, 6);
  if (opts.biff == 2) ++blob2.l;
  var val = parse_FormulaValue(blob2, 8);
  var flags = blob2.read_shift(1);
  if (opts.biff != 2) {
    blob2.read_shift(1);
    if (opts.biff >= 5) {
      blob2.read_shift(4);
    }
  }
  var cbf = parse_XLSCellParsedFormula(blob2, end - blob2.l, opts);
  return { cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] };
}
__name(parse_Formula, "parse_Formula");
function parse_XLSBParsedFormula(data, length, opts) {
  var cce = data.read_shift(4);
  var rgce = parse_Rgce(data, cce, opts);
  var cb = data.read_shift(4);
  var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
  return [rgce, rgcb];
}
__name(parse_XLSBParsedFormula, "parse_XLSBParsedFormula");
var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
var Cetab = {
  0: "BEEP",
  1: "OPEN",
  2: "OPEN.LINKS",
  3: "CLOSE.ALL",
  4: "SAVE",
  5: "SAVE.AS",
  6: "FILE.DELETE",
  7: "PAGE.SETUP",
  8: "PRINT",
  9: "PRINTER.SETUP",
  10: "QUIT",
  11: "NEW.WINDOW",
  12: "ARRANGE.ALL",
  13: "WINDOW.SIZE",
  14: "WINDOW.MOVE",
  15: "FULL",
  16: "CLOSE",
  17: "RUN",
  22: "SET.PRINT.AREA",
  23: "SET.PRINT.TITLES",
  24: "SET.PAGE.BREAK",
  25: "REMOVE.PAGE.BREAK",
  26: "FONT",
  27: "DISPLAY",
  28: "PROTECT.DOCUMENT",
  29: "PRECISION",
  30: "A1.R1C1",
  31: "CALCULATE.NOW",
  32: "CALCULATION",
  34: "DATA.FIND",
  35: "EXTRACT",
  36: "DATA.DELETE",
  37: "SET.DATABASE",
  38: "SET.CRITERIA",
  39: "SORT",
  40: "DATA.SERIES",
  41: "TABLE",
  42: "FORMAT.NUMBER",
  43: "ALIGNMENT",
  44: "STYLE",
  45: "BORDER",
  46: "CELL.PROTECTION",
  47: "COLUMN.WIDTH",
  48: "UNDO",
  49: "CUT",
  50: "COPY",
  51: "PASTE",
  52: "CLEAR",
  53: "PASTE.SPECIAL",
  54: "EDIT.DELETE",
  55: "INSERT",
  56: "FILL.RIGHT",
  57: "FILL.DOWN",
  61: "DEFINE.NAME",
  62: "CREATE.NAMES",
  63: "FORMULA.GOTO",
  64: "FORMULA.FIND",
  65: "SELECT.LAST.CELL",
  66: "SHOW.ACTIVE.CELL",
  67: "GALLERY.AREA",
  68: "GALLERY.BAR",
  69: "GALLERY.COLUMN",
  70: "GALLERY.LINE",
  71: "GALLERY.PIE",
  72: "GALLERY.SCATTER",
  73: "COMBINATION",
  74: "PREFERRED",
  75: "ADD.OVERLAY",
  76: "GRIDLINES",
  77: "SET.PREFERRED",
  78: "AXES",
  79: "LEGEND",
  80: "ATTACH.TEXT",
  81: "ADD.ARROW",
  82: "SELECT.CHART",
  83: "SELECT.PLOT.AREA",
  84: "PATTERNS",
  85: "MAIN.CHART",
  86: "OVERLAY",
  87: "SCALE",
  88: "FORMAT.LEGEND",
  89: "FORMAT.TEXT",
  90: "EDIT.REPEAT",
  91: "PARSE",
  92: "JUSTIFY",
  93: "HIDE",
  94: "UNHIDE",
  95: "WORKSPACE",
  96: "FORMULA",
  97: "FORMULA.FILL",
  98: "FORMULA.ARRAY",
  99: "DATA.FIND.NEXT",
  100: "DATA.FIND.PREV",
  101: "FORMULA.FIND.NEXT",
  102: "FORMULA.FIND.PREV",
  103: "ACTIVATE",
  104: "ACTIVATE.NEXT",
  105: "ACTIVATE.PREV",
  106: "UNLOCKED.NEXT",
  107: "UNLOCKED.PREV",
  108: "COPY.PICTURE",
  109: "SELECT",
  110: "DELETE.NAME",
  111: "DELETE.FORMAT",
  112: "VLINE",
  113: "HLINE",
  114: "VPAGE",
  115: "HPAGE",
  116: "VSCROLL",
  117: "HSCROLL",
  118: "ALERT",
  119: "NEW",
  120: "CANCEL.COPY",
  121: "SHOW.CLIPBOARD",
  122: "MESSAGE",
  124: "PASTE.LINK",
  125: "APP.ACTIVATE",
  126: "DELETE.ARROW",
  127: "ROW.HEIGHT",
  128: "FORMAT.MOVE",
  129: "FORMAT.SIZE",
  130: "FORMULA.REPLACE",
  131: "SEND.KEYS",
  132: "SELECT.SPECIAL",
  133: "APPLY.NAMES",
  134: "REPLACE.FONT",
  135: "FREEZE.PANES",
  136: "SHOW.INFO",
  137: "SPLIT",
  138: "ON.WINDOW",
  139: "ON.DATA",
  140: "DISABLE.INPUT",
  142: "OUTLINE",
  143: "LIST.NAMES",
  144: "FILE.CLOSE",
  145: "SAVE.WORKBOOK",
  146: "DATA.FORM",
  147: "COPY.CHART",
  148: "ON.TIME",
  149: "WAIT",
  150: "FORMAT.FONT",
  151: "FILL.UP",
  152: "FILL.LEFT",
  153: "DELETE.OVERLAY",
  155: "SHORT.MENUS",
  159: "SET.UPDATE.STATUS",
  161: "COLOR.PALETTE",
  162: "DELETE.STYLE",
  163: "WINDOW.RESTORE",
  164: "WINDOW.MAXIMIZE",
  166: "CHANGE.LINK",
  167: "CALCULATE.DOCUMENT",
  168: "ON.KEY",
  169: "APP.RESTORE",
  170: "APP.MOVE",
  171: "APP.SIZE",
  172: "APP.MINIMIZE",
  173: "APP.MAXIMIZE",
  174: "BRING.TO.FRONT",
  175: "SEND.TO.BACK",
  185: "MAIN.CHART.TYPE",
  186: "OVERLAY.CHART.TYPE",
  187: "SELECT.END",
  188: "OPEN.MAIL",
  189: "SEND.MAIL",
  190: "STANDARD.FONT",
  191: "CONSOLIDATE",
  192: "SORT.SPECIAL",
  193: "GALLERY.3D.AREA",
  194: "GALLERY.3D.COLUMN",
  195: "GALLERY.3D.LINE",
  196: "GALLERY.3D.PIE",
  197: "VIEW.3D",
  198: "GOAL.SEEK",
  199: "WORKGROUP",
  200: "FILL.GROUP",
  201: "UPDATE.LINK",
  202: "PROMOTE",
  203: "DEMOTE",
  204: "SHOW.DETAIL",
  206: "UNGROUP",
  207: "OBJECT.PROPERTIES",
  208: "SAVE.NEW.OBJECT",
  209: "SHARE",
  210: "SHARE.NAME",
  211: "DUPLICATE",
  212: "APPLY.STYLE",
  213: "ASSIGN.TO.OBJECT",
  214: "OBJECT.PROTECTION",
  215: "HIDE.OBJECT",
  216: "SET.EXTRACT",
  217: "CREATE.PUBLISHER",
  218: "SUBSCRIBE.TO",
  219: "ATTRIBUTES",
  220: "SHOW.TOOLBAR",
  222: "PRINT.PREVIEW",
  223: "EDIT.COLOR",
  224: "SHOW.LEVELS",
  225: "FORMAT.MAIN",
  226: "FORMAT.OVERLAY",
  227: "ON.RECALC",
  228: "EDIT.SERIES",
  229: "DEFINE.STYLE",
  240: "LINE.PRINT",
  243: "ENTER.DATA",
  249: "GALLERY.RADAR",
  250: "MERGE.STYLES",
  251: "EDITION.OPTIONS",
  252: "PASTE.PICTURE",
  253: "PASTE.PICTURE.LINK",
  254: "SPELLING",
  256: "ZOOM",
  259: "INSERT.OBJECT",
  260: "WINDOW.MINIMIZE",
  265: "SOUND.NOTE",
  266: "SOUND.PLAY",
  267: "FORMAT.SHAPE",
  268: "EXTEND.POLYGON",
  269: "FORMAT.AUTO",
  272: "GALLERY.3D.BAR",
  273: "GALLERY.3D.SURFACE",
  274: "FILL.AUTO",
  276: "CUSTOMIZE.TOOLBAR",
  277: "ADD.TOOL",
  278: "EDIT.OBJECT",
  279: "ON.DOUBLECLICK",
  280: "ON.ENTRY",
  281: "WORKBOOK.ADD",
  282: "WORKBOOK.MOVE",
  283: "WORKBOOK.COPY",
  284: "WORKBOOK.OPTIONS",
  285: "SAVE.WORKSPACE",
  288: "CHART.WIZARD",
  289: "DELETE.TOOL",
  290: "MOVE.TOOL",
  291: "WORKBOOK.SELECT",
  292: "WORKBOOK.ACTIVATE",
  293: "ASSIGN.TO.TOOL",
  295: "COPY.TOOL",
  296: "RESET.TOOL",
  297: "CONSTRAIN.NUMERIC",
  298: "PASTE.TOOL",
  302: "WORKBOOK.NEW",
  305: "SCENARIO.CELLS",
  306: "SCENARIO.DELETE",
  307: "SCENARIO.ADD",
  308: "SCENARIO.EDIT",
  309: "SCENARIO.SHOW",
  310: "SCENARIO.SHOW.NEXT",
  311: "SCENARIO.SUMMARY",
  312: "PIVOT.TABLE.WIZARD",
  313: "PIVOT.FIELD.PROPERTIES",
  314: "PIVOT.FIELD",
  315: "PIVOT.ITEM",
  316: "PIVOT.ADD.FIELDS",
  318: "OPTIONS.CALCULATION",
  319: "OPTIONS.EDIT",
  320: "OPTIONS.VIEW",
  321: "ADDIN.MANAGER",
  322: "MENU.EDITOR",
  323: "ATTACH.TOOLBARS",
  324: "VBAActivate",
  325: "OPTIONS.CHART",
  328: "VBA.INSERT.FILE",
  330: "VBA.PROCEDURE.DEFINITION",
  336: "ROUTING.SLIP",
  338: "ROUTE.DOCUMENT",
  339: "MAIL.LOGON",
  342: "INSERT.PICTURE",
  343: "EDIT.TOOL",
  344: "GALLERY.DOUGHNUT",
  350: "CHART.TREND",
  352: "PIVOT.ITEM.PROPERTIES",
  354: "WORKBOOK.INSERT",
  355: "OPTIONS.TRANSITION",
  356: "OPTIONS.GENERAL",
  370: "FILTER.ADVANCED",
  373: "MAIL.ADD.MAILER",
  374: "MAIL.DELETE.MAILER",
  375: "MAIL.REPLY",
  376: "MAIL.REPLY.ALL",
  377: "MAIL.FORWARD",
  378: "MAIL.NEXT.LETTER",
  379: "DATA.LABEL",
  380: "INSERT.TITLE",
  381: "FONT.PROPERTIES",
  382: "MACRO.OPTIONS",
  383: "WORKBOOK.HIDE",
  384: "WORKBOOK.UNHIDE",
  385: "WORKBOOK.DELETE",
  386: "WORKBOOK.NAME",
  388: "GALLERY.CUSTOM",
  390: "ADD.CHART.AUTOFORMAT",
  391: "DELETE.CHART.AUTOFORMAT",
  392: "CHART.ADD.DATA",
  393: "AUTO.OUTLINE",
  394: "TAB.ORDER",
  395: "SHOW.DIALOG",
  396: "SELECT.ALL",
  397: "UNGROUP.SHEETS",
  398: "SUBTOTAL.CREATE",
  399: "SUBTOTAL.REMOVE",
  400: "RENAME.OBJECT",
  412: "WORKBOOK.SCROLL",
  413: "WORKBOOK.NEXT",
  414: "WORKBOOK.PREV",
  415: "WORKBOOK.TAB.SPLIT",
  416: "FULL.SCREEN",
  417: "WORKBOOK.PROTECT",
  420: "SCROLLBAR.PROPERTIES",
  421: "PIVOT.SHOW.PAGES",
  422: "TEXT.TO.COLUMNS",
  423: "FORMAT.CHARTTYPE",
  424: "LINK.FORMAT",
  425: "TRACER.DISPLAY",
  430: "TRACER.NAVIGATE",
  431: "TRACER.CLEAR",
  432: "TRACER.ERROR",
  433: "PIVOT.FIELD.GROUP",
  434: "PIVOT.FIELD.UNGROUP",
  435: "CHECKBOX.PROPERTIES",
  436: "LABEL.PROPERTIES",
  437: "LISTBOX.PROPERTIES",
  438: "EDITBOX.PROPERTIES",
  439: "PIVOT.REFRESH",
  440: "LINK.COMBO",
  441: "OPEN.TEXT",
  442: "HIDE.DIALOG",
  443: "SET.DIALOG.FOCUS",
  444: "ENABLE.OBJECT",
  445: "PUSHBUTTON.PROPERTIES",
  446: "SET.DIALOG.DEFAULT",
  447: "FILTER",
  448: "FILTER.SHOW.ALL",
  449: "CLEAR.OUTLINE",
  450: "FUNCTION.WIZARD",
  451: "ADD.LIST.ITEM",
  452: "SET.LIST.ITEM",
  453: "REMOVE.LIST.ITEM",
  454: "SELECT.LIST.ITEM",
  455: "SET.CONTROL.VALUE",
  456: "SAVE.COPY.AS",
  458: "OPTIONS.LISTS.ADD",
  459: "OPTIONS.LISTS.DELETE",
  460: "SERIES.AXES",
  461: "SERIES.X",
  462: "SERIES.Y",
  463: "ERRORBAR.X",
  464: "ERRORBAR.Y",
  465: "FORMAT.CHART",
  466: "SERIES.ORDER",
  467: "MAIL.LOGOFF",
  468: "CLEAR.ROUTING.SLIP",
  469: "APP.ACTIVATE.MICROSOFT",
  470: "MAIL.EDIT.MAILER",
  471: "ON.SHEET",
  472: "STANDARD.WIDTH",
  473: "SCENARIO.MERGE",
  474: "SUMMARY.INFO",
  475: "FIND.FILE",
  476: "ACTIVE.CELL.FONT",
  477: "ENABLE.TIPWIZARD",
  478: "VBA.MAKE.ADDIN",
  480: "INSERTDATATABLE",
  481: "WORKGROUP.OPTIONS",
  482: "MAIL.SEND.MAILER",
  485: "AUTOCORRECT",
  489: "POST.DOCUMENT",
  491: "PICKLIST",
  493: "VIEW.SHOW",
  494: "VIEW.DEFINE",
  495: "VIEW.DELETE",
  509: "SHEET.BACKGROUND",
  510: "INSERT.MAP.OBJECT",
  511: "OPTIONS.MENONO",
  517: "MSOCHECKS",
  518: "NORMAL",
  519: "LAYOUT",
  520: "RM.PRINT.AREA",
  521: "CLEAR.PRINT.AREA",
  522: "ADD.PRINT.AREA",
  523: "MOVE.BRK",
  545: "HIDECURR.NOTE",
  546: "HIDEALL.NOTES",
  547: "DELETE.NOTE",
  548: "TRAVERSE.NOTES",
  549: "ACTIVATE.NOTES",
  620: "PROTECT.REVISIONS",
  621: "UNPROTECT.REVISIONS",
  647: "OPTIONS.ME",
  653: "WEB.PUBLISH",
  667: "NEWWEBQUERY",
  673: "PIVOT.TABLE.CHART",
  753: "OPTIONS.SAVE",
  755: "OPTIONS.SPELL",
  808: "HIDEALL.INKANNOTS"
};
var Ftab = {
  0: "COUNT",
  1: "IF",
  2: "ISNA",
  3: "ISERROR",
  4: "SUM",
  5: "AVERAGE",
  6: "MIN",
  7: "MAX",
  8: "ROW",
  9: "COLUMN",
  10: "NA",
  11: "NPV",
  12: "STDEV",
  13: "DOLLAR",
  14: "FIXED",
  15: "SIN",
  16: "COS",
  17: "TAN",
  18: "ATAN",
  19: "PI",
  20: "SQRT",
  21: "EXP",
  22: "LN",
  23: "LOG10",
  24: "ABS",
  25: "INT",
  26: "SIGN",
  27: "ROUND",
  28: "LOOKUP",
  29: "INDEX",
  30: "REPT",
  31: "MID",
  32: "LEN",
  33: "VALUE",
  34: "TRUE",
  35: "FALSE",
  36: "AND",
  37: "OR",
  38: "NOT",
  39: "MOD",
  40: "DCOUNT",
  41: "DSUM",
  42: "DAVERAGE",
  43: "DMIN",
  44: "DMAX",
  45: "DSTDEV",
  46: "VAR",
  47: "DVAR",
  48: "TEXT",
  49: "LINEST",
  50: "TREND",
  51: "LOGEST",
  52: "GROWTH",
  53: "GOTO",
  54: "HALT",
  55: "RETURN",
  56: "PV",
  57: "FV",
  58: "NPER",
  59: "PMT",
  60: "RATE",
  61: "MIRR",
  62: "IRR",
  63: "RAND",
  64: "MATCH",
  65: "DATE",
  66: "TIME",
  67: "DAY",
  68: "MONTH",
  69: "YEAR",
  70: "WEEKDAY",
  71: "HOUR",
  72: "MINUTE",
  73: "SECOND",
  74: "NOW",
  75: "AREAS",
  76: "ROWS",
  77: "COLUMNS",
  78: "OFFSET",
  79: "ABSREF",
  80: "RELREF",
  81: "ARGUMENT",
  82: "SEARCH",
  83: "TRANSPOSE",
  84: "ERROR",
  85: "STEP",
  86: "TYPE",
  87: "ECHO",
  88: "SET.NAME",
  89: "CALLER",
  90: "DEREF",
  91: "WINDOWS",
  92: "SERIES",
  93: "DOCUMENTS",
  94: "ACTIVE.CELL",
  95: "SELECTION",
  96: "RESULT",
  97: "ATAN2",
  98: "ASIN",
  99: "ACOS",
  100: "CHOOSE",
  101: "HLOOKUP",
  102: "VLOOKUP",
  103: "LINKS",
  104: "INPUT",
  105: "ISREF",
  106: "GET.FORMULA",
  107: "GET.NAME",
  108: "SET.VALUE",
  109: "LOG",
  110: "EXEC",
  111: "CHAR",
  112: "LOWER",
  113: "UPPER",
  114: "PROPER",
  115: "LEFT",
  116: "RIGHT",
  117: "EXACT",
  118: "TRIM",
  119: "REPLACE",
  120: "SUBSTITUTE",
  121: "CODE",
  122: "NAMES",
  123: "DIRECTORY",
  124: "FIND",
  125: "CELL",
  126: "ISERR",
  127: "ISTEXT",
  128: "ISNUMBER",
  129: "ISBLANK",
  130: "T",
  131: "N",
  132: "FOPEN",
  133: "FCLOSE",
  134: "FSIZE",
  135: "FREADLN",
  136: "FREAD",
  137: "FWRITELN",
  138: "FWRITE",
  139: "FPOS",
  140: "DATEVALUE",
  141: "TIMEVALUE",
  142: "SLN",
  143: "SYD",
  144: "DDB",
  145: "GET.DEF",
  146: "REFTEXT",
  147: "TEXTREF",
  148: "INDIRECT",
  149: "REGISTER",
  150: "CALL",
  151: "ADD.BAR",
  152: "ADD.MENU",
  153: "ADD.COMMAND",
  154: "ENABLE.COMMAND",
  155: "CHECK.COMMAND",
  156: "RENAME.COMMAND",
  157: "SHOW.BAR",
  158: "DELETE.MENU",
  159: "DELETE.COMMAND",
  160: "GET.CHART.ITEM",
  161: "DIALOG.BOX",
  162: "CLEAN",
  163: "MDETERM",
  164: "MINVERSE",
  165: "MMULT",
  166: "FILES",
  167: "IPMT",
  168: "PPMT",
  169: "COUNTA",
  170: "CANCEL.KEY",
  171: "FOR",
  172: "WHILE",
  173: "BREAK",
  174: "NEXT",
  175: "INITIATE",
  176: "REQUEST",
  177: "POKE",
  178: "EXECUTE",
  179: "TERMINATE",
  180: "RESTART",
  181: "HELP",
  182: "GET.BAR",
  183: "PRODUCT",
  184: "FACT",
  185: "GET.CELL",
  186: "GET.WORKSPACE",
  187: "GET.WINDOW",
  188: "GET.DOCUMENT",
  189: "DPRODUCT",
  190: "ISNONTEXT",
  191: "GET.NOTE",
  192: "NOTE",
  193: "STDEVP",
  194: "VARP",
  195: "DSTDEVP",
  196: "DVARP",
  197: "TRUNC",
  198: "ISLOGICAL",
  199: "DCOUNTA",
  200: "DELETE.BAR",
  201: "UNREGISTER",
  204: "USDOLLAR",
  205: "FINDB",
  206: "SEARCHB",
  207: "REPLACEB",
  208: "LEFTB",
  209: "RIGHTB",
  210: "MIDB",
  211: "LENB",
  212: "ROUNDUP",
  213: "ROUNDDOWN",
  214: "ASC",
  215: "DBCS",
  216: "RANK",
  219: "ADDRESS",
  220: "DAYS360",
  221: "TODAY",
  222: "VDB",
  223: "ELSE",
  224: "ELSE.IF",
  225: "END.IF",
  226: "FOR.CELL",
  227: "MEDIAN",
  228: "SUMPRODUCT",
  229: "SINH",
  230: "COSH",
  231: "TANH",
  232: "ASINH",
  233: "ACOSH",
  234: "ATANH",
  235: "DGET",
  236: "CREATE.OBJECT",
  237: "VOLATILE",
  238: "LAST.ERROR",
  239: "CUSTOM.UNDO",
  240: "CUSTOM.REPEAT",
  241: "FORMULA.CONVERT",
  242: "GET.LINK.INFO",
  243: "TEXT.BOX",
  244: "INFO",
  245: "GROUP",
  246: "GET.OBJECT",
  247: "DB",
  248: "PAUSE",
  251: "RESUME",
  252: "FREQUENCY",
  253: "ADD.TOOLBAR",
  254: "DELETE.TOOLBAR",
  255: "User",
  256: "RESET.TOOLBAR",
  257: "EVALUATE",
  258: "GET.TOOLBAR",
  259: "GET.TOOL",
  260: "SPELLING.CHECK",
  261: "ERROR.TYPE",
  262: "APP.TITLE",
  263: "WINDOW.TITLE",
  264: "SAVE.TOOLBAR",
  265: "ENABLE.TOOL",
  266: "PRESS.TOOL",
  267: "REGISTER.ID",
  268: "GET.WORKBOOK",
  269: "AVEDEV",
  270: "BETADIST",
  271: "GAMMALN",
  272: "BETAINV",
  273: "BINOMDIST",
  274: "CHIDIST",
  275: "CHIINV",
  276: "COMBIN",
  277: "CONFIDENCE",
  278: "CRITBINOM",
  279: "EVEN",
  280: "EXPONDIST",
  281: "FDIST",
  282: "FINV",
  283: "FISHER",
  284: "FISHERINV",
  285: "FLOOR",
  286: "GAMMADIST",
  287: "GAMMAINV",
  288: "CEILING",
  289: "HYPGEOMDIST",
  290: "LOGNORMDIST",
  291: "LOGINV",
  292: "NEGBINOMDIST",
  293: "NORMDIST",
  294: "NORMSDIST",
  295: "NORMINV",
  296: "NORMSINV",
  297: "STANDARDIZE",
  298: "ODD",
  299: "PERMUT",
  300: "POISSON",
  301: "TDIST",
  302: "WEIBULL",
  303: "SUMXMY2",
  304: "SUMX2MY2",
  305: "SUMX2PY2",
  306: "CHITEST",
  307: "CORREL",
  308: "COVAR",
  309: "FORECAST",
  310: "FTEST",
  311: "INTERCEPT",
  312: "PEARSON",
  313: "RSQ",
  314: "STEYX",
  315: "SLOPE",
  316: "TTEST",
  317: "PROB",
  318: "DEVSQ",
  319: "GEOMEAN",
  320: "HARMEAN",
  321: "SUMSQ",
  322: "KURT",
  323: "SKEW",
  324: "ZTEST",
  325: "LARGE",
  326: "SMALL",
  327: "QUARTILE",
  328: "PERCENTILE",
  329: "PERCENTRANK",
  330: "MODE",
  331: "TRIMMEAN",
  332: "TINV",
  334: "MOVIE.COMMAND",
  335: "GET.MOVIE",
  336: "CONCATENATE",
  337: "POWER",
  338: "PIVOT.ADD.DATA",
  339: "GET.PIVOT.TABLE",
  340: "GET.PIVOT.FIELD",
  341: "GET.PIVOT.ITEM",
  342: "RADIANS",
  343: "DEGREES",
  344: "SUBTOTAL",
  345: "SUMIF",
  346: "COUNTIF",
  347: "COUNTBLANK",
  348: "SCENARIO.GET",
  349: "OPTIONS.LISTS.GET",
  350: "ISPMT",
  351: "DATEDIF",
  352: "DATESTRING",
  353: "NUMBERSTRING",
  354: "ROMAN",
  355: "OPEN.DIALOG",
  356: "SAVE.DIALOG",
  357: "VIEW.GET",
  358: "GETPIVOTDATA",
  359: "HYPERLINK",
  360: "PHONETIC",
  361: "AVERAGEA",
  362: "MAXA",
  363: "MINA",
  364: "STDEVPA",
  365: "VARPA",
  366: "STDEVA",
  367: "VARA",
  368: "BAHTTEXT",
  369: "THAIDAYOFWEEK",
  370: "THAIDIGIT",
  371: "THAIMONTHOFYEAR",
  372: "THAINUMSOUND",
  373: "THAINUMSTRING",
  374: "THAISTRINGLENGTH",
  375: "ISTHAIDIGIT",
  376: "ROUNDBAHTDOWN",
  377: "ROUNDBAHTUP",
  378: "THAIYEAR",
  379: "RTD",
  380: "CUBEVALUE",
  381: "CUBEMEMBER",
  382: "CUBEMEMBERPROPERTY",
  383: "CUBERANKEDMEMBER",
  384: "HEX2BIN",
  385: "HEX2DEC",
  386: "HEX2OCT",
  387: "DEC2BIN",
  388: "DEC2HEX",
  389: "DEC2OCT",
  390: "OCT2BIN",
  391: "OCT2HEX",
  392: "OCT2DEC",
  393: "BIN2DEC",
  394: "BIN2OCT",
  395: "BIN2HEX",
  396: "IMSUB",
  397: "IMDIV",
  398: "IMPOWER",
  399: "IMABS",
  400: "IMSQRT",
  401: "IMLN",
  402: "IMLOG2",
  403: "IMLOG10",
  404: "IMSIN",
  405: "IMCOS",
  406: "IMEXP",
  407: "IMARGUMENT",
  408: "IMCONJUGATE",
  409: "IMAGINARY",
  410: "IMREAL",
  411: "COMPLEX",
  412: "IMSUM",
  413: "IMPRODUCT",
  414: "SERIESSUM",
  415: "FACTDOUBLE",
  416: "SQRTPI",
  417: "QUOTIENT",
  418: "DELTA",
  419: "GESTEP",
  420: "ISEVEN",
  421: "ISODD",
  422: "MROUND",
  423: "ERF",
  424: "ERFC",
  425: "BESSELJ",
  426: "BESSELK",
  427: "BESSELY",
  428: "BESSELI",
  429: "XIRR",
  430: "XNPV",
  431: "PRICEMAT",
  432: "YIELDMAT",
  433: "INTRATE",
  434: "RECEIVED",
  435: "DISC",
  436: "PRICEDISC",
  437: "YIELDDISC",
  438: "TBILLEQ",
  439: "TBILLPRICE",
  440: "TBILLYIELD",
  441: "PRICE",
  442: "YIELD",
  443: "DOLLARDE",
  444: "DOLLARFR",
  445: "NOMINAL",
  446: "EFFECT",
  447: "CUMPRINC",
  448: "CUMIPMT",
  449: "EDATE",
  450: "EOMONTH",
  451: "YEARFRAC",
  452: "COUPDAYBS",
  453: "COUPDAYS",
  454: "COUPDAYSNC",
  455: "COUPNCD",
  456: "COUPNUM",
  457: "COUPPCD",
  458: "DURATION",
  459: "MDURATION",
  460: "ODDLPRICE",
  461: "ODDLYIELD",
  462: "ODDFPRICE",
  463: "ODDFYIELD",
  464: "RANDBETWEEN",
  465: "WEEKNUM",
  466: "AMORDEGRC",
  467: "AMORLINC",
  468: "CONVERT",
  724: "SHEETJS",
  469: "ACCRINT",
  470: "ACCRINTM",
  471: "WORKDAY",
  472: "NETWORKDAYS",
  473: "GCD",
  474: "MULTINOMIAL",
  475: "LCM",
  476: "FVSCHEDULE",
  477: "CUBEKPIMEMBER",
  478: "CUBESET",
  479: "CUBESETCOUNT",
  480: "IFERROR",
  481: "COUNTIFS",
  482: "SUMIFS",
  483: "AVERAGEIF",
  484: "AVERAGEIFS"
};
var FtabArgc = {
  2: 1,
  3: 1,
  10: 0,
  15: 1,
  16: 1,
  17: 1,
  18: 1,
  19: 0,
  20: 1,
  21: 1,
  22: 1,
  23: 1,
  24: 1,
  25: 1,
  26: 1,
  27: 2,
  30: 2,
  31: 3,
  32: 1,
  33: 1,
  34: 0,
  35: 0,
  38: 1,
  39: 2,
  40: 3,
  41: 3,
  42: 3,
  43: 3,
  44: 3,
  45: 3,
  47: 3,
  48: 2,
  53: 1,
  61: 3,
  63: 0,
  65: 3,
  66: 3,
  67: 1,
  68: 1,
  69: 1,
  70: 1,
  71: 1,
  72: 1,
  73: 1,
  74: 0,
  75: 1,
  76: 1,
  77: 1,
  79: 2,
  80: 2,
  83: 1,
  85: 0,
  86: 1,
  89: 0,
  90: 1,
  94: 0,
  95: 0,
  97: 2,
  98: 1,
  99: 1,
  101: 3,
  102: 3,
  105: 1,
  106: 1,
  108: 2,
  111: 1,
  112: 1,
  113: 1,
  114: 1,
  117: 2,
  118: 1,
  119: 4,
  121: 1,
  126: 1,
  127: 1,
  128: 1,
  129: 1,
  130: 1,
  131: 1,
  133: 1,
  134: 1,
  135: 1,
  136: 2,
  137: 2,
  138: 2,
  140: 1,
  141: 1,
  142: 3,
  143: 4,
  144: 4,
  161: 1,
  162: 1,
  163: 1,
  164: 1,
  165: 2,
  172: 1,
  175: 2,
  176: 2,
  177: 3,
  178: 2,
  179: 1,
  184: 1,
  186: 1,
  189: 3,
  190: 1,
  195: 3,
  196: 3,
  197: 1,
  198: 1,
  199: 3,
  201: 1,
  207: 4,
  210: 3,
  211: 1,
  212: 2,
  213: 2,
  214: 1,
  215: 1,
  225: 0,
  229: 1,
  230: 1,
  231: 1,
  232: 1,
  233: 1,
  234: 1,
  235: 3,
  244: 1,
  247: 4,
  252: 2,
  257: 1,
  261: 1,
  271: 1,
  273: 4,
  274: 2,
  275: 2,
  276: 2,
  277: 3,
  278: 3,
  279: 1,
  280: 3,
  281: 3,
  282: 3,
  283: 1,
  284: 1,
  285: 2,
  286: 4,
  287: 3,
  288: 2,
  289: 4,
  290: 3,
  291: 3,
  292: 3,
  293: 4,
  294: 1,
  295: 3,
  296: 1,
  297: 3,
  298: 1,
  299: 2,
  300: 3,
  301: 3,
  302: 4,
  303: 2,
  304: 2,
  305: 2,
  306: 2,
  307: 2,
  308: 2,
  309: 3,
  310: 2,
  311: 2,
  312: 2,
  313: 2,
  314: 2,
  315: 2,
  316: 4,
  325: 2,
  326: 2,
  327: 2,
  328: 2,
  331: 2,
  332: 2,
  337: 2,
  342: 1,
  343: 1,
  346: 2,
  347: 1,
  350: 4,
  351: 3,
  352: 1,
  353: 2,
  360: 1,
  368: 1,
  369: 1,
  370: 1,
  371: 1,
  372: 1,
  373: 1,
  374: 1,
  375: 1,
  376: 1,
  377: 1,
  378: 1,
  382: 3,
  385: 1,
  392: 1,
  393: 1,
  396: 2,
  397: 2,
  398: 2,
  399: 1,
  400: 1,
  401: 1,
  402: 1,
  403: 1,
  404: 1,
  405: 1,
  406: 1,
  407: 1,
  408: 1,
  409: 1,
  410: 1,
  414: 4,
  415: 1,
  416: 1,
  417: 2,
  420: 1,
  421: 1,
  422: 2,
  424: 1,
  425: 2,
  426: 2,
  427: 2,
  428: 2,
  430: 3,
  438: 3,
  439: 3,
  440: 3,
  443: 2,
  444: 2,
  445: 2,
  446: 2,
  447: 6,
  448: 6,
  449: 2,
  450: 2,
  464: 2,
  468: 3,
  476: 2,
  479: 1,
  480: 2,
  65535: 0
};
function ods_to_csf_formula(f) {
  if (f.slice(0, 3) == "of:") f = f.slice(3);
  if (f.charCodeAt(0) == 61) {
    f = f.slice(1);
    if (f.charCodeAt(0) == 61) f = f.slice(1);
  }
  f = f.replace(/COM\.MICROSOFT\./g, "");
  f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
    return $1.replace(/\./g, "");
  });
  f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
  return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
}
__name(ods_to_csf_formula, "ods_to_csf_formula");
function ods_to_csf_3D(r) {
  var a = r.split(":");
  var s = a[0].split(".")[0];
  return [s, a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")];
}
__name(ods_to_csf_3D, "ods_to_csf_3D");
var strs = {};
var _ssfopts = {};
function default_margins(margins, mode) {
  if (!margins) return;
  var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
  if (mode == "xlml") defs = [1, 1, 1, 1, 0.5, 0.5];
  if (margins.left == null) margins.left = defs[0];
  if (margins.right == null) margins.right = defs[1];
  if (margins.top == null) margins.top = defs[2];
  if (margins.bottom == null) margins.bottom = defs[3];
  if (margins.header == null) margins.header = defs[4];
  if (margins.footer == null) margins.footer = defs[5];
}
__name(default_margins, "default_margins");
function safe_format(p, fmtid, fillid, opts, themes, styles) {
  try {
    if (opts.cellNF) p.z = table_fmt[fmtid];
  } catch (e) {
    if (opts.WTF) throw e;
  }
  if (p.t === "z" && !opts.cellStyles) return;
  if (p.t === "d" && typeof p.v === "string") p.v = parseDate(p.v);
  if ((!opts || opts.cellText !== false) && p.t !== "z") try {
    if (table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
    if (p.t === "e") p.w = p.w || BErr[p.v];
    else if (fmtid === 0) {
      if (p.t === "n") {
        if ((p.v | 0) === p.v) p.w = p.v.toString(10);
        else p.w = SSF_general_num(p.v);
      } else if (p.t === "d") {
        var dd = datenum(p.v);
        if ((dd | 0) === dd) p.w = dd.toString(10);
        else p.w = SSF_general_num(dd);
      } else if (p.v === void 0) return "";
      else p.w = SSF_general(p.v, _ssfopts);
    } else if (p.t === "d") p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);
    else p.w = SSF_format(fmtid, p.v, _ssfopts);
  } catch (e) {
    if (opts.WTF) throw e;
  }
  if (!opts.cellStyles) return;
  if (fillid != null) try {
    p.s = styles.Fills[fillid];
    if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
      p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
      if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
    }
    if (p.s.bgColor && p.s.bgColor.theme) {
      p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
      if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
    }
  } catch (e) {
    if (opts.WTF && styles.Fills) throw e;
  }
}
__name(safe_format, "safe_format");
function parse_ws_xml_dim(ws, s) {
  var d = safe_decode_range(s);
  if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d);
}
__name(parse_ws_xml_dim, "parse_ws_xml_dim");
var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
var dimregex = /"(\w*:\w*)"/;
var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
  if (!data) return data;
  if (!rels) rels = { "!id": {} };
  if (DENSE != null && opts.dense == null) opts.dense = DENSE;
  var s = opts.dense ? [] : {};
  var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
  var data1 = "", data2 = "";
  var mtch = data.match(sheetdataregex);
  if (mtch) {
    data1 = data.slice(0, mtch.index);
    data2 = data.slice(mtch.index + mtch[0].length);
  } else data1 = data2 = data;
  var sheetPr = data1.match(sheetprregex);
  if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
  else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx, styles, themes);
  var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
  if (ridx > 0) {
    var ref = data1.slice(ridx, ridx + 50).match(dimregex);
    if (ref) parse_ws_xml_dim(s, ref[1]);
  }
  var svs = data1.match(svsregex);
  if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
  var columns = [];
  if (opts.cellStyles) {
    var cols = data1.match(colregex);
    if (cols) parse_ws_xml_cols(columns, cols);
  }
  if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
  var afilter = data2.match(afregex);
  if (afilter) s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
  var merges = [];
  var _merge = data2.match(mergecregex);
  if (_merge) for (ridx = 0; ridx != _merge.length; ++ridx)
    merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
  var hlink = data2.match(hlinkregex);
  if (hlink) parse_ws_xml_hlinks(s, hlink, rels);
  var margins = data2.match(marginregex);
  if (margins) s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
  if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
  if (opts.sheetRows > 0 && s["!ref"]) {
    var tmpref = safe_decode_range(s["!ref"]);
    if (opts.sheetRows <= +tmpref.e.r) {
      tmpref.e.r = opts.sheetRows - 1;
      if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
      if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
      if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
      if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
      s["!fullref"] = s["!ref"];
      s["!ref"] = encode_range(tmpref);
    }
  }
  if (columns.length > 0) s["!cols"] = columns;
  if (merges.length > 0) s["!merges"] = merges;
  return s;
}
__name(parse_ws_xml, "parse_ws_xml");
function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
  var data = parsexmltag(sheetPr);
  if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
  if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
}
__name(parse_ws_xml_sheetpr, "parse_ws_xml_sheetpr");
function parse_ws_xml_sheetpr2(sheetPr, body, s, wb, idx) {
  parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
}
__name(parse_ws_xml_sheetpr2, "parse_ws_xml_sheetpr2");
function parse_ws_xml_hlinks(s, data, rels) {
  var dense = Array.isArray(s);
  for (var i = 0; i != data.length; ++i) {
    var val = parsexmltag(utf8read(data[i]), true);
    if (!val.ref) return;
    var rel = ((rels || {})["!id"] || [])[val.id];
    if (rel) {
      val.Target = rel.Target;
      if (val.location) val.Target += "#" + unescapexml(val.location);
    } else {
      val.Target = "#" + unescapexml(val.location);
      rel = { Target: val.Target, TargetMode: "Internal" };
    }
    val.Rel = rel;
    if (val.tooltip) {
      val.Tooltip = val.tooltip;
      delete val.tooltip;
    }
    var rng = safe_decode_range(val.ref);
    for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
      var addr = encode_cell({ c: C, r: R });
      if (dense) {
        if (!s[R]) s[R] = [];
        if (!s[R][C]) s[R][C] = { t: "z", v: void 0 };
        s[R][C].l = val;
      } else {
        if (!s[addr]) s[addr] = { t: "z", v: void 0 };
        s[addr].l = val;
      }
    }
  }
}
__name(parse_ws_xml_hlinks, "parse_ws_xml_hlinks");
function parse_ws_xml_margins(margin) {
  var o = {};
  ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
    if (margin[k]) o[k] = parseFloat(margin[k]);
  });
  return o;
}
__name(parse_ws_xml_margins, "parse_ws_xml_margins");
function parse_ws_xml_cols(columns, cols) {
  var seencol = false;
  for (var coli = 0; coli != cols.length; ++coli) {
    var coll = parsexmltag(cols[coli], true);
    if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
    var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
    if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
    delete coll.min;
    delete coll.max;
    coll.width = +coll.width;
    if (!seencol && coll.width) {
      seencol = true;
      find_mdw_colw(coll.width);
    }
    process_col(coll);
    while (colm <= colM) columns[colm++] = dup(coll);
  }
}
__name(parse_ws_xml_cols, "parse_ws_xml_cols");
function parse_ws_xml_autofilter(data) {
  var o = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
  return o;
}
__name(parse_ws_xml_autofilter, "parse_ws_xml_autofilter");
var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
function parse_ws_xml_sheetviews(data, wb) {
  if (!wb.Views) wb.Views = [{}];
  (data.match(sviewregex) || []).forEach(function(r, i) {
    var tag = parsexmltag(r);
    if (!wb.Views[i]) wb.Views[i] = {};
    if (+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
    if (parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
  });
}
__name(parse_ws_xml_sheetviews, "parse_ws_xml_sheetviews");
var parse_ws_xml_data = /* @__PURE__ */ function() {
  var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
  var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
  var refregex = /ref=["']([^"']*)["']/;
  var match_v = matchtag("v"), match_f = matchtag("f");
  return /* @__PURE__ */ __name(function parse_ws_xml_data2(sdata, s, opts, guess, themes, styles) {
    var ri = 0, x = "", cells = [], cref = [], idx = 0, i = 0, cc = 0, d = "", p;
    var tag, tagr = 0, tagc = 0;
    var sstr, ftag;
    var fmtid = 0, fillid = 0;
    var do_format = Array.isArray(styles.CellXf), cf;
    var arrayf = [];
    var sharedf = [];
    var dense = Array.isArray(s);
    var rows = [], rowobj = {}, rowrite = false;
    var sheetStubs = !!opts.sheetStubs;
    for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
      x = marr[mt].trim();
      var xlen = x.length;
      if (xlen === 0) continue;
      var rstarti = 0;
      outa: for (ri = 0; ri < xlen; ++ri) switch (
        /*x.charCodeAt(ri)*/
        x[ri]
      ) {
        case ">":
          if (
            /*x.charCodeAt(ri-1) != 47*/
            x[ri - 1] != "/"
          ) {
            ++ri;
            break outa;
          }
          if (opts && opts.cellStyles) {
            tag = parsexmltag(x.slice(rstarti, ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr) continue;
            rowobj = {};
            rowrite = false;
            if (tag.ht) {
              rowrite = true;
              rowobj.hpt = parseFloat(tag.ht);
              rowobj.hpx = pt2px(rowobj.hpt);
            }
            if (tag.hidden == "1") {
              rowrite = true;
              rowobj.hidden = true;
            }
            if (tag.outlineLevel != null) {
              rowrite = true;
              rowobj.level = +tag.outlineLevel;
            }
            if (rowrite) rows[tagr - 1] = rowobj;
          }
          break;
        case "<":
          rstarti = ri;
          break;
      }
      if (rstarti >= ri) break;
      tag = parsexmltag(x.slice(rstarti, ri), true);
      tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
      tagc = -1;
      if (opts.sheetRows && opts.sheetRows < tagr) continue;
      if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
      if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
      if (opts && opts.cellStyles) {
        rowobj = {};
        rowrite = false;
        if (tag.ht) {
          rowrite = true;
          rowobj.hpt = parseFloat(tag.ht);
          rowobj.hpx = pt2px(rowobj.hpt);
        }
        if (tag.hidden == "1") {
          rowrite = true;
          rowobj.hidden = true;
        }
        if (tag.outlineLevel != null) {
          rowrite = true;
          rowobj.level = +tag.outlineLevel;
        }
        if (rowrite) rows[tagr - 1] = rowobj;
      }
      cells = x.slice(ri).split(cellregex);
      for (var rslice = 0; rslice != cells.length; ++rslice) if (cells[rslice].trim().charAt(0) != "<") break;
      cells = cells.slice(rslice);
      for (ri = 0; ri != cells.length; ++ri) {
        x = cells[ri].trim();
        if (x.length === 0) continue;
        cref = x.match(rregex);
        idx = ri;
        i = 0;
        cc = 0;
        x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
        if (cref != null && cref.length === 2) {
          idx = 0;
          d = cref[1];
          for (i = 0; i != d.length; ++i) {
            if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break;
            idx = 26 * idx + cc;
          }
          --idx;
          tagc = idx;
        } else ++tagc;
        for (i = 0; i != x.length; ++i) if (x.charCodeAt(i) === 62) break;
        ++i;
        tag = parsexmltag(x.slice(0, i), true);
        if (!tag.r) tag.r = encode_cell({ r: tagr - 1, c: tagc });
        d = x.slice(i);
        p = { t: "" };
        if ((cref = d.match(match_v)) != null && /*::cref != null && */
        cref[1] !== "") p.v = unescapexml(cref[1]);
        if (opts.cellFormula) {
          if ((cref = d.match(match_f)) != null && /*::cref != null && */
          cref[1] !== "") {
            p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
            if (!opts.xlfn) p.f = _xlfn(p.f);
            if (
              /*::cref != null && cref[0] != null && */
              cref[0].indexOf('t="array"') > -1
            ) {
              p.F = (d.match(refregex) || [])[1];
              if (p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
            } else if (
              /*::cref != null && cref[0] != null && */
              cref[0].indexOf('t="shared"') > -1
            ) {
              ftag = parsexmltag(cref[0]);
              var ___f = unescapexml(utf8read(cref[1]));
              if (!opts.xlfn) ___f = _xlfn(___f);
              sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
            }
          } else if (cref = d.match(/<f[^>]*\/>/)) {
            ftag = parsexmltag(cref[0]);
            if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
          }
          var _tag = decode_cell(tag.r);
          for (i = 0; i < arrayf.length; ++i)
            if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) {
              if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
                p.F = arrayf[i][1];
            }
        }
        if (tag.t == null && p.v === void 0) {
          if (p.f || p.F) {
            p.v = 0;
            p.t = "n";
          } else if (!sheetStubs) continue;
          else p.t = "z";
        } else p.t = tag.t || "n";
        if (guess.s.c > tagc) guess.s.c = tagc;
        if (guess.e.c < tagc) guess.e.c = tagc;
        switch (p.t) {
          case "n":
            if (p.v == "" || p.v == null) {
              if (!sheetStubs) continue;
              p.t = "z";
            } else p.v = parseFloat(p.v);
            break;
          case "s":
            if (typeof p.v == "undefined") {
              if (!sheetStubs) continue;
              p.t = "z";
            } else {
              sstr = strs[parseInt(p.v, 10)];
              p.v = sstr.t;
              p.r = sstr.r;
              if (opts.cellHTML) p.h = sstr.h;
            }
            break;
          case "str":
            p.t = "s";
            p.v = p.v != null ? utf8read(p.v) : "";
            if (opts.cellHTML) p.h = escapehtml(p.v);
            break;
          case "inlineStr":
            cref = d.match(isregex);
            p.t = "s";
            if (cref != null && (sstr = parse_si(cref[1]))) {
              p.v = sstr.t;
              if (opts.cellHTML) p.h = sstr.h;
            } else p.v = "";
            break;
          case "b":
            p.v = parsexmlbool(p.v);
            break;
          case "d":
            if (opts.cellDates) p.v = parseDate(p.v, 1);
            else {
              p.v = datenum(parseDate(p.v, 1));
              p.t = "n";
            }
            break;
          /* error string in .w, number in .v */
          case "e":
            if (!opts || opts.cellText !== false) p.w = p.v;
            p.v = RBErr[p.v];
            break;
        }
        fmtid = fillid = 0;
        cf = null;
        if (do_format && tag.s !== void 0) {
          cf = styles.CellXf[tag.s];
          if (cf != null) {
            if (cf.numFmtId != null) fmtid = cf.numFmtId;
            if (opts.cellStyles) {
              if (cf.fillId != null) fillid = cf.fillId;
            }
          }
        }
        safe_format(p, fmtid, fillid, opts, themes, styles);
        if (opts.cellDates && do_format && p.t == "n" && fmt_is_date(table_fmt[fmtid])) {
          p.t = "d";
          p.v = numdate(p.v);
        }
        if (tag.cm && opts.xlmeta) {
          var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
          if (cm && cm.type == "XLDAPR") p.D = true;
        }
        if (dense) {
          var _r = decode_cell(tag.r);
          if (!s[_r.r]) s[_r.r] = [];
          s[_r.r][_r.c] = p;
        } else s[tag.r] = p;
      }
    }
    if (rows.length > 0) s["!rows"] = rows;
  }, "parse_ws_xml_data");
}();
function parse_BrtRowHdr(data, length) {
  var z = {};
  var tgt = data.l + length;
  z.r = data.read_shift(4);
  data.l += 4;
  var miyRw = data.read_shift(2);
  data.l += 1;
  var flags = data.read_shift(1);
  data.l = tgt;
  if (flags & 7) z.level = flags & 7;
  if (flags & 16) z.hidden = true;
  if (flags & 32) z.hpt = miyRw / 20;
  return z;
}
__name(parse_BrtRowHdr, "parse_BrtRowHdr");
var parse_BrtWsDim = parse_UncheckedRfX;
function parse_BrtWsFmtInfo() {
}
__name(parse_BrtWsFmtInfo, "parse_BrtWsFmtInfo");
function parse_BrtWsProp(data, length) {
  var z = {};
  var f = data[data.l];
  ++data.l;
  z.above = !(f & 64);
  z.left = !(f & 128);
  data.l += 18;
  z.name = parse_XLSBCodeName(data, length - 19);
  return z;
}
__name(parse_BrtWsProp, "parse_BrtWsProp");
function parse_BrtCellBlank(data) {
  var cell = parse_XLSBCell(data);
  return [cell];
}
__name(parse_BrtCellBlank, "parse_BrtCellBlank");
function parse_BrtShortBlank(data) {
  var cell = parse_XLSBShortCell(data);
  return [cell];
}
__name(parse_BrtShortBlank, "parse_BrtShortBlank");
function parse_BrtCellBool(data) {
  var cell = parse_XLSBCell(data);
  var fBool = data.read_shift(1);
  return [cell, fBool, "b"];
}
__name(parse_BrtCellBool, "parse_BrtCellBool");
function parse_BrtShortBool(data) {
  var cell = parse_XLSBShortCell(data);
  var fBool = data.read_shift(1);
  return [cell, fBool, "b"];
}
__name(parse_BrtShortBool, "parse_BrtShortBool");
function parse_BrtCellError(data) {
  var cell = parse_XLSBCell(data);
  var bError = data.read_shift(1);
  return [cell, bError, "e"];
}
__name(parse_BrtCellError, "parse_BrtCellError");
function parse_BrtShortError(data) {
  var cell = parse_XLSBShortCell(data);
  var bError = data.read_shift(1);
  return [cell, bError, "e"];
}
__name(parse_BrtShortError, "parse_BrtShortError");
function parse_BrtCellIsst(data) {
  var cell = parse_XLSBCell(data);
  var isst = data.read_shift(4);
  return [cell, isst, "s"];
}
__name(parse_BrtCellIsst, "parse_BrtCellIsst");
function parse_BrtShortIsst(data) {
  var cell = parse_XLSBShortCell(data);
  var isst = data.read_shift(4);
  return [cell, isst, "s"];
}
__name(parse_BrtShortIsst, "parse_BrtShortIsst");
function parse_BrtCellReal(data) {
  var cell = parse_XLSBCell(data);
  var value = parse_Xnum(data);
  return [cell, value, "n"];
}
__name(parse_BrtCellReal, "parse_BrtCellReal");
function parse_BrtShortReal(data) {
  var cell = parse_XLSBShortCell(data);
  var value = parse_Xnum(data);
  return [cell, value, "n"];
}
__name(parse_BrtShortReal, "parse_BrtShortReal");
function parse_BrtCellRk(data) {
  var cell = parse_XLSBCell(data);
  var value = parse_RkNumber(data);
  return [cell, value, "n"];
}
__name(parse_BrtCellRk, "parse_BrtCellRk");
function parse_BrtShortRk(data) {
  var cell = parse_XLSBShortCell(data);
  var value = parse_RkNumber(data);
  return [cell, value, "n"];
}
__name(parse_BrtShortRk, "parse_BrtShortRk");
function parse_BrtCellRString(data) {
  var cell = parse_XLSBCell(data);
  var value = parse_RichStr(data);
  return [cell, value, "is"];
}
__name(parse_BrtCellRString, "parse_BrtCellRString");
function parse_BrtCellSt(data) {
  var cell = parse_XLSBCell(data);
  var value = parse_XLWideString(data);
  return [cell, value, "str"];
}
__name(parse_BrtCellSt, "parse_BrtCellSt");
function parse_BrtShortSt(data) {
  var cell = parse_XLSBShortCell(data);
  var value = parse_XLWideString(data);
  return [cell, value, "str"];
}
__name(parse_BrtShortSt, "parse_BrtShortSt");
function parse_BrtFmlaBool(data, length, opts) {
  var end = data.l + length;
  var cell = parse_XLSBCell(data);
  cell.r = opts["!row"];
  var value = data.read_shift(1);
  var o = [cell, value, "b"];
  if (opts.cellFormula) {
    data.l += 2;
    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
  } else data.l = end;
  return o;
}
__name(parse_BrtFmlaBool, "parse_BrtFmlaBool");
function parse_BrtFmlaError(data, length, opts) {
  var end = data.l + length;
  var cell = parse_XLSBCell(data);
  cell.r = opts["!row"];
  var value = data.read_shift(1);
  var o = [cell, value, "e"];
  if (opts.cellFormula) {
    data.l += 2;
    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
  } else data.l = end;
  return o;
}
__name(parse_BrtFmlaError, "parse_BrtFmlaError");
function parse_BrtFmlaNum(data, length, opts) {
  var end = data.l + length;
  var cell = parse_XLSBCell(data);
  cell.r = opts["!row"];
  var value = parse_Xnum(data);
  var o = [cell, value, "n"];
  if (opts.cellFormula) {
    data.l += 2;
    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
  } else data.l = end;
  return o;
}
__name(parse_BrtFmlaNum, "parse_BrtFmlaNum");
function parse_BrtFmlaString(data, length, opts) {
  var end = data.l + length;
  var cell = parse_XLSBCell(data);
  cell.r = opts["!row"];
  var value = parse_XLWideString(data);
  var o = [cell, value, "str"];
  if (opts.cellFormula) {
    data.l += 2;
    var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
  } else data.l = end;
  return o;
}
__name(parse_BrtFmlaString, "parse_BrtFmlaString");
var parse_BrtMergeCell = parse_UncheckedRfX;
function parse_BrtHLink(data, length) {
  var end = data.l + length;
  var rfx = parse_UncheckedRfX(data, 16);
  var relId = parse_XLNullableWideString(data);
  var loc = parse_XLWideString(data);
  var tooltip = parse_XLWideString(data);
  var display = parse_XLWideString(data);
  data.l = end;
  var o = { rfx, relId, loc, display };
  if (tooltip) o.Tooltip = tooltip;
  return o;
}
__name(parse_BrtHLink, "parse_BrtHLink");
function parse_BrtPane() {
}
__name(parse_BrtPane, "parse_BrtPane");
function parse_BrtArrFmla(data, length, opts) {
  var end = data.l + length;
  var rfx = parse_RfX(data, 16);
  var fAlwaysCalc = data.read_shift(1);
  var o = [rfx];
  o[2] = fAlwaysCalc;
  if (opts.cellFormula) {
    var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
    o[1] = formula;
  } else data.l = end;
  return o;
}
__name(parse_BrtArrFmla, "parse_BrtArrFmla");
function parse_BrtShrFmla(data, length, opts) {
  var end = data.l + length;
  var rfx = parse_UncheckedRfX(data, 16);
  var o = [rfx];
  if (opts.cellFormula) {
    var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
    o[1] = formula;
    data.l = end;
  } else data.l = end;
  return o;
}
__name(parse_BrtShrFmla, "parse_BrtShrFmla");
var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
function parse_BrtMargins(data) {
  var margins = {};
  BrtMarginKeys.forEach(function(k) {
    margins[k] = parse_Xnum(data, 8);
  });
  return margins;
}
__name(parse_BrtMargins, "parse_BrtMargins");
function parse_BrtBeginWsView(data) {
  var f = data.read_shift(2);
  data.l += 28;
  return { RTL: f & 32 };
}
__name(parse_BrtBeginWsView, "parse_BrtBeginWsView");
function parse_BrtDVal() {
}
__name(parse_BrtDVal, "parse_BrtDVal");
function parse_BrtDVal14() {
}
__name(parse_BrtDVal14, "parse_BrtDVal14");
function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
  if (!data) return data;
  var opts = _opts || {};
  if (!rels) rels = { "!id": {} };
  if (DENSE != null && opts.dense == null) opts.dense = DENSE;
  var s = opts.dense ? [] : {};
  var ref;
  var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
  var state = [];
  var pass = false, end = false;
  var row, p, cf, R, C, addr, sstr, rr, cell;
  var merges = [];
  opts.biff = 12;
  opts["!row"] = 0;
  var ai = 0, af = false;
  var arrayf = [];
  var sharedf = {};
  var supbooks = opts.supbooks || /*::(*/
  wb.supbooks || [[]];
  supbooks.sharedf = sharedf;
  supbooks.arrayf = arrayf;
  supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
    return x.name;
  });
  if (!opts.supbooks) {
    opts.supbooks = supbooks;
    if (wb.Names) for (var i = 0; i < wb.Names.length; ++i) supbooks[0][i + 1] = wb.Names[i];
  }
  var colinfo = [], rowinfo = [];
  var seencol = false;
  XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
  var cm, vm;
  recordhopper(data, /* @__PURE__ */ __name(function ws_parse(val, RR, RT) {
    if (end) return;
    switch (RT) {
      case 148:
        ref = val;
        break;
      case 0:
        row = val;
        if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
        rr = encode_row(R = row.r);
        opts["!row"] = row.r;
        if (val.hidden || val.hpt || val.level != null) {
          if (val.hpt) val.hpx = pt2px(val.hpt);
          rowinfo[val.r] = val;
        }
        break;
      case 2:
      /* 'BrtCellRk' */
      case 3:
      /* 'BrtCellError' */
      case 4:
      /* 'BrtCellBool' */
      case 5:
      /* 'BrtCellReal' */
      case 6:
      /* 'BrtCellSt' */
      case 7:
      /* 'BrtCellIsst' */
      case 8:
      /* 'BrtFmlaString' */
      case 9:
      /* 'BrtFmlaNum' */
      case 10:
      /* 'BrtFmlaBool' */
      case 11:
      /* 'BrtFmlaError' */
      case 13:
      /* 'BrtShortRk' */
      case 14:
      /* 'BrtShortError' */
      case 15:
      /* 'BrtShortBool' */
      case 16:
      /* 'BrtShortReal' */
      case 17:
      /* 'BrtShortSt' */
      case 18:
      /* 'BrtShortIsst' */
      case 62:
        p = { t: val[2] };
        switch (val[2]) {
          case "n":
            p.v = val[1];
            break;
          case "s":
            sstr = strs[val[1]];
            p.v = sstr.t;
            p.r = sstr.r;
            break;
          case "b":
            p.v = val[1] ? true : false;
            break;
          case "e":
            p.v = val[1];
            if (opts.cellText !== false) p.w = BErr[p.v];
            break;
          case "str":
            p.t = "s";
            p.v = val[1];
            break;
          case "is":
            p.t = "s";
            p.v = val[1].t;
            break;
        }
        if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.numFmtId, null, opts, themes, styles);
        C = val[0].c == -1 ? C + 1 : val[0].c;
        if (opts.dense) {
          if (!s[R]) s[R] = [];
          s[R][C] = p;
        } else s[encode_col(C) + rr] = p;
        if (opts.cellFormula) {
          af = false;
          for (ai = 0; ai < arrayf.length; ++ai) {
            var aii = arrayf[ai];
            if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
              if (C >= aii[0].s.c && C <= aii[0].e.c) {
                p.F = encode_range(aii[0]);
                af = true;
              }
            }
          }
          if (!af && val.length > 3) p.f = val[3];
        }
        if (refguess.s.r > row.r) refguess.s.r = row.r;
        if (refguess.s.c > C) refguess.s.c = C;
        if (refguess.e.r < row.r) refguess.e.r = row.r;
        if (refguess.e.c < C) refguess.e.c = C;
        if (opts.cellDates && cf && p.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
          var _d = SSF_parse_date_code(p.v);
          if (_d) {
            p.t = "d";
            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
          }
        }
        if (cm) {
          if (cm.type == "XLDAPR") p.D = true;
          cm = void 0;
        }
        if (vm) vm = void 0;
        break;
      case 1:
      /* 'BrtCellBlank' */
      case 12:
        if (!opts.sheetStubs || pass) break;
        p = { t: "z", v: void 0 };
        C = val[0].c == -1 ? C + 1 : val[0].c;
        if (opts.dense) {
          if (!s[R]) s[R] = [];
          s[R][C] = p;
        } else s[encode_col(C) + rr] = p;
        if (refguess.s.r > row.r) refguess.s.r = row.r;
        if (refguess.s.c > C) refguess.s.c = C;
        if (refguess.e.r < row.r) refguess.e.r = row.r;
        if (refguess.e.c < C) refguess.e.c = C;
        if (cm) {
          if (cm.type == "XLDAPR") p.D = true;
          cm = void 0;
        }
        if (vm) vm = void 0;
        break;
      case 176:
        merges.push(val);
        break;
      case 49:
        {
          cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
        }
        break;
      case 494:
        var rel = rels["!id"][val.relId];
        if (rel) {
          val.Target = rel.Target;
          if (val.loc) val.Target += "#" + val.loc;
          val.Rel = rel;
        } else if (val.relId == "") {
          val.Target = "#" + val.loc;
        }
        for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
          if (opts.dense) {
            if (!s[R]) s[R] = [];
            if (!s[R][C]) s[R][C] = { t: "z", v: void 0 };
            s[R][C].l = val;
          } else {
            addr = encode_cell({ c: C, r: R });
            if (!s[addr]) s[addr] = { t: "z", v: void 0 };
            s[addr].l = val;
          }
        }
        break;
      case 426:
        if (!opts.cellFormula) break;
        arrayf.push(val);
        cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
        cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
        cell.F = encode_range(val[0]);
        break;
      case 427:
        if (!opts.cellFormula) break;
        sharedf[encode_cell(val[0].s)] = val[1];
        cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
        cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
        break;
      /* identical to 'ColInfo' in XLS */
      case 60:
        if (!opts.cellStyles) break;
        while (val.e >= val.s) {
          colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1), level: val.level };
          if (!seencol) {
            seencol = true;
            find_mdw_colw(val.w / 256);
          }
          process_col(colinfo[val.e + 1]);
        }
        break;
      case 161:
        s["!autofilter"] = { ref: encode_range(val) };
        break;
      case 476:
        s["!margins"] = val;
        break;
      case 147:
        if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
        if (val.name) wb.Sheets[idx].CodeName = val.name;
        if (val.above || val.left) s["!outline"] = { above: val.above, left: val.left };
        break;
      case 137:
        if (!wb.Views) wb.Views = [{}];
        if (!wb.Views[0]) wb.Views[0] = {};
        if (val.RTL) wb.Views[0].RTL = true;
        break;
      case 485:
        break;
      case 64:
      /* 'BrtDVal' */
      case 1053:
        break;
      case 151:
        break;
      case 152:
      /* 'BrtSel' */
      case 175:
      /* 'BrtAFilterDateGroupItem' */
      case 644:
      /* 'BrtActiveX' */
      case 625:
      /* 'BrtBigName' */
      case 562:
      /* 'BrtBkHim' */
      case 396:
      /* 'BrtBrk' */
      case 1112:
      /* 'BrtCFIcon' */
      case 1146:
      /* 'BrtCFRuleExt' */
      case 471:
      /* 'BrtCFVO' */
      case 1050:
      /* 'BrtCFVO14' */
      case 649:
      /* 'BrtCellIgnoreEC' */
      case 1105:
      /* 'BrtCellIgnoreEC14' */
      case 589:
      /* 'BrtCellSmartTagProperty' */
      case 607:
      /* 'BrtCellWatch' */
      case 564:
      /* 'BrtColor' */
      case 1055:
      /* 'BrtColor14' */
      case 168:
      /* 'BrtColorFilter' */
      case 174:
      /* 'BrtCustomFilter' */
      case 1180:
      /* 'BrtCustomFilter14' */
      case 499:
      /* 'BrtDRef' */
      case 507:
      /* 'BrtDXF' */
      case 550:
      /* 'BrtDrawing' */
      case 171:
      /* 'BrtDynamicFilter' */
      case 167:
      /* 'BrtFilter' */
      case 1177:
      /* 'BrtFilter14' */
      case 169:
      /* 'BrtIconFilter' */
      case 1181:
      /* 'BrtIconFilter14' */
      case 551:
      /* 'BrtLegacyDrawing' */
      case 552:
      /* 'BrtLegacyDrawingHF' */
      case 661:
      /* 'BrtListPart' */
      case 639:
      /* 'BrtOleObject' */
      case 478:
      /* 'BrtPageSetup' */
      case 537:
      /* 'BrtPhoneticInfo' */
      case 477:
      /* 'BrtPrintOptions' */
      case 536:
      /* 'BrtRangeProtection' */
      case 1103:
      /* 'BrtRangeProtection14' */
      case 680:
      /* 'BrtRangeProtectionIso' */
      case 1104:
      /* 'BrtRangeProtectionIso14' */
      case 1024:
      /* 'BrtRwDescent' */
      case 663:
      /* 'BrtSheetCalcProp' */
      case 535:
      /* 'BrtSheetProtection' */
      case 678:
      /* 'BrtSheetProtectionIso' */
      case 504:
      /* 'BrtSlc' */
      case 1043:
      /* 'BrtSparkline' */
      case 428:
      /* 'BrtTable' */
      case 170:
      /* 'BrtTop10Filter' */
      case 3072:
      /* 'BrtUid' */
      case 50:
      /* 'BrtValueMeta' */
      case 2070:
      /* 'BrtWebExtension' */
      case 1045:
        break;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      case 37:
        state.push(RT);
        pass = true;
        break;
      case 38:
        state.pop();
        pass = false;
        break;
      default:
        if (RR.T) {
        } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "ws_parse"), opts);
  delete opts.supbooks;
  delete opts["!row"];
  if (!s["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
  if (opts.sheetRows && s["!ref"]) {
    var tmpref = safe_decode_range(s["!ref"]);
    if (opts.sheetRows <= +tmpref.e.r) {
      tmpref.e.r = opts.sheetRows - 1;
      if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
      if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
      if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
      if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
      s["!fullref"] = s["!ref"];
      s["!ref"] = encode_range(tmpref);
    }
  }
  if (merges.length > 0) s["!merges"] = merges;
  if (colinfo.length > 0) s["!cols"] = colinfo;
  if (rowinfo.length > 0) s["!rows"] = rowinfo;
  return s;
}
__name(parse_ws_bin, "parse_ws_bin");
function parse_Cache(data) {
  var col = [];
  var num = data.match(/^<c:numCache>/);
  var f;
  (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt) {
    var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
    if (!q) return;
    col[+q[1]] = num ? +q[2] : q[2];
  });
  var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
  (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F) {
    f = F.replace(/<.*?>/g, "");
  });
  return [col, nf, f];
}
__name(parse_Cache, "parse_Cache");
function parse_chart(data, name2, opts, rels, wb, csheet) {
  var cs = csheet || { "!type": "chart" };
  if (!data) return csheet;
  var C = 0, R = 0, col = "A";
  var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
  (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
    var cache = parse_Cache(nc);
    refguess.s.r = refguess.s.c = 0;
    refguess.e.c = C;
    col = encode_col(C);
    cache[0].forEach(function(n, i) {
      cs[col + encode_row(i)] = { t: "n", v: n, z: cache[1] };
      R = i;
    });
    if (refguess.e.r < R) refguess.e.r = R;
    ++C;
  });
  if (C > 0) cs["!ref"] = encode_range(refguess);
  return cs;
}
__name(parse_chart, "parse_chart");
function parse_cs_xml(data, opts, idx, rels, wb) {
  if (!data) return data;
  if (!rels) rels = { "!id": {} };
  var s = { "!type": "chart", "!drawel": null, "!rel": "" };
  var m;
  var sheetPr = data.match(sheetprregex);
  if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
  if (m = data.match(/drawing r:id="(.*?)"/)) s["!rel"] = m[1];
  if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
  return s;
}
__name(parse_cs_xml, "parse_cs_xml");
function parse_BrtCsProp(data, length) {
  data.l += 10;
  var name2 = parse_XLWideString(data, length - 10);
  return { name: name2 };
}
__name(parse_BrtCsProp, "parse_BrtCsProp");
function parse_cs_bin(data, opts, idx, rels, wb) {
  if (!data) return data;
  if (!rels) rels = { "!id": {} };
  var s = { "!type": "chart", "!drawel": null, "!rel": "" };
  var state = [];
  var pass = false;
  recordhopper(data, /* @__PURE__ */ __name(function cs_parse(val, R, RT) {
    switch (RT) {
      case 550:
        s["!rel"] = val;
        break;
      case 651:
        if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
        if (val.name) wb.Sheets[idx].CodeName = val.name;
        break;
      case 562:
      /* 'BrtBkHim' */
      case 652:
      /* 'BrtCsPageSetup' */
      case 669:
      /* 'BrtCsProtection' */
      case 679:
      /* 'BrtCsProtectionIso' */
      case 551:
      /* 'BrtLegacyDrawing' */
      case 552:
      /* 'BrtLegacyDrawingHF' */
      case 476:
      /* 'BrtMargins' */
      case 3072:
        break;
      case 35:
        pass = true;
        break;
      case 36:
        pass = false;
        break;
      case 37:
        state.push(RT);
        break;
      case 38:
        state.pop();
        break;
      default:
        if (R.T > 0) state.push(RT);
        else if (R.T < 0) state.pop();
        else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "cs_parse"), opts);
  if (rels["!id"][s["!rel"]]) s["!drawel"] = rels["!id"][s["!rel"]];
  return s;
}
__name(parse_cs_bin, "parse_cs_bin");
var WBPropsDef = [
  ["allowRefreshQuery", false, "bool"],
  ["autoCompressPictures", true, "bool"],
  ["backupFile", false, "bool"],
  ["checkCompatibility", false, "bool"],
  ["CodeName", ""],
  ["date1904", false, "bool"],
  ["defaultThemeVersion", 0, "int"],
  ["filterPrivacy", false, "bool"],
  ["hidePivotFieldList", false, "bool"],
  ["promptedSolutions", false, "bool"],
  ["publishItems", false, "bool"],
  ["refreshAllConnections", false, "bool"],
  ["saveExternalLinkValues", true, "bool"],
  ["showBorderUnselectedTables", true, "bool"],
  ["showInkAnnotation", true, "bool"],
  ["showObjects", "all"],
  ["showPivotChartFilter", false, "bool"],
  ["updateLinks", "userSet"]
];
var WBViewDef = [
  ["activeTab", 0, "int"],
  ["autoFilterDateGrouping", true, "bool"],
  ["firstSheet", 0, "int"],
  ["minimized", false, "bool"],
  ["showHorizontalScroll", true, "bool"],
  ["showSheetTabs", true, "bool"],
  ["showVerticalScroll", true, "bool"],
  ["tabRatio", 600, "int"],
  ["visibility", "visible"]
  //window{Height,Width}, {x,y}Window
];
var SheetDef = [
  //['state', 'visible']
];
var CalcPrDef = [
  ["calcCompleted", "true"],
  ["calcMode", "auto"],
  ["calcOnSave", "true"],
  ["concurrentCalc", "true"],
  ["fullCalcOnLoad", "false"],
  ["fullPrecision", "true"],
  ["iterate", "false"],
  ["iterateCount", "100"],
  ["iterateDelta", "0.001"],
  ["refMode", "A1"]
];
function push_defaults_array(target, defaults) {
  for (var j = 0; j != target.length; ++j) {
    var w = target[j];
    for (var i = 0; i != defaults.length; ++i) {
      var z = defaults[i];
      if (w[z[0]] == null) w[z[0]] = z[1];
      else switch (z[2]) {
        case "bool":
          if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]);
          break;
        case "int":
          if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10);
          break;
      }
    }
  }
}
__name(push_defaults_array, "push_defaults_array");
function push_defaults(target, defaults) {
  for (var i = 0; i != defaults.length; ++i) {
    var z = defaults[i];
    if (target[z[0]] == null) target[z[0]] = z[1];
    else switch (z[2]) {
      case "bool":
        if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]);
        break;
      case "int":
        if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10);
        break;
    }
  }
}
__name(push_defaults, "push_defaults");
function parse_wb_defaults(wb) {
  push_defaults(wb.WBProps, WBPropsDef);
  push_defaults(wb.CalcPr, CalcPrDef);
  push_defaults_array(wb.WBView, WBViewDef);
  push_defaults_array(wb.Sheets, SheetDef);
  _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
}
__name(parse_wb_defaults, "parse_wb_defaults");
var badchars = /* @__PURE__ */ "][*?/\\".split("");
function check_ws_name(n, safe) {
  if (n.length > 31) {
    if (safe) return false;
    throw new Error("Sheet names cannot exceed 31 chars");
  }
  var _good = true;
  badchars.forEach(function(c) {
    if (n.indexOf(c) == -1) return;
    if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
    _good = false;
  });
  return _good;
}
__name(check_ws_name, "check_ws_name");
var wbnsregex = /<\w+:workbook/;
function parse_wb_xml(data, opts) {
  if (!data) throw new Error("Could not find file");
  var wb = (
    /*::(*/
    { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" }
  );
  var pass = false, xmlns = "xmlns";
  var dname = {}, dnstart = 0;
  data.replace(tagregex, /* @__PURE__ */ __name(function xml_wb(x, idx) {
    var y = parsexmltag(x);
    switch (strip_ns(y[0])) {
      case "<?xml":
        break;
      /* 18.2.27 workbook CT_Workbook 1 */
      case "<workbook":
        if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
        wb.xmlns = y[xmlns];
        break;
      case "</workbook>":
        break;
      /* 18.2.13 fileVersion CT_FileVersion ? */
      case "<fileVersion":
        delete y[0];
        wb.AppVersion = y;
        break;
      case "<fileVersion/>":
      case "</fileVersion>":
        break;
      /* 18.2.12 fileSharing CT_FileSharing ? */
      case "<fileSharing":
        break;
      case "<fileSharing/>":
        break;
      /* 18.2.28 workbookPr CT_WorkbookPr ? */
      case "<workbookPr":
      case "<workbookPr/>":
        WBPropsDef.forEach(function(w) {
          if (y[w[0]] == null) return;
          switch (w[2]) {
            case "bool":
              wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
              break;
            case "int":
              wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
              break;
            default:
              wb.WBProps[w[0]] = y[w[0]];
          }
        });
        if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
        break;
      case "</workbookPr>":
        break;
      /* 18.2.29 workbookProtection CT_WorkbookProtection ? */
      case "<workbookProtection":
        break;
      case "<workbookProtection/>":
        break;
      /* 18.2.1  bookViews CT_BookViews ? */
      case "<bookViews":
      case "<bookViews>":
      case "</bookViews>":
        break;
      /* 18.2.30   workbookView CT_BookView + */
      case "<workbookView":
      case "<workbookView/>":
        delete y[0];
        wb.WBView.push(y);
        break;
      case "</workbookView>":
        break;
      /* 18.2.20 sheets CT_Sheets 1 */
      case "<sheets":
      case "<sheets>":
      case "</sheets>":
        break;
      // aggregate sheet
      /* 18.2.19   sheet CT_Sheet + */
      case "<sheet":
        switch (y.state) {
          case "hidden":
            y.Hidden = 1;
            break;
          case "veryHidden":
            y.Hidden = 2;
            break;
          default:
            y.Hidden = 0;
        }
        delete y.state;
        y.name = unescapexml(utf8read(y.name));
        delete y[0];
        wb.Sheets.push(y);
        break;
      case "</sheet>":
        break;
      /* 18.2.15 functionGroups CT_FunctionGroups ? */
      case "<functionGroups":
      case "<functionGroups/>":
        break;
      /* 18.2.14   functionGroup CT_FunctionGroup + */
      case "<functionGroup":
        break;
      /* 18.2.9  externalReferences CT_ExternalReferences ? */
      case "<externalReferences":
      case "</externalReferences>":
      case "<externalReferences>":
        break;
      /* 18.2.8    externalReference CT_ExternalReference + */
      case "<externalReference":
        break;
      /* 18.2.6  definedNames CT_DefinedNames ? */
      case "<definedNames/>":
        break;
      case "<definedNames>":
      case "<definedNames":
        pass = true;
        break;
      case "</definedNames>":
        pass = false;
        break;
      /* 18.2.5    definedName CT_DefinedName + */
      case "<definedName":
        {
          dname = {};
          dname.Name = utf8read(y.name);
          if (y.comment) dname.Comment = y.comment;
          if (y.localSheetId) dname.Sheet = +y.localSheetId;
          if (parsexmlbool(y.hidden || "0")) dname.Hidden = true;
          dnstart = idx + x.length;
        }
        break;
      case "</definedName>":
        {
          dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
          wb.Names.push(dname);
        }
        break;
      case "<definedName/>":
        break;
      /* 18.2.2  calcPr CT_CalcPr ? */
      case "<calcPr":
        delete y[0];
        wb.CalcPr = y;
        break;
      case "<calcPr/>":
        delete y[0];
        wb.CalcPr = y;
        break;
      case "</calcPr>":
        break;
      /* 18.2.16 oleSize CT_OleSize ? (ref required) */
      case "<oleSize":
        break;
      /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
      case "<customWorkbookViews>":
      case "</customWorkbookViews>":
      case "<customWorkbookViews":
        break;
      /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */
      case "<customWorkbookView":
      case "</customWorkbookView>":
        break;
      /* 18.2.18 pivotCaches CT_PivotCaches ? */
      case "<pivotCaches>":
      case "</pivotCaches>":
      case "<pivotCaches":
        break;
      /* 18.2.17 pivotCache CT_PivotCache ? */
      case "<pivotCache":
        break;
      /* 18.2.21 smartTagPr CT_SmartTagPr ? */
      case "<smartTagPr":
      case "<smartTagPr/>":
        break;
      /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
      case "<smartTagTypes":
      case "<smartTagTypes>":
      case "</smartTagTypes>":
        break;
      /* 18.2.22 smartTagType CT_SmartTagType ? */
      case "<smartTagType":
        break;
      /* 18.2.24 webPublishing CT_WebPublishing ? */
      case "<webPublishing":
      case "<webPublishing/>":
        break;
      /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
      case "<fileRecoveryPr":
      case "<fileRecoveryPr/>":
        break;
      /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
      case "<webPublishObjects>":
      case "<webPublishObjects":
      case "</webPublishObjects>":
        break;
      /* 18.2.25 webPublishObject CT_WebPublishObject ? */
      case "<webPublishObject":
        break;
      /* 18.2.10 extLst CT_ExtensionList ? */
      case "<extLst":
      case "<extLst>":
      case "</extLst>":
      case "<extLst/>":
        break;
      /* 18.2.7  ext CT_Extension + */
      case "<ext":
        pass = true;
        break;
      //TODO: check with versions of excel
      case "</ext>":
        pass = false;
        break;
      /* Others */
      case "<ArchID":
        break;
      case "<AlternateContent":
      case "<AlternateContent>":
        pass = true;
        break;
      case "</AlternateContent>":
        pass = false;
        break;
      /* TODO */
      case "<revisionPtr":
        break;
      default:
        if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in workbook");
    }
    return x;
  }, "xml_wb"));
  if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
  parse_wb_defaults(wb);
  return wb;
}
__name(parse_wb_xml, "parse_wb_xml");
function parse_BrtBundleSh(data, length) {
  var z = {};
  z.Hidden = data.read_shift(4);
  z.iTabID = data.read_shift(4);
  z.strRelID = parse_RelID(data, length - 8);
  z.name = parse_XLWideString(data);
  return z;
}
__name(parse_BrtBundleSh, "parse_BrtBundleSh");
function parse_BrtWbProp(data, length) {
  var o = {};
  var flags = data.read_shift(4);
  o.defaultThemeVersion = data.read_shift(4);
  var strName = length > 8 ? parse_XLWideString(data) : "";
  if (strName.length > 0) o.CodeName = strName;
  o.autoCompressPictures = !!(flags & 65536);
  o.backupFile = !!(flags & 64);
  o.checkCompatibility = !!(flags & 4096);
  o.date1904 = !!(flags & 1);
  o.filterPrivacy = !!(flags & 8);
  o.hidePivotFieldList = !!(flags & 1024);
  o.promptedSolutions = !!(flags & 16);
  o.publishItems = !!(flags & 2048);
  o.refreshAllConnections = !!(flags & 262144);
  o.saveExternalLinkValues = !!(flags & 128);
  o.showBorderUnselectedTables = !!(flags & 4);
  o.showInkAnnotation = !!(flags & 32);
  o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
  o.showPivotChartFilter = !!(flags & 32768);
  o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
  return o;
}
__name(parse_BrtWbProp, "parse_BrtWbProp");
function parse_BrtFRTArchID$(data, length) {
  var o = {};
  data.read_shift(4);
  o.ArchID = data.read_shift(4);
  data.l += length - 8;
  return o;
}
__name(parse_BrtFRTArchID$, "parse_BrtFRTArchID$");
function parse_BrtName(data, length, opts) {
  var end = data.l + length;
  data.l += 4;
  data.l += 1;
  var itab = data.read_shift(4);
  var name2 = parse_XLNameWideString(data);
  var formula = parse_XLSBNameParsedFormula(data, 0, opts);
  var comment = parse_XLNullableWideString(data);
  data.l = end;
  var out = { Name: name2, Ptg: formula };
  if (itab < 268435455) out.Sheet = itab;
  if (comment) out.Comment = comment;
  return out;
}
__name(parse_BrtName, "parse_BrtName");
function parse_wb_bin(data, opts) {
  var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
  var state = [];
  var pass = false;
  if (!opts) opts = {};
  opts.biff = 12;
  var Names = [];
  var supbooks = [[]];
  supbooks.SheetNames = [];
  supbooks.XTI = [];
  XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
  recordhopper(data, /* @__PURE__ */ __name(function hopper_wb(val, R, RT) {
    switch (RT) {
      case 156:
        supbooks.SheetNames.push(val.name);
        wb.Sheets.push(val);
        break;
      case 153:
        wb.WBProps = val;
        break;
      case 39:
        if (val.Sheet != null) opts.SID = val.Sheet;
        val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
        delete opts.SID;
        delete val.Ptg;
        Names.push(val);
        break;
      case 1036:
        break;
      case 357:
      /* 'BrtSupSelf' */
      case 358:
      /* 'BrtSupSame' */
      case 355:
      /* 'BrtSupBookSrc' */
      case 667:
        if (!supbooks[0].length) supbooks[0] = [RT, val];
        else supbooks.push([RT, val]);
        supbooks[supbooks.length - 1].XTI = [];
        break;
      case 362:
        if (supbooks.length === 0) {
          supbooks[0] = [];
          supbooks[0].XTI = [];
        }
        supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
        supbooks.XTI = supbooks.XTI.concat(val);
        break;
      case 361:
        break;
      case 2071:
      /* 'BrtAbsPath15' */
      case 158:
      /* 'BrtBookView' */
      case 143:
      /* 'BrtBeginBundleShs' */
      case 664:
      /* 'BrtBeginFnGroup' */
      case 353:
        break;
      /* case 'BrtModelTimeGroupingCalcCol' */
      case 3072:
      /* 'BrtUid' */
      case 3073:
      /* 'BrtRevisionPtr' */
      case 534:
      /* 'BrtBookProtection' */
      case 677:
      /* 'BrtBookProtectionIso' */
      case 157:
      /* 'BrtCalcProp' */
      case 610:
      /* 'BrtCrashRecErr' */
      case 2050:
      /* 'BrtDecoupledPivotCacheID' */
      case 155:
      /* 'BrtFileRecover' */
      case 548:
      /* 'BrtFileSharing' */
      case 676:
      /* 'BrtFileSharingIso' */
      case 128:
      /* 'BrtFileVersion' */
      case 665:
      /* 'BrtFnGroup' */
      case 2128:
      /* 'BrtModelRelationship' */
      case 2125:
      /* 'BrtModelTable' */
      case 549:
      /* 'BrtOleSize' */
      case 2053:
      /* 'BrtPivotTableRef' */
      case 596:
      /* 'BrtSmartTagType' */
      case 2076:
      /* 'BrtTableSlicerCacheID' */
      case 2075:
      /* 'BrtTableSlicerCacheIDs' */
      case 2082:
      /* 'BrtTimelineCachePivotCacheID' */
      case 397:
      /* 'BrtUserBookView' */
      case 154:
      /* 'BrtWbFactoid' */
      case 1117:
      /* 'BrtWbProp14' */
      case 553:
      /* 'BrtWebOpt' */
      case 2091:
        break;
      case 35:
        state.push(RT);
        pass = true;
        break;
      case 36:
        state.pop();
        pass = false;
        break;
      case 37:
        state.push(RT);
        pass = true;
        break;
      case 38:
        state.pop();
        pass = false;
        break;
      case 16:
        break;
      default:
        if (R.T) {
        } else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
    }
  }, "hopper_wb"), opts);
  parse_wb_defaults(wb);
  wb.Names = Names;
  wb.supbooks = supbooks;
  return wb;
}
__name(parse_wb_bin, "parse_wb_bin");
function parse_wb(data, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_wb_bin(data, opts);
  return parse_wb_xml(data, opts);
}
__name(parse_wb, "parse_wb");
function parse_ws(data, name2, idx, opts, rels, wb, themes, styles) {
  if (name2.slice(-4) === ".bin") return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
  return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
}
__name(parse_ws, "parse_ws");
function parse_cs(data, name2, idx, opts, rels, wb, themes, styles) {
  if (name2.slice(-4) === ".bin") return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
  return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
}
__name(parse_cs, "parse_cs");
function parse_ms(data, name2, idx, opts, rels, wb, themes, styles) {
  if (name2.slice(-4) === ".bin") return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
  return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
}
__name(parse_ms, "parse_ms");
function parse_ds(data, name2, idx, opts, rels, wb, themes, styles) {
  if (name2.slice(-4) === ".bin") return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
  return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
}
__name(parse_ds, "parse_ds");
function parse_sty(data, name2, themes, opts) {
  if (name2.slice(-4) === ".bin") return parse_sty_bin(data, themes, opts);
  return parse_sty_xml(data, themes, opts);
}
__name(parse_sty, "parse_sty");
function parse_theme(data, name2, opts) {
  return parse_theme_xml(data, opts);
}
__name(parse_theme, "parse_theme");
function parse_sst(data, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_sst_bin(data, opts);
  return parse_sst_xml(data, opts);
}
__name(parse_sst, "parse_sst");
function parse_cmnt(data, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_comments_bin(data, opts);
  return parse_comments_xml(data, opts);
}
__name(parse_cmnt, "parse_cmnt");
function parse_cc(data, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_cc_bin(data, name2, opts);
  return parse_cc_xml(data, name2, opts);
}
__name(parse_cc, "parse_cc");
function parse_xlink(data, rel, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_xlink_bin(data, rel, name2, opts);
  return parse_xlink_xml(data, rel, name2, opts);
}
__name(parse_xlink, "parse_xlink");
function parse_xlmeta(data, name2, opts) {
  if (name2.slice(-4) === ".bin") return parse_xlmeta_bin(data, name2, opts);
  return parse_xlmeta_xml(data, name2, opts);
}
__name(parse_xlmeta, "parse_xlmeta");
var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
function xlml_parsexmltag(tag, skip_root) {
  var words = tag.split(/\s+/);
  var z = [];
  if (!skip_root) z[0] = words[0];
  if (words.length === 1) return z;
  var m = tag.match(attregexg2), y, j, w, i;
  if (m) for (i = 0; i != m.length; ++i) {
    y = m[i].match(attregex2);
    if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
    else {
      if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
      else w = y[1].slice(j + 1);
      z[w] = y[2].slice(1, y[2].length - 1);
    }
  }
  return z;
}
__name(xlml_parsexmltag, "xlml_parsexmltag");
function xlml_parsexmltagobj(tag) {
  var words = tag.split(/\s+/);
  var z = {};
  if (words.length === 1) return z;
  var m = tag.match(attregexg2), y, j, w, i;
  if (m) for (i = 0; i != m.length; ++i) {
    y = m[i].match(attregex2);
    if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1, y[2].length - 1);
    else {
      if (y[1].slice(0, 6) === "xmlns:") w = "xmlns" + y[1].slice(6);
      else w = y[1].slice(j + 1);
      z[w] = y[2].slice(1, y[2].length - 1);
    }
  }
  return z;
}
__name(xlml_parsexmltagobj, "xlml_parsexmltagobj");
var XLMLFormatMap;
function xlml_format(format, value) {
  var fmt = XLMLFormatMap[format] || unescapexml(format);
  if (fmt === "General") return SSF_general(value);
  return SSF_format(fmt, value);
}
__name(xlml_format, "xlml_format");
function xlml_set_custprop(Custprops, key, cp, val) {
  var oval = val;
  switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
    case "boolean":
      oval = parsexmlbool(val);
      break;
    case "i2":
    case "int":
      oval = parseInt(val, 10);
      break;
    case "r4":
    case "float":
      oval = parseFloat(val);
      break;
    case "date":
    case "dateTime.tz":
      oval = parseDate(val);
      break;
    case "i8":
    case "string":
    case "fixed":
    case "uuid":
    case "bin.base64":
      break;
    default:
      throw new Error("bad custprop:" + cp[0]);
  }
  Custprops[unescapexml(key)] = oval;
}
__name(xlml_set_custprop, "xlml_set_custprop");
function safe_format_xlml(cell, nf, o) {
  if (cell.t === "z") return;
  if (!o || o.cellText !== false) try {
    if (cell.t === "e") {
      cell.w = cell.w || BErr[cell.v];
    } else if (nf === "General") {
      if (cell.t === "n") {
        if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);
        else cell.w = SSF_general_num(cell.v);
      } else cell.w = SSF_general(cell.v);
    } else cell.w = xlml_format(nf || "General", cell.v);
  } catch (e) {
    if (o.WTF) throw e;
  }
  try {
    var z = XLMLFormatMap[nf] || nf || "General";
    if (o.cellNF) cell.z = z;
    if (o.cellDates && cell.t == "n" && fmt_is_date(z)) {
      var _d = SSF_parse_date_code(cell.v);
      if (_d) {
        cell.t = "d";
        cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
      }
    }
  } catch (e) {
    if (o.WTF) throw e;
  }
}
__name(safe_format_xlml, "safe_format_xlml");
function process_style_xlml(styles, stag, opts) {
  if (opts.cellStyles) {
    if (stag.Interior) {
      var I = stag.Interior;
      if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
    }
  }
  styles[stag.ID] = stag;
}
__name(process_style_xlml, "process_style_xlml");
function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
  var nf = "General", sid = cell.StyleID, S = {};
  o = o || {};
  var interiors = [];
  var i = 0;
  if (sid === void 0 && row) sid = row.StyleID;
  if (sid === void 0 && csty) sid = csty.StyleID;
  while (styles[sid] !== void 0) {
    if (styles[sid].nf) nf = styles[sid].nf;
    if (styles[sid].Interior) interiors.push(styles[sid].Interior);
    if (!styles[sid].Parent) break;
    sid = styles[sid].Parent;
  }
  switch (data.Type) {
    case "Boolean":
      cell.t = "b";
      cell.v = parsexmlbool(xml);
      break;
    case "String":
      cell.t = "s";
      cell.r = xlml_fixstr(unescapexml(xml));
      cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r;
      break;
    case "DateTime":
      if (xml.slice(-1) != "Z") xml += "Z";
      cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3);
      if (cell.v !== cell.v) cell.v = unescapexml(xml);
      else if (cell.v < 60) cell.v = cell.v - 1;
      if (!nf || nf == "General") nf = "yyyy-mm-dd";
    /* falls through */
    case "Number":
      if (cell.v === void 0) cell.v = +xml;
      if (!cell.t) cell.t = "n";
      break;
    case "Error":
      cell.t = "e";
      cell.v = RBErr[xml];
      if (o.cellText !== false) cell.w = xml;
      break;
    default:
      if (xml == "" && ss == "") {
        cell.t = "z";
      } else {
        cell.t = "s";
        cell.v = xlml_fixstr(ss || xml);
      }
      break;
  }
  safe_format_xlml(cell, nf, o);
  if (o.cellFormula !== false) {
    if (cell.Formula) {
      var fstr = unescapexml(cell.Formula);
      if (fstr.charCodeAt(0) == 61) fstr = fstr.slice(1);
      cell.f = rc_to_a1(fstr, base);
      delete cell.Formula;
      if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
      else if (cell.ArrayRange) {
        cell.F = rc_to_a1(cell.ArrayRange, base);
        arrayf.push([safe_decode_range(cell.F), cell.F]);
      }
    } else {
      for (i = 0; i < arrayf.length; ++i)
        if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) {
          if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
            cell.F = arrayf[i][1];
        }
    }
  }
  if (o.cellStyles) {
    interiors.forEach(function(x) {
      if (!S.patternType && x.patternType) S.patternType = x.patternType;
    });
    cell.s = S;
  }
  if (cell.StyleID !== void 0) cell.ixfe = cell.StyleID;
}
__name(parse_xlml_data, "parse_xlml_data");
function xlml_clean_comment(comment) {
  comment.t = comment.v || "";
  comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  comment.v = comment.w = comment.ixfe = void 0;
}
__name(xlml_clean_comment, "xlml_clean_comment");
function parse_xlml_xml(d, _opts) {
  var opts = _opts || {};
  make_ssf();
  var str = debom(xlml_normalize(d));
  if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
    if (typeof $cptable !== "undefined") str = $cptable.utils.decode(65001, char_codes(str));
    else str = utf8read(str);
  }
  var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
  opening = opening.replace(/".*?"/g, "");
  if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
    var _o = dup(opts);
    _o.type = "string";
    return PRN.to_workbook(str, _o);
  }
  if (opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
    if (opening.indexOf("<" + tag) >= 0) ishtml = true;
  });
  if (ishtml) return html_to_workbook(str, opts);
  XLMLFormatMap = {
    "General Number": "General",
    "General Date": table_fmt[22],
    "Long Date": "dddd, mmmm dd, yyyy",
    "Medium Date": table_fmt[15],
    "Short Date": table_fmt[14],
    "Long Time": table_fmt[19],
    "Medium Time": table_fmt[18],
    "Short Time": table_fmt[20],
    "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    "Fixed": table_fmt[2],
    "Standard": table_fmt[4],
    "Percent": table_fmt[10],
    "Scientific": table_fmt[11],
    "Yes/No": '"Yes";"Yes";"No";@',
    "True/False": '"True";"True";"False";@',
    "On/Off": '"Yes";"Yes";"No";@'
  };
  var Rn;
  var state = [], tmp;
  if (DENSE != null && opts.dense == null) opts.dense = DENSE;
  var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = "";
  var cell = {}, row = {};
  var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
  var c = 0, r = 0;
  var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
  var styles = {}, stag = {};
  var ss = "", fidx = 0;
  var merges = [];
  var Props = {}, Custprops = {}, pidx = 0, cp = [];
  var comments = [], comment = {};
  var cstys = [], csty, seencol = false;
  var arrayf = [];
  var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
  var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
  xlmlregex.lastIndex = 0;
  str = str.replace(/<!--([\s\S]*?)-->/mg, "");
  var raw_Rn3 = "";
  while (Rn = xlmlregex.exec(str)) switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
    case "data":
      if (raw_Rn3 == "data") {
        if (Rn[1] === "/") {
          if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
        break;
      }
      if (state[state.length - 1][1]) break;
      if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == /*"Comment"*/
      "comment" ? comment : cell, { c, r }, styles, cstys[c], row, arrayf, opts);
      else {
        ss = "";
        dtag = xlml_parsexmltag(Rn[0]);
        didx = Rn.index + Rn[0].length;
      }
      break;
    case "cell":
      if (Rn[1] === "/") {
        if (comments.length > 0) cell.c = comments;
        if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== void 0) {
          if (opts.dense) {
            if (!cursheet[r]) cursheet[r] = [];
            cursheet[r][c] = cell;
          } else cursheet[encode_col(c) + encode_row(r)] = cell;
        }
        if (cell.HRef) {
          cell.l = { Target: unescapexml(cell.HRef) };
          if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
          delete cell.HRef;
          delete cell.HRefScreenTip;
        }
        if (cell.MergeAcross || cell.MergeDown) {
          cc = c + (parseInt(cell.MergeAcross, 10) | 0);
          rr = r + (parseInt(cell.MergeDown, 10) | 0);
          merges.push({ s: { c, r }, e: { c: cc, r: rr } });
        }
        if (!opts.sheetStubs) {
          if (cell.MergeAcross) c = cc + 1;
          else ++c;
        } else if (cell.MergeAcross || cell.MergeDown) {
          for (var cma = c; cma <= cc; ++cma) {
            for (var cmd = r; cmd <= rr; ++cmd) {
              if (cma > c || cmd > r) {
                if (opts.dense) {
                  if (!cursheet[cmd]) cursheet[cmd] = [];
                  cursheet[cmd][cma] = { t: "z" };
                } else cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
              }
            }
          }
          c = cc + 1;
        } else ++c;
      } else {
        cell = xlml_parsexmltagobj(Rn[0]);
        if (cell.Index) c = +cell.Index - 1;
        if (c < refguess.s.c) refguess.s.c = c;
        if (c > refguess.e.c) refguess.e.c = c;
        if (Rn[0].slice(-2) === "/>") ++c;
        comments = [];
      }
      break;
    case "row":
      if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
        if (r < refguess.s.r) refguess.s.r = r;
        if (r > refguess.e.r) refguess.e.r = r;
        if (Rn[0].slice(-2) === "/>") {
          row = xlml_parsexmltag(Rn[0]);
          if (row.Index) r = +row.Index - 1;
        }
        c = 0;
        ++r;
      } else {
        row = xlml_parsexmltag(Rn[0]);
        if (row.Index) r = +row.Index - 1;
        rowobj = {};
        if (row.AutoFitHeight == "0" || row.Height) {
          rowobj.hpx = parseInt(row.Height, 10);
          rowobj.hpt = px2pt(rowobj.hpx);
          rowinfo[r] = rowobj;
        }
        if (row.Hidden == "1") {
          rowobj.hidden = true;
          rowinfo[r] = rowobj;
        }
      }
      break;
    case "worksheet":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        sheetnames.push(sheetname);
        if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
          cursheet["!ref"] = encode_range(refguess);
          if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
            cursheet["!fullref"] = cursheet["!ref"];
            refguess.e.r = opts.sheetRows - 1;
            cursheet["!ref"] = encode_range(refguess);
          }
        }
        if (merges.length) cursheet["!merges"] = merges;
        if (cstys.length > 0) cursheet["!cols"] = cstys;
        if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
        sheets[sheetname] = cursheet;
      } else {
        refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        r = c = 0;
        state.push([Rn[3], false]);
        tmp = xlml_parsexmltag(Rn[0]);
        sheetname = unescapexml(tmp.Name);
        cursheet = opts.dense ? [] : {};
        merges = [];
        arrayf = [];
        rowinfo = [];
        wsprops = { name: sheetname, Hidden: 0 };
        Workbook.Sheets.push(wsprops);
      }
      break;
    case "table":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
      } else if (Rn[0].slice(-2) == "/>") break;
      else {
        state.push([Rn[3], false]);
        cstys = [];
        seencol = false;
      }
      break;
    case "style":
      if (Rn[1] === "/") process_style_xlml(styles, stag, opts);
      else stag = xlml_parsexmltag(Rn[0]);
      break;
    case "numberformat":
      stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
      if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
      for (var ssfidx = 0; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == stag.nf) break;
      if (ssfidx == 392) {
        for (ssfidx = 57; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == null) {
          SSF_load(stag.nf, ssfidx);
          break;
        }
      }
      break;
    case "column":
      if (state[state.length - 1][0] !== /*'Table'*/
      "table") break;
      csty = xlml_parsexmltag(Rn[0]);
      if (csty.Hidden) {
        csty.hidden = true;
        delete csty.Hidden;
      }
      if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
      if (!seencol && csty.wpx > 10) {
        seencol = true;
        MDW = DEF_MDW;
        for (var _col = 0; _col < cstys.length; ++_col) if (cstys[_col]) process_col(cstys[_col]);
      }
      if (seencol) process_col(csty);
      cstys[csty.Index - 1 || cstys.length] = csty;
      for (var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
      break;
    case "namedrange":
      if (Rn[1] === "/") break;
      if (!Workbook.Names) Workbook.Names = [];
      var _NamedRange = parsexmltag(Rn[0]);
      var _DefinedName = {
        Name: _NamedRange.Name,
        Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
      };
      if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
      Workbook.Names.push(_DefinedName);
      break;
    case "namedcell":
      break;
    case "b":
      break;
    case "i":
      break;
    case "u":
      break;
    case "s":
      break;
    case "em":
      break;
    case "h2":
      break;
    case "h3":
      break;
    case "sub":
      break;
    case "sup":
      break;
    case "span":
      break;
    case "alignment":
      break;
    case "borders":
      break;
    case "border":
      break;
    case "font":
      if (Rn[0].slice(-2) === "/>") break;
      else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index);
      else fidx = Rn.index + Rn[0].length;
      break;
    case "interior":
      if (!opts.cellStyles) break;
      stag.Interior = xlml_parsexmltag(Rn[0]);
      break;
    case "protection":
      break;
    case "author":
    case "title":
    case "description":
    case "created":
    case "keywords":
    case "subject":
    case "category":
    case "company":
    case "lastauthor":
    case "lastsaved":
    case "lastprinted":
    case "version":
    case "revision":
    case "totaltime":
    case "hyperlinkbase":
    case "manager":
    case "contentstatus":
    case "identifier":
    case "language":
    case "appname":
      if (Rn[0].slice(-2) === "/>") break;
      else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
      else pidx = Rn.index + Rn[0].length;
      break;
    case "paragraphs":
      break;
    case "styles":
    case "workbook":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
      } else state.push([Rn[3], false]);
      break;
    case "comment":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
        xlml_clean_comment(comment);
        comments.push(comment);
      } else {
        state.push([Rn[3], false]);
        tmp = xlml_parsexmltag(Rn[0]);
        comment = { a: tmp.Author };
      }
      break;
    case "autofilter":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
        var AutoFilter = xlml_parsexmltag(Rn[0]);
        cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
        state.push([Rn[3], true]);
      }
      break;
    case "name":
      break;
    case "datavalidation":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
      } else {
        if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
      }
      break;
    case "pixelsperinch":
      break;
    case "componentoptions":
    case "documentproperties":
    case "customdocumentproperties":
    case "officedocumentsettings":
    case "pivottable":
    case "pivotcache":
    case "names":
    case "mapinfo":
    case "pagebreaks":
    case "querytable":
    case "sorting":
    case "schema":
    //case 'data' /*case 'data'*/:
    case "conditionalformatting":
    case "smarttagtype":
    case "smarttags":
    case "excelworkbook":
    case "workbookoptions":
    case "worksheetoptions":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
      break;
    case "null":
      break;
    default:
      if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
      if (state.length == 0 && Rn[3] == "uof") return parse_fods(str, opts);
      var seen = true;
      switch (state[state.length - 1][0]) {
        /* OfficeDocumentSettings */
        case "officedocumentsettings":
          switch (Rn[3]) {
            case "allowpng":
              break;
            case "removepersonalinformation":
              break;
            case "downloadcomponents":
              break;
            case "locationofcomponents":
              break;
            case "colors":
              break;
            case "color":
              break;
            case "index":
              break;
            case "rgb":
              break;
            case "targetscreensize":
              break;
            case "readonlyrecommended":
              break;
            default:
              seen = false;
          }
          break;
        /* ComponentOptions */
        case "componentoptions":
          switch (Rn[3]) {
            case "toolbar":
              break;
            case "hideofficelogo":
              break;
            case "spreadsheetautofit":
              break;
            case "label":
              break;
            case "caption":
              break;
            case "maxheight":
              break;
            case "maxwidth":
              break;
            case "nextsheetnumber":
              break;
            default:
              seen = false;
          }
          break;
        /* ExcelWorkbook */
        case "excelworkbook":
          switch (Rn[3]) {
            case "date1904":
              Workbook.WBProps.date1904 = true;
              break;
            case "windowheight":
              break;
            case "windowwidth":
              break;
            case "windowtopx":
              break;
            case "windowtopy":
              break;
            case "tabratio":
              break;
            case "protectstructure":
              break;
            case "protectwindow":
              break;
            case "protectwindows":
              break;
            case "activesheet":
              break;
            case "displayinknotes":
              break;
            case "firstvisiblesheet":
              break;
            case "supbook":
              break;
            case "sheetname":
              break;
            case "sheetindex":
              break;
            case "sheetindexfirst":
              break;
            case "sheetindexlast":
              break;
            case "dll":
              break;
            case "acceptlabelsinformulas":
              break;
            case "donotsavelinkvalues":
              break;
            case "iteration":
              break;
            case "maxiterations":
              break;
            case "maxchange":
              break;
            case "path":
              break;
            case "xct":
              break;
            case "count":
              break;
            case "selectedsheets":
              break;
            case "calculation":
              break;
            case "uncalced":
              break;
            case "startupprompt":
              break;
            case "crn":
              break;
            case "externname":
              break;
            case "formula":
              break;
            case "colfirst":
              break;
            case "collast":
              break;
            case "wantadvise":
              break;
            case "boolean":
              break;
            case "error":
              break;
            case "text":
              break;
            case "ole":
              break;
            case "noautorecover":
              break;
            case "publishobjects":
              break;
            case "donotcalculatebeforesave":
              break;
            case "number":
              break;
            case "refmoder1c1":
              break;
            case "embedsavesmarttags":
              break;
            default:
              seen = false;
          }
          break;
        /* WorkbookOptions */
        case "workbookoptions":
          switch (Rn[3]) {
            case "owcversion":
              break;
            case "height":
              break;
            case "width":
              break;
            default:
              seen = false;
          }
          break;
        /* WorksheetOptions */
        case "worksheetoptions":
          switch (Rn[3]) {
            case "visible":
              if (Rn[0].slice(-2) === "/>") {
              } else if (Rn[1] === "/") switch (str.slice(pidx, Rn.index)) {
                case "SheetHidden":
                  wsprops.Hidden = 1;
                  break;
                case "SheetVeryHidden":
                  wsprops.Hidden = 2;
                  break;
              }
              else pidx = Rn.index + Rn[0].length;
              break;
            case "header":
              if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
              if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
              break;
            case "footer":
              if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
              if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
              break;
            case "pagemargins":
              var pagemargins = parsexmltag(Rn[0]);
              if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
              if (!isNaN(+pagemargins.Top)) cursheet["!margins"].top = +pagemargins.Top;
              if (!isNaN(+pagemargins.Left)) cursheet["!margins"].left = +pagemargins.Left;
              if (!isNaN(+pagemargins.Right)) cursheet["!margins"].right = +pagemargins.Right;
              if (!isNaN(+pagemargins.Bottom)) cursheet["!margins"].bottom = +pagemargins.Bottom;
              break;
            case "displayrighttoleft":
              if (!Workbook.Views) Workbook.Views = [];
              if (!Workbook.Views[0]) Workbook.Views[0] = {};
              Workbook.Views[0].RTL = true;
              break;
            case "freezepanes":
              break;
            case "frozennosplit":
              break;
            case "splithorizontal":
            case "splitvertical":
              break;
            case "donotdisplaygridlines":
              break;
            case "activerow":
              break;
            case "activecol":
              break;
            case "toprowbottompane":
              break;
            case "leftcolumnrightpane":
              break;
            case "unsynced":
              break;
            case "print":
              break;
            case "printerrors":
              break;
            case "panes":
              break;
            case "scale":
              break;
            case "pane":
              break;
            case "number":
              break;
            case "layout":
              break;
            case "pagesetup":
              break;
            case "selected":
              break;
            case "protectobjects":
              break;
            case "enableselection":
              break;
            case "protectscenarios":
              break;
            case "validprinterinfo":
              break;
            case "horizontalresolution":
              break;
            case "verticalresolution":
              break;
            case "numberofcopies":
              break;
            case "activepane":
              break;
            case "toprowvisible":
              break;
            case "leftcolumnvisible":
              break;
            case "fittopage":
              break;
            case "rangeselection":
              break;
            case "papersizeindex":
              break;
            case "pagelayoutzoom":
              break;
            case "pagebreakzoom":
              break;
            case "filteron":
              break;
            case "fitwidth":
              break;
            case "fitheight":
              break;
            case "commentslayout":
              break;
            case "zoom":
              break;
            case "lefttoright":
              break;
            case "gridlines":
              break;
            case "allowsort":
              break;
            case "allowfilter":
              break;
            case "allowinsertrows":
              break;
            case "allowdeleterows":
              break;
            case "allowinsertcols":
              break;
            case "allowdeletecols":
              break;
            case "allowinserthyperlinks":
              break;
            case "allowformatcells":
              break;
            case "allowsizecols":
              break;
            case "allowsizerows":
              break;
            case "nosummaryrowsbelowdetail":
              if (!cursheet["!outline"]) cursheet["!outline"] = {};
              cursheet["!outline"].above = true;
              break;
            case "tabcolorindex":
              break;
            case "donotdisplayheadings":
              break;
            case "showpagelayoutzoom":
              break;
            case "nosummarycolumnsrightdetail":
              if (!cursheet["!outline"]) cursheet["!outline"] = {};
              cursheet["!outline"].left = true;
              break;
            case "blackandwhite":
              break;
            case "donotdisplayzeros":
              break;
            case "displaypagebreak":
              break;
            case "rowcolheadings":
              break;
            case "donotdisplayoutline":
              break;
            case "noorientation":
              break;
            case "allowusepivottables":
              break;
            case "zeroheight":
              break;
            case "viewablerange":
              break;
            case "selection":
              break;
            case "protectcontents":
              break;
            default:
              seen = false;
          }
          break;
        /* PivotTable */
        case "pivottable":
        case "pivotcache":
          switch (Rn[3]) {
            case "immediateitemsondrop":
              break;
            case "showpagemultipleitemlabel":
              break;
            case "compactrowindent":
              break;
            case "location":
              break;
            case "pivotfield":
              break;
            case "orientation":
              break;
            case "layoutform":
              break;
            case "layoutsubtotallocation":
              break;
            case "layoutcompactrow":
              break;
            case "position":
              break;
            case "pivotitem":
              break;
            case "datatype":
              break;
            case "datafield":
              break;
            case "sourcename":
              break;
            case "parentfield":
              break;
            case "ptlineitems":
              break;
            case "ptlineitem":
              break;
            case "countofsameitems":
              break;
            case "item":
              break;
            case "itemtype":
              break;
            case "ptsource":
              break;
            case "cacheindex":
              break;
            case "consolidationreference":
              break;
            case "filename":
              break;
            case "reference":
              break;
            case "nocolumngrand":
              break;
            case "norowgrand":
              break;
            case "blanklineafteritems":
              break;
            case "hidden":
              break;
            case "subtotal":
              break;
            case "basefield":
              break;
            case "mapchilditems":
              break;
            case "function":
              break;
            case "refreshonfileopen":
              break;
            case "printsettitles":
              break;
            case "mergelabels":
              break;
            case "defaultversion":
              break;
            case "refreshname":
              break;
            case "refreshdate":
              break;
            case "refreshdatecopy":
              break;
            case "versionlastrefresh":
              break;
            case "versionlastupdate":
              break;
            case "versionupdateablemin":
              break;
            case "versionrefreshablemin":
              break;
            case "calculation":
              break;
            default:
              seen = false;
          }
          break;
        /* PageBreaks */
        case "pagebreaks":
          switch (Rn[3]) {
            case "colbreaks":
              break;
            case "colbreak":
              break;
            case "rowbreaks":
              break;
            case "rowbreak":
              break;
            case "colstart":
              break;
            case "colend":
              break;
            case "rowend":
              break;
            default:
              seen = false;
          }
          break;
        /* AutoFilter */
        case "autofilter":
          switch (Rn[3]) {
            case "autofiltercolumn":
              break;
            case "autofiltercondition":
              break;
            case "autofilterand":
              break;
            case "autofilteror":
              break;
            default:
              seen = false;
          }
          break;
        /* QueryTable */
        case "querytable":
          switch (Rn[3]) {
            case "id":
              break;
            case "autoformatfont":
              break;
            case "autoformatpattern":
              break;
            case "querysource":
              break;
            case "querytype":
              break;
            case "enableredirections":
              break;
            case "refreshedinxl9":
              break;
            case "urlstring":
              break;
            case "htmltables":
              break;
            case "connection":
              break;
            case "commandtext":
              break;
            case "refreshinfo":
              break;
            case "notitles":
              break;
            case "nextid":
              break;
            case "columninfo":
              break;
            case "overwritecells":
              break;
            case "donotpromptforfile":
              break;
            case "textwizardsettings":
              break;
            case "source":
              break;
            case "number":
              break;
            case "decimal":
              break;
            case "thousandseparator":
              break;
            case "trailingminusnumbers":
              break;
            case "formatsettings":
              break;
            case "fieldtype":
              break;
            case "delimiters":
              break;
            case "tab":
              break;
            case "comma":
              break;
            case "autoformatname":
              break;
            case "versionlastedit":
              break;
            case "versionlastrefresh":
              break;
            default:
              seen = false;
          }
          break;
        case "datavalidation":
          switch (Rn[3]) {
            case "range":
              break;
            case "type":
              break;
            case "min":
              break;
            case "max":
              break;
            case "sort":
              break;
            case "descending":
              break;
            case "order":
              break;
            case "casesensitive":
              break;
            case "value":
              break;
            case "errorstyle":
              break;
            case "errormessage":
              break;
            case "errortitle":
              break;
            case "inputmessage":
              break;
            case "inputtitle":
              break;
            case "combohide":
              break;
            case "inputhide":
              break;
            case "condition":
              break;
            case "qualifier":
              break;
            case "useblank":
              break;
            case "value1":
              break;
            case "value2":
              break;
            case "format":
              break;
            case "cellrangelist":
              break;
            default:
              seen = false;
          }
          break;
        case "sorting":
        case "conditionalformatting":
          switch (Rn[3]) {
            case "range":
              break;
            case "type":
              break;
            case "min":
              break;
            case "max":
              break;
            case "sort":
              break;
            case "descending":
              break;
            case "order":
              break;
            case "casesensitive":
              break;
            case "value":
              break;
            case "errorstyle":
              break;
            case "errormessage":
              break;
            case "errortitle":
              break;
            case "cellrangelist":
              break;
            case "inputmessage":
              break;
            case "inputtitle":
              break;
            case "combohide":
              break;
            case "inputhide":
              break;
            case "condition":
              break;
            case "qualifier":
              break;
            case "useblank":
              break;
            case "value1":
              break;
            case "value2":
              break;
            case "format":
              break;
            default:
              seen = false;
          }
          break;
        /* MapInfo (schema) */
        case "mapinfo":
        case "schema":
        case "data":
          switch (Rn[3]) {
            case "map":
              break;
            case "entry":
              break;
            case "range":
              break;
            case "xpath":
              break;
            case "field":
              break;
            case "xsdtype":
              break;
            case "filteron":
              break;
            case "aggregate":
              break;
            case "elementtype":
              break;
            case "attributetype":
              break;
            /* These are from xsd (XML Schema Definition) */
            case "schema":
            case "element":
            case "complextype":
            case "datatype":
            case "all":
            case "attribute":
            case "extends":
              break;
            case "row":
              break;
            default:
              seen = false;
          }
          break;
        /* SmartTags (can be anything) */
        case "smarttags":
          break;
        default:
          seen = false;
          break;
      }
      if (seen) break;
      if (Rn[3].match(/!\[CDATA/)) break;
      if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
      if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/
      "customdocumentproperties") {
        if (Rn[0].slice(-2) === "/>") break;
        else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
        else {
          cp = Rn;
          pidx = Rn.index + Rn[0].length;
        }
        break;
      }
      if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
  }
  var out = {};
  if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
  out.SheetNames = sheetnames;
  out.Workbook = Workbook;
  out.SSF = dup(table_fmt);
  out.Props = Props;
  out.Custprops = Custprops;
  return out;
}
__name(parse_xlml_xml, "parse_xlml_xml");
function parse_xlml(data, opts) {
  fix_read_opts(opts = opts || {});
  switch (opts.type || "base64") {
    case "base64":
      return parse_xlml_xml(Base64_decode(data), opts);
    case "binary":
    case "buffer":
    case "file":
      return parse_xlml_xml(data, opts);
    case "array":
      return parse_xlml_xml(a2s(data), opts);
  }
}
__name(parse_xlml, "parse_xlml");
function parse_compobj(obj) {
  var v = {};
  var o = obj.content;
  o.l = 28;
  v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
  v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
  if (o.length - o.l <= 4) return v;
  var m = o.read_shift(4);
  if (m == 0 || m > 40) return v;
  o.l -= 4;
  v.Reserved1 = o.read_shift(0, "lpstr-ansi");
  if (o.length - o.l <= 4) return v;
  m = o.read_shift(4);
  if (m !== 1907505652) return v;
  v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
  m = o.read_shift(4);
  if (m == 0 || m > 40) return v;
  o.l -= 4;
  v.Reserved2 = o.read_shift(0, "lpwstr");
}
__name(parse_compobj, "parse_compobj");
var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
function slurp(RecordType, R, blob2, length, opts) {
  var l = length;
  var bufs = [];
  var d = blob2.slice(blob2.l, blob2.l + l);
  if (opts && opts.enc && opts.enc.insitu && d.length > 0) switch (RecordType) {
    case 9:
    case 521:
    case 1033:
    case 2057:
    case 47:
    case 405:
    case 225:
    case 406:
    case 312:
    case 404:
    case 10:
      break;
    case 133:
      break;
    default:
      opts.enc.insitu(d);
  }
  bufs.push(d);
  blob2.l += l;
  var nextrt = __readUInt16LE(blob2, blob2.l), next = XLSRecordEnum[nextrt];
  var start = 0;
  while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
    l = __readUInt16LE(blob2, blob2.l + 2);
    start = blob2.l + 4;
    if (nextrt == 2066) start += 4;
    else if (nextrt == 2165 || nextrt == 2175) {
      start += 12;
    }
    d = blob2.slice(start, blob2.l + 4 + l);
    bufs.push(d);
    blob2.l += 4 + l;
    next = XLSRecordEnum[nextrt = __readUInt16LE(blob2, blob2.l)];
  }
  var b = bconcat(bufs);
  prep_blob(b, 0);
  var ll = 0;
  b.lens = [];
  for (var j = 0; j < bufs.length; ++j) {
    b.lens.push(ll);
    ll += bufs[j].length;
  }
  if (b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
  return R.f(b, b.length, opts);
}
__name(slurp, "slurp");
function safe_format_xf(p, opts, date1904) {
  if (p.t === "z") return;
  if (!p.XF) return;
  var fmtid = 0;
  try {
    fmtid = p.z || p.XF.numFmtId || 0;
    if (opts.cellNF) p.z = table_fmt[fmtid];
  } catch (e) {
    if (opts.WTF) throw e;
  }
  if (!opts || opts.cellText !== false) try {
    if (p.t === "e") {
      p.w = p.w || BErr[p.v];
    } else if (fmtid === 0 || fmtid == "General") {
      if (p.t === "n") {
        if ((p.v | 0) === p.v) p.w = p.v.toString(10);
        else p.w = SSF_general_num(p.v);
      } else p.w = SSF_general(p.v);
    } else p.w = SSF_format(fmtid, p.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
  } catch (e) {
    if (opts.WTF) throw e;
  }
  if (opts.cellDates && fmtid && p.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
    var _d = SSF_parse_date_code(p.v);
    if (_d) {
      p.t = "d";
      p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
    }
  }
}
__name(safe_format_xf, "safe_format_xf");
function make_cell(val, ixfe, t) {
  return { v: val, ixfe, t };
}
__name(make_cell, "make_cell");
function parse_workbook(blob2, options) {
  var wb = { opts: {} };
  var Sheets = {};
  if (DENSE != null && options.dense == null) options.dense = DENSE;
  var out = options.dense ? [] : {};
  var Directory = {};
  var range2 = {};
  var last_formula = null;
  var sst = [];
  var cur_sheet = "";
  var Preamble = {};
  var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
  var sharedf = {};
  var arrayf = [];
  var temp_val;
  var country;
  var XFs = [];
  var palette = [];
  var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
  var get_rgb = /* @__PURE__ */ __name(function getrgb(icv) {
    if (icv < 8) return XLSIcv[icv];
    if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
    return XLSIcv[icv];
  }, "getrgb");
  var process_cell_style = /* @__PURE__ */ __name(function pcs(cell, line, options2) {
    var xfd = line.XF.data;
    if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles) return;
    line.s = {};
    line.s.patternType = xfd.patternType;
    var t;
    if (t = rgb2Hex(get_rgb(xfd.icvFore))) {
      line.s.fgColor = { rgb: t };
    }
    if (t = rgb2Hex(get_rgb(xfd.icvBack))) {
      line.s.bgColor = { rgb: t };
    }
  }, "pcs");
  var addcell = /* @__PURE__ */ __name(function addcell2(cell, line, options2) {
    if (file_depth > 1) return;
    if (options2.sheetRows && cell.r >= options2.sheetRows) return;
    if (options2.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options2);
    delete line.ixfe;
    delete line.XF;
    lastcell = cell;
    last_cell = encode_cell(cell);
    if (!range2 || !range2.s || !range2.e) range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
    if (cell.r < range2.s.r) range2.s.r = cell.r;
    if (cell.c < range2.s.c) range2.s.c = cell.c;
    if (cell.r + 1 > range2.e.r) range2.e.r = cell.r + 1;
    if (cell.c + 1 > range2.e.c) range2.e.c = cell.c + 1;
    if (options2.cellFormula && line.f) {
      for (var afi = 0; afi < arrayf.length; ++afi) {
        if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
        if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
        line.F = encode_range(arrayf[afi][0]);
        if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
        if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range2, cell, supbooks, opts);
        break;
      }
    }
    {
      if (options2.dense) {
        if (!out[cell.r]) out[cell.r] = [];
        out[cell.r][cell.c] = line;
      } else out[last_cell] = line;
    }
  }, "addcell");
  var opts = {
    enc: false,
    // encrypted
    sbcch: 0,
    // cch in the preceding SupBook
    snames: [],
    // sheetnames
    sharedf,
    // shared formulae by address
    arrayf,
    // array formulae array
    rrtabid: [],
    // RRTabId
    lastuser: "",
    // Last User from WriteAccess
    biff: 8,
    // BIFF version
    codepage: 0,
    // CP from CodePage record
    winlocked: 0,
    // fLockWn from WinProtect
    cellStyles: !!options && !!options.cellStyles,
    WTF: !!options && !!options.wtf
  };
  if (options.password) opts.password = options.password;
  var themes;
  var merges = [];
  var objects = [];
  var colinfo = [], rowinfo = [];
  var seencol = false;
  var supbooks = [];
  supbooks.SheetNames = opts.snames;
  supbooks.sharedf = opts.sharedf;
  supbooks.arrayf = opts.arrayf;
  supbooks.names = [];
  supbooks.XTI = [];
  var last_RT = 0;
  var file_depth = 0;
  var BIFF2Fmt = 0, BIFF2FmtTable = [];
  var FilterDatabases = [];
  var last_lbl;
  opts.codepage = 1200;
  set_cp(1200);
  var seen_codepage = false;
  while (blob2.l < blob2.length - 1) {
    var s = blob2.l;
    var RecordType = blob2.read_shift(2);
    if (RecordType === 0 && last_RT === 10) break;
    var length = blob2.l === blob2.length ? 0 : blob2.read_shift(2);
    var R = XLSRecordEnum[RecordType];
    if (R && R.f) {
      if (options.bookSheets) {
        if (last_RT === 133 && RecordType !== 133) break;
      }
      last_RT = RecordType;
      if (R.r === 2 || R.r == 12) {
        var rt = blob2.read_shift(2);
        length -= 2;
        if (!opts.enc && rt !== RecordType && ((rt & 255) << 8 | rt >> 8) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
        if (R.r == 12) {
          blob2.l += 10;
          length -= 10;
        }
      }
      var val = {};
      if (RecordType === 10) val = /*::(*/
      R.f(blob2, length, opts);
      else val = /*::(*/
      slurp(RecordType, R, blob2, length, opts);
      if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1) continue;
      switch (RecordType) {
        case 34:
          wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
          break;
        case 134:
          wb.opts.WriteProtect = true;
          break;
        case 47:
          if (!opts.enc) blob2.l = 0;
          opts.enc = val;
          if (!options.password) throw new Error("File is password-protected");
          if (val.valid == null) throw new Error("Encryption scheme unsupported");
          if (!val.valid) throw new Error("Password is incorrect");
          break;
        case 92:
          opts.lastuser = val;
          break;
        case 66:
          var cpval = Number(val);
          switch (cpval) {
            case 21010:
              cpval = 1200;
              break;
            case 32768:
              cpval = 1e4;
              break;
            case 32769:
              cpval = 1252;
              break;
          }
          set_cp(opts.codepage = cpval);
          seen_codepage = true;
          break;
        case 317:
          opts.rrtabid = val;
          break;
        case 25:
          opts.winlocked = val;
          break;
        case 439:
          wb.opts["RefreshAll"] = val;
          break;
        case 12:
          wb.opts["CalcCount"] = val;
          break;
        case 16:
          wb.opts["CalcDelta"] = val;
          break;
        case 17:
          wb.opts["CalcIter"] = val;
          break;
        case 13:
          wb.opts["CalcMode"] = val;
          break;
        case 14:
          wb.opts["CalcPrecision"] = val;
          break;
        case 95:
          wb.opts["CalcSaveRecalc"] = val;
          break;
        case 15:
          opts.CalcRefMode = val;
          break;
        // TODO: implement R1C1
        case 2211:
          wb.opts.FullCalc = val;
          break;
        case 129:
          if (val.fDialog) out["!type"] = "dialog";
          if (!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
          if (!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
          break;
        // TODO
        case 224:
          XFs.push(val);
          break;
        case 430:
          supbooks.push([val]);
          supbooks[supbooks.length - 1].XTI = [];
          break;
        case 35:
        case 547:
          supbooks[supbooks.length - 1].push(val);
          break;
        case 24:
        case 536:
          last_lbl = {
            Name: val.Name,
            Ref: stringify_formula(val.rgce, range2, null, supbooks, opts)
          };
          if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
          supbooks.names.push(last_lbl);
          if (!supbooks[0]) {
            supbooks[0] = [];
            supbooks[0].XTI = [];
          }
          supbooks[supbooks.length - 1].push(val);
          if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
            if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d")
              FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
          }
          break;
        case 22:
          opts.ExternCount = val;
          break;
        case 23:
          if (supbooks.length == 0) {
            supbooks[0] = [];
            supbooks[0].XTI = [];
          }
          supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
          supbooks.XTI = supbooks.XTI.concat(val);
          break;
        case 2196:
          if (opts.biff < 8) break;
          if (last_lbl != null) last_lbl.Comment = val[1];
          break;
        case 18:
          out["!protect"] = val;
          break;
        /* for sheet or book */
        case 19:
          if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
          break;
        case 133:
          {
            Directory[val.pos] = val;
            opts.snames.push(val.name);
          }
          break;
        case 10:
          {
            if (--file_depth) break;
            if (range2.e) {
              if (range2.e.r > 0 && range2.e.c > 0) {
                range2.e.r--;
                range2.e.c--;
                out["!ref"] = encode_range(range2);
                if (options.sheetRows && options.sheetRows <= range2.e.r) {
                  var tmpri = range2.e.r;
                  range2.e.r = options.sheetRows - 1;
                  out["!fullref"] = out["!ref"];
                  out["!ref"] = encode_range(range2);
                  range2.e.r = tmpri;
                }
                range2.e.r++;
                range2.e.c++;
              }
              if (merges.length > 0) out["!merges"] = merges;
              if (objects.length > 0) out["!objects"] = objects;
              if (colinfo.length > 0) out["!cols"] = colinfo;
              if (rowinfo.length > 0) out["!rows"] = rowinfo;
              Workbook.Sheets.push(wsprops);
            }
            if (cur_sheet === "") Preamble = out;
            else Sheets[cur_sheet] = out;
            out = options.dense ? [] : {};
          }
          break;
        case 9:
        case 521:
        case 1033:
        case 2057:
          {
            if (opts.biff === 8) opts.biff = {
              /*::[*/
              9: 2,
              /*::[*/
              521: 3,
              /*::[*/
              1033: 4
            }[RecordType] || {
              /*::[*/
              512: 2,
              /*::[*/
              768: 3,
              /*::[*/
              1024: 4,
              /*::[*/
              1280: 5,
              /*::[*/
              1536: 8,
              /*::[*/
              2: 2,
              /*::[*/
              7: 2
            }[val.BIFFVer] || 8;
            opts.biffguess = val.BIFFVer == 0;
            if (val.BIFFVer == 0 && val.dt == 4096) {
              opts.biff = 5;
              seen_codepage = true;
              set_cp(opts.codepage = 28591);
            }
            if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
            if (file_depth++) break;
            out = options.dense ? [] : {};
            if (opts.biff < 8 && !seen_codepage) {
              seen_codepage = true;
              set_cp(opts.codepage = options.codepage || 1252);
            }
            if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
              if (cur_sheet === "") cur_sheet = "Sheet1";
              range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
              var fakebs8 = { pos: blob2.l - length, name: cur_sheet };
              Directory[fakebs8.pos] = fakebs8;
              opts.snames.push(cur_sheet);
            } else cur_sheet = (Directory[s] || { name: "" }).name;
            if (val.dt == 32) out["!type"] = "chart";
            if (val.dt == 64) out["!type"] = "macro";
            merges = [];
            objects = [];
            opts.arrayf = arrayf = [];
            colinfo = [];
            rowinfo = [];
            seencol = false;
            wsprops = { Hidden: (Directory[s] || { hs: 0 }).hs, name: cur_sheet };
          }
          break;
        case 515:
        case 3:
        case 2:
          {
            if (out["!type"] == "chart") {
              if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })]) ++val.c;
            }
            temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" };
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
          }
          break;
        case 5:
        case 517:
          {
            temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t };
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
          }
          break;
        case 638:
          {
            temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" };
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
          }
          break;
        case 189:
          {
            for (var j = val.c; j <= val.C; ++j) {
              var ixfe = val.rkrec[j - val.c][0];
              temp_val = { ixfe, XF: XFs[ixfe], v: val.rkrec[j - val.c][1], t: "n" };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: j, r: val.r }, temp_val, options);
            }
          }
          break;
        case 6:
        case 518:
        case 1030:
          {
            if (val.val == "String") {
              last_formula = val;
              break;
            }
            temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
            temp_val.XF = XFs[temp_val.ixfe];
            if (options.cellFormula) {
              var _f = val.formula;
              if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                var _fe = encode_cell({ r: _fr, c: _fc });
                if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range2, val.cell, supbooks, opts);
                else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
              } else temp_val.f = "" + stringify_formula(val.formula, range2, val.cell, supbooks, opts);
            }
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell(val.cell, temp_val, options);
            last_formula = val;
          }
          break;
        case 7:
        case 519:
          {
            if (last_formula) {
              last_formula.val = val;
              temp_val = make_cell(val, last_formula.cell.ixfe, "s");
              temp_val.XF = XFs[temp_val.ixfe];
              if (options.cellFormula) {
                temp_val.f = "" + stringify_formula(last_formula.formula, range2, last_formula.cell, supbooks, opts);
              }
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell(last_formula.cell, temp_val, options);
              last_formula = null;
            } else throw new Error("String record expects Formula");
          }
          break;
        case 33:
        case 545:
          {
            arrayf.push(val);
            var _arraystart = encode_cell(val[0].s);
            cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
            if (options.cellFormula && cc) {
              if (!last_formula) break;
              if (!_arraystart || !cc) break;
              cc.f = "" + stringify_formula(val[1], range2, val[0], supbooks, opts);
              cc.F = encode_range(val[0]);
            }
          }
          break;
        case 1212:
          {
            if (!options.cellFormula) break;
            if (last_cell) {
              if (!last_formula) break;
              sharedf[encode_cell(last_formula.cell)] = val[0];
              cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
              (cc || {}).f = "" + stringify_formula(val[0], range2, lastcell, supbooks, opts);
            }
          }
          break;
        case 253:
          temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
          if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
          temp_val.XF = XFs[temp_val.ixfe];
          if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
          safe_format_xf(temp_val, options, wb.opts.Date1904);
          addcell({ c: val.c, r: val.r }, temp_val, options);
          break;
        case 513:
          if (options.sheetStubs) {
            temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" };
            if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
            safe_format_xf(temp_val, options, wb.opts.Date1904);
            addcell({ c: val.c, r: val.r }, temp_val, options);
          }
          break;
        case 190:
          if (options.sheetStubs) {
            for (var _j = val.c; _j <= val.C; ++_j) {
              var _ixfe = val.ixfe[_j - val.c];
              temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
              if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
              safe_format_xf(temp_val, options, wb.opts.Date1904);
              addcell({ c: _j, r: val.r }, temp_val, options);
            }
          }
          break;
        case 214:
        case 516:
        case 4:
          temp_val = make_cell(val.val, val.ixfe, "s");
          temp_val.XF = XFs[temp_val.ixfe];
          if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
          safe_format_xf(temp_val, options, wb.opts.Date1904);
          addcell({ c: val.c, r: val.r }, temp_val, options);
          break;
        case 0:
        case 512:
          {
            if (file_depth === 1) range2 = val;
          }
          break;
        case 252:
          {
            sst = val;
          }
          break;
        case 1054:
          {
            if (opts.biff == 4) {
              BIFF2FmtTable[BIFF2Fmt++] = val[1];
              for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if (table_fmt[b4idx] == val[1]) break;
              if (b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
            } else SSF_load(val[1], val[0]);
          }
          break;
        case 30:
          {
            BIFF2FmtTable[BIFF2Fmt++] = val;
            for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if (table_fmt[b2idx] == val) break;
            if (b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
          }
          break;
        case 229:
          merges = merges.concat(val);
          break;
        case 93:
          objects[val.cmo[0]] = opts.lastobj = val;
          break;
        case 438:
          opts.lastobj.TxO = val;
          break;
        case 127:
          opts.lastobj.ImData = val;
          break;
        case 440:
          {
            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
              for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                if (cc) cc.l = val[1];
              }
          }
          break;
        case 2048:
          {
            for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
              for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                if (cc && cc.l) cc.l.Tooltip = val[1];
              }
          }
          break;
        case 28:
          {
            if (opts.biff <= 5 && opts.biff >= 2) break;
            cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
            var noteobj = objects[val[2]];
            if (!cc) {
              if (options.dense) {
                if (!out[val[0].r]) out[val[0].r] = [];
                cc = out[val[0].r][val[0].c] = { t: "z" };
              } else {
                cc = out[encode_cell(val[0])] = { t: "z" };
              }
              range2.e.r = Math.max(range2.e.r, val[0].r);
              range2.s.r = Math.min(range2.s.r, val[0].r);
              range2.e.c = Math.max(range2.e.c, val[0].c);
              range2.s.c = Math.min(range2.s.c, val[0].c);
            }
            if (!cc.c) cc.c = [];
            cmnt = { a: val[1], t: noteobj.TxO.t };
            cc.c.push(cmnt);
          }
          break;
        case 2173:
          update_xfext(XFs[val.ixfe], val.ext);
          break;
        case 125:
          {
            if (!opts.cellStyles) break;
            while (val.e >= val.s) {
              colinfo[val.e--] = { width: val.w / 256, level: val.level || 0, hidden: !!(val.flags & 1) };
              if (!seencol) {
                seencol = true;
                find_mdw_colw(val.w / 256);
              }
              process_col(colinfo[val.e + 1]);
            }
          }
          break;
        case 520:
          {
            var rowobj = {};
            if (val.level != null) {
              rowinfo[val.r] = rowobj;
              rowobj.level = val.level;
            }
            if (val.hidden) {
              rowinfo[val.r] = rowobj;
              rowobj.hidden = true;
            }
            if (val.hpt) {
              rowinfo[val.r] = rowobj;
              rowobj.hpt = val.hpt;
              rowobj.hpx = pt2px(val.hpt);
            }
          }
          break;
        case 38:
        case 39:
        case 40:
        case 41:
          if (!out["!margins"]) default_margins(out["!margins"] = {});
          out["!margins"][{ 38: "left", 39: "right", 40: "top", 41: "bottom" }[RecordType]] = val;
          break;
        case 161:
          if (!out["!margins"]) default_margins(out["!margins"] = {});
          out["!margins"].header = val.header;
          out["!margins"].footer = val.footer;
          break;
        case 574:
          if (val.RTL) Workbook.Views[0].RTL = true;
          break;
        case 146:
          palette = val;
          break;
        case 2198:
          themes = val;
          break;
        case 140:
          country = val;
          break;
        case 442:
          {
            if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
            else wsprops.CodeName = val || wsprops.name;
          }
          break;
      }
    } else {
      if (!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
      blob2.l += length;
    }
  }
  wb.SheetNames = keys(Directory).sort(function(a, b) {
    return Number(a) - Number(b);
  }).map(function(x) {
    return Directory[x].name;
  });
  if (!options.bookSheets) wb.Sheets = Sheets;
  if (!wb.SheetNames.length && Preamble["!ref"]) {
    wb.SheetNames.push("Sheet1");
    if (wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
  } else wb.Preamble = Preamble;
  if (wb.Sheets) FilterDatabases.forEach(function(r, i) {
    wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r;
  });
  wb.Strings = sst;
  wb.SSF = dup(table_fmt);
  if (opts.enc) wb.Encryption = opts.enc;
  if (themes) wb.Themes = themes;
  wb.Metadata = {};
  if (country !== void 0) wb.Metadata.Country = country;
  if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
  wb.Workbook = Workbook;
  return wb;
}
__name(parse_workbook, "parse_workbook");
var PSCLSID = {
  SI: "e0859ff2f94f6810ab9108002b27b3d9",
  DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
  UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
};
function parse_xls_props(cfb, props, o) {
  var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
  if (DSI && DSI.size > 0) try {
    var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
    for (var d in DocSummary) props[d] = DocSummary[d];
  } catch (e) {
    if (o.WTF) throw e;
  }
  var SI = CFB.find(cfb, "/!SummaryInformation");
  if (SI && SI.size > 0) try {
    var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
    for (var s in Summary) if (props[s] == null) props[s] = Summary[s];
  } catch (e) {
    if (o.WTF) throw e;
  }
  if (props.HeadingPairs && props.TitlesOfParts) {
    load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
    delete props.HeadingPairs;
    delete props.TitlesOfParts;
  }
}
__name(parse_xls_props, "parse_xls_props");
function parse_xlscfb(cfb, options) {
  if (!options) options = {};
  fix_read_opts(options);
  reset_cp();
  if (options.codepage) set_ansi(options.codepage);
  var CompObj, WB;
  if (cfb.FullPaths) {
    if (CFB.find(cfb, "/encryption")) throw new Error("File is password-protected");
    CompObj = CFB.find(cfb, "!CompObj");
    WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
  } else {
    switch (options.type) {
      case "base64":
        cfb = s2a(Base64_decode(cfb));
        break;
      case "binary":
        cfb = s2a(cfb);
        break;
      case "buffer":
        break;
      case "array":
        if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
        break;
    }
    prep_blob(cfb, 0);
    WB = { content: cfb };
  }
  var WorkbookP;
  var _data;
  if (CompObj) parse_compobj(CompObj);
  if (options.bookProps && !options.bookSheets) WorkbookP = {};
  else {
    var T = has_buf ? "buffer" : "array";
    if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
    else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    else if ((_data = CFB.find(cfb, "MN0")) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
    else throw new Error("Cannot find Workbook stream");
    if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir")) WorkbookP.vbaraw = make_vba_xls(cfb);
  }
  var props = {};
  if (cfb.FullPaths) parse_xls_props(
    /*::((*/
    cfb,
    props,
    options
  );
  WorkbookP.Props = WorkbookP.Custprops = props;
  if (options.bookFiles) WorkbookP.cfb = cfb;
  return WorkbookP;
}
__name(parse_xlscfb, "parse_xlscfb");
var XLSBRecordEnum = {
  /*::[*/
  0: {
    /* n:"BrtRowHdr", */
    f: parse_BrtRowHdr
  },
  /*::[*/
  1: {
    /* n:"BrtCellBlank", */
    f: parse_BrtCellBlank
  },
  /*::[*/
  2: {
    /* n:"BrtCellRk", */
    f: parse_BrtCellRk
  },
  /*::[*/
  3: {
    /* n:"BrtCellError", */
    f: parse_BrtCellError
  },
  /*::[*/
  4: {
    /* n:"BrtCellBool", */
    f: parse_BrtCellBool
  },
  /*::[*/
  5: {
    /* n:"BrtCellReal", */
    f: parse_BrtCellReal
  },
  /*::[*/
  6: {
    /* n:"BrtCellSt", */
    f: parse_BrtCellSt
  },
  /*::[*/
  7: {
    /* n:"BrtCellIsst", */
    f: parse_BrtCellIsst
  },
  /*::[*/
  8: {
    /* n:"BrtFmlaString", */
    f: parse_BrtFmlaString
  },
  /*::[*/
  9: {
    /* n:"BrtFmlaNum", */
    f: parse_BrtFmlaNum
  },
  /*::[*/
  10: {
    /* n:"BrtFmlaBool", */
    f: parse_BrtFmlaBool
  },
  /*::[*/
  11: {
    /* n:"BrtFmlaError", */
    f: parse_BrtFmlaError
  },
  /*::[*/
  12: {
    /* n:"BrtShortBlank", */
    f: parse_BrtShortBlank
  },
  /*::[*/
  13: {
    /* n:"BrtShortRk", */
    f: parse_BrtShortRk
  },
  /*::[*/
  14: {
    /* n:"BrtShortError", */
    f: parse_BrtShortError
  },
  /*::[*/
  15: {
    /* n:"BrtShortBool", */
    f: parse_BrtShortBool
  },
  /*::[*/
  16: {
    /* n:"BrtShortReal", */
    f: parse_BrtShortReal
  },
  /*::[*/
  17: {
    /* n:"BrtShortSt", */
    f: parse_BrtShortSt
  },
  /*::[*/
  18: {
    /* n:"BrtShortIsst", */
    f: parse_BrtShortIsst
  },
  /*::[*/
  19: {
    /* n:"BrtSSTItem", */
    f: parse_RichStr
  },
  /*::[*/
  20: {
    /* n:"BrtPCDIMissing" */
  },
  /*::[*/
  21: {
    /* n:"BrtPCDINumber" */
  },
  /*::[*/
  22: {
    /* n:"BrtPCDIBoolean" */
  },
  /*::[*/
  23: {
    /* n:"BrtPCDIError" */
  },
  /*::[*/
  24: {
    /* n:"BrtPCDIString" */
  },
  /*::[*/
  25: {
    /* n:"BrtPCDIDatetime" */
  },
  /*::[*/
  26: {
    /* n:"BrtPCDIIndex" */
  },
  /*::[*/
  27: {
    /* n:"BrtPCDIAMissing" */
  },
  /*::[*/
  28: {
    /* n:"BrtPCDIANumber" */
  },
  /*::[*/
  29: {
    /* n:"BrtPCDIABoolean" */
  },
  /*::[*/
  30: {
    /* n:"BrtPCDIAError" */
  },
  /*::[*/
  31: {
    /* n:"BrtPCDIAString" */
  },
  /*::[*/
  32: {
    /* n:"BrtPCDIADatetime" */
  },
  /*::[*/
  33: {
    /* n:"BrtPCRRecord" */
  },
  /*::[*/
  34: {
    /* n:"BrtPCRRecordDt" */
  },
  /*::[*/
  35: {
    /* n:"BrtFRTBegin", */
    T: 1
  },
  /*::[*/
  36: {
    /* n:"BrtFRTEnd", */
    T: -1
  },
  /*::[*/
  37: {
    /* n:"BrtACBegin", */
    T: 1
  },
  /*::[*/
  38: {
    /* n:"BrtACEnd", */
    T: -1
  },
  /*::[*/
  39: {
    /* n:"BrtName", */
    f: parse_BrtName
  },
  /*::[*/
  40: {
    /* n:"BrtIndexRowBlock" */
  },
  /*::[*/
  42: {
    /* n:"BrtIndexBlock" */
  },
  /*::[*/
  43: {
    /* n:"BrtFont", */
    f: parse_BrtFont
  },
  /*::[*/
  44: {
    /* n:"BrtFmt", */
    f: parse_BrtFmt
  },
  /*::[*/
  45: {
    /* n:"BrtFill", */
    f: parse_BrtFill
  },
  /*::[*/
  46: {
    /* n:"BrtBorder", */
    f: parse_BrtBorder
  },
  /*::[*/
  47: {
    /* n:"BrtXF", */
    f: parse_BrtXF
  },
  /*::[*/
  48: {
    /* n:"BrtStyle" */
  },
  /*::[*/
  49: {
    /* n:"BrtCellMeta", */
    f: parse_Int32LE
  },
  /*::[*/
  50: {
    /* n:"BrtValueMeta" */
  },
  /*::[*/
  51: {
    /* n:"BrtMdb" */
    f: parse_BrtMdb
  },
  /*::[*/
  52: {
    /* n:"BrtBeginFmd", */
    T: 1
  },
  /*::[*/
  53: {
    /* n:"BrtEndFmd", */
    T: -1
  },
  /*::[*/
  54: {
    /* n:"BrtBeginMdx", */
    T: 1
  },
  /*::[*/
  55: {
    /* n:"BrtEndMdx", */
    T: -1
  },
  /*::[*/
  56: {
    /* n:"BrtBeginMdxTuple", */
    T: 1
  },
  /*::[*/
  57: {
    /* n:"BrtEndMdxTuple", */
    T: -1
  },
  /*::[*/
  58: {
    /* n:"BrtMdxMbrIstr" */
  },
  /*::[*/
  59: {
    /* n:"BrtStr" */
  },
  /*::[*/
  60: {
    /* n:"BrtColInfo", */
    f: parse_ColInfo
  },
  /*::[*/
  62: {
    /* n:"BrtCellRString", */
    f: parse_BrtCellRString
  },
  /*::[*/
  63: {
    /* n:"BrtCalcChainItem$", */
    f: parse_BrtCalcChainItem$
  },
  /*::[*/
  64: {
    /* n:"BrtDVal", */
    f: parse_BrtDVal
  },
  /*::[*/
  65: {
    /* n:"BrtSxvcellNum" */
  },
  /*::[*/
  66: {
    /* n:"BrtSxvcellStr" */
  },
  /*::[*/
  67: {
    /* n:"BrtSxvcellBool" */
  },
  /*::[*/
  68: {
    /* n:"BrtSxvcellErr" */
  },
  /*::[*/
  69: {
    /* n:"BrtSxvcellDate" */
  },
  /*::[*/
  70: {
    /* n:"BrtSxvcellNil" */
  },
  /*::[*/
  128: {
    /* n:"BrtFileVersion" */
  },
  /*::[*/
  129: {
    /* n:"BrtBeginSheet", */
    T: 1
  },
  /*::[*/
  130: {
    /* n:"BrtEndSheet", */
    T: -1
  },
  /*::[*/
  131: {
    /* n:"BrtBeginBook", */
    T: 1,
    f: parsenoop,
    p: 0
  },
  /*::[*/
  132: {
    /* n:"BrtEndBook", */
    T: -1
  },
  /*::[*/
  133: {
    /* n:"BrtBeginWsViews", */
    T: 1
  },
  /*::[*/
  134: {
    /* n:"BrtEndWsViews", */
    T: -1
  },
  /*::[*/
  135: {
    /* n:"BrtBeginBookViews", */
    T: 1
  },
  /*::[*/
  136: {
    /* n:"BrtEndBookViews", */
    T: -1
  },
  /*::[*/
  137: {
    /* n:"BrtBeginWsView", */
    T: 1,
    f: parse_BrtBeginWsView
  },
  /*::[*/
  138: {
    /* n:"BrtEndWsView", */
    T: -1
  },
  /*::[*/
  139: {
    /* n:"BrtBeginCsViews", */
    T: 1
  },
  /*::[*/
  140: {
    /* n:"BrtEndCsViews", */
    T: -1
  },
  /*::[*/
  141: {
    /* n:"BrtBeginCsView", */
    T: 1
  },
  /*::[*/
  142: {
    /* n:"BrtEndCsView", */
    T: -1
  },
  /*::[*/
  143: {
    /* n:"BrtBeginBundleShs", */
    T: 1
  },
  /*::[*/
  144: {
    /* n:"BrtEndBundleShs", */
    T: -1
  },
  /*::[*/
  145: {
    /* n:"BrtBeginSheetData", */
    T: 1
  },
  /*::[*/
  146: {
    /* n:"BrtEndSheetData", */
    T: -1
  },
  /*::[*/
  147: {
    /* n:"BrtWsProp", */
    f: parse_BrtWsProp
  },
  /*::[*/
  148: {
    /* n:"BrtWsDim", */
    f: parse_BrtWsDim,
    p: 16
  },
  /*::[*/
  151: {
    /* n:"BrtPane", */
    f: parse_BrtPane
  },
  /*::[*/
  152: {
    /* n:"BrtSel" */
  },
  /*::[*/
  153: {
    /* n:"BrtWbProp", */
    f: parse_BrtWbProp
  },
  /*::[*/
  154: {
    /* n:"BrtWbFactoid" */
  },
  /*::[*/
  155: {
    /* n:"BrtFileRecover" */
  },
  /*::[*/
  156: {
    /* n:"BrtBundleSh", */
    f: parse_BrtBundleSh
  },
  /*::[*/
  157: {
    /* n:"BrtCalcProp" */
  },
  /*::[*/
  158: {
    /* n:"BrtBookView" */
  },
  /*::[*/
  159: {
    /* n:"BrtBeginSst", */
    T: 1,
    f: parse_BrtBeginSst
  },
  /*::[*/
  160: {
    /* n:"BrtEndSst", */
    T: -1
  },
  /*::[*/
  161: {
    /* n:"BrtBeginAFilter", */
    T: 1,
    f: parse_UncheckedRfX
  },
  /*::[*/
  162: {
    /* n:"BrtEndAFilter", */
    T: -1
  },
  /*::[*/
  163: {
    /* n:"BrtBeginFilterColumn", */
    T: 1
  },
  /*::[*/
  164: {
    /* n:"BrtEndFilterColumn", */
    T: -1
  },
  /*::[*/
  165: {
    /* n:"BrtBeginFilters", */
    T: 1
  },
  /*::[*/
  166: {
    /* n:"BrtEndFilters", */
    T: -1
  },
  /*::[*/
  167: {
    /* n:"BrtFilter" */
  },
  /*::[*/
  168: {
    /* n:"BrtColorFilter" */
  },
  /*::[*/
  169: {
    /* n:"BrtIconFilter" */
  },
  /*::[*/
  170: {
    /* n:"BrtTop10Filter" */
  },
  /*::[*/
  171: {
    /* n:"BrtDynamicFilter" */
  },
  /*::[*/
  172: {
    /* n:"BrtBeginCustomFilters", */
    T: 1
  },
  /*::[*/
  173: {
    /* n:"BrtEndCustomFilters", */
    T: -1
  },
  /*::[*/
  174: {
    /* n:"BrtCustomFilter" */
  },
  /*::[*/
  175: {
    /* n:"BrtAFilterDateGroupItem" */
  },
  /*::[*/
  176: {
    /* n:"BrtMergeCell", */
    f: parse_BrtMergeCell
  },
  /*::[*/
  177: {
    /* n:"BrtBeginMergeCells", */
    T: 1
  },
  /*::[*/
  178: {
    /* n:"BrtEndMergeCells", */
    T: -1
  },
  /*::[*/
  179: {
    /* n:"BrtBeginPivotCacheDef", */
    T: 1
  },
  /*::[*/
  180: {
    /* n:"BrtEndPivotCacheDef", */
    T: -1
  },
  /*::[*/
  181: {
    /* n:"BrtBeginPCDFields", */
    T: 1
  },
  /*::[*/
  182: {
    /* n:"BrtEndPCDFields", */
    T: -1
  },
  /*::[*/
  183: {
    /* n:"BrtBeginPCDField", */
    T: 1
  },
  /*::[*/
  184: {
    /* n:"BrtEndPCDField", */
    T: -1
  },
  /*::[*/
  185: {
    /* n:"BrtBeginPCDSource", */
    T: 1
  },
  /*::[*/
  186: {
    /* n:"BrtEndPCDSource", */
    T: -1
  },
  /*::[*/
  187: {
    /* n:"BrtBeginPCDSRange", */
    T: 1
  },
  /*::[*/
  188: {
    /* n:"BrtEndPCDSRange", */
    T: -1
  },
  /*::[*/
  189: {
    /* n:"BrtBeginPCDFAtbl", */
    T: 1
  },
  /*::[*/
  190: {
    /* n:"BrtEndPCDFAtbl", */
    T: -1
  },
  /*::[*/
  191: {
    /* n:"BrtBeginPCDIRun", */
    T: 1
  },
  /*::[*/
  192: {
    /* n:"BrtEndPCDIRun", */
    T: -1
  },
  /*::[*/
  193: {
    /* n:"BrtBeginPivotCacheRecords", */
    T: 1
  },
  /*::[*/
  194: {
    /* n:"BrtEndPivotCacheRecords", */
    T: -1
  },
  /*::[*/
  195: {
    /* n:"BrtBeginPCDHierarchies", */
    T: 1
  },
  /*::[*/
  196: {
    /* n:"BrtEndPCDHierarchies", */
    T: -1
  },
  /*::[*/
  197: {
    /* n:"BrtBeginPCDHierarchy", */
    T: 1
  },
  /*::[*/
  198: {
    /* n:"BrtEndPCDHierarchy", */
    T: -1
  },
  /*::[*/
  199: {
    /* n:"BrtBeginPCDHFieldsUsage", */
    T: 1
  },
  /*::[*/
  200: {
    /* n:"BrtEndPCDHFieldsUsage", */
    T: -1
  },
  /*::[*/
  201: {
    /* n:"BrtBeginExtConnection", */
    T: 1
  },
  /*::[*/
  202: {
    /* n:"BrtEndExtConnection", */
    T: -1
  },
  /*::[*/
  203: {
    /* n:"BrtBeginECDbProps", */
    T: 1
  },
  /*::[*/
  204: {
    /* n:"BrtEndECDbProps", */
    T: -1
  },
  /*::[*/
  205: {
    /* n:"BrtBeginECOlapProps", */
    T: 1
  },
  /*::[*/
  206: {
    /* n:"BrtEndECOlapProps", */
    T: -1
  },
  /*::[*/
  207: {
    /* n:"BrtBeginPCDSConsol", */
    T: 1
  },
  /*::[*/
  208: {
    /* n:"BrtEndPCDSConsol", */
    T: -1
  },
  /*::[*/
  209: {
    /* n:"BrtBeginPCDSCPages", */
    T: 1
  },
  /*::[*/
  210: {
    /* n:"BrtEndPCDSCPages", */
    T: -1
  },
  /*::[*/
  211: {
    /* n:"BrtBeginPCDSCPage", */
    T: 1
  },
  /*::[*/
  212: {
    /* n:"BrtEndPCDSCPage", */
    T: -1
  },
  /*::[*/
  213: {
    /* n:"BrtBeginPCDSCPItem", */
    T: 1
  },
  /*::[*/
  214: {
    /* n:"BrtEndPCDSCPItem", */
    T: -1
  },
  /*::[*/
  215: {
    /* n:"BrtBeginPCDSCSets", */
    T: 1
  },
  /*::[*/
  216: {
    /* n:"BrtEndPCDSCSets", */
    T: -1
  },
  /*::[*/
  217: {
    /* n:"BrtBeginPCDSCSet", */
    T: 1
  },
  /*::[*/
  218: {
    /* n:"BrtEndPCDSCSet", */
    T: -1
  },
  /*::[*/
  219: {
    /* n:"BrtBeginPCDFGroup", */
    T: 1
  },
  /*::[*/
  220: {
    /* n:"BrtEndPCDFGroup", */
    T: -1
  },
  /*::[*/
  221: {
    /* n:"BrtBeginPCDFGItems", */
    T: 1
  },
  /*::[*/
  222: {
    /* n:"BrtEndPCDFGItems", */
    T: -1
  },
  /*::[*/
  223: {
    /* n:"BrtBeginPCDFGRange", */
    T: 1
  },
  /*::[*/
  224: {
    /* n:"BrtEndPCDFGRange", */
    T: -1
  },
  /*::[*/
  225: {
    /* n:"BrtBeginPCDFGDiscrete", */
    T: 1
  },
  /*::[*/
  226: {
    /* n:"BrtEndPCDFGDiscrete", */
    T: -1
  },
  /*::[*/
  227: {
    /* n:"BrtBeginPCDSDTupleCache", */
    T: 1
  },
  /*::[*/
  228: {
    /* n:"BrtEndPCDSDTupleCache", */
    T: -1
  },
  /*::[*/
  229: {
    /* n:"BrtBeginPCDSDTCEntries", */
    T: 1
  },
  /*::[*/
  230: {
    /* n:"BrtEndPCDSDTCEntries", */
    T: -1
  },
  /*::[*/
  231: {
    /* n:"BrtBeginPCDSDTCEMembers", */
    T: 1
  },
  /*::[*/
  232: {
    /* n:"BrtEndPCDSDTCEMembers", */
    T: -1
  },
  /*::[*/
  233: {
    /* n:"BrtBeginPCDSDTCEMember", */
    T: 1
  },
  /*::[*/
  234: {
    /* n:"BrtEndPCDSDTCEMember", */
    T: -1
  },
  /*::[*/
  235: {
    /* n:"BrtBeginPCDSDTCQueries", */
    T: 1
  },
  /*::[*/
  236: {
    /* n:"BrtEndPCDSDTCQueries", */
    T: -1
  },
  /*::[*/
  237: {
    /* n:"BrtBeginPCDSDTCQuery", */
    T: 1
  },
  /*::[*/
  238: {
    /* n:"BrtEndPCDSDTCQuery", */
    T: -1
  },
  /*::[*/
  239: {
    /* n:"BrtBeginPCDSDTCSets", */
    T: 1
  },
  /*::[*/
  240: {
    /* n:"BrtEndPCDSDTCSets", */
    T: -1
  },
  /*::[*/
  241: {
    /* n:"BrtBeginPCDSDTCSet", */
    T: 1
  },
  /*::[*/
  242: {
    /* n:"BrtEndPCDSDTCSet", */
    T: -1
  },
  /*::[*/
  243: {
    /* n:"BrtBeginPCDCalcItems", */
    T: 1
  },
  /*::[*/
  244: {
    /* n:"BrtEndPCDCalcItems", */
    T: -1
  },
  /*::[*/
  245: {
    /* n:"BrtBeginPCDCalcItem", */
    T: 1
  },
  /*::[*/
  246: {
    /* n:"BrtEndPCDCalcItem", */
    T: -1
  },
  /*::[*/
  247: {
    /* n:"BrtBeginPRule", */
    T: 1
  },
  /*::[*/
  248: {
    /* n:"BrtEndPRule", */
    T: -1
  },
  /*::[*/
  249: {
    /* n:"BrtBeginPRFilters", */
    T: 1
  },
  /*::[*/
  250: {
    /* n:"BrtEndPRFilters", */
    T: -1
  },
  /*::[*/
  251: {
    /* n:"BrtBeginPRFilter", */
    T: 1
  },
  /*::[*/
  252: {
    /* n:"BrtEndPRFilter", */
    T: -1
  },
  /*::[*/
  253: {
    /* n:"BrtBeginPNames", */
    T: 1
  },
  /*::[*/
  254: {
    /* n:"BrtEndPNames", */
    T: -1
  },
  /*::[*/
  255: {
    /* n:"BrtBeginPName", */
    T: 1
  },
  /*::[*/
  256: {
    /* n:"BrtEndPName", */
    T: -1
  },
  /*::[*/
  257: {
    /* n:"BrtBeginPNPairs", */
    T: 1
  },
  /*::[*/
  258: {
    /* n:"BrtEndPNPairs", */
    T: -1
  },
  /*::[*/
  259: {
    /* n:"BrtBeginPNPair", */
    T: 1
  },
  /*::[*/
  260: {
    /* n:"BrtEndPNPair", */
    T: -1
  },
  /*::[*/
  261: {
    /* n:"BrtBeginECWebProps", */
    T: 1
  },
  /*::[*/
  262: {
    /* n:"BrtEndECWebProps", */
    T: -1
  },
  /*::[*/
  263: {
    /* n:"BrtBeginEcWpTables", */
    T: 1
  },
  /*::[*/
  264: {
    /* n:"BrtEndECWPTables", */
    T: -1
  },
  /*::[*/
  265: {
    /* n:"BrtBeginECParams", */
    T: 1
  },
  /*::[*/
  266: {
    /* n:"BrtEndECParams", */
    T: -1
  },
  /*::[*/
  267: {
    /* n:"BrtBeginECParam", */
    T: 1
  },
  /*::[*/
  268: {
    /* n:"BrtEndECParam", */
    T: -1
  },
  /*::[*/
  269: {
    /* n:"BrtBeginPCDKPIs", */
    T: 1
  },
  /*::[*/
  270: {
    /* n:"BrtEndPCDKPIs", */
    T: -1
  },
  /*::[*/
  271: {
    /* n:"BrtBeginPCDKPI", */
    T: 1
  },
  /*::[*/
  272: {
    /* n:"BrtEndPCDKPI", */
    T: -1
  },
  /*::[*/
  273: {
    /* n:"BrtBeginDims", */
    T: 1
  },
  /*::[*/
  274: {
    /* n:"BrtEndDims", */
    T: -1
  },
  /*::[*/
  275: {
    /* n:"BrtBeginDim", */
    T: 1
  },
  /*::[*/
  276: {
    /* n:"BrtEndDim", */
    T: -1
  },
  /*::[*/
  277: {
    /* n:"BrtIndexPartEnd" */
  },
  /*::[*/
  278: {
    /* n:"BrtBeginStyleSheet", */
    T: 1
  },
  /*::[*/
  279: {
    /* n:"BrtEndStyleSheet", */
    T: -1
  },
  /*::[*/
  280: {
    /* n:"BrtBeginSXView", */
    T: 1
  },
  /*::[*/
  281: {
    /* n:"BrtEndSXVI", */
    T: -1
  },
  /*::[*/
  282: {
    /* n:"BrtBeginSXVI", */
    T: 1
  },
  /*::[*/
  283: {
    /* n:"BrtBeginSXVIs", */
    T: 1
  },
  /*::[*/
  284: {
    /* n:"BrtEndSXVIs", */
    T: -1
  },
  /*::[*/
  285: {
    /* n:"BrtBeginSXVD", */
    T: 1
  },
  /*::[*/
  286: {
    /* n:"BrtEndSXVD", */
    T: -1
  },
  /*::[*/
  287: {
    /* n:"BrtBeginSXVDs", */
    T: 1
  },
  /*::[*/
  288: {
    /* n:"BrtEndSXVDs", */
    T: -1
  },
  /*::[*/
  289: {
    /* n:"BrtBeginSXPI", */
    T: 1
  },
  /*::[*/
  290: {
    /* n:"BrtEndSXPI", */
    T: -1
  },
  /*::[*/
  291: {
    /* n:"BrtBeginSXPIs", */
    T: 1
  },
  /*::[*/
  292: {
    /* n:"BrtEndSXPIs", */
    T: -1
  },
  /*::[*/
  293: {
    /* n:"BrtBeginSXDI", */
    T: 1
  },
  /*::[*/
  294: {
    /* n:"BrtEndSXDI", */
    T: -1
  },
  /*::[*/
  295: {
    /* n:"BrtBeginSXDIs", */
    T: 1
  },
  /*::[*/
  296: {
    /* n:"BrtEndSXDIs", */
    T: -1
  },
  /*::[*/
  297: {
    /* n:"BrtBeginSXLI", */
    T: 1
  },
  /*::[*/
  298: {
    /* n:"BrtEndSXLI", */
    T: -1
  },
  /*::[*/
  299: {
    /* n:"BrtBeginSXLIRws", */
    T: 1
  },
  /*::[*/
  300: {
    /* n:"BrtEndSXLIRws", */
    T: -1
  },
  /*::[*/
  301: {
    /* n:"BrtBeginSXLICols", */
    T: 1
  },
  /*::[*/
  302: {
    /* n:"BrtEndSXLICols", */
    T: -1
  },
  /*::[*/
  303: {
    /* n:"BrtBeginSXFormat", */
    T: 1
  },
  /*::[*/
  304: {
    /* n:"BrtEndSXFormat", */
    T: -1
  },
  /*::[*/
  305: {
    /* n:"BrtBeginSXFormats", */
    T: 1
  },
  /*::[*/
  306: {
    /* n:"BrtEndSxFormats", */
    T: -1
  },
  /*::[*/
  307: {
    /* n:"BrtBeginSxSelect", */
    T: 1
  },
  /*::[*/
  308: {
    /* n:"BrtEndSxSelect", */
    T: -1
  },
  /*::[*/
  309: {
    /* n:"BrtBeginISXVDRws", */
    T: 1
  },
  /*::[*/
  310: {
    /* n:"BrtEndISXVDRws", */
    T: -1
  },
  /*::[*/
  311: {
    /* n:"BrtBeginISXVDCols", */
    T: 1
  },
  /*::[*/
  312: {
    /* n:"BrtEndISXVDCols", */
    T: -1
  },
  /*::[*/
  313: {
    /* n:"BrtEndSXLocation", */
    T: -1
  },
  /*::[*/
  314: {
    /* n:"BrtBeginSXLocation", */
    T: 1
  },
  /*::[*/
  315: {
    /* n:"BrtEndSXView", */
    T: -1
  },
  /*::[*/
  316: {
    /* n:"BrtBeginSXTHs", */
    T: 1
  },
  /*::[*/
  317: {
    /* n:"BrtEndSXTHs", */
    T: -1
  },
  /*::[*/
  318: {
    /* n:"BrtBeginSXTH", */
    T: 1
  },
  /*::[*/
  319: {
    /* n:"BrtEndSXTH", */
    T: -1
  },
  /*::[*/
  320: {
    /* n:"BrtBeginISXTHRws", */
    T: 1
  },
  /*::[*/
  321: {
    /* n:"BrtEndISXTHRws", */
    T: -1
  },
  /*::[*/
  322: {
    /* n:"BrtBeginISXTHCols", */
    T: 1
  },
  /*::[*/
  323: {
    /* n:"BrtEndISXTHCols", */
    T: -1
  },
  /*::[*/
  324: {
    /* n:"BrtBeginSXTDMPS", */
    T: 1
  },
  /*::[*/
  325: {
    /* n:"BrtEndSXTDMPs", */
    T: -1
  },
  /*::[*/
  326: {
    /* n:"BrtBeginSXTDMP", */
    T: 1
  },
  /*::[*/
  327: {
    /* n:"BrtEndSXTDMP", */
    T: -1
  },
  /*::[*/
  328: {
    /* n:"BrtBeginSXTHItems", */
    T: 1
  },
  /*::[*/
  329: {
    /* n:"BrtEndSXTHItems", */
    T: -1
  },
  /*::[*/
  330: {
    /* n:"BrtBeginSXTHItem", */
    T: 1
  },
  /*::[*/
  331: {
    /* n:"BrtEndSXTHItem", */
    T: -1
  },
  /*::[*/
  332: {
    /* n:"BrtBeginMetadata", */
    T: 1
  },
  /*::[*/
  333: {
    /* n:"BrtEndMetadata", */
    T: -1
  },
  /*::[*/
  334: {
    /* n:"BrtBeginEsmdtinfo", */
    T: 1
  },
  /*::[*/
  335: {
    /* n:"BrtMdtinfo", */
    f: parse_BrtMdtinfo
  },
  /*::[*/
  336: {
    /* n:"BrtEndEsmdtinfo", */
    T: -1
  },
  /*::[*/
  337: {
    /* n:"BrtBeginEsmdb", */
    f: parse_BrtBeginEsmdb,
    T: 1
  },
  /*::[*/
  338: {
    /* n:"BrtEndEsmdb", */
    T: -1
  },
  /*::[*/
  339: {
    /* n:"BrtBeginEsfmd", */
    T: 1
  },
  /*::[*/
  340: {
    /* n:"BrtEndEsfmd", */
    T: -1
  },
  /*::[*/
  341: {
    /* n:"BrtBeginSingleCells", */
    T: 1
  },
  /*::[*/
  342: {
    /* n:"BrtEndSingleCells", */
    T: -1
  },
  /*::[*/
  343: {
    /* n:"BrtBeginList", */
    T: 1
  },
  /*::[*/
  344: {
    /* n:"BrtEndList", */
    T: -1
  },
  /*::[*/
  345: {
    /* n:"BrtBeginListCols", */
    T: 1
  },
  /*::[*/
  346: {
    /* n:"BrtEndListCols", */
    T: -1
  },
  /*::[*/
  347: {
    /* n:"BrtBeginListCol", */
    T: 1
  },
  /*::[*/
  348: {
    /* n:"BrtEndListCol", */
    T: -1
  },
  /*::[*/
  349: {
    /* n:"BrtBeginListXmlCPr", */
    T: 1
  },
  /*::[*/
  350: {
    /* n:"BrtEndListXmlCPr", */
    T: -1
  },
  /*::[*/
  351: {
    /* n:"BrtListCCFmla" */
  },
  /*::[*/
  352: {
    /* n:"BrtListTrFmla" */
  },
  /*::[*/
  353: {
    /* n:"BrtBeginExternals", */
    T: 1
  },
  /*::[*/
  354: {
    /* n:"BrtEndExternals", */
    T: -1
  },
  /*::[*/
  355: {
    /* n:"BrtSupBookSrc", */
    f: parse_RelID
  },
  /*::[*/
  357: {
    /* n:"BrtSupSelf" */
  },
  /*::[*/
  358: {
    /* n:"BrtSupSame" */
  },
  /*::[*/
  359: {
    /* n:"BrtSupTabs" */
  },
  /*::[*/
  360: {
    /* n:"BrtBeginSupBook", */
    T: 1
  },
  /*::[*/
  361: {
    /* n:"BrtPlaceholderName" */
  },
  /*::[*/
  362: {
    /* n:"BrtExternSheet", */
    f: parse_ExternSheet
  },
  /*::[*/
  363: {
    /* n:"BrtExternTableStart" */
  },
  /*::[*/
  364: {
    /* n:"BrtExternTableEnd" */
  },
  /*::[*/
  366: {
    /* n:"BrtExternRowHdr" */
  },
  /*::[*/
  367: {
    /* n:"BrtExternCellBlank" */
  },
  /*::[*/
  368: {
    /* n:"BrtExternCellReal" */
  },
  /*::[*/
  369: {
    /* n:"BrtExternCellBool" */
  },
  /*::[*/
  370: {
    /* n:"BrtExternCellError" */
  },
  /*::[*/
  371: {
    /* n:"BrtExternCellString" */
  },
  /*::[*/
  372: {
    /* n:"BrtBeginEsmdx", */
    T: 1
  },
  /*::[*/
  373: {
    /* n:"BrtEndEsmdx", */
    T: -1
  },
  /*::[*/
  374: {
    /* n:"BrtBeginMdxSet", */
    T: 1
  },
  /*::[*/
  375: {
    /* n:"BrtEndMdxSet", */
    T: -1
  },
  /*::[*/
  376: {
    /* n:"BrtBeginMdxMbrProp", */
    T: 1
  },
  /*::[*/
  377: {
    /* n:"BrtEndMdxMbrProp", */
    T: -1
  },
  /*::[*/
  378: {
    /* n:"BrtBeginMdxKPI", */
    T: 1
  },
  /*::[*/
  379: {
    /* n:"BrtEndMdxKPI", */
    T: -1
  },
  /*::[*/
  380: {
    /* n:"BrtBeginEsstr", */
    T: 1
  },
  /*::[*/
  381: {
    /* n:"BrtEndEsstr", */
    T: -1
  },
  /*::[*/
  382: {
    /* n:"BrtBeginPRFItem", */
    T: 1
  },
  /*::[*/
  383: {
    /* n:"BrtEndPRFItem", */
    T: -1
  },
  /*::[*/
  384: {
    /* n:"BrtBeginPivotCacheIDs", */
    T: 1
  },
  /*::[*/
  385: {
    /* n:"BrtEndPivotCacheIDs", */
    T: -1
  },
  /*::[*/
  386: {
    /* n:"BrtBeginPivotCacheID", */
    T: 1
  },
  /*::[*/
  387: {
    /* n:"BrtEndPivotCacheID", */
    T: -1
  },
  /*::[*/
  388: {
    /* n:"BrtBeginISXVIs", */
    T: 1
  },
  /*::[*/
  389: {
    /* n:"BrtEndISXVIs", */
    T: -1
  },
  /*::[*/
  390: {
    /* n:"BrtBeginColInfos", */
    T: 1
  },
  /*::[*/
  391: {
    /* n:"BrtEndColInfos", */
    T: -1
  },
  /*::[*/
  392: {
    /* n:"BrtBeginRwBrk", */
    T: 1
  },
  /*::[*/
  393: {
    /* n:"BrtEndRwBrk", */
    T: -1
  },
  /*::[*/
  394: {
    /* n:"BrtBeginColBrk", */
    T: 1
  },
  /*::[*/
  395: {
    /* n:"BrtEndColBrk", */
    T: -1
  },
  /*::[*/
  396: {
    /* n:"BrtBrk" */
  },
  /*::[*/
  397: {
    /* n:"BrtUserBookView" */
  },
  /*::[*/
  398: {
    /* n:"BrtInfo" */
  },
  /*::[*/
  399: {
    /* n:"BrtCUsr" */
  },
  /*::[*/
  400: {
    /* n:"BrtUsr" */
  },
  /*::[*/
  401: {
    /* n:"BrtBeginUsers", */
    T: 1
  },
  /*::[*/
  403: {
    /* n:"BrtEOF" */
  },
  /*::[*/
  404: {
    /* n:"BrtUCR" */
  },
  /*::[*/
  405: {
    /* n:"BrtRRInsDel" */
  },
  /*::[*/
  406: {
    /* n:"BrtRREndInsDel" */
  },
  /*::[*/
  407: {
    /* n:"BrtRRMove" */
  },
  /*::[*/
  408: {
    /* n:"BrtRREndMove" */
  },
  /*::[*/
  409: {
    /* n:"BrtRRChgCell" */
  },
  /*::[*/
  410: {
    /* n:"BrtRREndChgCell" */
  },
  /*::[*/
  411: {
    /* n:"BrtRRHeader" */
  },
  /*::[*/
  412: {
    /* n:"BrtRRUserView" */
  },
  /*::[*/
  413: {
    /* n:"BrtRRRenSheet" */
  },
  /*::[*/
  414: {
    /* n:"BrtRRInsertSh" */
  },
  /*::[*/
  415: {
    /* n:"BrtRRDefName" */
  },
  /*::[*/
  416: {
    /* n:"BrtRRNote" */
  },
  /*::[*/
  417: {
    /* n:"BrtRRConflict" */
  },
  /*::[*/
  418: {
    /* n:"BrtRRTQSIF" */
  },
  /*::[*/
  419: {
    /* n:"BrtRRFormat" */
  },
  /*::[*/
  420: {
    /* n:"BrtRREndFormat" */
  },
  /*::[*/
  421: {
    /* n:"BrtRRAutoFmt" */
  },
  /*::[*/
  422: {
    /* n:"BrtBeginUserShViews", */
    T: 1
  },
  /*::[*/
  423: {
    /* n:"BrtBeginUserShView", */
    T: 1
  },
  /*::[*/
  424: {
    /* n:"BrtEndUserShView", */
    T: -1
  },
  /*::[*/
  425: {
    /* n:"BrtEndUserShViews", */
    T: -1
  },
  /*::[*/
  426: {
    /* n:"BrtArrFmla", */
    f: parse_BrtArrFmla
  },
  /*::[*/
  427: {
    /* n:"BrtShrFmla", */
    f: parse_BrtShrFmla
  },
  /*::[*/
  428: {
    /* n:"BrtTable" */
  },
  /*::[*/
  429: {
    /* n:"BrtBeginExtConnections", */
    T: 1
  },
  /*::[*/
  430: {
    /* n:"BrtEndExtConnections", */
    T: -1
  },
  /*::[*/
  431: {
    /* n:"BrtBeginPCDCalcMems", */
    T: 1
  },
  /*::[*/
  432: {
    /* n:"BrtEndPCDCalcMems", */
    T: -1
  },
  /*::[*/
  433: {
    /* n:"BrtBeginPCDCalcMem", */
    T: 1
  },
  /*::[*/
  434: {
    /* n:"BrtEndPCDCalcMem", */
    T: -1
  },
  /*::[*/
  435: {
    /* n:"BrtBeginPCDHGLevels", */
    T: 1
  },
  /*::[*/
  436: {
    /* n:"BrtEndPCDHGLevels", */
    T: -1
  },
  /*::[*/
  437: {
    /* n:"BrtBeginPCDHGLevel", */
    T: 1
  },
  /*::[*/
  438: {
    /* n:"BrtEndPCDHGLevel", */
    T: -1
  },
  /*::[*/
  439: {
    /* n:"BrtBeginPCDHGLGroups", */
    T: 1
  },
  /*::[*/
  440: {
    /* n:"BrtEndPCDHGLGroups", */
    T: -1
  },
  /*::[*/
  441: {
    /* n:"BrtBeginPCDHGLGroup", */
    T: 1
  },
  /*::[*/
  442: {
    /* n:"BrtEndPCDHGLGroup", */
    T: -1
  },
  /*::[*/
  443: {
    /* n:"BrtBeginPCDHGLGMembers", */
    T: 1
  },
  /*::[*/
  444: {
    /* n:"BrtEndPCDHGLGMembers", */
    T: -1
  },
  /*::[*/
  445: {
    /* n:"BrtBeginPCDHGLGMember", */
    T: 1
  },
  /*::[*/
  446: {
    /* n:"BrtEndPCDHGLGMember", */
    T: -1
  },
  /*::[*/
  447: {
    /* n:"BrtBeginQSI", */
    T: 1
  },
  /*::[*/
  448: {
    /* n:"BrtEndQSI", */
    T: -1
  },
  /*::[*/
  449: {
    /* n:"BrtBeginQSIR", */
    T: 1
  },
  /*::[*/
  450: {
    /* n:"BrtEndQSIR", */
    T: -1
  },
  /*::[*/
  451: {
    /* n:"BrtBeginDeletedNames", */
    T: 1
  },
  /*::[*/
  452: {
    /* n:"BrtEndDeletedNames", */
    T: -1
  },
  /*::[*/
  453: {
    /* n:"BrtBeginDeletedName", */
    T: 1
  },
  /*::[*/
  454: {
    /* n:"BrtEndDeletedName", */
    T: -1
  },
  /*::[*/
  455: {
    /* n:"BrtBeginQSIFs", */
    T: 1
  },
  /*::[*/
  456: {
    /* n:"BrtEndQSIFs", */
    T: -1
  },
  /*::[*/
  457: {
    /* n:"BrtBeginQSIF", */
    T: 1
  },
  /*::[*/
  458: {
    /* n:"BrtEndQSIF", */
    T: -1
  },
  /*::[*/
  459: {
    /* n:"BrtBeginAutoSortScope", */
    T: 1
  },
  /*::[*/
  460: {
    /* n:"BrtEndAutoSortScope", */
    T: -1
  },
  /*::[*/
  461: {
    /* n:"BrtBeginConditionalFormatting", */
    T: 1
  },
  /*::[*/
  462: {
    /* n:"BrtEndConditionalFormatting", */
    T: -1
  },
  /*::[*/
  463: {
    /* n:"BrtBeginCFRule", */
    T: 1
  },
  /*::[*/
  464: {
    /* n:"BrtEndCFRule", */
    T: -1
  },
  /*::[*/
  465: {
    /* n:"BrtBeginIconSet", */
    T: 1
  },
  /*::[*/
  466: {
    /* n:"BrtEndIconSet", */
    T: -1
  },
  /*::[*/
  467: {
    /* n:"BrtBeginDatabar", */
    T: 1
  },
  /*::[*/
  468: {
    /* n:"BrtEndDatabar", */
    T: -1
  },
  /*::[*/
  469: {
    /* n:"BrtBeginColorScale", */
    T: 1
  },
  /*::[*/
  470: {
    /* n:"BrtEndColorScale", */
    T: -1
  },
  /*::[*/
  471: {
    /* n:"BrtCFVO" */
  },
  /*::[*/
  472: {
    /* n:"BrtExternValueMeta" */
  },
  /*::[*/
  473: {
    /* n:"BrtBeginColorPalette", */
    T: 1
  },
  /*::[*/
  474: {
    /* n:"BrtEndColorPalette", */
    T: -1
  },
  /*::[*/
  475: {
    /* n:"BrtIndexedColor" */
  },
  /*::[*/
  476: {
    /* n:"BrtMargins", */
    f: parse_BrtMargins
  },
  /*::[*/
  477: {
    /* n:"BrtPrintOptions" */
  },
  /*::[*/
  478: {
    /* n:"BrtPageSetup" */
  },
  /*::[*/
  479: {
    /* n:"BrtBeginHeaderFooter", */
    T: 1
  },
  /*::[*/
  480: {
    /* n:"BrtEndHeaderFooter", */
    T: -1
  },
  /*::[*/
  481: {
    /* n:"BrtBeginSXCrtFormat", */
    T: 1
  },
  /*::[*/
  482: {
    /* n:"BrtEndSXCrtFormat", */
    T: -1
  },
  /*::[*/
  483: {
    /* n:"BrtBeginSXCrtFormats", */
    T: 1
  },
  /*::[*/
  484: {
    /* n:"BrtEndSXCrtFormats", */
    T: -1
  },
  /*::[*/
  485: {
    /* n:"BrtWsFmtInfo", */
    f: parse_BrtWsFmtInfo
  },
  /*::[*/
  486: {
    /* n:"BrtBeginMgs", */
    T: 1
  },
  /*::[*/
  487: {
    /* n:"BrtEndMGs", */
    T: -1
  },
  /*::[*/
  488: {
    /* n:"BrtBeginMGMaps", */
    T: 1
  },
  /*::[*/
  489: {
    /* n:"BrtEndMGMaps", */
    T: -1
  },
  /*::[*/
  490: {
    /* n:"BrtBeginMG", */
    T: 1
  },
  /*::[*/
  491: {
    /* n:"BrtEndMG", */
    T: -1
  },
  /*::[*/
  492: {
    /* n:"BrtBeginMap", */
    T: 1
  },
  /*::[*/
  493: {
    /* n:"BrtEndMap", */
    T: -1
  },
  /*::[*/
  494: {
    /* n:"BrtHLink", */
    f: parse_BrtHLink
  },
  /*::[*/
  495: {
    /* n:"BrtBeginDCon", */
    T: 1
  },
  /*::[*/
  496: {
    /* n:"BrtEndDCon", */
    T: -1
  },
  /*::[*/
  497: {
    /* n:"BrtBeginDRefs", */
    T: 1
  },
  /*::[*/
  498: {
    /* n:"BrtEndDRefs", */
    T: -1
  },
  /*::[*/
  499: {
    /* n:"BrtDRef" */
  },
  /*::[*/
  500: {
    /* n:"BrtBeginScenMan", */
    T: 1
  },
  /*::[*/
  501: {
    /* n:"BrtEndScenMan", */
    T: -1
  },
  /*::[*/
  502: {
    /* n:"BrtBeginSct", */
    T: 1
  },
  /*::[*/
  503: {
    /* n:"BrtEndSct", */
    T: -1
  },
  /*::[*/
  504: {
    /* n:"BrtSlc" */
  },
  /*::[*/
  505: {
    /* n:"BrtBeginDXFs", */
    T: 1
  },
  /*::[*/
  506: {
    /* n:"BrtEndDXFs", */
    T: -1
  },
  /*::[*/
  507: {
    /* n:"BrtDXF" */
  },
  /*::[*/
  508: {
    /* n:"BrtBeginTableStyles", */
    T: 1
  },
  /*::[*/
  509: {
    /* n:"BrtEndTableStyles", */
    T: -1
  },
  /*::[*/
  510: {
    /* n:"BrtBeginTableStyle", */
    T: 1
  },
  /*::[*/
  511: {
    /* n:"BrtEndTableStyle", */
    T: -1
  },
  /*::[*/
  512: {
    /* n:"BrtTableStyleElement" */
  },
  /*::[*/
  513: {
    /* n:"BrtTableStyleClient" */
  },
  /*::[*/
  514: {
    /* n:"BrtBeginVolDeps", */
    T: 1
  },
  /*::[*/
  515: {
    /* n:"BrtEndVolDeps", */
    T: -1
  },
  /*::[*/
  516: {
    /* n:"BrtBeginVolType", */
    T: 1
  },
  /*::[*/
  517: {
    /* n:"BrtEndVolType", */
    T: -1
  },
  /*::[*/
  518: {
    /* n:"BrtBeginVolMain", */
    T: 1
  },
  /*::[*/
  519: {
    /* n:"BrtEndVolMain", */
    T: -1
  },
  /*::[*/
  520: {
    /* n:"BrtBeginVolTopic", */
    T: 1
  },
  /*::[*/
  521: {
    /* n:"BrtEndVolTopic", */
    T: -1
  },
  /*::[*/
  522: {
    /* n:"BrtVolSubtopic" */
  },
  /*::[*/
  523: {
    /* n:"BrtVolRef" */
  },
  /*::[*/
  524: {
    /* n:"BrtVolNum" */
  },
  /*::[*/
  525: {
    /* n:"BrtVolErr" */
  },
  /*::[*/
  526: {
    /* n:"BrtVolStr" */
  },
  /*::[*/
  527: {
    /* n:"BrtVolBool" */
  },
  /*::[*/
  528: {
    /* n:"BrtBeginCalcChain$", */
    T: 1
  },
  /*::[*/
  529: {
    /* n:"BrtEndCalcChain$", */
    T: -1
  },
  /*::[*/
  530: {
    /* n:"BrtBeginSortState", */
    T: 1
  },
  /*::[*/
  531: {
    /* n:"BrtEndSortState", */
    T: -1
  },
  /*::[*/
  532: {
    /* n:"BrtBeginSortCond", */
    T: 1
  },
  /*::[*/
  533: {
    /* n:"BrtEndSortCond", */
    T: -1
  },
  /*::[*/
  534: {
    /* n:"BrtBookProtection" */
  },
  /*::[*/
  535: {
    /* n:"BrtSheetProtection" */
  },
  /*::[*/
  536: {
    /* n:"BrtRangeProtection" */
  },
  /*::[*/
  537: {
    /* n:"BrtPhoneticInfo" */
  },
  /*::[*/
  538: {
    /* n:"BrtBeginECTxtWiz", */
    T: 1
  },
  /*::[*/
  539: {
    /* n:"BrtEndECTxtWiz", */
    T: -1
  },
  /*::[*/
  540: {
    /* n:"BrtBeginECTWFldInfoLst", */
    T: 1
  },
  /*::[*/
  541: {
    /* n:"BrtEndECTWFldInfoLst", */
    T: -1
  },
  /*::[*/
  542: {
    /* n:"BrtBeginECTwFldInfo", */
    T: 1
  },
  /*::[*/
  548: {
    /* n:"BrtFileSharing" */
  },
  /*::[*/
  549: {
    /* n:"BrtOleSize" */
  },
  /*::[*/
  550: {
    /* n:"BrtDrawing", */
    f: parse_RelID
  },
  /*::[*/
  551: {
    /* n:"BrtLegacyDrawing" */
  },
  /*::[*/
  552: {
    /* n:"BrtLegacyDrawingHF" */
  },
  /*::[*/
  553: {
    /* n:"BrtWebOpt" */
  },
  /*::[*/
  554: {
    /* n:"BrtBeginWebPubItems", */
    T: 1
  },
  /*::[*/
  555: {
    /* n:"BrtEndWebPubItems", */
    T: -1
  },
  /*::[*/
  556: {
    /* n:"BrtBeginWebPubItem", */
    T: 1
  },
  /*::[*/
  557: {
    /* n:"BrtEndWebPubItem", */
    T: -1
  },
  /*::[*/
  558: {
    /* n:"BrtBeginSXCondFmt", */
    T: 1
  },
  /*::[*/
  559: {
    /* n:"BrtEndSXCondFmt", */
    T: -1
  },
  /*::[*/
  560: {
    /* n:"BrtBeginSXCondFmts", */
    T: 1
  },
  /*::[*/
  561: {
    /* n:"BrtEndSXCondFmts", */
    T: -1
  },
  /*::[*/
  562: {
    /* n:"BrtBkHim" */
  },
  /*::[*/
  564: {
    /* n:"BrtColor" */
  },
  /*::[*/
  565: {
    /* n:"BrtBeginIndexedColors", */
    T: 1
  },
  /*::[*/
  566: {
    /* n:"BrtEndIndexedColors", */
    T: -1
  },
  /*::[*/
  569: {
    /* n:"BrtBeginMRUColors", */
    T: 1
  },
  /*::[*/
  570: {
    /* n:"BrtEndMRUColors", */
    T: -1
  },
  /*::[*/
  572: {
    /* n:"BrtMRUColor" */
  },
  /*::[*/
  573: {
    /* n:"BrtBeginDVals", */
    T: 1
  },
  /*::[*/
  574: {
    /* n:"BrtEndDVals", */
    T: -1
  },
  /*::[*/
  577: {
    /* n:"BrtSupNameStart" */
  },
  /*::[*/
  578: {
    /* n:"BrtSupNameValueStart" */
  },
  /*::[*/
  579: {
    /* n:"BrtSupNameValueEnd" */
  },
  /*::[*/
  580: {
    /* n:"BrtSupNameNum" */
  },
  /*::[*/
  581: {
    /* n:"BrtSupNameErr" */
  },
  /*::[*/
  582: {
    /* n:"BrtSupNameSt" */
  },
  /*::[*/
  583: {
    /* n:"BrtSupNameNil" */
  },
  /*::[*/
  584: {
    /* n:"BrtSupNameBool" */
  },
  /*::[*/
  585: {
    /* n:"BrtSupNameFmla" */
  },
  /*::[*/
  586: {
    /* n:"BrtSupNameBits" */
  },
  /*::[*/
  587: {
    /* n:"BrtSupNameEnd" */
  },
  /*::[*/
  588: {
    /* n:"BrtEndSupBook", */
    T: -1
  },
  /*::[*/
  589: {
    /* n:"BrtCellSmartTagProperty" */
  },
  /*::[*/
  590: {
    /* n:"BrtBeginCellSmartTag", */
    T: 1
  },
  /*::[*/
  591: {
    /* n:"BrtEndCellSmartTag", */
    T: -1
  },
  /*::[*/
  592: {
    /* n:"BrtBeginCellSmartTags", */
    T: 1
  },
  /*::[*/
  593: {
    /* n:"BrtEndCellSmartTags", */
    T: -1
  },
  /*::[*/
  594: {
    /* n:"BrtBeginSmartTags", */
    T: 1
  },
  /*::[*/
  595: {
    /* n:"BrtEndSmartTags", */
    T: -1
  },
  /*::[*/
  596: {
    /* n:"BrtSmartTagType" */
  },
  /*::[*/
  597: {
    /* n:"BrtBeginSmartTagTypes", */
    T: 1
  },
  /*::[*/
  598: {
    /* n:"BrtEndSmartTagTypes", */
    T: -1
  },
  /*::[*/
  599: {
    /* n:"BrtBeginSXFilters", */
    T: 1
  },
  /*::[*/
  600: {
    /* n:"BrtEndSXFilters", */
    T: -1
  },
  /*::[*/
  601: {
    /* n:"BrtBeginSXFILTER", */
    T: 1
  },
  /*::[*/
  602: {
    /* n:"BrtEndSXFilter", */
    T: -1
  },
  /*::[*/
  603: {
    /* n:"BrtBeginFills", */
    T: 1
  },
  /*::[*/
  604: {
    /* n:"BrtEndFills", */
    T: -1
  },
  /*::[*/
  605: {
    /* n:"BrtBeginCellWatches", */
    T: 1
  },
  /*::[*/
  606: {
    /* n:"BrtEndCellWatches", */
    T: -1
  },
  /*::[*/
  607: {
    /* n:"BrtCellWatch" */
  },
  /*::[*/
  608: {
    /* n:"BrtBeginCRErrs", */
    T: 1
  },
  /*::[*/
  609: {
    /* n:"BrtEndCRErrs", */
    T: -1
  },
  /*::[*/
  610: {
    /* n:"BrtCrashRecErr" */
  },
  /*::[*/
  611: {
    /* n:"BrtBeginFonts", */
    T: 1
  },
  /*::[*/
  612: {
    /* n:"BrtEndFonts", */
    T: -1
  },
  /*::[*/
  613: {
    /* n:"BrtBeginBorders", */
    T: 1
  },
  /*::[*/
  614: {
    /* n:"BrtEndBorders", */
    T: -1
  },
  /*::[*/
  615: {
    /* n:"BrtBeginFmts", */
    T: 1
  },
  /*::[*/
  616: {
    /* n:"BrtEndFmts", */
    T: -1
  },
  /*::[*/
  617: {
    /* n:"BrtBeginCellXFs", */
    T: 1
  },
  /*::[*/
  618: {
    /* n:"BrtEndCellXFs", */
    T: -1
  },
  /*::[*/
  619: {
    /* n:"BrtBeginStyles", */
    T: 1
  },
  /*::[*/
  620: {
    /* n:"BrtEndStyles", */
    T: -1
  },
  /*::[*/
  625: {
    /* n:"BrtBigName" */
  },
  /*::[*/
  626: {
    /* n:"BrtBeginCellStyleXFs", */
    T: 1
  },
  /*::[*/
  627: {
    /* n:"BrtEndCellStyleXFs", */
    T: -1
  },
  /*::[*/
  628: {
    /* n:"BrtBeginComments", */
    T: 1
  },
  /*::[*/
  629: {
    /* n:"BrtEndComments", */
    T: -1
  },
  /*::[*/
  630: {
    /* n:"BrtBeginCommentAuthors", */
    T: 1
  },
  /*::[*/
  631: {
    /* n:"BrtEndCommentAuthors", */
    T: -1
  },
  /*::[*/
  632: {
    /* n:"BrtCommentAuthor", */
    f: parse_BrtCommentAuthor
  },
  /*::[*/
  633: {
    /* n:"BrtBeginCommentList", */
    T: 1
  },
  /*::[*/
  634: {
    /* n:"BrtEndCommentList", */
    T: -1
  },
  /*::[*/
  635: {
    /* n:"BrtBeginComment", */
    T: 1,
    f: parse_BrtBeginComment
  },
  /*::[*/
  636: {
    /* n:"BrtEndComment", */
    T: -1
  },
  /*::[*/
  637: {
    /* n:"BrtCommentText", */
    f: parse_BrtCommentText
  },
  /*::[*/
  638: {
    /* n:"BrtBeginOleObjects", */
    T: 1
  },
  /*::[*/
  639: {
    /* n:"BrtOleObject" */
  },
  /*::[*/
  640: {
    /* n:"BrtEndOleObjects", */
    T: -1
  },
  /*::[*/
  641: {
    /* n:"BrtBeginSxrules", */
    T: 1
  },
  /*::[*/
  642: {
    /* n:"BrtEndSxRules", */
    T: -1
  },
  /*::[*/
  643: {
    /* n:"BrtBeginActiveXControls", */
    T: 1
  },
  /*::[*/
  644: {
    /* n:"BrtActiveX" */
  },
  /*::[*/
  645: {
    /* n:"BrtEndActiveXControls", */
    T: -1
  },
  /*::[*/
  646: {
    /* n:"BrtBeginPCDSDTCEMembersSortBy", */
    T: 1
  },
  /*::[*/
  648: {
    /* n:"BrtBeginCellIgnoreECs", */
    T: 1
  },
  /*::[*/
  649: {
    /* n:"BrtCellIgnoreEC" */
  },
  /*::[*/
  650: {
    /* n:"BrtEndCellIgnoreECs", */
    T: -1
  },
  /*::[*/
  651: {
    /* n:"BrtCsProp", */
    f: parse_BrtCsProp
  },
  /*::[*/
  652: {
    /* n:"BrtCsPageSetup" */
  },
  /*::[*/
  653: {
    /* n:"BrtBeginUserCsViews", */
    T: 1
  },
  /*::[*/
  654: {
    /* n:"BrtEndUserCsViews", */
    T: -1
  },
  /*::[*/
  655: {
    /* n:"BrtBeginUserCsView", */
    T: 1
  },
  /*::[*/
  656: {
    /* n:"BrtEndUserCsView", */
    T: -1
  },
  /*::[*/
  657: {
    /* n:"BrtBeginPcdSFCIEntries", */
    T: 1
  },
  /*::[*/
  658: {
    /* n:"BrtEndPCDSFCIEntries", */
    T: -1
  },
  /*::[*/
  659: {
    /* n:"BrtPCDSFCIEntry" */
  },
  /*::[*/
  660: {
    /* n:"BrtBeginListParts", */
    T: 1
  },
  /*::[*/
  661: {
    /* n:"BrtListPart" */
  },
  /*::[*/
  662: {
    /* n:"BrtEndListParts", */
    T: -1
  },
  /*::[*/
  663: {
    /* n:"BrtSheetCalcProp" */
  },
  /*::[*/
  664: {
    /* n:"BrtBeginFnGroup", */
    T: 1
  },
  /*::[*/
  665: {
    /* n:"BrtFnGroup" */
  },
  /*::[*/
  666: {
    /* n:"BrtEndFnGroup", */
    T: -1
  },
  /*::[*/
  667: {
    /* n:"BrtSupAddin" */
  },
  /*::[*/
  668: {
    /* n:"BrtSXTDMPOrder" */
  },
  /*::[*/
  669: {
    /* n:"BrtCsProtection" */
  },
  /*::[*/
  671: {
    /* n:"BrtBeginWsSortMap", */
    T: 1
  },
  /*::[*/
  672: {
    /* n:"BrtEndWsSortMap", */
    T: -1
  },
  /*::[*/
  673: {
    /* n:"BrtBeginRRSort", */
    T: 1
  },
  /*::[*/
  674: {
    /* n:"BrtEndRRSort", */
    T: -1
  },
  /*::[*/
  675: {
    /* n:"BrtRRSortItem" */
  },
  /*::[*/
  676: {
    /* n:"BrtFileSharingIso" */
  },
  /*::[*/
  677: {
    /* n:"BrtBookProtectionIso" */
  },
  /*::[*/
  678: {
    /* n:"BrtSheetProtectionIso" */
  },
  /*::[*/
  679: {
    /* n:"BrtCsProtectionIso" */
  },
  /*::[*/
  680: {
    /* n:"BrtRangeProtectionIso" */
  },
  /*::[*/
  681: {
    /* n:"BrtDValList" */
  },
  /*::[*/
  1024: {
    /* n:"BrtRwDescent" */
  },
  /*::[*/
  1025: {
    /* n:"BrtKnownFonts" */
  },
  /*::[*/
  1026: {
    /* n:"BrtBeginSXTupleSet", */
    T: 1
  },
  /*::[*/
  1027: {
    /* n:"BrtEndSXTupleSet", */
    T: -1
  },
  /*::[*/
  1028: {
    /* n:"BrtBeginSXTupleSetHeader", */
    T: 1
  },
  /*::[*/
  1029: {
    /* n:"BrtEndSXTupleSetHeader", */
    T: -1
  },
  /*::[*/
  1030: {
    /* n:"BrtSXTupleSetHeaderItem" */
  },
  /*::[*/
  1031: {
    /* n:"BrtBeginSXTupleSetData", */
    T: 1
  },
  /*::[*/
  1032: {
    /* n:"BrtEndSXTupleSetData", */
    T: -1
  },
  /*::[*/
  1033: {
    /* n:"BrtBeginSXTupleSetRow", */
    T: 1
  },
  /*::[*/
  1034: {
    /* n:"BrtEndSXTupleSetRow", */
    T: -1
  },
  /*::[*/
  1035: {
    /* n:"BrtSXTupleSetRowItem" */
  },
  /*::[*/
  1036: {
    /* n:"BrtNameExt" */
  },
  /*::[*/
  1037: {
    /* n:"BrtPCDH14" */
  },
  /*::[*/
  1038: {
    /* n:"BrtBeginPCDCalcMem14", */
    T: 1
  },
  /*::[*/
  1039: {
    /* n:"BrtEndPCDCalcMem14", */
    T: -1
  },
  /*::[*/
  1040: {
    /* n:"BrtSXTH14" */
  },
  /*::[*/
  1041: {
    /* n:"BrtBeginSparklineGroup", */
    T: 1
  },
  /*::[*/
  1042: {
    /* n:"BrtEndSparklineGroup", */
    T: -1
  },
  /*::[*/
  1043: {
    /* n:"BrtSparkline" */
  },
  /*::[*/
  1044: {
    /* n:"BrtSXDI14" */
  },
  /*::[*/
  1045: {
    /* n:"BrtWsFmtInfoEx14" */
  },
  /*::[*/
  1046: {
    /* n:"BrtBeginConditionalFormatting14", */
    T: 1
  },
  /*::[*/
  1047: {
    /* n:"BrtEndConditionalFormatting14", */
    T: -1
  },
  /*::[*/
  1048: {
    /* n:"BrtBeginCFRule14", */
    T: 1
  },
  /*::[*/
  1049: {
    /* n:"BrtEndCFRule14", */
    T: -1
  },
  /*::[*/
  1050: {
    /* n:"BrtCFVO14" */
  },
  /*::[*/
  1051: {
    /* n:"BrtBeginDatabar14", */
    T: 1
  },
  /*::[*/
  1052: {
    /* n:"BrtBeginIconSet14", */
    T: 1
  },
  /*::[*/
  1053: {
    /* n:"BrtDVal14", */
    f: parse_BrtDVal14
  },
  /*::[*/
  1054: {
    /* n:"BrtBeginDVals14", */
    T: 1
  },
  /*::[*/
  1055: {
    /* n:"BrtColor14" */
  },
  /*::[*/
  1056: {
    /* n:"BrtBeginSparklines", */
    T: 1
  },
  /*::[*/
  1057: {
    /* n:"BrtEndSparklines", */
    T: -1
  },
  /*::[*/
  1058: {
    /* n:"BrtBeginSparklineGroups", */
    T: 1
  },
  /*::[*/
  1059: {
    /* n:"BrtEndSparklineGroups", */
    T: -1
  },
  /*::[*/
  1061: {
    /* n:"BrtSXVD14" */
  },
  /*::[*/
  1062: {
    /* n:"BrtBeginSXView14", */
    T: 1
  },
  /*::[*/
  1063: {
    /* n:"BrtEndSXView14", */
    T: -1
  },
  /*::[*/
  1064: {
    /* n:"BrtBeginSXView16", */
    T: 1
  },
  /*::[*/
  1065: {
    /* n:"BrtEndSXView16", */
    T: -1
  },
  /*::[*/
  1066: {
    /* n:"BrtBeginPCD14", */
    T: 1
  },
  /*::[*/
  1067: {
    /* n:"BrtEndPCD14", */
    T: -1
  },
  /*::[*/
  1068: {
    /* n:"BrtBeginExtConn14", */
    T: 1
  },
  /*::[*/
  1069: {
    /* n:"BrtEndExtConn14", */
    T: -1
  },
  /*::[*/
  1070: {
    /* n:"BrtBeginSlicerCacheIDs", */
    T: 1
  },
  /*::[*/
  1071: {
    /* n:"BrtEndSlicerCacheIDs", */
    T: -1
  },
  /*::[*/
  1072: {
    /* n:"BrtBeginSlicerCacheID", */
    T: 1
  },
  /*::[*/
  1073: {
    /* n:"BrtEndSlicerCacheID", */
    T: -1
  },
  /*::[*/
  1075: {
    /* n:"BrtBeginSlicerCache", */
    T: 1
  },
  /*::[*/
  1076: {
    /* n:"BrtEndSlicerCache", */
    T: -1
  },
  /*::[*/
  1077: {
    /* n:"BrtBeginSlicerCacheDef", */
    T: 1
  },
  /*::[*/
  1078: {
    /* n:"BrtEndSlicerCacheDef", */
    T: -1
  },
  /*::[*/
  1079: {
    /* n:"BrtBeginSlicersEx", */
    T: 1
  },
  /*::[*/
  1080: {
    /* n:"BrtEndSlicersEx", */
    T: -1
  },
  /*::[*/
  1081: {
    /* n:"BrtBeginSlicerEx", */
    T: 1
  },
  /*::[*/
  1082: {
    /* n:"BrtEndSlicerEx", */
    T: -1
  },
  /*::[*/
  1083: {
    /* n:"BrtBeginSlicer", */
    T: 1
  },
  /*::[*/
  1084: {
    /* n:"BrtEndSlicer", */
    T: -1
  },
  /*::[*/
  1085: {
    /* n:"BrtSlicerCachePivotTables" */
  },
  /*::[*/
  1086: {
    /* n:"BrtBeginSlicerCacheOlapImpl", */
    T: 1
  },
  /*::[*/
  1087: {
    /* n:"BrtEndSlicerCacheOlapImpl", */
    T: -1
  },
  /*::[*/
  1088: {
    /* n:"BrtBeginSlicerCacheLevelsData", */
    T: 1
  },
  /*::[*/
  1089: {
    /* n:"BrtEndSlicerCacheLevelsData", */
    T: -1
  },
  /*::[*/
  1090: {
    /* n:"BrtBeginSlicerCacheLevelData", */
    T: 1
  },
  /*::[*/
  1091: {
    /* n:"BrtEndSlicerCacheLevelData", */
    T: -1
  },
  /*::[*/
  1092: {
    /* n:"BrtBeginSlicerCacheSiRanges", */
    T: 1
  },
  /*::[*/
  1093: {
    /* n:"BrtEndSlicerCacheSiRanges", */
    T: -1
  },
  /*::[*/
  1094: {
    /* n:"BrtBeginSlicerCacheSiRange", */
    T: 1
  },
  /*::[*/
  1095: {
    /* n:"BrtEndSlicerCacheSiRange", */
    T: -1
  },
  /*::[*/
  1096: {
    /* n:"BrtSlicerCacheOlapItem" */
  },
  /*::[*/
  1097: {
    /* n:"BrtBeginSlicerCacheSelections", */
    T: 1
  },
  /*::[*/
  1098: {
    /* n:"BrtSlicerCacheSelection" */
  },
  /*::[*/
  1099: {
    /* n:"BrtEndSlicerCacheSelections", */
    T: -1
  },
  /*::[*/
  1100: {
    /* n:"BrtBeginSlicerCacheNative", */
    T: 1
  },
  /*::[*/
  1101: {
    /* n:"BrtEndSlicerCacheNative", */
    T: -1
  },
  /*::[*/
  1102: {
    /* n:"BrtSlicerCacheNativeItem" */
  },
  /*::[*/
  1103: {
    /* n:"BrtRangeProtection14" */
  },
  /*::[*/
  1104: {
    /* n:"BrtRangeProtectionIso14" */
  },
  /*::[*/
  1105: {
    /* n:"BrtCellIgnoreEC14" */
  },
  /*::[*/
  1111: {
    /* n:"BrtList14" */
  },
  /*::[*/
  1112: {
    /* n:"BrtCFIcon" */
  },
  /*::[*/
  1113: {
    /* n:"BrtBeginSlicerCachesPivotCacheIDs", */
    T: 1
  },
  /*::[*/
  1114: {
    /* n:"BrtEndSlicerCachesPivotCacheIDs", */
    T: -1
  },
  /*::[*/
  1115: {
    /* n:"BrtBeginSlicers", */
    T: 1
  },
  /*::[*/
  1116: {
    /* n:"BrtEndSlicers", */
    T: -1
  },
  /*::[*/
  1117: {
    /* n:"BrtWbProp14" */
  },
  /*::[*/
  1118: {
    /* n:"BrtBeginSXEdit", */
    T: 1
  },
  /*::[*/
  1119: {
    /* n:"BrtEndSXEdit", */
    T: -1
  },
  /*::[*/
  1120: {
    /* n:"BrtBeginSXEdits", */
    T: 1
  },
  /*::[*/
  1121: {
    /* n:"BrtEndSXEdits", */
    T: -1
  },
  /*::[*/
  1122: {
    /* n:"BrtBeginSXChange", */
    T: 1
  },
  /*::[*/
  1123: {
    /* n:"BrtEndSXChange", */
    T: -1
  },
  /*::[*/
  1124: {
    /* n:"BrtBeginSXChanges", */
    T: 1
  },
  /*::[*/
  1125: {
    /* n:"BrtEndSXChanges", */
    T: -1
  },
  /*::[*/
  1126: {
    /* n:"BrtSXTupleItems" */
  },
  /*::[*/
  1128: {
    /* n:"BrtBeginSlicerStyle", */
    T: 1
  },
  /*::[*/
  1129: {
    /* n:"BrtEndSlicerStyle", */
    T: -1
  },
  /*::[*/
  1130: {
    /* n:"BrtSlicerStyleElement" */
  },
  /*::[*/
  1131: {
    /* n:"BrtBeginStyleSheetExt14", */
    T: 1
  },
  /*::[*/
  1132: {
    /* n:"BrtEndStyleSheetExt14", */
    T: -1
  },
  /*::[*/
  1133: {
    /* n:"BrtBeginSlicerCachesPivotCacheID", */
    T: 1
  },
  /*::[*/
  1134: {
    /* n:"BrtEndSlicerCachesPivotCacheID", */
    T: -1
  },
  /*::[*/
  1135: {
    /* n:"BrtBeginConditionalFormattings", */
    T: 1
  },
  /*::[*/
  1136: {
    /* n:"BrtEndConditionalFormattings", */
    T: -1
  },
  /*::[*/
  1137: {
    /* n:"BrtBeginPCDCalcMemExt", */
    T: 1
  },
  /*::[*/
  1138: {
    /* n:"BrtEndPCDCalcMemExt", */
    T: -1
  },
  /*::[*/
  1139: {
    /* n:"BrtBeginPCDCalcMemsExt", */
    T: 1
  },
  /*::[*/
  1140: {
    /* n:"BrtEndPCDCalcMemsExt", */
    T: -1
  },
  /*::[*/
  1141: {
    /* n:"BrtPCDField14" */
  },
  /*::[*/
  1142: {
    /* n:"BrtBeginSlicerStyles", */
    T: 1
  },
  /*::[*/
  1143: {
    /* n:"BrtEndSlicerStyles", */
    T: -1
  },
  /*::[*/
  1144: {
    /* n:"BrtBeginSlicerStyleElements", */
    T: 1
  },
  /*::[*/
  1145: {
    /* n:"BrtEndSlicerStyleElements", */
    T: -1
  },
  /*::[*/
  1146: {
    /* n:"BrtCFRuleExt" */
  },
  /*::[*/
  1147: {
    /* n:"BrtBeginSXCondFmt14", */
    T: 1
  },
  /*::[*/
  1148: {
    /* n:"BrtEndSXCondFmt14", */
    T: -1
  },
  /*::[*/
  1149: {
    /* n:"BrtBeginSXCondFmts14", */
    T: 1
  },
  /*::[*/
  1150: {
    /* n:"BrtEndSXCondFmts14", */
    T: -1
  },
  /*::[*/
  1152: {
    /* n:"BrtBeginSortCond14", */
    T: 1
  },
  /*::[*/
  1153: {
    /* n:"BrtEndSortCond14", */
    T: -1
  },
  /*::[*/
  1154: {
    /* n:"BrtEndDVals14", */
    T: -1
  },
  /*::[*/
  1155: {
    /* n:"BrtEndIconSet14", */
    T: -1
  },
  /*::[*/
  1156: {
    /* n:"BrtEndDatabar14", */
    T: -1
  },
  /*::[*/
  1157: {
    /* n:"BrtBeginColorScale14", */
    T: 1
  },
  /*::[*/
  1158: {
    /* n:"BrtEndColorScale14", */
    T: -1
  },
  /*::[*/
  1159: {
    /* n:"BrtBeginSxrules14", */
    T: 1
  },
  /*::[*/
  1160: {
    /* n:"BrtEndSxrules14", */
    T: -1
  },
  /*::[*/
  1161: {
    /* n:"BrtBeginPRule14", */
    T: 1
  },
  /*::[*/
  1162: {
    /* n:"BrtEndPRule14", */
    T: -1
  },
  /*::[*/
  1163: {
    /* n:"BrtBeginPRFilters14", */
    T: 1
  },
  /*::[*/
  1164: {
    /* n:"BrtEndPRFilters14", */
    T: -1
  },
  /*::[*/
  1165: {
    /* n:"BrtBeginPRFilter14", */
    T: 1
  },
  /*::[*/
  1166: {
    /* n:"BrtEndPRFilter14", */
    T: -1
  },
  /*::[*/
  1167: {
    /* n:"BrtBeginPRFItem14", */
    T: 1
  },
  /*::[*/
  1168: {
    /* n:"BrtEndPRFItem14", */
    T: -1
  },
  /*::[*/
  1169: {
    /* n:"BrtBeginCellIgnoreECs14", */
    T: 1
  },
  /*::[*/
  1170: {
    /* n:"BrtEndCellIgnoreECs14", */
    T: -1
  },
  /*::[*/
  1171: {
    /* n:"BrtDxf14" */
  },
  /*::[*/
  1172: {
    /* n:"BrtBeginDxF14s", */
    T: 1
  },
  /*::[*/
  1173: {
    /* n:"BrtEndDxf14s", */
    T: -1
  },
  /*::[*/
  1177: {
    /* n:"BrtFilter14" */
  },
  /*::[*/
  1178: {
    /* n:"BrtBeginCustomFilters14", */
    T: 1
  },
  /*::[*/
  1180: {
    /* n:"BrtCustomFilter14" */
  },
  /*::[*/
  1181: {
    /* n:"BrtIconFilter14" */
  },
  /*::[*/
  1182: {
    /* n:"BrtPivotCacheConnectionName" */
  },
  /*::[*/
  2048: {
    /* n:"BrtBeginDecoupledPivotCacheIDs", */
    T: 1
  },
  /*::[*/
  2049: {
    /* n:"BrtEndDecoupledPivotCacheIDs", */
    T: -1
  },
  /*::[*/
  2050: {
    /* n:"BrtDecoupledPivotCacheID" */
  },
  /*::[*/
  2051: {
    /* n:"BrtBeginPivotTableRefs", */
    T: 1
  },
  /*::[*/
  2052: {
    /* n:"BrtEndPivotTableRefs", */
    T: -1
  },
  /*::[*/
  2053: {
    /* n:"BrtPivotTableRef" */
  },
  /*::[*/
  2054: {
    /* n:"BrtSlicerCacheBookPivotTables" */
  },
  /*::[*/
  2055: {
    /* n:"BrtBeginSxvcells", */
    T: 1
  },
  /*::[*/
  2056: {
    /* n:"BrtEndSxvcells", */
    T: -1
  },
  /*::[*/
  2057: {
    /* n:"BrtBeginSxRow", */
    T: 1
  },
  /*::[*/
  2058: {
    /* n:"BrtEndSxRow", */
    T: -1
  },
  /*::[*/
  2060: {
    /* n:"BrtPcdCalcMem15" */
  },
  /*::[*/
  2067: {
    /* n:"BrtQsi15" */
  },
  /*::[*/
  2068: {
    /* n:"BrtBeginWebExtensions", */
    T: 1
  },
  /*::[*/
  2069: {
    /* n:"BrtEndWebExtensions", */
    T: -1
  },
  /*::[*/
  2070: {
    /* n:"BrtWebExtension" */
  },
  /*::[*/
  2071: {
    /* n:"BrtAbsPath15" */
  },
  /*::[*/
  2072: {
    /* n:"BrtBeginPivotTableUISettings", */
    T: 1
  },
  /*::[*/
  2073: {
    /* n:"BrtEndPivotTableUISettings", */
    T: -1
  },
  /*::[*/
  2075: {
    /* n:"BrtTableSlicerCacheIDs" */
  },
  /*::[*/
  2076: {
    /* n:"BrtTableSlicerCacheID" */
  },
  /*::[*/
  2077: {
    /* n:"BrtBeginTableSlicerCache", */
    T: 1
  },
  /*::[*/
  2078: {
    /* n:"BrtEndTableSlicerCache", */
    T: -1
  },
  /*::[*/
  2079: {
    /* n:"BrtSxFilter15" */
  },
  /*::[*/
  2080: {
    /* n:"BrtBeginTimelineCachePivotCacheIDs", */
    T: 1
  },
  /*::[*/
  2081: {
    /* n:"BrtEndTimelineCachePivotCacheIDs", */
    T: -1
  },
  /*::[*/
  2082: {
    /* n:"BrtTimelineCachePivotCacheID" */
  },
  /*::[*/
  2083: {
    /* n:"BrtBeginTimelineCacheIDs", */
    T: 1
  },
  /*::[*/
  2084: {
    /* n:"BrtEndTimelineCacheIDs", */
    T: -1
  },
  /*::[*/
  2085: {
    /* n:"BrtBeginTimelineCacheID", */
    T: 1
  },
  /*::[*/
  2086: {
    /* n:"BrtEndTimelineCacheID", */
    T: -1
  },
  /*::[*/
  2087: {
    /* n:"BrtBeginTimelinesEx", */
    T: 1
  },
  /*::[*/
  2088: {
    /* n:"BrtEndTimelinesEx", */
    T: -1
  },
  /*::[*/
  2089: {
    /* n:"BrtBeginTimelineEx", */
    T: 1
  },
  /*::[*/
  2090: {
    /* n:"BrtEndTimelineEx", */
    T: -1
  },
  /*::[*/
  2091: {
    /* n:"BrtWorkBookPr15" */
  },
  /*::[*/
  2092: {
    /* n:"BrtPCDH15" */
  },
  /*::[*/
  2093: {
    /* n:"BrtBeginTimelineStyle", */
    T: 1
  },
  /*::[*/
  2094: {
    /* n:"BrtEndTimelineStyle", */
    T: -1
  },
  /*::[*/
  2095: {
    /* n:"BrtTimelineStyleElement" */
  },
  /*::[*/
  2096: {
    /* n:"BrtBeginTimelineStylesheetExt15", */
    T: 1
  },
  /*::[*/
  2097: {
    /* n:"BrtEndTimelineStylesheetExt15", */
    T: -1
  },
  /*::[*/
  2098: {
    /* n:"BrtBeginTimelineStyles", */
    T: 1
  },
  /*::[*/
  2099: {
    /* n:"BrtEndTimelineStyles", */
    T: -1
  },
  /*::[*/
  2100: {
    /* n:"BrtBeginTimelineStyleElements", */
    T: 1
  },
  /*::[*/
  2101: {
    /* n:"BrtEndTimelineStyleElements", */
    T: -1
  },
  /*::[*/
  2102: {
    /* n:"BrtDxf15" */
  },
  /*::[*/
  2103: {
    /* n:"BrtBeginDxfs15", */
    T: 1
  },
  /*::[*/
  2104: {
    /* n:"BrtEndDxfs15", */
    T: -1
  },
  /*::[*/
  2105: {
    /* n:"BrtSlicerCacheHideItemsWithNoData" */
  },
  /*::[*/
  2106: {
    /* n:"BrtBeginItemUniqueNames", */
    T: 1
  },
  /*::[*/
  2107: {
    /* n:"BrtEndItemUniqueNames", */
    T: -1
  },
  /*::[*/
  2108: {
    /* n:"BrtItemUniqueName" */
  },
  /*::[*/
  2109: {
    /* n:"BrtBeginExtConn15", */
    T: 1
  },
  /*::[*/
  2110: {
    /* n:"BrtEndExtConn15", */
    T: -1
  },
  /*::[*/
  2111: {
    /* n:"BrtBeginOledbPr15", */
    T: 1
  },
  /*::[*/
  2112: {
    /* n:"BrtEndOledbPr15", */
    T: -1
  },
  /*::[*/
  2113: {
    /* n:"BrtBeginDataFeedPr15", */
    T: 1
  },
  /*::[*/
  2114: {
    /* n:"BrtEndDataFeedPr15", */
    T: -1
  },
  /*::[*/
  2115: {
    /* n:"BrtTextPr15" */
  },
  /*::[*/
  2116: {
    /* n:"BrtRangePr15" */
  },
  /*::[*/
  2117: {
    /* n:"BrtDbCommand15" */
  },
  /*::[*/
  2118: {
    /* n:"BrtBeginDbTables15", */
    T: 1
  },
  /*::[*/
  2119: {
    /* n:"BrtEndDbTables15", */
    T: -1
  },
  /*::[*/
  2120: {
    /* n:"BrtDbTable15" */
  },
  /*::[*/
  2121: {
    /* n:"BrtBeginDataModel", */
    T: 1
  },
  /*::[*/
  2122: {
    /* n:"BrtEndDataModel", */
    T: -1
  },
  /*::[*/
  2123: {
    /* n:"BrtBeginModelTables", */
    T: 1
  },
  /*::[*/
  2124: {
    /* n:"BrtEndModelTables", */
    T: -1
  },
  /*::[*/
  2125: {
    /* n:"BrtModelTable" */
  },
  /*::[*/
  2126: {
    /* n:"BrtBeginModelRelationships", */
    T: 1
  },
  /*::[*/
  2127: {
    /* n:"BrtEndModelRelationships", */
    T: -1
  },
  /*::[*/
  2128: {
    /* n:"BrtModelRelationship" */
  },
  /*::[*/
  2129: {
    /* n:"BrtBeginECTxtWiz15", */
    T: 1
  },
  /*::[*/
  2130: {
    /* n:"BrtEndECTxtWiz15", */
    T: -1
  },
  /*::[*/
  2131: {
    /* n:"BrtBeginECTWFldInfoLst15", */
    T: 1
  },
  /*::[*/
  2132: {
    /* n:"BrtEndECTWFldInfoLst15", */
    T: -1
  },
  /*::[*/
  2133: {
    /* n:"BrtBeginECTWFldInfo15", */
    T: 1
  },
  /*::[*/
  2134: {
    /* n:"BrtFieldListActiveItem" */
  },
  /*::[*/
  2135: {
    /* n:"BrtPivotCacheIdVersion" */
  },
  /*::[*/
  2136: {
    /* n:"BrtSXDI15" */
  },
  /*::[*/
  2137: {
    /* n:"BrtBeginModelTimeGroupings", */
    T: 1
  },
  /*::[*/
  2138: {
    /* n:"BrtEndModelTimeGroupings", */
    T: -1
  },
  /*::[*/
  2139: {
    /* n:"BrtBeginModelTimeGrouping", */
    T: 1
  },
  /*::[*/
  2140: {
    /* n:"BrtEndModelTimeGrouping", */
    T: -1
  },
  /*::[*/
  2141: {
    /* n:"BrtModelTimeGroupingCalcCol" */
  },
  /*::[*/
  3072: {
    /* n:"BrtUid" */
  },
  /*::[*/
  3073: {
    /* n:"BrtRevisionPtr" */
  },
  /*::[*/
  4096: {
    /* n:"BrtBeginDynamicArrayPr", */
    T: 1
  },
  /*::[*/
  4097: {
    /* n:"BrtEndDynamicArrayPr", */
    T: -1
  },
  /*::[*/
  5002: {
    /* n:"BrtBeginRichValueBlock", */
    T: 1
  },
  /*::[*/
  5003: {
    /* n:"BrtEndRichValueBlock", */
    T: -1
  },
  /*::[*/
  5081: {
    /* n:"BrtBeginRichFilters", */
    T: 1
  },
  /*::[*/
  5082: {
    /* n:"BrtEndRichFilters", */
    T: -1
  },
  /*::[*/
  5083: {
    /* n:"BrtRichFilter" */
  },
  /*::[*/
  5084: {
    /* n:"BrtBeginRichFilterColumn", */
    T: 1
  },
  /*::[*/
  5085: {
    /* n:"BrtEndRichFilterColumn", */
    T: -1
  },
  /*::[*/
  5086: {
    /* n:"BrtBeginCustomRichFilters", */
    T: 1
  },
  /*::[*/
  5087: {
    /* n:"BrtEndCustomRichFilters", */
    T: -1
  },
  /*::[*/
  5088: {
    /* n:"BrtCustomRichFilter" */
  },
  /*::[*/
  5089: {
    /* n:"BrtTop10RichFilter" */
  },
  /*::[*/
  5090: {
    /* n:"BrtDynamicRichFilter" */
  },
  /*::[*/
  5092: {
    /* n:"BrtBeginRichSortCondition", */
    T: 1
  },
  /*::[*/
  5093: {
    /* n:"BrtEndRichSortCondition", */
    T: -1
  },
  /*::[*/
  5094: {
    /* n:"BrtRichFilterDateGroupItem" */
  },
  /*::[*/
  5095: {
    /* n:"BrtBeginCalcFeatures", */
    T: 1
  },
  /*::[*/
  5096: {
    /* n:"BrtEndCalcFeatures", */
    T: -1
  },
  /*::[*/
  5097: {
    /* n:"BrtCalcFeature" */
  },
  /*::[*/
  5099: {
    /* n:"BrtExternalLinksPr" */
  },
  /*::[*/
  65535: { n: "" }
};
var XLSRecordEnum = {
  /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
  /*::[*/
  6: {
    /* n:"Formula", */
    f: parse_Formula
  },
  /*::[*/
  10: {
    /* n:"EOF", */
    f: parsenoop2
  },
  /*::[*/
  12: {
    /* n:"CalcCount", */
    f: parseuint16
  },
  //
  /*::[*/
  13: {
    /* n:"CalcMode", */
    f: parseuint16
  },
  //
  /*::[*/
  14: {
    /* n:"CalcPrecision", */
    f: parsebool
  },
  //
  /*::[*/
  15: {
    /* n:"CalcRefMode", */
    f: parsebool
  },
  //
  /*::[*/
  16: {
    /* n:"CalcDelta", */
    f: parse_Xnum
  },
  //
  /*::[*/
  17: {
    /* n:"CalcIter", */
    f: parsebool
  },
  //
  /*::[*/
  18: {
    /* n:"Protect", */
    f: parsebool
  },
  /*::[*/
  19: {
    /* n:"Password", */
    f: parseuint16
  },
  /*::[*/
  20: {
    /* n:"Header", */
    f: parse_XLHeaderFooter
  },
  /*::[*/
  21: {
    /* n:"Footer", */
    f: parse_XLHeaderFooter
  },
  /*::[*/
  23: {
    /* n:"ExternSheet", */
    f: parse_ExternSheet
  },
  /*::[*/
  24: {
    /* n:"Lbl", */
    f: parse_Lbl
  },
  /*::[*/
  25: {
    /* n:"WinProtect", */
    f: parsebool
  },
  /*::[*/
  26: {
    /* n:"VerticalPageBreaks", */
  },
  /*::[*/
  27: {
    /* n:"HorizontalPageBreaks", */
  },
  /*::[*/
  28: {
    /* n:"Note", */
    f: parse_Note
  },
  /*::[*/
  29: {
    /* n:"Selection", */
  },
  /*::[*/
  34: {
    /* n:"Date1904", */
    f: parsebool
  },
  /*::[*/
  35: {
    /* n:"ExternName", */
    f: parse_ExternName
  },
  /*::[*/
  38: {
    /* n:"LeftMargin", */
    f: parse_Xnum
  },
  // *
  /*::[*/
  39: {
    /* n:"RightMargin", */
    f: parse_Xnum
  },
  // *
  /*::[*/
  40: {
    /* n:"TopMargin", */
    f: parse_Xnum
  },
  // *
  /*::[*/
  41: {
    /* n:"BottomMargin", */
    f: parse_Xnum
  },
  // *
  /*::[*/
  42: {
    /* n:"PrintRowCol", */
    f: parsebool
  },
  /*::[*/
  43: {
    /* n:"PrintGrid", */
    f: parsebool
  },
  /*::[*/
  47: {
    /* n:"FilePass", */
    f: parse_FilePass
  },
  /*::[*/
  49: {
    /* n:"Font", */
    f: parse_Font
  },
  /*::[*/
  51: {
    /* n:"PrintSize", */
    f: parseuint16
  },
  /*::[*/
  60: {
    /* n:"Continue", */
  },
  /*::[*/
  61: {
    /* n:"Window1", */
    f: parse_Window1
  },
  /*::[*/
  64: {
    /* n:"Backup", */
    f: parsebool
  },
  /*::[*/
  65: {
    /* n:"Pane", */
    f: parse_Pane
  },
  /*::[*/
  66: {
    /* n:"CodePage", */
    f: parseuint16
  },
  /*::[*/
  77: {
    /* n:"Pls", */
  },
  /*::[*/
  80: {
    /* n:"DCon", */
  },
  /*::[*/
  81: {
    /* n:"DConRef", */
  },
  /*::[*/
  82: {
    /* n:"DConName", */
  },
  /*::[*/
  85: {
    /* n:"DefColWidth", */
    f: parseuint16
  },
  /*::[*/
  89: {
    /* n:"XCT", */
  },
  /*::[*/
  90: {
    /* n:"CRN", */
  },
  /*::[*/
  91: {
    /* n:"FileSharing", */
  },
  /*::[*/
  92: {
    /* n:"WriteAccess", */
    f: parse_WriteAccess
  },
  /*::[*/
  93: {
    /* n:"Obj", */
    f: parse_Obj
  },
  /*::[*/
  94: {
    /* n:"Uncalced", */
  },
  /*::[*/
  95: {
    /* n:"CalcSaveRecalc", */
    f: parsebool
  },
  //
  /*::[*/
  96: {
    /* n:"Template", */
  },
  /*::[*/
  97: {
    /* n:"Intl", */
  },
  /*::[*/
  99: {
    /* n:"ObjProtect", */
    f: parsebool
  },
  /*::[*/
  125: {
    /* n:"ColInfo", */
    f: parse_ColInfo
  },
  /*::[*/
  128: {
    /* n:"Guts", */
    f: parse_Guts
  },
  /*::[*/
  129: {
    /* n:"WsBool", */
    f: parse_WsBool
  },
  /*::[*/
  130: {
    /* n:"GridSet", */
    f: parseuint16
  },
  /*::[*/
  131: {
    /* n:"HCenter", */
    f: parsebool
  },
  /*::[*/
  132: {
    /* n:"VCenter", */
    f: parsebool
  },
  /*::[*/
  133: {
    /* n:"BoundSheet8", */
    f: parse_BoundSheet8
  },
  /*::[*/
  134: {
    /* n:"WriteProtect", */
  },
  /*::[*/
  140: {
    /* n:"Country", */
    f: parse_Country
  },
  /*::[*/
  141: {
    /* n:"HideObj", */
    f: parseuint16
  },
  /*::[*/
  144: {
    /* n:"Sort", */
  },
  /*::[*/
  146: {
    /* n:"Palette", */
    f: parse_Palette
  },
  /*::[*/
  151: {
    /* n:"Sync", */
  },
  /*::[*/
  152: {
    /* n:"LPr", */
  },
  /*::[*/
  153: {
    /* n:"DxGCol", */
  },
  /*::[*/
  154: {
    /* n:"FnGroupName", */
  },
  /*::[*/
  155: {
    /* n:"FilterMode", */
  },
  /*::[*/
  156: {
    /* n:"BuiltInFnGroupCount", */
    f: parseuint16
  },
  /*::[*/
  157: {
    /* n:"AutoFilterInfo", */
  },
  /*::[*/
  158: {
    /* n:"AutoFilter", */
  },
  /*::[*/
  160: {
    /* n:"Scl", */
    f: parse_Scl
  },
  /*::[*/
  161: {
    /* n:"Setup", */
    f: parse_Setup
  },
  /*::[*/
  174: {
    /* n:"ScenMan", */
  },
  /*::[*/
  175: {
    /* n:"SCENARIO", */
  },
  /*::[*/
  176: {
    /* n:"SxView", */
  },
  /*::[*/
  177: {
    /* n:"Sxvd", */
  },
  /*::[*/
  178: {
    /* n:"SXVI", */
  },
  /*::[*/
  180: {
    /* n:"SxIvd", */
  },
  /*::[*/
  181: {
    /* n:"SXLI", */
  },
  /*::[*/
  182: {
    /* n:"SXPI", */
  },
  /*::[*/
  184: {
    /* n:"DocRoute", */
  },
  /*::[*/
  185: {
    /* n:"RecipName", */
  },
  /*::[*/
  189: {
    /* n:"MulRk", */
    f: parse_MulRk
  },
  /*::[*/
  190: {
    /* n:"MulBlank", */
    f: parse_MulBlank
  },
  /*::[*/
  193: {
    /* n:"Mms", */
    f: parsenoop2
  },
  /*::[*/
  197: {
    /* n:"SXDI", */
  },
  /*::[*/
  198: {
    /* n:"SXDB", */
  },
  /*::[*/
  199: {
    /* n:"SXFDB", */
  },
  /*::[*/
  200: {
    /* n:"SXDBB", */
  },
  /*::[*/
  201: {
    /* n:"SXNum", */
  },
  /*::[*/
  202: {
    /* n:"SxBool", */
    f: parsebool
  },
  /*::[*/
  203: {
    /* n:"SxErr", */
  },
  /*::[*/
  204: {
    /* n:"SXInt", */
  },
  /*::[*/
  205: {
    /* n:"SXString", */
  },
  /*::[*/
  206: {
    /* n:"SXDtr", */
  },
  /*::[*/
  207: {
    /* n:"SxNil", */
  },
  /*::[*/
  208: {
    /* n:"SXTbl", */
  },
  /*::[*/
  209: {
    /* n:"SXTBRGIITM", */
  },
  /*::[*/
  210: {
    /* n:"SxTbpg", */
  },
  /*::[*/
  211: {
    /* n:"ObProj", */
  },
  /*::[*/
  213: {
    /* n:"SXStreamID", */
  },
  /*::[*/
  215: {
    /* n:"DBCell", */
  },
  /*::[*/
  216: {
    /* n:"SXRng", */
  },
  /*::[*/
  217: {
    /* n:"SxIsxoper", */
  },
  /*::[*/
  218: {
    /* n:"BookBool", */
    f: parseuint16
  },
  /*::[*/
  220: {
    /* n:"DbOrParamQry", */
  },
  /*::[*/
  221: {
    /* n:"ScenarioProtect", */
    f: parsebool
  },
  /*::[*/
  222: {
    /* n:"OleObjectSize", */
  },
  /*::[*/
  224: {
    /* n:"XF", */
    f: parse_XF
  },
  /*::[*/
  225: {
    /* n:"InterfaceHdr", */
    f: parse_InterfaceHdr
  },
  /*::[*/
  226: {
    /* n:"InterfaceEnd", */
    f: parsenoop2
  },
  /*::[*/
  227: {
    /* n:"SXVS", */
  },
  /*::[*/
  229: {
    /* n:"MergeCells", */
    f: parse_MergeCells
  },
  /*::[*/
  233: {
    /* n:"BkHim", */
  },
  /*::[*/
  235: {
    /* n:"MsoDrawingGroup", */
  },
  /*::[*/
  236: {
    /* n:"MsoDrawing", */
  },
  /*::[*/
  237: {
    /* n:"MsoDrawingSelection", */
  },
  /*::[*/
  239: {
    /* n:"PhoneticInfo", */
  },
  /*::[*/
  240: {
    /* n:"SxRule", */
  },
  /*::[*/
  241: {
    /* n:"SXEx", */
  },
  /*::[*/
  242: {
    /* n:"SxFilt", */
  },
  /*::[*/
  244: {
    /* n:"SxDXF", */
  },
  /*::[*/
  245: {
    /* n:"SxItm", */
  },
  /*::[*/
  246: {
    /* n:"SxName", */
  },
  /*::[*/
  247: {
    /* n:"SxSelect", */
  },
  /*::[*/
  248: {
    /* n:"SXPair", */
  },
  /*::[*/
  249: {
    /* n:"SxFmla", */
  },
  /*::[*/
  251: {
    /* n:"SxFormat", */
  },
  /*::[*/
  252: {
    /* n:"SST", */
    f: parse_SST
  },
  /*::[*/
  253: {
    /* n:"LabelSst", */
    f: parse_LabelSst
  },
  /*::[*/
  255: {
    /* n:"ExtSST", */
    f: parse_ExtSST
  },
  /*::[*/
  256: {
    /* n:"SXVDEx", */
  },
  /*::[*/
  259: {
    /* n:"SXFormula", */
  },
  /*::[*/
  290: {
    /* n:"SXDBEx", */
  },
  /*::[*/
  311: {
    /* n:"RRDInsDel", */
  },
  /*::[*/
  312: {
    /* n:"RRDHead", */
  },
  /*::[*/
  315: {
    /* n:"RRDChgCell", */
  },
  /*::[*/
  317: {
    /* n:"RRTabId", */
    f: parseuint16a
  },
  /*::[*/
  318: {
    /* n:"RRDRenSheet", */
  },
  /*::[*/
  319: {
    /* n:"RRSort", */
  },
  /*::[*/
  320: {
    /* n:"RRDMove", */
  },
  /*::[*/
  330: {
    /* n:"RRFormat", */
  },
  /*::[*/
  331: {
    /* n:"RRAutoFmt", */
  },
  /*::[*/
  333: {
    /* n:"RRInsertSh", */
  },
  /*::[*/
  334: {
    /* n:"RRDMoveBegin", */
  },
  /*::[*/
  335: {
    /* n:"RRDMoveEnd", */
  },
  /*::[*/
  336: {
    /* n:"RRDInsDelBegin", */
  },
  /*::[*/
  337: {
    /* n:"RRDInsDelEnd", */
  },
  /*::[*/
  338: {
    /* n:"RRDConflict", */
  },
  /*::[*/
  339: {
    /* n:"RRDDefName", */
  },
  /*::[*/
  340: {
    /* n:"RRDRstEtxp", */
  },
  /*::[*/
  351: {
    /* n:"LRng", */
  },
  /*::[*/
  352: {
    /* n:"UsesELFs", */
    f: parsebool
  },
  /*::[*/
  353: {
    /* n:"DSF", */
    f: parsenoop2
  },
  /*::[*/
  401: {
    /* n:"CUsr", */
  },
  /*::[*/
  402: {
    /* n:"CbUsr", */
  },
  /*::[*/
  403: {
    /* n:"UsrInfo", */
  },
  /*::[*/
  404: {
    /* n:"UsrExcl", */
  },
  /*::[*/
  405: {
    /* n:"FileLock", */
  },
  /*::[*/
  406: {
    /* n:"RRDInfo", */
  },
  /*::[*/
  407: {
    /* n:"BCUsrs", */
  },
  /*::[*/
  408: {
    /* n:"UsrChk", */
  },
  /*::[*/
  425: {
    /* n:"UserBView", */
  },
  /*::[*/
  426: {
    /* n:"UserSViewBegin", */
  },
  /*::[*/
  427: {
    /* n:"UserSViewEnd", */
  },
  /*::[*/
  428: {
    /* n:"RRDUserView", */
  },
  /*::[*/
  429: {
    /* n:"Qsi", */
  },
  /*::[*/
  430: {
    /* n:"SupBook", */
    f: parse_SupBook
  },
  /*::[*/
  431: {
    /* n:"Prot4Rev", */
    f: parsebool
  },
  /*::[*/
  432: {
    /* n:"CondFmt", */
  },
  /*::[*/
  433: {
    /* n:"CF", */
  },
  /*::[*/
  434: {
    /* n:"DVal", */
  },
  /*::[*/
  437: {
    /* n:"DConBin", */
  },
  /*::[*/
  438: {
    /* n:"TxO", */
    f: parse_TxO
  },
  /*::[*/
  439: {
    /* n:"RefreshAll", */
    f: parsebool
  },
  //
  /*::[*/
  440: {
    /* n:"HLink", */
    f: parse_HLink
  },
  /*::[*/
  441: {
    /* n:"Lel", */
  },
  /*::[*/
  442: {
    /* n:"CodeName", */
    f: parse_XLUnicodeString
  },
  /*::[*/
  443: {
    /* n:"SXFDBType", */
  },
  /*::[*/
  444: {
    /* n:"Prot4RevPass", */
    f: parseuint16
  },
  /*::[*/
  445: {
    /* n:"ObNoMacros", */
  },
  /*::[*/
  446: {
    /* n:"Dv", */
  },
  /*::[*/
  448: {
    /* n:"Excel9File", */
    f: parsenoop2
  },
  /*::[*/
  449: {
    /* n:"RecalcId", */
    f: parse_RecalcId,
    r: 2
  },
  /*::[*/
  450: {
    /* n:"EntExU2", */
    f: parsenoop2
  },
  /*::[*/
  512: {
    /* n:"Dimensions", */
    f: parse_Dimensions
  },
  /*::[*/
  513: {
    /* n:"Blank", */
    f: parse_Blank
  },
  /*::[*/
  515: {
    /* n:"Number", */
    f: parse_Number
  },
  /*::[*/
  516: {
    /* n:"Label", */
    f: parse_Label
  },
  /*::[*/
  517: {
    /* n:"BoolErr", */
    f: parse_BoolErr
  },
  /*::[*/
  519: {
    /* n:"String", */
    f: parse_String
  },
  /*::[*/
  520: {
    /* n:"Row", */
    f: parse_Row
  },
  /*::[*/
  523: {
    /* n:"Index", */
  },
  /*::[*/
  545: {
    /* n:"Array", */
    f: parse_Array
  },
  /*::[*/
  549: {
    /* n:"DefaultRowHeight", */
    f: parse_DefaultRowHeight
  },
  /*::[*/
  566: {
    /* n:"Table", */
  },
  /*::[*/
  574: {
    /* n:"Window2", */
    f: parse_Window2
  },
  /*::[*/
  638: {
    /* n:"RK", */
    f: parse_RK
  },
  /*::[*/
  659: {
    /* n:"Style", */
  },
  /*::[*/
  1048: {
    /* n:"BigName", */
  },
  /*::[*/
  1054: {
    /* n:"Format", */
    f: parse_Format
  },
  /*::[*/
  1084: {
    /* n:"ContinueBigName", */
  },
  /*::[*/
  1212: {
    /* n:"ShrFmla", */
    f: parse_ShrFmla
  },
  /*::[*/
  2048: {
    /* n:"HLinkTooltip", */
    f: parse_HLinkTooltip
  },
  /*::[*/
  2049: {
    /* n:"WebPub", */
  },
  /*::[*/
  2050: {
    /* n:"QsiSXTag", */
  },
  /*::[*/
  2051: {
    /* n:"DBQueryExt", */
  },
  /*::[*/
  2052: {
    /* n:"ExtString", */
  },
  /*::[*/
  2053: {
    /* n:"TxtQry", */
  },
  /*::[*/
  2054: {
    /* n:"Qsir", */
  },
  /*::[*/
  2055: {
    /* n:"Qsif", */
  },
  /*::[*/
  2056: {
    /* n:"RRDTQSIF", */
  },
  /*::[*/
  2057: {
    /* n:"BOF", */
    f: parse_BOF
  },
  /*::[*/
  2058: {
    /* n:"OleDbConn", */
  },
  /*::[*/
  2059: {
    /* n:"WOpt", */
  },
  /*::[*/
  2060: {
    /* n:"SXViewEx", */
  },
  /*::[*/
  2061: {
    /* n:"SXTH", */
  },
  /*::[*/
  2062: {
    /* n:"SXPIEx", */
  },
  /*::[*/
  2063: {
    /* n:"SXVDTEx", */
  },
  /*::[*/
  2064: {
    /* n:"SXViewEx9", */
  },
  /*::[*/
  2066: {
    /* n:"ContinueFrt", */
  },
  /*::[*/
  2067: {
    /* n:"RealTimeData", */
  },
  /*::[*/
  2128: {
    /* n:"ChartFrtInfo", */
  },
  /*::[*/
  2129: {
    /* n:"FrtWrapper", */
  },
  /*::[*/
  2130: {
    /* n:"StartBlock", */
  },
  /*::[*/
  2131: {
    /* n:"EndBlock", */
  },
  /*::[*/
  2132: {
    /* n:"StartObject", */
  },
  /*::[*/
  2133: {
    /* n:"EndObject", */
  },
  /*::[*/
  2134: {
    /* n:"CatLab", */
  },
  /*::[*/
  2135: {
    /* n:"YMult", */
  },
  /*::[*/
  2136: {
    /* n:"SXViewLink", */
  },
  /*::[*/
  2137: {
    /* n:"PivotChartBits", */
  },
  /*::[*/
  2138: {
    /* n:"FrtFontList", */
  },
  /*::[*/
  2146: {
    /* n:"SheetExt", */
  },
  /*::[*/
  2147: {
    /* n:"BookExt", */
    r: 12
  },
  /*::[*/
  2148: {
    /* n:"SXAddl", */
  },
  /*::[*/
  2149: {
    /* n:"CrErr", */
  },
  /*::[*/
  2150: {
    /* n:"HFPicture", */
  },
  /*::[*/
  2151: {
    /* n:"FeatHdr", */
    f: parsenoop2
  },
  /*::[*/
  2152: {
    /* n:"Feat", */
  },
  /*::[*/
  2154: {
    /* n:"DataLabExt", */
  },
  /*::[*/
  2155: {
    /* n:"DataLabExtContents", */
  },
  /*::[*/
  2156: {
    /* n:"CellWatch", */
  },
  /*::[*/
  2161: {
    /* n:"FeatHdr11", */
  },
  /*::[*/
  2162: {
    /* n:"Feature11", */
  },
  /*::[*/
  2164: {
    /* n:"DropDownObjIds", */
  },
  /*::[*/
  2165: {
    /* n:"ContinueFrt11", */
  },
  /*::[*/
  2166: {
    /* n:"DConn", */
  },
  /*::[*/
  2167: {
    /* n:"List12", */
  },
  /*::[*/
  2168: {
    /* n:"Feature12", */
  },
  /*::[*/
  2169: {
    /* n:"CondFmt12", */
  },
  /*::[*/
  2170: {
    /* n:"CF12", */
  },
  /*::[*/
  2171: {
    /* n:"CFEx", */
  },
  /*::[*/
  2172: {
    /* n:"XFCRC", */
    f: parse_XFCRC,
    r: 12
  },
  /*::[*/
  2173: {
    /* n:"XFExt", */
    f: parse_XFExt,
    r: 12
  },
  /*::[*/
  2174: {
    /* n:"AutoFilter12", */
  },
  /*::[*/
  2175: {
    /* n:"ContinueFrt12", */
  },
  /*::[*/
  2180: {
    /* n:"MDTInfo", */
  },
  /*::[*/
  2181: {
    /* n:"MDXStr", */
  },
  /*::[*/
  2182: {
    /* n:"MDXTuple", */
  },
  /*::[*/
  2183: {
    /* n:"MDXSet", */
  },
  /*::[*/
  2184: {
    /* n:"MDXProp", */
  },
  /*::[*/
  2185: {
    /* n:"MDXKPI", */
  },
  /*::[*/
  2186: {
    /* n:"MDB", */
  },
  /*::[*/
  2187: {
    /* n:"PLV", */
  },
  /*::[*/
  2188: {
    /* n:"Compat12", */
    f: parsebool,
    r: 12
  },
  /*::[*/
  2189: {
    /* n:"DXF", */
  },
  /*::[*/
  2190: {
    /* n:"TableStyles", */
    r: 12
  },
  /*::[*/
  2191: {
    /* n:"TableStyle", */
  },
  /*::[*/
  2192: {
    /* n:"TableStyleElement", */
  },
  /*::[*/
  2194: {
    /* n:"StyleExt", */
  },
  /*::[*/
  2195: {
    /* n:"NamePublish", */
  },
  /*::[*/
  2196: {
    /* n:"NameCmt", */
    f: parse_NameCmt,
    r: 12
  },
  /*::[*/
  2197: {
    /* n:"SortData", */
  },
  /*::[*/
  2198: {
    /* n:"Theme", */
    f: parse_Theme,
    r: 12
  },
  /*::[*/
  2199: {
    /* n:"GUIDTypeLib", */
  },
  /*::[*/
  2200: {
    /* n:"FnGrp12", */
  },
  /*::[*/
  2201: {
    /* n:"NameFnGrp12", */
  },
  /*::[*/
  2202: {
    /* n:"MTRSettings", */
    f: parse_MTRSettings,
    r: 12
  },
  /*::[*/
  2203: {
    /* n:"CompressPictures", */
    f: parsenoop2
  },
  /*::[*/
  2204: {
    /* n:"HeaderFooter", */
  },
  /*::[*/
  2205: {
    /* n:"CrtLayout12", */
  },
  /*::[*/
  2206: {
    /* n:"CrtMlFrt", */
  },
  /*::[*/
  2207: {
    /* n:"CrtMlFrtContinue", */
  },
  /*::[*/
  2211: {
    /* n:"ForceFullCalculation", */
    f: parse_ForceFullCalculation
  },
  /*::[*/
  2212: {
    /* n:"ShapePropsStream", */
  },
  /*::[*/
  2213: {
    /* n:"TextPropsStream", */
  },
  /*::[*/
  2214: {
    /* n:"RichTextStream", */
  },
  /*::[*/
  2215: {
    /* n:"CrtLayout12A", */
  },
  /*::[*/
  4097: {
    /* n:"Units", */
  },
  /*::[*/
  4098: {
    /* n:"Chart", */
  },
  /*::[*/
  4099: {
    /* n:"Series", */
  },
  /*::[*/
  4102: {
    /* n:"DataFormat", */
  },
  /*::[*/
  4103: {
    /* n:"LineFormat", */
  },
  /*::[*/
  4105: {
    /* n:"MarkerFormat", */
  },
  /*::[*/
  4106: {
    /* n:"AreaFormat", */
  },
  /*::[*/
  4107: {
    /* n:"PieFormat", */
  },
  /*::[*/
  4108: {
    /* n:"AttachedLabel", */
  },
  /*::[*/
  4109: {
    /* n:"SeriesText", */
  },
  /*::[*/
  4116: {
    /* n:"ChartFormat", */
  },
  /*::[*/
  4117: {
    /* n:"Legend", */
  },
  /*::[*/
  4118: {
    /* n:"SeriesList", */
  },
  /*::[*/
  4119: {
    /* n:"Bar", */
  },
  /*::[*/
  4120: {
    /* n:"Line", */
  },
  /*::[*/
  4121: {
    /* n:"Pie", */
  },
  /*::[*/
  4122: {
    /* n:"Area", */
  },
  /*::[*/
  4123: {
    /* n:"Scatter", */
  },
  /*::[*/
  4124: {
    /* n:"CrtLine", */
  },
  /*::[*/
  4125: {
    /* n:"Axis", */
  },
  /*::[*/
  4126: {
    /* n:"Tick", */
  },
  /*::[*/
  4127: {
    /* n:"ValueRange", */
  },
  /*::[*/
  4128: {
    /* n:"CatSerRange", */
  },
  /*::[*/
  4129: {
    /* n:"AxisLine", */
  },
  /*::[*/
  4130: {
    /* n:"CrtLink", */
  },
  /*::[*/
  4132: {
    /* n:"DefaultText", */
  },
  /*::[*/
  4133: {
    /* n:"Text", */
  },
  /*::[*/
  4134: {
    /* n:"FontX", */
    f: parseuint16
  },
  /*::[*/
  4135: {
    /* n:"ObjectLink", */
  },
  /*::[*/
  4146: {
    /* n:"Frame", */
  },
  /*::[*/
  4147: {
    /* n:"Begin", */
  },
  /*::[*/
  4148: {
    /* n:"End", */
  },
  /*::[*/
  4149: {
    /* n:"PlotArea", */
  },
  /*::[*/
  4154: {
    /* n:"Chart3d", */
  },
  /*::[*/
  4156: {
    /* n:"PicF", */
  },
  /*::[*/
  4157: {
    /* n:"DropBar", */
  },
  /*::[*/
  4158: {
    /* n:"Radar", */
  },
  /*::[*/
  4159: {
    /* n:"Surf", */
  },
  /*::[*/
  4160: {
    /* n:"RadarArea", */
  },
  /*::[*/
  4161: {
    /* n:"AxisParent", */
  },
  /*::[*/
  4163: {
    /* n:"LegendException", */
  },
  /*::[*/
  4164: {
    /* n:"ShtProps", */
    f: parse_ShtProps
  },
  /*::[*/
  4165: {
    /* n:"SerToCrt", */
  },
  /*::[*/
  4166: {
    /* n:"AxesUsed", */
  },
  /*::[*/
  4168: {
    /* n:"SBaseRef", */
  },
  /*::[*/
  4170: {
    /* n:"SerParent", */
  },
  /*::[*/
  4171: {
    /* n:"SerAuxTrend", */
  },
  /*::[*/
  4174: {
    /* n:"IFmtRecord", */
  },
  /*::[*/
  4175: {
    /* n:"Pos", */
  },
  /*::[*/
  4176: {
    /* n:"AlRuns", */
  },
  /*::[*/
  4177: {
    /* n:"BRAI", */
  },
  /*::[*/
  4187: {
    /* n:"SerAuxErrBar", */
  },
  /*::[*/
  4188: {
    /* n:"ClrtClient", */
    f: parse_ClrtClient
  },
  /*::[*/
  4189: {
    /* n:"SerFmt", */
  },
  /*::[*/
  4191: {
    /* n:"Chart3DBarShape", */
  },
  /*::[*/
  4192: {
    /* n:"Fbi", */
  },
  /*::[*/
  4193: {
    /* n:"BopPop", */
  },
  /*::[*/
  4194: {
    /* n:"AxcExt", */
  },
  /*::[*/
  4195: {
    /* n:"Dat", */
  },
  /*::[*/
  4196: {
    /* n:"PlotGrowth", */
  },
  /*::[*/
  4197: {
    /* n:"SIIndex", */
  },
  /*::[*/
  4198: {
    /* n:"GelFrame", */
  },
  /*::[*/
  4199: {
    /* n:"BopPopCustom", */
  },
  /*::[*/
  4200: {
    /* n:"Fbi2", */
  },
  /*::[*/
  0: {
    /* n:"Dimensions", */
    f: parse_Dimensions
  },
  /*::[*/
  1: {
    /* n:"BIFF2BLANK", */
  },
  /*::[*/
  2: {
    /* n:"BIFF2INT", */
    f: parse_BIFF2INT
  },
  /*::[*/
  3: {
    /* n:"BIFF2NUM", */
    f: parse_BIFF2NUM
  },
  /*::[*/
  4: {
    /* n:"BIFF2STR", */
    f: parse_BIFF2STR
  },
  /*::[*/
  5: {
    /* n:"BoolErr", */
    f: parse_BoolErr
  },
  /*::[*/
  7: {
    /* n:"String", */
    f: parse_BIFF2STRING
  },
  /*::[*/
  8: {
    /* n:"BIFF2ROW", */
  },
  /*::[*/
  9: {
    /* n:"BOF", */
    f: parse_BOF
  },
  /*::[*/
  11: {
    /* n:"Index", */
  },
  /*::[*/
  22: {
    /* n:"ExternCount", */
    f: parseuint16
  },
  /*::[*/
  30: {
    /* n:"BIFF2FORMAT", */
    f: parse_BIFF2Format
  },
  /*::[*/
  31: {
    /* n:"BIFF2FMTCNT", */
  },
  /* 16-bit cnt of BIFF2FORMAT records */
  /*::[*/
  32: {
    /* n:"BIFF2COLINFO", */
  },
  /*::[*/
  33: {
    /* n:"Array", */
    f: parse_Array
  },
  /*::[*/
  36: {
    /* n:"COLWIDTH", */
  },
  /*::[*/
  37: {
    /* n:"DefaultRowHeight", */
    f: parse_DefaultRowHeight
  },
  // 0x2c ??
  // 0x2d ??
  // 0x2e ??
  // 0x30 FONTCOUNT: number of fonts
  /*::[*/
  50: {
    /* n:"BIFF2FONTXTRA", */
    f: parse_BIFF2FONTXTRA
  },
  // 0x35: INFOOPTS
  // 0x36: TABLE (BIFF2 only)
  // 0x37: TABLE2 (BIFF2 only)
  // 0x38: WNDESK
  // 0x39 ??
  // 0x3a: BEGINPREF
  // 0x3b: ENDPREF
  /*::[*/
  62: {
    /* n:"BIFF2WINDOW2", */
  },
  // 0x3f ??
  // 0x46: SHOWSCROLL
  // 0x47: SHOWFORMULA
  // 0x48: STATUSBAR
  // 0x49: SHORTMENUS
  // 0x4A:
  // 0x4B:
  // 0x4C:
  // 0x4E:
  // 0x4F:
  // 0x58: TOOLBAR (BIFF3)
  /* - - - */
  /*::[*/
  52: {
    /* n:"DDEObjName", */
  },
  /*::[*/
  67: {
    /* n:"BIFF2XF", */
  },
  /*::[*/
  68: {
    /* n:"BIFF2XFINDEX", */
    f: parseuint16
  },
  /*::[*/
  69: {
    /* n:"BIFF2FONTCLR", */
  },
  /*::[*/
  86: {
    /* n:"BIFF4FMTCNT", */
  },
  /* 16-bit cnt, similar to BIFF2 */
  /*::[*/
  126: {
    /* n:"RK", */
  },
  /* Not necessarily same as 0x027e */
  /*::[*/
  127: {
    /* n:"ImData", */
    f: parse_ImData
  },
  /*::[*/
  135: {
    /* n:"Addin", */
  },
  /*::[*/
  136: {
    /* n:"Edg", */
  },
  /*::[*/
  137: {
    /* n:"Pub", */
  },
  // 0x8A
  // 0x8B LH: alternate menu key flag (BIFF3/4)
  // 0x8E
  // 0x8F
  /*::[*/
  145: {
    /* n:"Sub", */
  },
  // 0x93 STYLE
  /*::[*/
  148: {
    /* n:"LHRecord", */
  },
  /*::[*/
  149: {
    /* n:"LHNGraph", */
  },
  /*::[*/
  150: {
    /* n:"Sound", */
  },
  // 0xA2 FNPROTO: function prototypes (BIFF4)
  // 0xA3
  // 0xA8
  /*::[*/
  169: {
    /* n:"CoordList", */
  },
  /*::[*/
  171: {
    /* n:"GCW", */
  },
  /*::[*/
  188: {
    /* n:"ShrFmla", */
  },
  /* Not necessarily same as 0x04bc */
  /*::[*/
  191: {
    /* n:"ToolbarHdr", */
  },
  /*::[*/
  192: {
    /* n:"ToolbarEnd", */
  },
  /*::[*/
  194: {
    /* n:"AddMenu", */
  },
  /*::[*/
  195: {
    /* n:"DelMenu", */
  },
  /*::[*/
  214: {
    /* n:"RString", */
    f: parse_RString
  },
  /*::[*/
  223: {
    /* n:"UDDesc", */
  },
  /*::[*/
  234: {
    /* n:"TabIdConf", */
  },
  /*::[*/
  354: {
    /* n:"XL5Modify", */
  },
  /*::[*/
  421: {
    /* n:"FileSharing2", */
  },
  /*::[*/
  518: {
    /* n:"Formula", */
    f: parse_Formula
  },
  /*::[*/
  521: {
    /* n:"BOF", */
    f: parse_BOF
  },
  /*::[*/
  536: {
    /* n:"Lbl", */
    f: parse_Lbl
  },
  /*::[*/
  547: {
    /* n:"ExternName", */
    f: parse_ExternName
  },
  /*::[*/
  561: {
    /* n:"Font", */
  },
  /*::[*/
  579: {
    /* n:"BIFF3XF", */
  },
  /*::[*/
  1030: {
    /* n:"Formula", */
    f: parse_Formula
  },
  /*::[*/
  1033: {
    /* n:"BOF", */
    f: parse_BOF
  },
  /*::[*/
  1091: {
    /* n:"BIFF4XF", */
  },
  /*::[*/
  2157: {
    /* n:"FeatInfo", */
  },
  /*::[*/
  2163: {
    /* n:"FeatInfo11", */
  },
  /*::[*/
  2177: {
    /* n:"SXAddl12", */
  },
  /*::[*/
  2240: {
    /* n:"AutoWebPub", */
  },
  /*::[*/
  2241: {
    /* n:"ListObj", */
  },
  /*::[*/
  2242: {
    /* n:"ListField", */
  },
  /*::[*/
  2243: {
    /* n:"ListDV", */
  },
  /*::[*/
  2244: {
    /* n:"ListCondFmt", */
  },
  /*::[*/
  2245: {
    /* n:"ListCF", */
  },
  /*::[*/
  2246: {
    /* n:"FMQry", */
  },
  /*::[*/
  2247: {
    /* n:"FMSQry", */
  },
  /*::[*/
  2248: {
    /* n:"PLV", */
  },
  /*::[*/
  2249: {
    /* n:"LnExt", */
  },
  /*::[*/
  2250: {
    /* n:"MkrExt", */
  },
  /*::[*/
  2251: {
    /* n:"CrtCoopt", */
  },
  /*::[*/
  2262: {
    /* n:"FRTArchId$", */
    r: 12
  },
  /*::[*/
  29282: {}
};
function write_biff_rec(ba, type, payload, length) {
  var t = type;
  if (isNaN(t)) return;
  var len = length || (payload || []).length || 0;
  var o = ba.next(4);
  o.write_shift(2, t);
  o.write_shift(2, len);
  if (
    /*:: len != null &&*/
    len > 0 && is_buf(payload)
  ) ba.push(payload);
}
__name(write_biff_rec, "write_biff_rec");
function html_to_sheet(str, _opts) {
  var opts = _opts || {};
  if (DENSE != null && opts.dense == null) opts.dense = DENSE;
  var ws = opts.dense ? [] : {};
  str = str.replace(/<!--.*?-->/g, "");
  var mtch = str.match(/<table/i);
  if (!mtch) throw new Error("Invalid HTML: could not find <table>");
  var mtch2 = str.match(/<\/table/i);
  var i = mtch.index, j = mtch2 && mtch2.index || str.length;
  var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
  var R = -1, C = 0, RS = 0, CS = 0;
  var range2 = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
  var merges = [];
  for (i = 0; i < rows.length; ++i) {
    var row = rows[i].trim();
    var hd = row.slice(0, 3).toLowerCase();
    if (hd == "<tr") {
      ++R;
      if (opts.sheetRows && opts.sheetRows <= R) {
        --R;
        break;
      }
      C = 0;
      continue;
    }
    if (hd != "<td" && hd != "<th") continue;
    var cells = row.split(/<\/t[dh]>/i);
    for (j = 0; j < cells.length; ++j) {
      var cell = cells[j].trim();
      if (!cell.match(/<t[dh]/i)) continue;
      var m = cell, cc = 0;
      while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc + 1);
      for (var midx = 0; midx < merges.length; ++midx) {
        var _merge = merges[midx];
        if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
          C = _merge.e.c + 1;
          midx = -1;
        }
      }
      var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
      CS = tag.colspan ? +tag.colspan : 1;
      if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({ s: { r: R, c: C }, e: { r: R + (RS || 1) - 1, c: C + CS - 1 } });
      var _t = tag.t || tag["data-t"] || "";
      if (!m.length) {
        C += CS;
        continue;
      }
      m = htmldecode(m);
      if (range2.s.r > R) range2.s.r = R;
      if (range2.e.r < R) range2.e.r = R;
      if (range2.s.c > C) range2.s.c = C;
      if (range2.e.c < C) range2.e.c = C;
      if (!m.length) {
        C += CS;
        continue;
      }
      var o = { t: "s", v: m };
      if (opts.raw || !m.trim().length || _t == "s") {
      } else if (m === "TRUE") o = { t: "b", v: true };
      else if (m === "FALSE") o = { t: "b", v: false };
      else if (!isNaN(fuzzynum(m))) o = { t: "n", v: fuzzynum(m) };
      else if (!isNaN(fuzzydate(m).getDate())) {
        o = { t: "d", v: parseDate(m) };
        if (!opts.cellDates) o = { t: "n", v: datenum(o.v) };
        o.z = opts.dateNF || table_fmt[14];
      }
      if (opts.dense) {
        if (!ws[R]) ws[R] = [];
        ws[R][C] = o;
      } else ws[encode_cell({ r: R, c: C })] = o;
      C += CS;
    }
  }
  ws["!ref"] = encode_range(range2);
  if (merges.length) ws["!merges"] = merges;
  return ws;
}
__name(html_to_sheet, "html_to_sheet");
function make_html_row(ws, r, R, o) {
  var M = ws["!merges"] || [];
  var oo = [];
  for (var C = r.s.c; C <= r.e.c; ++C) {
    var RS = 0, CS = 0;
    for (var j = 0; j < M.length; ++j) {
      if (M[j].s.r > R || M[j].s.c > C) continue;
      if (M[j].e.r < R || M[j].e.c < C) continue;
      if (M[j].s.r < R || M[j].s.c < C) {
        RS = -1;
        break;
      }
      RS = M[j].e.r - M[j].s.r + 1;
      CS = M[j].e.c - M[j].s.c + 1;
      break;
    }
    if (RS < 0) continue;
    var coord = encode_cell({ r: R, c: C });
    var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
    var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
    var sp = {};
    if (RS > 1) sp.rowspan = RS;
    if (CS > 1) sp.colspan = CS;
    if (o.editable) w = '<span contenteditable="true">' + w + "</span>";
    else if (cell) {
      sp["data-t"] = cell && cell.t || "z";
      if (cell.v != null) sp["data-v"] = cell.v;
      if (cell.z != null) sp["data-z"] = cell.z;
      if (cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target + '">' + w + "</a>";
    }
    sp.id = (o.id || "sjs") + "-" + coord;
    oo.push(writextag("td", w, sp));
  }
  var preamble = "<tr>";
  return preamble + oo.join("") + "</tr>";
}
__name(make_html_row, "make_html_row");
var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
var HTML_END = "</body></html>";
function html_to_workbook(str, opts) {
  var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
  if (!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
  if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
  var wb = book_new();
  mtch.forEach(function(s, idx) {
    book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx + 1));
  });
  return wb;
}
__name(html_to_workbook, "html_to_workbook");
function make_html_preamble(ws, R, o) {
  var out = [];
  return out.join("") + "<table" + (o && o.id ? ' id="' + o.id + '"' : "") + ">";
}
__name(make_html_preamble, "make_html_preamble");
function sheet_to_html(ws, opts) {
  var o = opts || {};
  var header = o.header != null ? o.header : HTML_BEGIN;
  var footer = o.footer != null ? o.footer : HTML_END;
  var out = [header];
  var r = decode_range(ws["!ref"]);
  o.dense = Array.isArray(ws);
  out.push(make_html_preamble(ws, r, o));
  for (var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
  out.push("</table>" + footer);
  return out.join("");
}
__name(sheet_to_html, "sheet_to_html");
function sheet_add_dom(ws, table, _opts) {
  var opts = _opts || {};
  if (DENSE != null) opts.dense = DENSE;
  var or_R = 0, or_C = 0;
  if (opts.origin != null) {
    if (typeof opts.origin == "number") or_R = opts.origin;
    else {
      var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
      or_R = _origin.r;
      or_C = _origin.c;
    }
  }
  var rows = table.getElementsByTagName("tr");
  var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
  var range2 = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
  if (ws["!ref"]) {
    var _range = decode_range(ws["!ref"]);
    range2.s.r = Math.min(range2.s.r, _range.s.r);
    range2.s.c = Math.min(range2.s.c, _range.s.c);
    range2.e.r = Math.max(range2.e.r, _range.e.r);
    range2.e.c = Math.max(range2.e.c, _range.e.c);
    if (or_R == -1) range2.e.r = or_R = _range.e.r + 1;
  }
  var merges = [], midx = 0;
  var rowinfo = ws["!rows"] || (ws["!rows"] = []);
  var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
  if (!ws["!cols"]) ws["!cols"] = [];
  for (; _R < rows.length && R < sheetRows; ++_R) {
    var row = rows[_R];
    if (is_dom_element_hidden(row)) {
      if (opts.display) continue;
      rowinfo[R] = { hidden: true };
    }
    var elts = row.children;
    for (_C = C = 0; _C < elts.length; ++_C) {
      var elt = elts[_C];
      if (opts.display && is_dom_element_hidden(elt)) continue;
      var v = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
      var z = elt.getAttribute("data-z") || elt.getAttribute("z");
      for (midx = 0; midx < merges.length; ++midx) {
        var m = merges[midx];
        if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
          C = m.e.c + 1 - or_C;
          midx = -1;
        }
      }
      CS = +elt.getAttribute("colspan") || 1;
      if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({ s: { r: R + or_R, c: C + or_C }, e: { r: R + or_R + (RS || 1) - 1, c: C + or_C + (CS || 1) - 1 } });
      var o = { t: "s", v };
      var _t = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
      if (v != null) {
        if (v.length == 0) o.t = _t || "z";
        else if (opts.raw || v.trim().length == 0 || _t == "s") {
        } else if (v === "TRUE") o = { t: "b", v: true };
        else if (v === "FALSE") o = { t: "b", v: false };
        else if (!isNaN(fuzzynum(v))) o = { t: "n", v: fuzzynum(v) };
        else if (!isNaN(fuzzydate(v).getDate())) {
          o = { t: "d", v: parseDate(v) };
          if (!opts.cellDates) o = { t: "n", v: datenum(o.v) };
          o.z = opts.dateNF || table_fmt[14];
        }
      }
      if (o.z === void 0 && z != null) o.z = z;
      var l = "", Aelts = elt.getElementsByTagName("A");
      if (Aelts && Aelts.length) {
        for (var Aelti = 0; Aelti < Aelts.length; ++Aelti) if (Aelts[Aelti].hasAttribute("href")) {
          l = Aelts[Aelti].getAttribute("href");
          if (l.charAt(0) != "#") break;
        }
      }
      if (l && l.charAt(0) != "#") o.l = { Target: l };
      if (opts.dense) {
        if (!ws[R + or_R]) ws[R + or_R] = [];
        ws[R + or_R][C + or_C] = o;
      } else ws[encode_cell({ c: C + or_C, r: R + or_R })] = o;
      if (range2.e.c < C + or_C) range2.e.c = C + or_C;
      C += CS;
    }
    ++R;
  }
  if (merges.length) ws["!merges"] = (ws["!merges"] || []).concat(merges);
  range2.e.r = Math.max(range2.e.r, R - 1 + or_R);
  ws["!ref"] = encode_range(range2);
  if (R >= sheetRows) ws["!fullref"] = encode_range((range2.e.r = rows.length - _R + R - 1 + or_R, range2));
  return ws;
}
__name(sheet_add_dom, "sheet_add_dom");
function parse_dom_table(table, _opts) {
  var opts = _opts || {};
  var ws = opts.dense ? [] : {};
  return sheet_add_dom(ws, table, _opts);
}
__name(parse_dom_table, "parse_dom_table");
function table_to_book(table, opts) {
  return sheet_to_workbook(parse_dom_table(table, opts), opts);
}
__name(table_to_book, "table_to_book");
function is_dom_element_hidden(element) {
  var display = "";
  var get_computed_style = get_get_computed_style_function(element);
  if (get_computed_style) display = get_computed_style(element).getPropertyValue("display");
  if (!display) display = element.style && element.style.display;
  return display === "none";
}
__name(is_dom_element_hidden, "is_dom_element_hidden");
function get_get_computed_style_function(element) {
  if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function") return element.ownerDocument.defaultView.getComputedStyle;
  if (typeof getComputedStyle === "function") return getComputedStyle;
  return null;
}
__name(get_get_computed_style_function, "get_get_computed_style_function");
function parse_text_p(text2) {
  var fixed = text2.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
    return Array(parseInt($1, 10) + 1).join(" ");
  }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
  var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
  return [v];
}
__name(parse_text_p, "parse_text_p");
var number_formats_ods = {
  /* ods name: [short ssf fmt, long ssf fmt] */
  day: ["d", "dd"],
  month: ["m", "mm"],
  year: ["y", "yy"],
  hours: ["h", "hh"],
  minutes: ["m", "mm"],
  seconds: ["s", "ss"],
  "am-pm": ["A/P", "AM/PM"],
  "day-of-week": ["ddd", "dddd"],
  era: ["e", "ee"],
  /* there is no native representation of LO "Q" format */
  quarter: ["\\Qm", 'm\\"th quarter"']
};
function parse_content_xml(d, _opts) {
  var opts = _opts || {};
  if (DENSE != null && opts.dense == null) opts.dense = DENSE;
  var str = xlml_normalize(d);
  var state = [], tmp;
  var tag;
  var NFtag = { name: "" }, NF = "", pidx = 0;
  var sheetag;
  var rowtag;
  var Sheets = {}, SheetNames = [];
  var ws = opts.dense ? [] : {};
  var Rn, q;
  var ctag = { value: "" };
  var textp = "", textpidx = 0, textptag;
  var textR = [];
  var R = -1, C = -1, range2 = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
  var row_ol = 0;
  var number_format_map = {};
  var merges = [], mrange = {}, mR = 0, mC = 0;
  var rowinfo = [], rowpeat = 1, colpeat = 1;
  var arrayf = [];
  var WB = { Names: [] };
  var atag = {};
  var _Ref = ["", ""];
  var comments = [], comment = {};
  var creator = "", creatoridx = 0;
  var isstub = false, intable = false;
  var i = 0;
  xlmlregex.lastIndex = 0;
  str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
  while (Rn = xlmlregex.exec(str)) switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
    case "table":
    case "\u5DE5\u4F5C\u8868":
      if (Rn[1] === "/") {
        if (range2.e.c >= range2.s.c && range2.e.r >= range2.s.r) ws["!ref"] = encode_range(range2);
        else ws["!ref"] = "A1:A1";
        if (opts.sheetRows > 0 && opts.sheetRows <= range2.e.r) {
          ws["!fullref"] = ws["!ref"];
          range2.e.r = opts.sheetRows - 1;
          ws["!ref"] = encode_range(range2);
        }
        if (merges.length) ws["!merges"] = merges;
        if (rowinfo.length) ws["!rows"] = rowinfo;
        sheetag.name = sheetag["\u540D\u79F0"] || sheetag.name;
        if (typeof JSON !== "undefined") JSON.stringify(sheetag);
        SheetNames.push(sheetag.name);
        Sheets[sheetag.name] = ws;
        intable = false;
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
        sheetag = parsexmltag(Rn[0], false);
        R = C = -1;
        range2.s.r = range2.s.c = 1e7;
        range2.e.r = range2.e.c = 0;
        ws = opts.dense ? [] : {};
        merges = [];
        rowinfo = [];
        intable = true;
      }
      break;
    case "table-row-group":
      if (Rn[1] === "/") --row_ol;
      else ++row_ol;
      break;
    case "table-row":
    case "\u884C":
      if (Rn[1] === "/") {
        R += rowpeat;
        rowpeat = 1;
        break;
      }
      rowtag = parsexmltag(Rn[0], false);
      if (rowtag["\u884C\u53F7"]) R = rowtag["\u884C\u53F7"] - 1;
      else if (R == -1) R = 0;
      rowpeat = +rowtag["number-rows-repeated"] || 1;
      if (rowpeat < 10) {
        for (i = 0; i < rowpeat; ++i) if (row_ol > 0) rowinfo[R + i] = { level: row_ol };
      }
      C = -1;
      break;
    case "covered-table-cell":
      if (Rn[1] !== "/") ++C;
      if (opts.sheetStubs) {
        if (opts.dense) {
          if (!ws[R]) ws[R] = [];
          ws[R][C] = { t: "z" };
        } else ws[encode_cell({ r: R, c: C })] = { t: "z" };
      }
      textp = "";
      textR = [];
      break;
    /* stub */
    case "table-cell":
    case "\u6570\u636E":
      if (Rn[0].charAt(Rn[0].length - 2) === "/") {
        ++C;
        ctag = parsexmltag(Rn[0], false);
        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
        q = {
          t: "z",
          v: null
          /*:: , z:null, w:"",c:[]*/
        };
        if (ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
        if ((ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"]) == "string") {
          q.t = "s";
          q.v = unescapexml(ctag["string-value"] || "");
          if (opts.dense) {
            if (!ws[R]) ws[R] = [];
            ws[R][C] = q;
          } else {
            ws[encode_cell({ r: R, c: C })] = q;
          }
        }
        C += colpeat - 1;
      } else if (Rn[1] !== "/") {
        ++C;
        textp = "";
        textpidx = 0;
        textR = [];
        colpeat = 1;
        var rptR = rowpeat ? R + rowpeat - 1 : R;
        if (C > range2.e.c) range2.e.c = C;
        if (C < range2.s.c) range2.s.c = C;
        if (R < range2.s.r) range2.s.r = R;
        if (rptR > range2.e.r) range2.e.r = rptR;
        ctag = parsexmltag(Rn[0], false);
        comments = [];
        comment = {};
        q = {
          t: ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"],
          v: null
          /*:: , z:null, w:"",c:[]*/
        };
        if (opts.cellFormula) {
          if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
          if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
            mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
            mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
            mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
            q.F = encode_range(mrange);
            arrayf.push([mrange, q.F]);
          }
          if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
          else for (i = 0; i < arrayf.length; ++i)
            if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) {
              if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
                q.F = arrayf[i][1];
            }
        }
        if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
          mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
          mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
          mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
          merges.push(mrange);
        }
        if (ctag["number-columns-repeated"]) colpeat = parseInt(ctag["number-columns-repeated"], 10);
        switch (q.t) {
          case "boolean":
            q.t = "b";
            q.v = parsexmlbool(ctag["boolean-value"]);
            break;
          case "float":
            q.t = "n";
            q.v = parseFloat(ctag.value);
            break;
          case "percentage":
            q.t = "n";
            q.v = parseFloat(ctag.value);
            break;
          case "currency":
            q.t = "n";
            q.v = parseFloat(ctag.value);
            break;
          case "date":
            q.t = "d";
            q.v = parseDate(ctag["date-value"]);
            if (!opts.cellDates) {
              q.t = "n";
              q.v = datenum(q.v);
            }
            q.z = "m/d/yy";
            break;
          case "time":
            q.t = "n";
            q.v = parse_isodur(ctag["time-value"]) / 86400;
            if (opts.cellDates) {
              q.t = "d";
              q.v = numdate(q.v);
            }
            q.z = "HH:MM:SS";
            break;
          case "number":
            q.t = "n";
            q.v = parseFloat(ctag["\u6570\u636E\u6570\u503C"]);
            break;
          default:
            if (q.t === "string" || q.t === "text" || !q.t) {
              q.t = "s";
              if (ctag["string-value"] != null) {
                textp = unescapexml(ctag["string-value"]);
                textR = [];
              }
            } else throw new Error("Unsupported value type " + q.t);
        }
      } else {
        isstub = false;
        if (q.t === "s") {
          q.v = textp || "";
          if (textR.length) q.R = textR;
          isstub = textpidx == 0;
        }
        if (atag.Target) q.l = atag;
        if (comments.length > 0) {
          q.c = comments;
          comments = [];
        }
        if (textp && opts.cellText !== false) q.w = textp;
        if (isstub) {
          q.t = "z";
          delete q.v;
        }
        if (!isstub || opts.sheetStubs) {
          if (!(opts.sheetRows && opts.sheetRows <= R)) {
            for (var rpt = 0; rpt < rowpeat; ++rpt) {
              colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
              if (opts.dense) {
                if (!ws[R + rpt]) ws[R + rpt] = [];
                ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                while (--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
              } else {
                ws[encode_cell({ r: R + rpt, c: C })] = q;
                while (--colpeat > 0) ws[encode_cell({ r: R + rpt, c: C + colpeat })] = dup(q);
              }
              if (range2.e.c <= C) range2.e.c = C;
            }
          }
        }
        colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
        C += colpeat - 1;
        colpeat = 0;
        q = {
          /*:: t:"", v:null, z:null, w:"",c:[]*/
        };
        textp = "";
        textR = [];
      }
      atag = {};
      break;
    // 9.1.4 <table:table-cell>
    /* pure state */
    case "document":
    // TODO: <office:document> is the root for FODS
    case "document-content":
    case "\u7535\u5B50\u8868\u683C\u6587\u6863":
    // 3.1.3.2 <office:document-content>
    case "spreadsheet":
    case "\u4E3B\u4F53":
    // 3.7 <office:spreadsheet>
    case "scripts":
    // 3.12 <office:scripts>
    case "styles":
    // TODO <office:styles>
    case "font-face-decls":
    // 3.14 <office:font-face-decls>
    case "master-styles":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
      break;
    case "annotation":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
        comment.t = textp;
        if (textR.length) comment.R = textR;
        comment.a = creator;
        comments.push(comment);
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
        state.push([Rn[3], false]);
      }
      creator = "";
      creatoridx = 0;
      textp = "";
      textpidx = 0;
      textR = [];
      break;
    case "creator":
      if (Rn[1] === "/") {
        creator = str.slice(creatoridx, Rn.index);
      } else creatoridx = Rn.index + Rn[0].length;
      break;
    /* ignore state */
    case "meta":
    case "\u5143\u6570\u636E":
    // TODO: <office:meta> <uof:元数据> FODS/UOF
    case "settings":
    // TODO: <office:settings>
    case "config-item-set":
    // TODO: <office:config-item-set>
    case "config-item-map-indexed":
    // TODO: <office:config-item-map-indexed>
    case "config-item-map-entry":
    // TODO: <office:config-item-map-entry>
    case "config-item-map-named":
    // TODO: <office:config-item-map-entry>
    case "shapes":
    // 9.2.8 <table:shapes>
    case "frame":
    // 10.4.2 <draw:frame>
    case "text-box":
    // 10.4.3 <draw:text-box>
    case "image":
    // 10.4.4 <draw:image>
    case "data-pilot-tables":
    // 9.6.2 <table:data-pilot-tables>
    case "list-style":
    // 16.30 <text:list-style>
    case "form":
    // 13.13 <form:form>
    case "dde-links":
    // 9.8 <table:dde-links>
    case "event-listeners":
    // TODO
    case "chart":
      if (Rn[1] === "/") {
        if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], false]);
      textp = "";
      textpidx = 0;
      textR = [];
      break;
    case "scientific-number":
      break;
    case "currency-symbol":
      break;
    case "currency-style":
      break;
    case "number-style":
    // 16.27.2 <number:number-style>
    case "percentage-style":
    // 16.27.9 <number:percentage-style>
    case "date-style":
    // 16.27.10 <number:date-style>
    case "time-style":
      if (Rn[1] === "/") {
        number_format_map[NFtag.name] = NF;
        if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
      } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
        NF = "";
        NFtag = parsexmltag(Rn[0], false);
        state.push([Rn[3], true]);
      }
      break;
    case "script":
      break;
    // 3.13 <office:script>
    case "libraries":
      break;
    // TODO: <ooo:libraries>
    case "automatic-styles":
      break;
    // 3.15.3 <office:automatic-styles>
    case "default-style":
    // TODO: <style:default-style>
    case "page-layout":
      break;
    // TODO: <style:page-layout>
    case "style":
      break;
    case "map":
      break;
    // 16.3 <style:map>
    case "font-face":
      break;
    // 16.21 <style:font-face>
    case "paragraph-properties":
      break;
    // 17.6 <style:paragraph-properties>
    case "table-properties":
      break;
    // 17.15 <style:table-properties>
    case "table-column-properties":
      break;
    // 17.16 <style:table-column-properties>
    case "table-row-properties":
      break;
    // 17.17 <style:table-row-properties>
    case "table-cell-properties":
      break;
    // 17.18 <style:table-cell-properties>
    case "number":
      switch (state[state.length - 1][0]) {
        case "time-style":
        case "date-style":
          tag = parsexmltag(Rn[0], false);
          NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
          break;
      }
      break;
    case "fraction":
      break;
    // TODO 16.27.6 <number:fraction>
    case "day":
    // 16.27.11 <number:day>
    case "month":
    // 16.27.12 <number:month>
    case "year":
    // 16.27.13 <number:year>
    case "era":
    // 16.27.14 <number:era>
    case "day-of-week":
    // 16.27.15 <number:day-of-week>
    case "week-of-year":
    // 16.27.16 <number:week-of-year>
    case "quarter":
    // 16.27.17 <number:quarter>
    case "hours":
    // 16.27.19 <number:hours>
    case "minutes":
    // 16.27.20 <number:minutes>
    case "seconds":
    // 16.27.21 <number:seconds>
    case "am-pm":
      switch (state[state.length - 1][0]) {
        case "time-style":
        case "date-style":
          tag = parsexmltag(Rn[0], false);
          NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
          break;
      }
      break;
    case "boolean-style":
      break;
    // 16.27.23 <number:boolean-style>
    case "boolean":
      break;
    // 16.27.24 <number:boolean>
    case "text-style":
      break;
    // 16.27.25 <number:text-style>
    case "text":
      if (Rn[0].slice(-2) === "/>") break;
      else if (Rn[1] === "/") switch (state[state.length - 1][0]) {
        case "number-style":
        case "date-style":
        case "time-style":
          NF += str.slice(pidx, Rn.index);
          break;
      }
      else pidx = Rn.index + Rn[0].length;
      break;
    case "named-range":
      tag = parsexmltag(Rn[0], false);
      _Ref = ods_to_csf_3D(tag["cell-range-address"]);
      var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
      if (intable) nrange.Sheet = SheetNames.length;
      WB.Names.push(nrange);
      break;
    case "text-content":
      break;
    // 16.27.27 <number:text-content>
    case "text-properties":
      break;
    // 16.27.27 <style:text-properties>
    case "embedded-text":
      break;
    // 16.27.4 <number:embedded-text>
    case "body":
    case "\u7535\u5B50\u8868\u683C":
      break;
    // 3.3 16.9.6 19.726.3
    case "forms":
      break;
    // 12.25.2 13.2
    case "table-column":
      break;
    // 9.1.6 <table:table-column>
    case "table-header-rows":
      break;
    // 9.1.7 <table:table-header-rows>
    case "table-rows":
      break;
    // 9.1.12 <table:table-rows>
    /* TODO: outline levels */
    case "table-column-group":
      break;
    // 9.1.10 <table:table-column-group>
    case "table-header-columns":
      break;
    // 9.1.11 <table:table-header-columns>
    case "table-columns":
      break;
    // 9.1.12 <table:table-columns>
    case "null-date":
      break;
    // 9.4.2 <table:null-date> TODO: date1904
    case "graphic-properties":
      break;
    // 17.21 <style:graphic-properties>
    case "calculation-settings":
      break;
    // 9.4.1 <table:calculation-settings>
    case "named-expressions":
      break;
    // 9.4.11 <table:named-expressions>
    case "label-range":
      break;
    // 9.4.9 <table:label-range>
    case "label-ranges":
      break;
    // 9.4.10 <table:label-ranges>
    case "named-expression":
      break;
    // 9.4.13 <table:named-expression>
    case "sort":
      break;
    // 9.4.19 <table:sort>
    case "sort-by":
      break;
    // 9.4.20 <table:sort-by>
    case "sort-groups":
      break;
    // 9.4.22 <table:sort-groups>
    case "tab":
      break;
    // 6.1.4 <text:tab>
    case "line-break":
      break;
    // 6.1.5 <text:line-break>
    case "span":
      break;
    // 6.1.7 <text:span>
    case "p":
    case "\u6587\u672C\u4E32":
      if (["master-styles"].indexOf(state[state.length - 1][0]) > -1) break;
      if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
        var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
        textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
      } else {
        textptag = parsexmltag(Rn[0], false);
        textpidx = Rn.index + Rn[0].length;
      }
      break;
    // <text:p>
    case "s":
      break;
    // <text:s>
    case "database-range":
      if (Rn[1] === "/") break;
      try {
        _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
        Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
      } catch (e) {
      }
      break;
    case "date":
      break;
    // <*:date>
    case "object":
      break;
    // 10.4.6.2 <draw:object>
    case "title":
    case "\u6807\u9898":
      break;
    // <*:title> OR <uof:标题>
    case "desc":
      break;
    // <*:desc>
    case "binary-data":
      break;
    // 10.4.5 TODO: b64 blob
    /* 9.2 Advanced Tables */
    case "table-source":
      break;
    // 9.2.6
    case "scenario":
      break;
    // 9.2.6
    case "iteration":
      break;
    // 9.4.3 <table:iteration>
    case "content-validations":
      break;
    // 9.4.4 <table:
    case "content-validation":
      break;
    // 9.4.5 <table:
    case "help-message":
      break;
    // 9.4.6 <table:
    case "error-message":
      break;
    // 9.4.7 <table:
    case "database-ranges":
      break;
    // 9.4.14 <table:database-ranges>
    case "filter":
      break;
    // 9.5.2 <table:filter>
    case "filter-and":
      break;
    // 9.5.3 <table:filter-and>
    case "filter-or":
      break;
    // 9.5.4 <table:filter-or>
    case "filter-condition":
      break;
    // 9.5.5 <table:filter-condition>
    case "list-level-style-bullet":
      break;
    // 16.31 <text:
    case "list-level-style-number":
      break;
    // 16.32 <text:
    case "list-level-properties":
      break;
    // 17.19 <style:
    /* 7.3 Document Fields */
    case "sender-firstname":
    // 7.3.6.2
    case "sender-lastname":
    // 7.3.6.3
    case "sender-initials":
    // 7.3.6.4
    case "sender-title":
    // 7.3.6.5
    case "sender-position":
    // 7.3.6.6
    case "sender-email":
    // 7.3.6.7
    case "sender-phone-private":
    // 7.3.6.8
    case "sender-fax":
    // 7.3.6.9
    case "sender-company":
    // 7.3.6.10
    case "sender-phone-work":
    // 7.3.6.11
    case "sender-street":
    // 7.3.6.12
    case "sender-city":
    // 7.3.6.13
    case "sender-postal-code":
    // 7.3.6.14
    case "sender-country":
    // 7.3.6.15
    case "sender-state-or-province":
    // 7.3.6.16
    case "author-name":
    // 7.3.7.1
    case "author-initials":
    // 7.3.7.2
    case "chapter":
    // 7.3.8
    case "file-name":
    // 7.3.9
    case "template-name":
    // 7.3.9
    case "sheet-name":
      break;
    case "event-listener":
      break;
    /* TODO: FODS Properties */
    case "initial-creator":
    case "creation-date":
    case "print-date":
    case "generator":
    case "document-statistic":
    case "user-defined":
    case "editing-duration":
    case "editing-cycles":
      break;
    /* TODO: FODS Config */
    case "config-item":
      break;
    /* TODO: style tokens */
    case "page-number":
      break;
    // TODO <text:page-number>
    case "page-count":
      break;
    // TODO <text:page-count>
    case "time":
      break;
    // TODO <text:time>
    /* 9.3 Advanced Table Cells */
    case "cell-range-source":
      break;
    // 9.3.1 <table:
    case "detective":
      break;
    // 9.3.2 <table:
    case "operation":
      break;
    // 9.3.3 <table:
    case "highlighted-range":
      break;
    // 9.3.4 <table:
    /* 9.6 Data Pilot Tables <table: */
    case "data-pilot-table":
    // 9.6.3
    case "source-cell-range":
    // 9.6.5
    case "source-service":
    // 9.6.6
    case "data-pilot-field":
    // 9.6.7
    case "data-pilot-level":
    // 9.6.8
    case "data-pilot-subtotals":
    // 9.6.9
    case "data-pilot-subtotal":
    // 9.6.10
    case "data-pilot-members":
    // 9.6.11
    case "data-pilot-member":
    // 9.6.12
    case "data-pilot-display-info":
    // 9.6.13
    case "data-pilot-sort-info":
    // 9.6.14
    case "data-pilot-layout-info":
    // 9.6.15
    case "data-pilot-field-reference":
    // 9.6.16
    case "data-pilot-groups":
    // 9.6.17
    case "data-pilot-group":
    // 9.6.18
    case "data-pilot-group-member":
      break;
    /* 10.3 Drawing Shapes */
    case "rect":
      break;
    /* 14.6 DDE Connections */
    case "dde-connection-decls":
    // 14.6.2 <text:
    case "dde-connection-decl":
    // 14.6.3 <text:
    case "dde-link":
    // 14.6.4 <table:
    case "dde-source":
      break;
    case "properties":
      break;
    // 13.7 <form:properties>
    case "property":
      break;
    // 13.8 <form:property>
    case "a":
      if (Rn[1] !== "/") {
        atag = parsexmltag(Rn[0], false);
        if (!atag.href) break;
        atag.Target = unescapexml(atag.href);
        delete atag.href;
        if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
          _Ref = ods_to_csf_3D(atag.Target.slice(1));
          atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
        } else if (atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
      }
      break;
    /* non-standard */
    case "table-protection":
      break;
    case "data-pilot-grand-total":
      break;
    // <table:
    case "office-document-common-attrs":
      break;
    // bare
    default:
      switch (Rn[2]) {
        case "dc:":
        // TODO: properties
        case "calcext:":
        // ignore undocumented extensions
        case "loext:":
        // ignore undocumented extensions
        case "ooo:":
        // ignore undocumented extensions
        case "chartooo:":
        // ignore undocumented extensions
        case "draw:":
        // TODO: drawing
        case "style:":
        // TODO: styles
        case "chart:":
        // TODO: charts
        case "form:":
        // TODO: forms
        case "uof:":
        // TODO: uof
        case "\u8868:":
        // TODO: uof
        case "\u5B57:":
          break;
        default:
          if (opts.WTF) throw new Error(Rn);
      }
  }
  var out = {
    Sheets,
    SheetNames,
    Workbook: WB
  };
  if (opts.bookSheets) delete /*::(*/
  out.Sheets;
  return out;
}
__name(parse_content_xml, "parse_content_xml");
function parse_ods(zip, opts) {
  opts = opts || {};
  if (safegetzipfile(zip, "META-INF/manifest.xml")) parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
  var content = getzipstr(zip, "content.xml");
  if (!content) throw new Error("Missing content.xml in ODS / UOF file");
  var wb = parse_content_xml(utf8read(content), opts);
  if (safegetzipfile(zip, "meta.xml")) wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
  return wb;
}
__name(parse_ods, "parse_ods");
function parse_fods(data, opts) {
  return parse_content_xml(data, opts);
}
__name(parse_fods, "parse_fods");
function u8_to_dataview(array) {
  return new DataView(array.buffer, array.byteOffset, array.byteLength);
}
__name(u8_to_dataview, "u8_to_dataview");
function u8str(u8) {
  return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
}
__name(u8str, "u8str");
function u8concat(u8a) {
  var len = u8a.reduce(function(acc, x) {
    return acc + x.length;
  }, 0);
  var out = new Uint8Array(len);
  var off = 0;
  u8a.forEach(function(u8) {
    out.set(u8, off);
    off += u8.length;
  });
  return out;
}
__name(u8concat, "u8concat");
function popcnt(x) {
  x -= x >> 1 & 1431655765;
  x = (x & 858993459) + (x >> 2 & 858993459);
  return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
}
__name(popcnt, "popcnt");
function readDecimal128LE(buf, offset) {
  var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
  var mantissa = buf[offset + 14] & 1;
  for (var j = offset + 13; j >= offset; --j)
    mantissa = mantissa * 256 + buf[j];
  return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
}
__name(readDecimal128LE, "readDecimal128LE");
function parse_varint49(buf, ptr) {
  var l = ptr ? ptr[0] : 0;
  var usz = buf[l] & 127;
  varint:
    if (buf[l++] >= 128) {
      usz |= (buf[l] & 127) << 7;
      if (buf[l++] < 128)
        break varint;
      usz |= (buf[l] & 127) << 14;
      if (buf[l++] < 128)
        break varint;
      usz |= (buf[l] & 127) << 21;
      if (buf[l++] < 128)
        break varint;
      usz += (buf[l] & 127) * Math.pow(2, 28);
      ++l;
      if (buf[l++] < 128)
        break varint;
      usz += (buf[l] & 127) * Math.pow(2, 35);
      ++l;
      if (buf[l++] < 128)
        break varint;
      usz += (buf[l] & 127) * Math.pow(2, 42);
      ++l;
      if (buf[l++] < 128)
        break varint;
    }
  if (ptr)
    ptr[0] = l;
  return usz;
}
__name(parse_varint49, "parse_varint49");
function varint_to_i32(buf) {
  var l = 0, i32 = buf[l] & 127;
  varint:
    if (buf[l++] >= 128) {
      i32 |= (buf[l] & 127) << 7;
      if (buf[l++] < 128)
        break varint;
      i32 |= (buf[l] & 127) << 14;
      if (buf[l++] < 128)
        break varint;
      i32 |= (buf[l] & 127) << 21;
      if (buf[l++] < 128)
        break varint;
      i32 |= (buf[l] & 127) << 28;
    }
  return i32;
}
__name(varint_to_i32, "varint_to_i32");
function parse_shallow(buf) {
  var out = [], ptr = [0];
  while (ptr[0] < buf.length) {
    var off = ptr[0];
    var num = parse_varint49(buf, ptr);
    var type = num & 7;
    num = Math.floor(num / 8);
    var len = 0;
    var res;
    if (num == 0)
      break;
    switch (type) {
      case 0:
        {
          var l = ptr[0];
          while (buf[ptr[0]++] >= 128)
            ;
          res = buf.slice(l, ptr[0]);
        }
        break;
      case 5:
        len = 4;
        res = buf.slice(ptr[0], ptr[0] + len);
        ptr[0] += len;
        break;
      case 1:
        len = 8;
        res = buf.slice(ptr[0], ptr[0] + len);
        ptr[0] += len;
        break;
      case 2:
        len = parse_varint49(buf, ptr);
        res = buf.slice(ptr[0], ptr[0] + len);
        ptr[0] += len;
        break;
      case 3:
      case 4:
      default:
        throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
    }
    var v = { data: res, type };
    if (out[num] == null)
      out[num] = [v];
    else
      out[num].push(v);
  }
  return out;
}
__name(parse_shallow, "parse_shallow");
function mappa(data, cb) {
  return (data == null ? void 0 : data.map(function(d) {
    return cb(d.data);
  })) || [];
}
__name(mappa, "mappa");
function parse_iwa_file(buf) {
  var _a;
  var out = [], ptr = [0];
  while (ptr[0] < buf.length) {
    var len = parse_varint49(buf, ptr);
    var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
    ptr[0] += len;
    var res = {
      id: varint_to_i32(ai[1][0].data),
      messages: []
    };
    ai[2].forEach(function(b) {
      var mi = parse_shallow(b.data);
      var fl = varint_to_i32(mi[3][0].data);
      res.messages.push({
        meta: mi,
        data: buf.slice(ptr[0], ptr[0] + fl)
      });
      ptr[0] += fl;
    });
    if ((_a = ai[3]) == null ? void 0 : _a[0])
      res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
    out.push(res);
  }
  return out;
}
__name(parse_iwa_file, "parse_iwa_file");
function parse_snappy_chunk(type, buf) {
  if (type != 0)
    throw new Error("Unexpected Snappy chunk type ".concat(type));
  var ptr = [0];
  var usz = parse_varint49(buf, ptr);
  var chunks = [];
  while (ptr[0] < buf.length) {
    var tag = buf[ptr[0]] & 3;
    if (tag == 0) {
      var len = buf[ptr[0]++] >> 2;
      if (len < 60)
        ++len;
      else {
        var c = len - 59;
        len = buf[ptr[0]];
        if (c > 1)
          len |= buf[ptr[0] + 1] << 8;
        if (c > 2)
          len |= buf[ptr[0] + 2] << 16;
        if (c > 3)
          len |= buf[ptr[0] + 3] << 24;
        len >>>= 0;
        len++;
        ptr[0] += c;
      }
      chunks.push(buf.slice(ptr[0], ptr[0] + len));
      ptr[0] += len;
      continue;
    } else {
      var offset = 0, length = 0;
      if (tag == 1) {
        length = (buf[ptr[0]] >> 2 & 7) + 4;
        offset = (buf[ptr[0]++] & 224) << 3;
        offset |= buf[ptr[0]++];
      } else {
        length = (buf[ptr[0]++] >> 2) + 1;
        if (tag == 2) {
          offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
          ptr[0] += 2;
        } else {
          offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
          ptr[0] += 4;
        }
      }
      chunks = [u8concat(chunks)];
      if (offset == 0)
        throw new Error("Invalid offset 0");
      if (offset > chunks[0].length)
        throw new Error("Invalid offset beyond length");
      if (length >= offset) {
        chunks.push(chunks[0].slice(-offset));
        length -= offset;
        while (length >= chunks[chunks.length - 1].length) {
          chunks.push(chunks[chunks.length - 1]);
          length -= chunks[chunks.length - 1].length;
        }
      }
      chunks.push(chunks[0].slice(-offset, -offset + length));
    }
  }
  var o = u8concat(chunks);
  if (o.length != usz)
    throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
  return o;
}
__name(parse_snappy_chunk, "parse_snappy_chunk");
function decompress_iwa_file(buf) {
  var out = [];
  var l = 0;
  while (l < buf.length) {
    var t = buf[l++];
    var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
    l += 3;
    out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
    l += len;
  }
  if (l !== buf.length)
    throw new Error("data is not a valid framed stream!");
  return u8concat(out);
}
__name(decompress_iwa_file, "decompress_iwa_file");
function parse_old_storage(buf, sst, rsst, v) {
  var dv = u8_to_dataview(buf);
  var flags = dv.getUint32(4, true);
  var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
  var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
  if (flags & 512) {
    ridx = dv.getUint32(data_offset, true);
    data_offset += 4;
  }
  data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
  if (flags & 16) {
    sidx = dv.getUint32(data_offset, true);
    data_offset += 4;
  }
  if (flags & 32) {
    ieee = dv.getFloat64(data_offset, true);
    data_offset += 8;
  }
  if (flags & 64) {
    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
    data_offset += 8;
  }
  var ret;
  switch (buf[2]) {
    case 0:
      break;
    case 2:
      ret = { t: "n", v: ieee };
      break;
    case 3:
      ret = { t: "s", v: sst[sidx] };
      break;
    case 5:
      ret = { t: "d", v: dt };
      break;
    case 6:
      ret = { t: "b", v: ieee > 0 };
      break;
    case 7:
      ret = { t: "n", v: ieee / 86400 };
      break;
    case 8:
      ret = { t: "e", v: 0 };
      break;
    case 9:
      {
        if (ridx > -1)
          ret = { t: "s", v: rsst[ridx] };
        else if (sidx > -1)
          ret = { t: "s", v: sst[sidx] };
        else if (!isNaN(ieee))
          ret = { t: "n", v: ieee };
        else
          throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
      }
      break;
    default:
      throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
  }
  return ret;
}
__name(parse_old_storage, "parse_old_storage");
function parse_new_storage(buf, sst, rsst) {
  var dv = u8_to_dataview(buf);
  var flags = dv.getUint32(8, true);
  var data_offset = 12;
  var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
  if (flags & 1) {
    d128 = readDecimal128LE(buf, data_offset);
    data_offset += 16;
  }
  if (flags & 2) {
    ieee = dv.getFloat64(data_offset, true);
    data_offset += 8;
  }
  if (flags & 4) {
    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
    data_offset += 8;
  }
  if (flags & 8) {
    sidx = dv.getUint32(data_offset, true);
    data_offset += 4;
  }
  if (flags & 16) {
    ridx = dv.getUint32(data_offset, true);
    data_offset += 4;
  }
  var ret;
  switch (buf[1]) {
    case 0:
      break;
    case 2:
      ret = { t: "n", v: d128 };
      break;
    case 3:
      ret = { t: "s", v: sst[sidx] };
      break;
    case 5:
      ret = { t: "d", v: dt };
      break;
    case 6:
      ret = { t: "b", v: ieee > 0 };
      break;
    case 7:
      ret = { t: "n", v: ieee / 86400 };
      break;
    case 8:
      ret = { t: "e", v: 0 };
      break;
    case 9:
      {
        if (ridx > -1)
          ret = { t: "s", v: rsst[ridx] };
        else
          throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
      }
      break;
    case 10:
      ret = { t: "n", v: d128 };
      break;
    default:
      throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
  }
  return ret;
}
__name(parse_new_storage, "parse_new_storage");
function parse_cell_storage(buf, sst, rsst) {
  switch (buf[0]) {
    case 0:
    case 1:
    case 2:
    case 3:
      return parse_old_storage(buf, sst, rsst, buf[0]);
    case 5:
      return parse_new_storage(buf, sst, rsst);
    default:
      throw new Error("Unsupported payload version ".concat(buf[0]));
  }
}
__name(parse_cell_storage, "parse_cell_storage");
function parse_TSP_Reference(buf) {
  var pb = parse_shallow(buf);
  return parse_varint49(pb[1][0].data);
}
__name(parse_TSP_Reference, "parse_TSP_Reference");
function parse_TST_TableDataList(M, root) {
  var pb = parse_shallow(root.data);
  var type = varint_to_i32(pb[1][0].data);
  var entries = pb[3];
  var data = [];
  (entries || []).forEach(function(entry) {
    var le = parse_shallow(entry.data);
    var key = varint_to_i32(le[1][0].data) >>> 0;
    switch (type) {
      case 1:
        data[key] = u8str(le[3][0].data);
        break;
      case 8:
        {
          var rt = M[parse_TSP_Reference(le[9][0].data)][0];
          var rtp = parse_shallow(rt.data);
          var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
          var mtype = varint_to_i32(rtpref.meta[1][0].data);
          if (mtype != 2001)
            throw new Error("2000 unexpected reference to ".concat(mtype));
          var tswpsa = parse_shallow(rtpref.data);
          data[key] = tswpsa[3].map(function(x) {
            return u8str(x.data);
          }).join("");
        }
        break;
    }
  });
  return data;
}
__name(parse_TST_TableDataList, "parse_TST_TableDataList");
function parse_TST_TileRowInfo(u8, type) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  var pb = parse_shallow(u8);
  var R = varint_to_i32(pb[1][0].data) >>> 0;
  var cnt = varint_to_i32(pb[2][0].data) >>> 0;
  var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
  var used_storage_u8, used_storage;
  if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
    used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
    used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
  } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
    used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
    used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
  } else
    throw "NUMBERS Tile missing ".concat(type, " cell storage");
  var width = wide_offsets ? 4 : 1;
  var used_storage_offsets = u8_to_dataview(used_storage_u8);
  var offsets = [];
  for (var C = 0; C < used_storage_u8.length / 2; ++C) {
    var off = used_storage_offsets.getUint16(C * 2, true);
    if (off < 65535)
      offsets.push([C, off]);
  }
  if (offsets.length != cnt)
    throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
  var cells = [];
  for (C = 0; C < offsets.length - 1; ++C)
    cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
  if (offsets.length >= 1)
    cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
  return { R, cells };
}
__name(parse_TST_TileRowInfo, "parse_TST_TileRowInfo");
function parse_TST_Tile(M, root) {
  var _a;
  var pb = parse_shallow(root.data);
  var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
  var ri = mappa(pb[5], function(u8) {
    return parse_TST_TileRowInfo(u8, storage);
  });
  return {
    nrows: varint_to_i32(pb[4][0].data) >>> 0,
    data: ri.reduce(function(acc, x) {
      if (!acc[x.R])
        acc[x.R] = [];
      x.cells.forEach(function(cell, C) {
        if (acc[x.R][C])
          throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
        acc[x.R][C] = cell;
      });
      return acc;
    }, [])
  };
}
__name(parse_TST_Tile, "parse_TST_Tile");
function parse_TST_TableModelArchive(M, root, ws) {
  var _a;
  var pb = parse_shallow(root.data);
  var range2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
  range2.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
  if (range2.e.r < 0)
    throw new Error("Invalid row varint ".concat(pb[6][0].data));
  range2.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
  if (range2.e.c < 0)
    throw new Error("Invalid col varint ".concat(pb[7][0].data));
  ws["!ref"] = encode_range(range2);
  var store = parse_shallow(pb[4][0].data);
  var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
  var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
  var tile = parse_shallow(store[3][0].data);
  var _R = 0;
  tile[1].forEach(function(t) {
    var tl = parse_shallow(t.data);
    var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
    var mtype = varint_to_i32(ref.meta[1][0].data);
    if (mtype != 6002)
      throw new Error("6001 unexpected reference to ".concat(mtype));
    var _tile = parse_TST_Tile(M, ref);
    _tile.data.forEach(function(row, R) {
      row.forEach(function(buf, C) {
        var addr = encode_cell({ r: _R + R, c: C });
        var res = parse_cell_storage(buf, sst, rsst);
        if (res)
          ws[addr] = res;
      });
    });
    _R += _tile.nrows;
  });
}
__name(parse_TST_TableModelArchive, "parse_TST_TableModelArchive");
function parse_TST_TableInfoArchive(M, root) {
  var pb = parse_shallow(root.data);
  var out = { "!ref": "A1" };
  var tableref = M[parse_TSP_Reference(pb[2][0].data)];
  var mtype = varint_to_i32(tableref[0].meta[1][0].data);
  if (mtype != 6001)
    throw new Error("6000 unexpected reference to ".concat(mtype));
  parse_TST_TableModelArchive(M, tableref[0], out);
  return out;
}
__name(parse_TST_TableInfoArchive, "parse_TST_TableInfoArchive");
function parse_TN_SheetArchive(M, root) {
  var _a;
  var pb = parse_shallow(root.data);
  var out = {
    name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
    sheets: []
  };
  var shapeoffs = mappa(pb[2], parse_TSP_Reference);
  shapeoffs.forEach(function(off) {
    M[off].forEach(function(m) {
      var mtype = varint_to_i32(m.meta[1][0].data);
      if (mtype == 6e3)
        out.sheets.push(parse_TST_TableInfoArchive(M, m));
    });
  });
  return out;
}
__name(parse_TN_SheetArchive, "parse_TN_SheetArchive");
function parse_TN_DocumentArchive(M, root) {
  var out = book_new();
  var pb = parse_shallow(root.data);
  var sheetoffs = mappa(pb[1], parse_TSP_Reference);
  sheetoffs.forEach(function(off) {
    M[off].forEach(function(m) {
      var mtype = varint_to_i32(m.meta[1][0].data);
      if (mtype == 2) {
        var root2 = parse_TN_SheetArchive(M, m);
        root2.sheets.forEach(function(sheet, idx) {
          book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
        });
      }
    });
  });
  if (out.SheetNames.length == 0)
    throw new Error("Empty NUMBERS file");
  return out;
}
__name(parse_TN_DocumentArchive, "parse_TN_DocumentArchive");
function parse_numbers_iwa(cfb) {
  var _a, _b, _c, _d;
  var M = {}, indices = [];
  cfb.FullPaths.forEach(function(p) {
    if (p.match(/\.iwpv2/))
      throw new Error("Unsupported password protection");
  });
  cfb.FileIndex.forEach(function(s) {
    if (!s.name.match(/\.iwa$/))
      return;
    var o;
    try {
      o = decompress_iwa_file(s.content);
    } catch (e) {
      return console.log("?? " + s.content.length + " " + (e.message || e));
    }
    var packets;
    try {
      packets = parse_iwa_file(o);
    } catch (e) {
      return console.log("## " + (e.message || e));
    }
    packets.forEach(function(packet) {
      M[packet.id] = packet.messages;
      indices.push(packet.id);
    });
  });
  if (!indices.length)
    throw new Error("File has no messages");
  var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
  if (!docroot)
    indices.forEach(function(idx) {
      M[idx].forEach(function(iwam) {
        var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
        if (mtype == 1) {
          if (!docroot)
            docroot = iwam;
          else
            throw new Error("Document has multiple roots");
        }
      });
    });
  if (!docroot)
    throw new Error("Cannot find Document root");
  return parse_TN_DocumentArchive(M, docroot);
}
__name(parse_numbers_iwa, "parse_numbers_iwa");
function fix_opts_func(defaults) {
  return /* @__PURE__ */ __name(function fix_opts(opts) {
    for (var i = 0; i != defaults.length; ++i) {
      var d = defaults[i];
      if (opts[d[0]] === void 0) opts[d[0]] = d[1];
      if (d[2] === "n") opts[d[0]] = Number(opts[d[0]]);
    }
  }, "fix_opts");
}
__name(fix_opts_func, "fix_opts_func");
function fix_read_opts(opts) {
  fix_opts_func([
    ["cellNF", false],
    /* emit cell number format string as .z */
    ["cellHTML", true],
    /* emit html string as .h */
    ["cellFormula", true],
    /* emit formulae as .f */
    ["cellStyles", false],
    /* emits style/theme as .s */
    ["cellText", true],
    /* emit formatted text as .w */
    ["cellDates", false],
    /* emit date cells with type `d` */
    ["sheetStubs", false],
    /* emit empty cells */
    ["sheetRows", 0, "n"],
    /* read n rows (0 = read all rows) */
    ["bookDeps", false],
    /* parse calculation chains */
    ["bookSheets", false],
    /* only try to get sheet names (no Sheets) */
    ["bookProps", false],
    /* only try to get properties (no Sheets) */
    ["bookFiles", false],
    /* include raw file structure (keys, files, cfb) */
    ["bookVBA", false],
    /* include vba raw data (vbaraw) */
    ["password", ""],
    /* password */
    ["WTF", false]
    /* WTF mode (throws errors) */
  ])(opts);
}
__name(fix_read_opts, "fix_read_opts");
function get_sheet_type(n) {
  if (RELS.WS.indexOf(n) > -1) return "sheet";
  if (RELS.CS && n == RELS.CS) return "chart";
  if (RELS.DS && n == RELS.DS) return "dialog";
  if (RELS.MS && n == RELS.MS) return "macro";
  return n && n.length ? n : "sheet";
}
__name(get_sheet_type, "get_sheet_type");
function safe_parse_wbrels(wbrels, sheets) {
  if (!wbrels) return 0;
  try {
    wbrels = sheets.map(/* @__PURE__ */ __name(function pwbr(w) {
      if (!w.id) w.id = w.strRelID;
      return [w.name, wbrels["!id"][w.id].Target, get_sheet_type(wbrels["!id"][w.id].Type)];
    }, "pwbr"));
  } catch (e) {
    return null;
  }
  return !wbrels || wbrels.length === 0 ? null : wbrels;
}
__name(safe_parse_wbrels, "safe_parse_wbrels");
function safe_parse_sheet(zip, path3, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
  try {
    sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path3);
    var data = getzipdata(zip, path3);
    var _ws;
    switch (stype) {
      case "sheet":
        _ws = parse_ws(data, path3, idx, opts, sheetRels[sheet], wb, themes, styles);
        break;
      case "chart":
        _ws = parse_cs(data, path3, idx, opts, sheetRels[sheet], wb, themes, styles);
        if (!_ws || !_ws["!drawel"]) break;
        var dfile = resolve_path(_ws["!drawel"].Target, path3);
        var drelsp = get_rels_path(dfile);
        var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
        var chartp = resolve_path(draw, dfile);
        var crelsp = get_rels_path(chartp);
        _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
        break;
      case "macro":
        _ws = parse_ms(data, path3, idx, opts, sheetRels[sheet], wb, themes, styles);
        break;
      case "dialog":
        _ws = parse_ds(data, path3, idx, opts, sheetRels[sheet], wb, themes, styles);
        break;
      default:
        throw new Error("Unrecognized sheet type " + stype);
    }
    sheets[sheet] = _ws;
    var tcomments = [];
    if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
      var dfile2 = "";
      if (sheetRels[sheet][n].Type == RELS.CMNT) {
        dfile2 = resolve_path(sheetRels[sheet][n].Target, path3);
        var comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
        if (!comments || !comments.length) return;
        sheet_insert_comments(_ws, comments, false);
      }
      if (sheetRels[sheet][n].Type == RELS.TCMNT) {
        dfile2 = resolve_path(sheetRels[sheet][n].Target, path3);
        tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts));
      }
    });
    if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
  } catch (e) {
    if (opts.WTF) throw e;
  }
}
__name(safe_parse_sheet, "safe_parse_sheet");
function strip_front_slash(x) {
  return x.charAt(0) == "/" ? x.slice(1) : x;
}
__name(strip_front_slash, "strip_front_slash");
function parse_zip(zip, opts) {
  make_ssf();
  opts = opts || {};
  fix_read_opts(opts);
  if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts);
  if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts);
  if (safegetzipfile(zip, "Index/Document.iwa")) {
    if (typeof Uint8Array == "undefined") throw new Error("NUMBERS file parsing requires Uint8Array support");
    if (typeof parse_numbers_iwa != "undefined") {
      if (zip.FileIndex) return parse_numbers_iwa(zip);
      var _zip = CFB.utils.cfb_new();
      zipentries(zip).forEach(function(e) {
        zip_add_file(_zip, e, getzipbin(zip, e));
      });
      return parse_numbers_iwa(_zip);
    }
    throw new Error("Unsupported NUMBERS file");
  }
  if (!safegetzipfile(zip, "[Content_Types].xml")) {
    if (safegetzipfile(zip, "index.xml.gz")) throw new Error("Unsupported NUMBERS 08 file");
    if (safegetzipfile(zip, "index.xml")) throw new Error("Unsupported NUMBERS 09 file");
    throw new Error("Unsupported ZIP file");
  }
  var entries = zipentries(zip);
  var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
  var xlsb = false;
  var sheets, binname;
  if (dir.workbooks.length === 0) {
    binname = "xl/workbook.xml";
    if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
  }
  if (dir.workbooks.length === 0) {
    binname = "xl/workbook.bin";
    if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
    dir.workbooks.push(binname);
    xlsb = true;
  }
  if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
  var themes = {};
  var styles = {};
  if (!opts.bookSheets && !opts.bookProps) {
    strs = [];
    if (dir.sst) try {
      strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
    } catch (e) {
      if (opts.WTF) throw e;
    }
    if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
    if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
  }
  dir.links.map(function(link) {
    try {
      var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
      return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
    } catch (e) {
    }
  });
  var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
  var props = {}, propdata = "";
  if (dir.coreprops.length) {
    propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
    if (propdata) props = parse_core_props(propdata);
    if (dir.extprops.length !== 0) {
      propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
      if (propdata) parse_ext_props(propdata, props, opts);
    }
  }
  var custprops = {};
  if (!opts.bookSheets || opts.bookProps) {
    if (dir.custprops.length !== 0) {
      propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
      if (propdata) custprops = parse_cust_props(propdata, opts);
    }
  }
  var out = {};
  if (opts.bookSheets || opts.bookProps) {
    if (wb.Sheets) sheets = wb.Sheets.map(/* @__PURE__ */ __name(function pluck(x) {
      return x.name;
    }, "pluck"));
    else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;
    if (opts.bookProps) {
      out.Props = props;
      out.Custprops = custprops;
    }
    if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets;
    if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
  }
  sheets = {};
  var deps = {};
  if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
  var i = 0;
  var sheetRels = {};
  var path3, relsPath;
  {
    var wbsheets = wb.Sheets;
    props.Worksheets = wbsheets.length;
    props.SheetNames = [];
    for (var j = 0; j != wbsheets.length; ++j) {
      props.SheetNames[j] = wbsheets[j].name;
    }
  }
  var wbext = xlsb ? "bin" : "xml";
  var wbrelsi = dir.workbooks[0].lastIndexOf("/");
  var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
  if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
  var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
  if ((dir.metadata || []).length >= 1) {
    opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
  }
  if ((dir.people || []).length >= 1) {
    opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
  }
  if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
  var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
  wsloop: for (i = 0; i != props.Worksheets; ++i) {
    var stype = "sheet";
    if (wbrels && wbrels[i]) {
      path3 = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, "");
      if (!safegetzipfile(zip, path3)) path3 = wbrels[i][1];
      if (!safegetzipfile(zip, path3)) path3 = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
      stype = wbrels[i][2];
    } else {
      path3 = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext;
      path3 = path3.replace(/sheet0\./, "sheet.");
    }
    relsPath = path3.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
    if (opts && opts.sheets != null) switch (typeof opts.sheets) {
      case "number":
        if (i != opts.sheets) continue wsloop;
        break;
      case "string":
        if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
        break;
      default:
        if (Array.isArray && Array.isArray(opts.sheets)) {
          var snjseen = false;
          for (var snj = 0; snj != opts.sheets.length; ++snj) {
            if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen = 1;
            if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
          }
          if (!snjseen) continue wsloop;
        }
    }
    safe_parse_sheet(zip, path3, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
  }
  out = {
    Directory: dir,
    Workbook: wb,
    Props: props,
    Custprops: custprops,
    Deps: deps,
    Sheets: sheets,
    SheetNames: props.SheetNames,
    Strings: strs,
    Styles: styles,
    Themes: themes,
    SSF: dup(table_fmt)
  };
  if (opts && opts.bookFiles) {
    if (zip.files) {
      out.keys = entries;
      out.files = zip.files;
    } else {
      out.keys = [];
      out.files = {};
      zip.FullPaths.forEach(function(p, idx) {
        p = p.replace(/^Root Entry[\/]/, "");
        out.keys.push(p);
        out.files[p] = zip.FileIndex[idx];
      });
    }
  }
  if (opts && opts.bookVBA) {
    if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
    else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
  }
  return out;
}
__name(parse_zip, "parse_zip");
function parse_xlsxcfb(cfb, _opts) {
  var opts = _opts || {};
  var f = "Workbook", data = CFB.find(cfb, f);
  try {
    f = "/!DataSpaces/Version";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    parse_DataSpaceVersionInfo(data.content);
    f = "/!DataSpaces/DataSpaceMap";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    var dsm = parse_DataSpaceMap(data.content);
    if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
      throw new Error("ECMA-376 Encrypted file bad " + f);
    f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    var seds = parse_DataSpaceDefinition(data.content);
    if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
      throw new Error("ECMA-376 Encrypted file bad " + f);
    f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
    data = CFB.find(cfb, f);
    if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    parse_Primary(data.content);
  } catch (e) {
  }
  f = "/EncryptionInfo";
  data = CFB.find(cfb, f);
  if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
  var einfo = parse_EncryptionInfo(data.content);
  f = "/EncryptedPackage";
  data = CFB.find(cfb, f);
  if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
  if (einfo[0] == 4 && typeof decrypt_agile !== "undefined") return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
  if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined") return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
  throw new Error("File is password-protected");
}
__name(parse_xlsxcfb, "parse_xlsxcfb");
function firstbyte(f, o) {
  var x = "";
  switch ((o || {}).type || "base64") {
    case "buffer":
      return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    case "base64":
      x = Base64_decode(f.slice(0, 12));
      break;
    case "binary":
      x = f;
      break;
    case "array":
      return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    default:
      throw new Error("Unrecognized type " + (o && o.type || "undefined"));
  }
  return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
}
__name(firstbyte, "firstbyte");
function read_cfb(cfb, opts) {
  if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
  return parse_xlscfb(cfb, opts);
}
__name(read_cfb, "read_cfb");
function read_zip(data, opts) {
  var zip, d = data;
  var o = opts || {};
  if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
  zip = zip_read(d, o);
  return parse_zip(zip, o);
}
__name(read_zip, "read_zip");
function read_plaintext(data, o) {
  var i = 0;
  main: while (i < data.length) switch (data.charCodeAt(i)) {
    case 10:
    case 13:
    case 32:
      ++i;
      break;
    case 60:
      return parse_xlml(data.slice(i), o);
    default:
      break main;
  }
  return PRN.to_workbook(data, o);
}
__name(read_plaintext, "read_plaintext");
function read_plaintext_raw(data, o) {
  var str = "", bytes = firstbyte(data, o);
  switch (o.type) {
    case "base64":
      str = Base64_decode(data);
      break;
    case "binary":
      str = data;
      break;
    case "buffer":
      str = data.toString("binary");
      break;
    case "array":
      str = cc2str(data);
      break;
    default:
      throw new Error("Unrecognized type " + o.type);
  }
  if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str);
  o.type = "binary";
  return read_plaintext(str, o);
}
__name(read_plaintext_raw, "read_plaintext_raw");
function read_utf16(data, o) {
  var d = data;
  if (o.type == "base64") d = Base64_decode(d);
  d = $cptable.utils.decode(1200, d.slice(2), "str");
  o.type = "binary";
  return read_plaintext(d, o);
}
__name(read_utf16, "read_utf16");
function bstrify(data) {
  return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
}
__name(bstrify, "bstrify");
function read_prn(data, d, o, str) {
  if (str) {
    o.type = "string";
    return PRN.to_workbook(data, o);
  }
  return PRN.to_workbook(d, o);
}
__name(read_prn, "read_prn");
function readSync(data, opts) {
  reset_cp();
  var o = opts || {};
  if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
  if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
  var d = data, n = [0, 0, 0, 0], str = false;
  if (o.cellStyles) {
    o.cellNF = true;
    o.sheetStubs = true;
  }
  _ssfopts = {};
  if (o.dateNF) _ssfopts.dateNF = o.dateNF;
  if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
  if (o.type == "file") {
    o.type = has_buf ? "buffer" : "binary";
    d = read_binary(data);
    if (typeof Uint8Array !== "undefined" && !has_buf) o.type = "array";
  }
  if (o.type == "string") {
    str = true;
    o.type = "binary";
    o.codepage = 65001;
    d = bstrify(data);
  }
  if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
    var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
    vu.foo = "bar";
    if (!vu.foo) {
      o = dup(o);
      o.type = "array";
      return readSync(ab2a(d), o);
    }
  }
  switch ((n = firstbyte(d, o))[0]) {
    case 208:
      if (n[1] === 207 && n[2] === 17 && n[3] === 224 && n[4] === 161 && n[5] === 177 && n[6] === 26 && n[7] === 225) return read_cfb(CFB.read(d, o), o);
      break;
    case 9:
      if (n[1] <= 8) return parse_xlscfb(d, o);
      break;
    case 60:
      return parse_xlml(d, o);
    case 73:
      if (n[1] === 73 && n[2] === 42 && n[3] === 0) throw new Error("TIFF Image File is not a spreadsheet");
      if (n[1] === 68) return read_wb_ID(d, o);
      break;
    case 84:
      if (n[1] === 65 && n[2] === 66 && n[3] === 76) return DIF.to_workbook(d, o);
      break;
    case 80:
      return n[1] === 75 && n[2] < 9 && n[3] < 9 ? read_zip(d, o) : read_prn(data, d, o, str);
    case 239:
      return n[3] === 60 ? parse_xlml(d, o) : read_prn(data, d, o, str);
    case 255:
      if (n[1] === 254) {
        return read_utf16(d, o);
      } else if (n[1] === 0 && n[2] === 2 && n[3] === 0) return WK_.to_workbook(d, o);
      break;
    case 0:
      if (n[1] === 0) {
        if (n[2] >= 2 && n[3] === 0) return WK_.to_workbook(d, o);
        if (n[2] === 0 && (n[3] === 8 || n[3] === 9)) return WK_.to_workbook(d, o);
      }
      break;
    case 3:
    case 131:
    case 139:
    case 140:
      return DBF.to_workbook(d, o);
    case 123:
      if (n[1] === 92 && n[2] === 114 && n[3] === 116) return RTF.to_workbook(d, o);
      break;
    case 10:
    case 13:
    case 32:
      return read_plaintext_raw(d, o);
    case 137:
      if (n[1] === 80 && n[2] === 78 && n[3] === 71) throw new Error("PNG Image File is not a spreadsheet");
      break;
  }
  if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
  return read_prn(data, d, o, str);
}
__name(readSync, "readSync");
function make_json_row(sheet, r, R, cols, header, hdr, dense, o) {
  var rr = encode_row(R);
  var defval = o.defval, raw2 = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
  var isempty = true;
  var row = header === 1 ? [] : {};
  if (header !== 1) {
    if (Object.defineProperty) try {
      Object.defineProperty(row, "__rowNum__", { value: R, enumerable: false });
    } catch (e) {
      row.__rowNum__ = R;
    }
    else row.__rowNum__ = R;
  }
  if (!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {
    var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    if (val === void 0 || val.t === void 0) {
      if (defval === void 0) continue;
      if (hdr[C] != null) {
        row[hdr[C]] = defval;
      }
      continue;
    }
    var v = val.v;
    switch (val.t) {
      case "z":
        if (v == null) break;
        continue;
      case "e":
        v = v == 0 ? null : void 0;
        break;
      case "s":
      case "d":
      case "b":
      case "n":
        break;
      default:
        throw new Error("unrecognized type " + val.t);
    }
    if (hdr[C] != null) {
      if (v == null) {
        if (val.t == "e" && v === null) row[hdr[C]] = null;
        else if (defval !== void 0) row[hdr[C]] = defval;
        else if (raw2 && v === null) row[hdr[C]] = null;
        else continue;
      } else {
        row[hdr[C]] = raw2 && (val.t !== "n" || val.t === "n" && o.rawNumbers !== false) ? v : format_cell(val, v, o);
      }
      if (v != null) isempty = false;
    }
  }
  return { row, isempty };
}
__name(make_json_row, "make_json_row");
function sheet_to_json(sheet, opts) {
  if (sheet == null || sheet["!ref"] == null) return [];
  var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
  var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
  var o = opts || {};
  var range2 = o.range != null ? o.range : sheet["!ref"];
  if (o.header === 1) header = 1;
  else if (o.header === "A") header = 2;
  else if (Array.isArray(o.header)) header = 3;
  else if (o.header == null) header = 0;
  switch (typeof range2) {
    case "string":
      r = safe_decode_range(range2);
      break;
    case "number":
      r = safe_decode_range(sheet["!ref"]);
      r.s.r = range2;
      break;
    default:
      r = range2;
  }
  if (header > 0) offset = 0;
  var rr = encode_row(r.s.r);
  var cols = [];
  var out = [];
  var outi = 0, counter = 0;
  var dense = Array.isArray(sheet);
  var R = r.s.r, C = 0;
  var header_cnt = {};
  if (dense && !sheet[R]) sheet[R] = [];
  var colinfo = o.skipHidden && sheet["!cols"] || [];
  var rowinfo = o.skipHidden && sheet["!rows"] || [];
  for (C = r.s.c; C <= r.e.c; ++C) {
    if ((colinfo[C] || {}).hidden) continue;
    cols[C] = encode_col(C);
    val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    switch (header) {
      case 1:
        hdr[C] = C - r.s.c;
        break;
      case 2:
        hdr[C] = cols[C];
        break;
      case 3:
        hdr[C] = o.header[C - r.s.c];
        break;
      default:
        if (val == null) val = { w: "__EMPTY", t: "s" };
        vv = v = format_cell(val, null, o);
        counter = header_cnt[v] || 0;
        if (!counter) header_cnt[v] = 1;
        else {
          do {
            vv = v + "_" + counter++;
          } while (header_cnt[vv]);
          header_cnt[v] = counter;
          header_cnt[vv] = 1;
        }
        hdr[C] = vv;
    }
  }
  for (R = r.s.r + offset; R <= r.e.r; ++R) {
    if ((rowinfo[R] || {}).hidden) continue;
    var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
    if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
  }
  out.length = outi;
  return out;
}
__name(sheet_to_json, "sheet_to_json");
var qreg = /"/g;
function make_csv_row(sheet, r, R, cols, fs3, rs, FS, o) {
  var isempty = true;
  var row = [], txt = "", rr = encode_row(R);
  for (var C = r.s.c; C <= r.e.c; ++C) {
    if (!cols[C]) continue;
    var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
    if (val == null) txt = "";
    else if (val.v != null) {
      isempty = false;
      txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
      for (var i = 0, cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs3 || cc === rs || cc === 34 || o.forceQuotes) {
        txt = '"' + txt.replace(qreg, '""') + '"';
        break;
      }
      if (txt == "ID") txt = '"ID"';
    } else if (val.f != null && !val.F) {
      isempty = false;
      txt = "=" + val.f;
      if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
    } else txt = "";
    row.push(txt);
  }
  if (o.blankrows === false && isempty) return null;
  return row.join(FS);
}
__name(make_csv_row, "make_csv_row");
function sheet_to_csv(sheet, opts) {
  var out = [];
  var o = opts == null ? {} : opts;
  if (sheet == null || sheet["!ref"] == null) return "";
  var r = safe_decode_range(sheet["!ref"]);
  var FS = o.FS !== void 0 ? o.FS : ",", fs3 = FS.charCodeAt(0);
  var RS = o.RS !== void 0 ? o.RS : "\n", rs = RS.charCodeAt(0);
  var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
  var row = "", cols = [];
  o.dense = Array.isArray(sheet);
  var colinfo = o.skipHidden && sheet["!cols"] || [];
  var rowinfo = o.skipHidden && sheet["!rows"] || [];
  for (var C = r.s.c; C <= r.e.c; ++C) if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
  var w = 0;
  for (var R = r.s.r; R <= r.e.r; ++R) {
    if ((rowinfo[R] || {}).hidden) continue;
    row = make_csv_row(sheet, r, R, cols, fs3, rs, FS, o);
    if (row == null) {
      continue;
    }
    if (o.strip) row = row.replace(endregex, "");
    if (row || o.blankrows !== false) out.push((w++ ? RS : "") + row);
  }
  delete o.dense;
  return out.join("");
}
__name(sheet_to_csv, "sheet_to_csv");
function sheet_to_txt(sheet, opts) {
  if (!opts) opts = {};
  opts.FS = "	";
  opts.RS = "\n";
  var s = sheet_to_csv(sheet, opts);
  if (typeof $cptable == "undefined" || opts.type == "string") return s;
  var o = $cptable.utils.encode(1200, s, "str");
  return String.fromCharCode(255) + String.fromCharCode(254) + o;
}
__name(sheet_to_txt, "sheet_to_txt");
function sheet_to_formulae(sheet) {
  var y = "", x, val = "";
  if (sheet == null || sheet["!ref"] == null) return [];
  var r = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C;
  var cmds = [];
  var dense = Array.isArray(sheet);
  for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
  for (var R = r.s.r; R <= r.e.r; ++R) {
    rr = encode_row(R);
    for (C = r.s.c; C <= r.e.c; ++C) {
      y = cols[C] + rr;
      x = dense ? (sheet[R] || [])[C] : sheet[y];
      val = "";
      if (x === void 0) continue;
      else if (x.F != null) {
        y = x.F;
        if (!x.f) continue;
        val = x.f;
        if (y.indexOf(":") == -1) y = y + ":" + y;
      }
      if (x.f != null) val = x.f;
      else if (x.t == "z") continue;
      else if (x.t == "n" && x.v != null) val = "" + x.v;
      else if (x.t == "b") val = x.v ? "TRUE" : "FALSE";
      else if (x.w !== void 0) val = "'" + x.w;
      else if (x.v === void 0) continue;
      else if (x.t == "s") val = "'" + x.v;
      else val = "" + x.v;
      cmds[cmds.length] = y + "=" + val;
    }
  }
  return cmds;
}
__name(sheet_to_formulae, "sheet_to_formulae");
function sheet_add_json(_ws, js, opts) {
  var o = opts || {};
  var offset = +!o.skipHeader;
  var ws = _ws || {};
  var _R = 0, _C = 0;
  if (ws && o.origin != null) {
    if (typeof o.origin == "number") _R = o.origin;
    else {
      var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
      _R = _origin.r;
      _C = _origin.c;
    }
  }
  var cell;
  var range2 = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
  if (ws["!ref"]) {
    var _range = safe_decode_range(ws["!ref"]);
    range2.e.c = Math.max(range2.e.c, _range.e.c);
    range2.e.r = Math.max(range2.e.r, _range.e.r);
    if (_R == -1) {
      _R = _range.e.r + 1;
      range2.e.r = _R + js.length - 1 + offset;
    }
  } else {
    if (_R == -1) {
      _R = 0;
      range2.e.r = js.length - 1 + offset;
    }
  }
  var hdr = o.header || [], C = 0;
  js.forEach(function(JS, R) {
    keys(JS).forEach(function(k) {
      if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k;
      var v = JS[k];
      var t = "z";
      var z = "";
      var ref = encode_cell({ c: _C + C, r: _R + R + offset });
      cell = ws_get_cell_stub(ws, ref);
      if (v && typeof v === "object" && !(v instanceof Date)) {
        ws[ref] = v;
      } else {
        if (typeof v == "number") t = "n";
        else if (typeof v == "boolean") t = "b";
        else if (typeof v == "string") t = "s";
        else if (v instanceof Date) {
          t = "d";
          if (!o.cellDates) {
            t = "n";
            v = datenum(v);
          }
          z = o.dateNF || table_fmt[14];
        } else if (v === null && o.nullError) {
          t = "e";
          v = 0;
        }
        if (!cell) ws[ref] = cell = { t, v };
        else {
          cell.t = t;
          cell.v = v;
          delete cell.w;
          delete cell.R;
          if (z) cell.z = z;
        }
        if (z) cell.z = z;
      }
    });
  });
  range2.e.c = Math.max(range2.e.c, _C + hdr.length - 1);
  var __R = encode_row(_R);
  if (offset) for (C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = { t: "s", v: hdr[C] };
  ws["!ref"] = encode_range(range2);
  return ws;
}
__name(sheet_add_json, "sheet_add_json");
function json_to_sheet(js, opts) {
  return sheet_add_json(null, js, opts);
}
__name(json_to_sheet, "json_to_sheet");
function ws_get_cell_stub(ws, R, C) {
  if (typeof R == "string") {
    if (Array.isArray(ws)) {
      var RC = decode_cell(R);
      if (!ws[RC.r]) ws[RC.r] = [];
      return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = { t: "z" });
    }
    return ws[R] || (ws[R] = { t: "z" });
  }
  if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
  return ws_get_cell_stub(ws, encode_cell({ r: R, c: C || 0 }));
}
__name(ws_get_cell_stub, "ws_get_cell_stub");
function wb_sheet_idx(wb, sh) {
  if (typeof sh == "number") {
    if (sh >= 0 && wb.SheetNames.length > sh) return sh;
    throw new Error("Cannot find sheet # " + sh);
  } else if (typeof sh == "string") {
    var idx = wb.SheetNames.indexOf(sh);
    if (idx > -1) return idx;
    throw new Error("Cannot find sheet name |" + sh + "|");
  } else throw new Error("Cannot find sheet |" + sh + "|");
}
__name(wb_sheet_idx, "wb_sheet_idx");
function book_new() {
  return { SheetNames: [], Sheets: {} };
}
__name(book_new, "book_new");
function book_append_sheet(wb, ws, name2, roll) {
  var i = 1;
  if (!name2) {
    for (; i <= 65535; ++i, name2 = void 0) if (wb.SheetNames.indexOf(name2 = "Sheet" + i) == -1) break;
  }
  if (!name2 || wb.SheetNames.length >= 65535) throw new Error("Too many worksheets");
  if (roll && wb.SheetNames.indexOf(name2) >= 0) {
    var m = name2.match(/(^.*?)(\d+)$/);
    i = m && +m[2] || 0;
    var root = m && m[1] || name2;
    for (++i; i <= 65535; ++i) if (wb.SheetNames.indexOf(name2 = root + i) == -1) break;
  }
  check_ws_name(name2);
  if (wb.SheetNames.indexOf(name2) >= 0) throw new Error("Worksheet with name |" + name2 + "| already exists!");
  wb.SheetNames.push(name2);
  wb.Sheets[name2] = ws;
  return name2;
}
__name(book_append_sheet, "book_append_sheet");
function book_set_sheet_visibility(wb, sh, vis) {
  if (!wb.Workbook) wb.Workbook = {};
  if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
  var idx = wb_sheet_idx(wb, sh);
  if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
  switch (vis) {
    case 0:
    case 1:
    case 2:
      break;
    default:
      throw new Error("Bad sheet visibility setting " + vis);
  }
  wb.Workbook.Sheets[idx].Hidden = vis;
}
__name(book_set_sheet_visibility, "book_set_sheet_visibility");
function cell_set_number_format(cell, fmt) {
  cell.z = fmt;
  return cell;
}
__name(cell_set_number_format, "cell_set_number_format");
function cell_set_hyperlink(cell, target, tooltip) {
  if (!target) {
    delete cell.l;
  } else {
    cell.l = { Target: target };
    if (tooltip) cell.l.Tooltip = tooltip;
  }
  return cell;
}
__name(cell_set_hyperlink, "cell_set_hyperlink");
function cell_set_internal_link(cell, range2, tooltip) {
  return cell_set_hyperlink(cell, "#" + range2, tooltip);
}
__name(cell_set_internal_link, "cell_set_internal_link");
function cell_add_comment(cell, text2, author) {
  if (!cell.c) cell.c = [];
  cell.c.push({ t: text2, a: author || "SheetJS" });
}
__name(cell_add_comment, "cell_add_comment");
function sheet_set_array_formula(ws, range2, formula, dynamic) {
  var rng = typeof range2 != "string" ? range2 : safe_decode_range(range2);
  var rngstr = typeof range2 == "string" ? range2 : encode_range(range2);
  for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) {
    var cell = ws_get_cell_stub(ws, R, C);
    cell.t = "n";
    cell.F = rngstr;
    delete cell.v;
    if (R == rng.s.r && C == rng.s.c) {
      cell.f = formula;
      if (dynamic) cell.D = true;
    }
  }
  return ws;
}
__name(sheet_set_array_formula, "sheet_set_array_formula");
var utils = {
  encode_col,
  encode_row,
  encode_cell,
  encode_range,
  decode_col,
  decode_row,
  split_cell,
  decode_cell,
  decode_range,
  format_cell,
  sheet_add_aoa,
  sheet_add_json,
  sheet_add_dom,
  aoa_to_sheet,
  json_to_sheet,
  table_to_sheet: parse_dom_table,
  table_to_book,
  sheet_to_csv,
  sheet_to_txt,
  sheet_to_json,
  sheet_to_html,
  sheet_to_formulae,
  sheet_to_row_object_array: sheet_to_json,
  sheet_get_cell: ws_get_cell_stub,
  book_new,
  book_append_sheet,
  book_set_sheet_visibility,
  cell_set_number_format,
  cell_set_hyperlink,
  cell_set_internal_link,
  cell_add_comment,
  sheet_set_array_formula,
  consts: {
    SHEET_VISIBLE: 0,
    SHEET_HIDDEN: 1,
    SHEET_VERY_HIDDEN: 2
  }
};
var version2 = XLSX.version;

// src/lib/parsers/file-parser.ts
var FileParser = class {
  static {
    __name(this, "FileParser");
  }
  static async parseCSV(file) {
    try {
      const text2 = await file.text();
      return new Promise((resolve) => {
        import_papaparse.default.parse(text2, {
          header: true,
          skipEmptyLines: true,
          complete: /* @__PURE__ */ __name((results) => {
            try {
              const transactions2 = this.normalizeTransactions(results.data);
              resolve({
                success: true,
                transactions: transactions2,
                metadata: {
                  file_type: "csv",
                  total_rows: results.data.length,
                  parsed_rows: transactions2.length,
                  errors: results.errors.map((e) => e.message)
                }
              });
            } catch (error) {
              resolve({
                success: false,
                transactions: [],
                metadata: {
                  file_type: "csv",
                  total_rows: results.data.length,
                  parsed_rows: 0,
                  errors: [error instanceof Error ? error.message : "Unknown error"]
                }
              });
            }
          }, "complete"),
          error: /* @__PURE__ */ __name((error) => {
            resolve({
              success: false,
              transactions: [],
              metadata: {
                file_type: "csv",
                total_rows: 0,
                parsed_rows: 0,
                errors: [error.message]
              }
            });
          }, "error")
        });
      });
    } catch (error) {
      return {
        success: false,
        transactions: [],
        metadata: {
          file_type: "csv",
          total_rows: 0,
          parsed_rows: 0,
          errors: [error instanceof Error ? error.message : "Unknown error"]
        }
      };
    }
  }
  static async parseExcel(file) {
    try {
      const buffer = await file.arrayBuffer();
      const workbook = readSync(buffer, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = utils.sheet_to_json(worksheet, { header: 1 });
      if (jsonData.length < 2) {
        throw new Error("Excel file must have at least a header row and one data row");
      }
      const headers = jsonData[0];
      const dataRows = jsonData.slice(1);
      const objectData = dataRows.map((row) => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[header] = row[index];
        });
        return obj;
      });
      const transactions2 = this.normalizeTransactions(objectData);
      return {
        success: true,
        transactions: transactions2,
        metadata: {
          file_type: "excel",
          total_rows: dataRows.length,
          parsed_rows: transactions2.length,
          errors: []
        }
      };
    } catch (error) {
      return {
        success: false,
        transactions: [],
        metadata: {
          file_type: "excel",
          total_rows: 0,
          parsed_rows: 0,
          errors: [error instanceof Error ? error.message : "Unknown error"]
        }
      };
    }
  }
  static normalizeTransactions(rawData) {
    return rawData.filter((row) => row && Object.keys(row).length > 0).map((row) => {
      const date = this.findDateColumn(row);
      const description = this.findDescriptionColumn(row);
      const amount = this.findAmountColumn(row);
      if (!date || !description || amount === null) {
        throw new Error(`Missing required columns. Found: ${Object.keys(row).join(", ")}`);
      }
      return {
        date: this.formatDate(date),
        description: String(description).trim(),
        amount: this.parseAmount(amount),
        raw_data: row
      };
    });
  }
  static findDateColumn(row) {
    const dateKeys = ["date", "transaction_date", "posted_date", "effective_date", "time"];
    for (const key of dateKeys) {
      if (row[key]) return row[key];
    }
    for (const [key, value] of Object.entries(row)) {
      if (typeof value === "string" && this.isDateString(value)) {
        return value;
      }
    }
    return null;
  }
  static findDescriptionColumn(row) {
    const descKeys = ["description", "memo", "payee", "merchant", "transaction_description"];
    for (const key of descKeys) {
      if (row[key]) return row[key];
    }
    let longestText = "";
    for (const [key, value] of Object.entries(row)) {
      if (typeof value === "string" && value.length > longestText.length) {
        longestText = value;
      }
    }
    return longestText || null;
  }
  static findAmountColumn(row) {
    const amountKeys = ["amount", "debit", "credit", "transaction_amount"];
    for (const key of amountKeys) {
      if (row[key] !== null && row[key] !== void 0) {
        return this.parseAmount(row[key]);
      }
    }
    for (const [key, value] of Object.entries(row)) {
      if (typeof value === "number") {
        return value;
      }
      if (typeof value === "string" && this.isAmountString(value)) {
        return this.parseAmount(value);
      }
    }
    return null;
  }
  static isDateString(str) {
    const dateRegex = /^\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}$|^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/;
    return dateRegex.test(str) && !isNaN(Date.parse(str));
  }
  static isAmountString(str) {
    const amountRegex = /^[\$]?[\-]?\d+\.?\d*$/;
    return amountRegex.test(str.trim());
  }
  static formatDate(dateStr) {
    try {
      const date = new Date(dateStr);
      return date.toISOString().split("T")[0];
    } catch {
      return dateStr;
    }
  }
  static parseAmount(value) {
    if (typeof value === "number") return value;
    if (typeof value === "string") {
      const cleaned = value.replace(/[\$,]/g, "");
      const parsed = parseFloat(cleaned);
      return isNaN(parsed) ? 0 : parsed;
    }
    return 0;
  }
};

// src/worker.ts
var app = new Hono2();
app.use("*", cors());
app.use("*", logger());
app.get("/health", (c) => {
  return c.json({ status: "ok", timestamp: (/* @__PURE__ */ new Date()).toISOString() });
});
app.get("/api/debug", (c) => {
  return c.json({
    hasHuggingFaceKey: !!c.env.HUGGINGFACE_API_KEY,
    keyLength: c.env.HUGGINGFACE_API_KEY?.length || 0,
    keyPrefix: c.env.HUGGINGFACE_API_KEY?.substring(0, 10) || "none"
  });
});
app.get("/api/debug-transactions/:session_id", async (c) => {
  const sessionId = c.req.param("session_id");
  const db = new DatabaseService(c.env.DB);
  const transactions2 = await db.getTransactionsBySessionId(sessionId);
  return c.json({
    sessionId,
    transactionCount: transactions2.length,
    transactions: transactions2.slice(0, 3),
    // First 3 transactions
    sampleTransaction: transactions2[0] || null
  });
});
app.get("/api/test-hf", async (c) => {
  try {
    if (!c.env.HUGGINGFACE_API_KEY) {
      return c.json({ success: false, error: "No Hugging Face API key configured" });
    }
    const testText = "AMAZON.COM AMZN.COM/BILL WA -45.99";
    const response = await fetch("https://api-inference.huggingface.co/models/soleimanian/financial-roberta-large-sentiment", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${c.env.HUGGINGFACE_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        inputs: testText
      })
    });
    if (response.ok) {
      const data = await response.json();
      return c.json({
        success: true,
        testText,
        response: data,
        status: response.status
      });
    } else {
      return c.json({
        success: false,
        error: `API call failed: ${response.status} ${response.statusText}`,
        status: response.status
      });
    }
  } catch (error) {
    return c.json({
      success: false,
      error: error instanceof Error ? error.message : "Unknown error"
    });
  }
});
app.get("/api/logs", async (c) => {
  try {
    const sessionId = c.req.query("session_id");
    if (!sessionId) {
      return c.json({ success: false, error: "Session ID required" }, 400);
    }
    const mockLogs = [
      {
        id: Date.now().toString(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        level: "info",
        message: "Session started",
        source: "backend"
      },
      {
        id: (Date.now() + 1).toString(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        level: "info",
        message: "Hugging Face API key loaded",
        source: "huggingface",
        details: { hasKey: !!c.env.HUGGINGFACE_API_KEY }
      }
    ];
    return c.json({ success: true, logs: mockLogs });
  } catch (error) {
    return c.json({ success: false, error: "Failed to fetch logs" }, 500);
  }
});
app.post("/api/upload", async (c) => {
  try {
    const formData = await c.req.formData();
    const file = formData.get("file");
    if (!file) {
      return c.json({ success: false, error: "No file provided" }, 400);
    }
    const fileName = file.name.toLowerCase();
    const fileType = file.type.toLowerCase();
    const isCSV = fileName.endsWith(".csv") || fileType === "text/csv" || fileType === "application/csv" || fileType === "text/plain";
    const isExcel = fileName.endsWith(".xlsx") || fileName.endsWith(".xls") || fileType === "application/vnd.ms-excel" || fileType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    if (!isCSV && !isExcel) {
      return c.json({
        success: false,
        error: "Invalid file type. Please upload CSV or Excel files.",
        details: { fileName, fileType, isCSV, isExcel }
      }, 400);
    }
    let parseResult;
    if (isCSV) {
      parseResult = await FileParser.parseCSV(file);
    } else {
      parseResult = await FileParser.parseExcel(file);
    }
    if (!parseResult.success) {
      return c.json({ success: false, error: "Failed to parse file", details: parseResult.metadata.errors }, 400);
    }
    const db = new DatabaseService(c.env.DB);
    const demoEmail = "demo@unclesense.com";
    let user = await db.getUserByEmail(demoEmail);
    if (!user) {
      const userId2 = "demo-user-" + Date.now();
      const newUser = await db.createUser({ id: userId2, email: demoEmail });
      user = newUser[0];
    }
    const userId = user.id;
    const uploadId = "upload-" + Date.now();
    await db.createUpload({
      id: uploadId,
      user_id: userId,
      filename: file.name,
      file_type: isCSV ? "csv" : "excel",
      status: "processing"
    });
    const transactions2 = parseResult.transactions.map((t, index) => ({
      id: `txn-${uploadId}-${index}`,
      upload_id: uploadId,
      date: t.date,
      description: t.description,
      amount: t.amount,
      category: "Uncategorized"
      // Will be updated by Data Extraction Agent
    }));
    await db.createTransactions(transactions2);
    await db.updateUploadStatus(uploadId, "analyzed", transactions2.length);
    return c.json({
      success: true,
      data: {
        upload_id: uploadId,
        session_id: uploadId,
        // Use upload_id as session_id for now
        transaction_count: transactions2.length,
        status: "analyzed"
      }
    });
  } catch (error) {
    console.error("Upload error:", error);
    return c.json({
      success: false,
      error: "Upload failed",
      details: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : void 0
    }, 500);
  }
});
app.post("/api/analyze", async (c) => {
  try {
    console.log("=== ANALYSIS ENDPOINT CALLED ===");
    const { session_id } = await c.req.json();
    console.log("Session ID:", session_id);
    if (!session_id) {
      return c.json({ success: false, error: "Session ID required" }, 400);
    }
    const db = new DatabaseService(c.env.DB);
    const transactions2 = await db.getTransactionsBySessionId(session_id);
    console.log("Transactions found:", transactions2.length);
    if (transactions2.length === 0) {
      return c.json({ success: false, error: "No transactions found for this upload" }, 404);
    }
    console.log("Starting agent orchestration...");
    console.log("Transaction data:", JSON.stringify(transactions2.slice(0, 2), null, 2));
    let analysisResult;
    try {
      const orchestrator = new AgentOrchestrator(c.env.HUGGINGFACE_API_KEY);
      analysisResult = await orchestrator.executeAnalysis(session_id, transactions2);
      console.log("Agent orchestration completed", { hasResponses: !!analysisResult.agent_responses, responseCount: analysisResult.agent_responses?.length });
      console.log("Analysis result:", JSON.stringify(analysisResult, null, 2));
    } catch (orchError) {
      console.error("Orchestrator threw error:", orchError);
      console.error("Orchestrator error stack:", orchError.stack);
      throw orchError;
    }
    console.log("Storing insights in database...");
    if (analysisResult.agent_responses) {
      for (const agentResponse of analysisResult.agent_responses) {
        if (agentResponse.insights && Array.isArray(agentResponse.insights)) {
          for (const insight of agentResponse.insights) {
            try {
              await db.createInsight({
                id: `insight-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                session_id,
                agent_type: agentResponse.agent_type,
                insight_data: insight,
                sentiment: insight.sentiment || "neutral"
              });
            } catch (insightError) {
              console.error("Failed to store insight:", insightError);
            }
          }
        }
      }
    }
    console.log("Insights stored successfully");
    return c.json({
      success: true,
      data: {
        session_id,
        analysis_complete: analysisResult.current_step === "complete",
        uncle_response: analysisResult.uncle_response,
        insights_count: analysisResult.agent_responses?.length || 0
      }
    });
  } catch (error) {
    console.error("Analysis error:", error);
    return c.json({ success: false, error: "Analysis failed" }, 500);
  }
});
app.get("/api/insights/:sessionId", async (c) => {
  try {
    const sessionId = c.req.param("sessionId");
    const db = new DatabaseService(c.env.DB);
    const insights2 = await db.getInsightsBySessionId(sessionId);
    const transactions2 = await db.getTransactionsBySessionId(sessionId);
    return c.json({
      success: true,
      data: {
        insights: insights2,
        transactions: transactions2,
        session_id: sessionId
      }
    });
  } catch (error) {
    console.error("Get insights error:", error);
    return c.json({ success: false, error: "Failed to fetch insights" }, 500);
  }
});
app.post("/api/chat", async (c) => {
  try {
    const { session_id, message } = await c.req.json();
    if (!session_id || !message) {
      return c.json({ success: false, error: "Session ID and message required" }, 400);
    }
    const db = new DatabaseService(c.env.DB);
    await db.createChatMessage({
      id: `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      session_id,
      role: "user",
      content: message
    });
    const insights2 = await db.getInsightsBySessionId(session_id);
    const orchestrator = new AgentOrchestrator(c.env.HUGGINGFACE_API_KEY);
    const uncleResponse = await orchestrator.executeChatResponse(session_id, message, insights2);
    await db.createChatMessage({
      id: `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      session_id,
      role: "assistant",
      content: uncleResponse
    });
    return c.json({
      success: true,
      data: {
        response: uncleResponse,
        session_id
      }
    });
  } catch (error) {
    console.error("Chat error:", error);
    return c.json({ success: false, error: "Chat failed" }, 500);
  }
});
app.get("/api/chat/:sessionId", async (c) => {
  try {
    const sessionId = c.req.param("sessionId");
    const db = new DatabaseService(c.env.DB);
    const messages = await db.getChatMessagesBySessionId(sessionId);
    return c.json({
      success: true,
      data: {
        messages,
        session_id: sessionId
      }
    });
  } catch (error) {
    console.error("Get chat history error:", error);
    return c.json({ success: false, error: "Failed to fetch chat history" }, 500);
  }
});
var worker_default = app;

// node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
init_checked_fetch();
init_modules_watch_stub();
var drainBody = /* @__PURE__ */ __name(async (request, env3, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env3);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;

// node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
init_checked_fetch();
init_modules_watch_stub();
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
__name(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name(async (request, env3, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env3);
  } catch (e) {
    const error = reduceError(e);
    return Response.json(error, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;

// .wrangler/tmp/bundle-qxbDQe/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = worker_default;

// node_modules/wrangler/templates/middleware/common.ts
init_checked_fetch();
init_modules_watch_stub();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env3, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env3, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env3, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env3, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");

// .wrangler/tmp/bundle-qxbDQe/middleware-loader.entry.ts
var __Facade_ScheduledController__ = class ___Facade_ScheduledController__ {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  static {
    __name(this, "__Facade_ScheduledController__");
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof ___Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env3, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env3, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env3, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env3, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env3, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = /* @__PURE__ */ __name((request, env3, ctx) => {
      this.env = env3;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    }, "#fetchDispatcher");
    #dispatcher = /* @__PURE__ */ __name((type, init) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    }, "#dispatcher");
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default as default
};
/*! Bundled license information:

onnxruntime-common/dist/ort-common.node.js:
  (*!
   * ONNX Runtime Common v1.14.0
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

onnxruntime-web/dist/ort-web.min.js:
  (*!
  * ONNX Runtime Web v1.14.0
  * Copyright (c) Microsoft Corporation. All rights reserved.
  * Licensed under the MIT License.
  *)

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.5.3
  https://github.com/mholt/PapaParse
  License: MIT
  *)

xlsx/xlsx.mjs:
  (*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com *)

xlsx/xlsx.mjs:
  (*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com *)
*/
//# sourceMappingURL=worker.js.map
